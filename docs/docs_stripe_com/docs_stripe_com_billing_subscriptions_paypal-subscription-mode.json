{
  "content": "# Set up a subscription with PayPal\n\n## Learn how to create and charge for a subscription with PayPal and Checkout.\n\nUse this guide to set up a\n[subscription](https://docs.stripe.com/billing/subscriptions/creating) using\n[PayPal](https://docs.stripe.com/payments/paypal) and\n[Checkout](https://docs.stripe.com/payments/checkout).\n\nA [Checkout Session](https://docs.stripe.com/api/checkout/sessions) represents\nthe details of a customer’s intent to purchase. Create a Checkout Session when a\ncustomer wants to start a subscription. After redirecting a customer to a\nCheckout Session, Stripe presents a payment form where they can complete their\npurchase. After they complete a purchase, Stripe redirects them back to your\nsite.\n\n#### Caution\n\nTo start accepting PayPal subscriptions on Stripe, you need to [enable PayPal\nrecurring\npayments](https://docs.stripe.com/payments/paypal/set-up-future-payments?platform=web#enable-recurring-payments-support-from-stripe-dashboard)\nfrom the Dashboard.\n\n[Set up\nStripeServer-side](https://docs.stripe.com/billing/subscriptions/paypal-subscription-mode#web-setup)\nFirst, you need a Stripe account. [Register\nnow](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n```\n# Available as a gem\nsudo gem install stripe\n```\n\n```\n# If you use bundler, you can add this line to your Gemfile\ngem 'stripe'\n```\n\n[Create recurring products and\nprices](https://docs.stripe.com/billing/subscriptions/paypal-subscription-mode#create-products-and-prices)\n#### Caution\n\nThe Prices API unifies how one-time purchases and subscriptions are modeled on\nStripe. Existing integrations that don’t use the Prices API are still\n[supported](https://support.stripe.com/questions/prices-api-and-existing-checkout-integrations).\nHowever, some Checkout features only support Prices. See the [migration\nguide](https://docs.stripe.com/payments/checkout/migrating-prices) to upgrade to\nthe Prices API.\n\nTo use Checkout, you first need to create a\n[Product](https://docs.stripe.com/api/products) and a\n[Price](https://docs.stripe.com/api/prices). Different physical goods or levels\nof service must be represented by products. Each product’s pricing is\nrepresented by one or more prices.\n\nFor example, you can create a software *product* that has four *prices*: 10\nUSD/month, 100 USD/year, 9 eur/month, and 90 eur/year. This allows you to change\nand add prices without needing to change the details of your underlying\nproducts. You can either create a product and price [through the\nAPI](https://docs.stripe.com/api/prices) or through [the Stripe\nDashboard](https://dashboard.stripe.com/products).\n\nIf your price is determined at checkout (for example, the customer sets a\ndonation amount) or you prefer not to create prices upfront, you can create\n[prices\ninline](https://docs.stripe.com/billing/subscriptions/paypal-subscription-mode#creating-prices-inline)\nat Checkout Session creation.\n\nDashboardAPI\nBefore you start configuring products, make sure you’re in a sandbox. Next,\ndefine the goods and services you plan to sell. To create a new product and\nprice:\n\n- Navigate to the [Products](https://dashboard.stripe.com/products) section in\nthe Dashboard\n- Click **Add product**\n- Select “Recurring” when setting the price\n- Configure the pricing plan\n\nYou can define multiple pricing plans with different parameters for each\nrecurring product. Each price has a generated ID that you can use as a reference\nduring the checkout process.\n\n#### Note\n\nProducts created in a sandbox can be copied to live mode so that you don’t need\nto re-create them. In the Product detail view in the Dashboard, click ** to\nlive mode** on the upper right corner. You can only do this once for each\nproduct created in a sandbox. Subsequent updates to the test product are not\nreflected for the live product.\n\n[Create a Checkout\nSessionClient-sideServer-side](https://docs.stripe.com/billing/subscriptions/paypal-subscription-mode#create-checkout-session)\nAdd a checkout button to your website that calls a server-side endpoint to\ncreate a Checkout Session.\n\n```\n<html>\n <head>\n <title>Checkout</title>\n </head>\n <body>\n <form action=\"/create-checkout-session\" method=\"POST\">\n <button type=\"submit\">Checkout</button>\n </form>\n </body>\n</html>\n```\n\nCreate a Checkout Session with the ID of an existing\n[Price](https://docs.stripe.com/api/prices). Make sure that mode is set to\n`subscription` and you pass at least one recurring price. You can add one-time\nprices in addition to recurring prices. After creating the Checkout Session,\nredirect your customer to the\n[URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url)\nreturned in the response.\n\n```\ncurl https://api.stripe.com/v1/checkout/sessions \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"payment_method_types[]\"=\"paypal\" \\\n -d \"line_items[][price]\"={{PRICE_ID}} \\\n -d \"line_items[][quantity]\"=1 \\\n -d \"mode\"=\"subscription\" \\\n-d \"success_url\"=\"https://example.com/success?session_id={CHECKOUT_SESSION_ID}\"\n\\\n -d \"cancel_url\"=\"https://example.com/cancel\" \\\n```\n\nWhen your customer successfully completes their payment, they’re redirected to\nthe `success_url`, a page on your website that informs the customer that their\npayment was successful. Make the Session ID available on your success page by\nincluding the `{CHECKOUT_SESSION_ID}` template variable in the `success_url` as\nin the above example.\n\nWhen your customer clicks on your logo in a Checkout Session without completing\na payment, Checkout redirects them back to your website by navigating to the\n`cancel_url`. Typically, this is the page on your website that the customer\nviewed prior to redirecting to Checkout.\n\nCheckout Sessions expire 24 hours after creation by default.\n\n#### Caution\n\nDon’t rely on the redirect to the `success_url` alone for detecting payment\ninitiation, as:\n\n- Malicious users could directly access the `success_url` without paying and\ngain access to your goods or services.\n- Customers may not always reach the `success_url` after a successful\npayment—they might close their browser tab before the redirect occurs.\n[Confirm the payment is\nsuccessful](https://docs.stripe.com/billing/subscriptions/paypal-subscription-mode#payment-success)\n#### Note\n\nWhen a buyer successfully confirms a subscription on Stripe with PayPal, they\nreceive a receipt from Stripe as well as from PayPal.\n\nWhen your customer completes a payment, they’re redirected to the URL that you\nspecified as the `success_url`. This is typically a page on your website that\ninforms your customer that their payment was successful.\n\nUse the Dashboard, a custom [webhook](https://docs.stripe.com/webhooks), or a\nthird-party plugin to handle post-payment events like sending an order\nconfirmation email to your customer, logging the sale in a database, or starting\na shipping workflow.\n\nDashboardWebhooks\nSuccessful payments appear in the Dashboard’s [list of\npayments](https://dashboard.stripe.com/payments). When you click a payment, it\ntakes you to the payment detail page. The **Checkout summary** section contains\nbilling information and the list of items purchased, which you can use to\nmanually fulfill the order.\n\n![Checkout\nsummary](https://b.stripecdn.com/docs-statics-srv/assets/source.16d3029596357c80a8efdbbfe106108a.png)\n\n#### Note\n\nStripe can help you keep up with incoming payments by sending you email\nnotifications whenever a customer successfully completes one. Use the Dashboard\nto [configure email notifications](https://dashboard.stripe.com/settings/user).\n\nYou can use plugins like [Zapier](https://stripe.com/works-with/zapier) to\nautomate updating your purchase fulfillment systems with information from Stripe\npayments.\n\nSome examples of automation supported by plugins include:\n\n- Updating spreadsheets used for order tracking in response to successful\npayments\n- Updating inventory management systems in response to successful payments\n- Triggering notifications to internal customer service teams using email or\nchat applications\n[Test the\nintegration](https://docs.stripe.com/billing/subscriptions/paypal-subscription-mode#testing)\nTest your PayPal integration with your [test API\nkeys](https://docs.stripe.com/keys#test-live-modes) by viewing the redirect\npage. You can test the successful payment case by authenticating the payment on\nthe redirect page. The PaymentIntent will transition from `requires_action` to\n`succeeded`.\n\nTo test the case where the user fails to authenticate, use your test API keys\nand view the redirect page. On the redirect page, click **Fail test payment**.\nThe PaymentIntent will transition from `requires_action` to\n`requires_payment_method`.\n\n[OptionalAdding a one-time setup\nfeeServer-side](https://docs.stripe.com/billing/subscriptions/paypal-subscription-mode#adding-setup-fee)[OptionalCreate\nprices and products\ninlineServer-side](https://docs.stripe.com/billing/subscriptions/paypal-subscription-mode#creating-prices-inline)[OptionalExisting\ncustomersServer-side](https://docs.stripe.com/billing/subscriptions/paypal-subscription-mode#handling-existing-customers)[OptionalPrefill\ncustomer\ndataServer-side](https://docs.stripe.com/billing/subscriptions/paypal-subscription-mode#prefilling-customer-data)[OptionalHandling\ntrialsServer-side](https://docs.stripe.com/billing/subscriptions/paypal-subscription-mode#handling-checkout-trials)[OptionalTax\nratesServer-side](https://docs.stripe.com/billing/subscriptions/paypal-subscription-mode#tax-rates)[OptionalAdding\ncouponsServer-side](https://docs.stripe.com/billing/subscriptions/paypal-subscription-mode#coupons)\n## See also\n\n- [Customize your\nintegration](https://docs.stripe.com/payments/checkout/customization)\n- [Manage subscriptions with the customer\nportal](https://docs.stripe.com/billing/subscriptions/build-subscriptions?ui=stripe-hosted)\n\n## Links\n\n- [sample on\nGitHub](https://github.com/stripe-samples/checkout-single-subscription)\n- [demo](https://checkout.stripe.dev/checkout)\n- [subscription](https://docs.stripe.com/billing/subscriptions/creating)\n- [PayPal](https://docs.stripe.com/payments/paypal)\n- [Checkout](https://docs.stripe.com/payments/checkout)\n- [Checkout Session](https://docs.stripe.com/api/checkout/sessions)\n- [enable PayPal recurring\npayments](https://docs.stripe.com/payments/paypal/set-up-future-payments?platform=web#enable-recurring-payments-support-from-stripe-dashboard)\n- [Register now](https://dashboard.stripe.com/register)\n-\n[supported](https://support.stripe.com/questions/prices-api-and-existing-checkout-integrations)\n- [migration guide](https://docs.stripe.com/payments/checkout/migrating-prices)\n- [Product](https://docs.stripe.com/api/products)\n- [Price](https://docs.stripe.com/api/prices)\n- [the Stripe Dashboard](https://dashboard.stripe.com/products)\n- [Create a Checkout\nSession](https://docs.stripe.com/api/checkout/sessions/create)\n-\n[URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url)\n-\n[https://example.com/success?session_id={CHECKOUT_SESSION_ID}](https://example.com/success?session_id={CHECKOUT_SESSION_ID})\n- [https://example.com/cancel](https://example.com/cancel)\n- [webhook](https://docs.stripe.com/webhooks)\n- [list of payments](https://dashboard.stripe.com/payments)\n- [configure email notifications](https://dashboard.stripe.com/settings/user)\n- [Zapier](https://stripe.com/works-with/zapier)\n- [test API keys](https://docs.stripe.com/keys#test-live-modes)\n- [Customize your\nintegration](https://docs.stripe.com/payments/checkout/customization)\n- [Manage subscriptions with the customer\nportal](https://docs.stripe.com/billing/subscriptions/build-subscriptions?ui=stripe-hosted)",
  "metadata": {
    "title": "Set up a subscription with PayPal | Stripe Documentation",
    "description": "Learn how to create and charge for a subscription with PayPal and Checkout.",
    "sourceURL": "https://docs.stripe.com/billing/subscriptions/paypal-subscription-mode"
  }
}