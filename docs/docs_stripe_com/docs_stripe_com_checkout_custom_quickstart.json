{
  "content": "# Build a checkout page with embedded componentsPublic preview\n\n## Use Elements and the Checkout Sessions API to build a checkout page.\n\nBuild a checkout page on your website using [Stripe\nElements](https://docs.stripe.com/payments/elements) and the [Checkout\nSessions](https://docs.stripe.com/api/checkout/sessions) API, an integration\nthat manages tax, discounts, shipping rates, and more.\n\nThis demo only displays Google Pay or Apple Pay if you have an active card with\neither wallet.[Set up the\nserverServer-side](https://docs.stripe.com/checkout/custom/quickstart#set-up-server)\nBefore you begin, you need to [register](https://dashboard.stripe.com/register)\nfor a Stripe account.\n\nUse the official Stripe libraries to access the API from your application.\n\n```\nnpm install stripe@17.4.0-beta.2 --save\n```\n\nSet the SDK to use the `custom_checkout_beta=v1` beta version header.\n\n```\n// Set your secret key. Remember to switch to your live secret key in\nproduction.\n// See your keys here: https://dashboard.stripe.com/apikeys\nimport Stripe from 'stripe';\nconst stripe = new Stripe('sk_test_BQokikJOvBiI2HlWgH4olfQ2', {\n apiVersion: '2025-02-24.acacia; custom_checkout_beta=v1' as any,\n});\n```\n\n[Create a Checkout\nSessionServer-side](https://docs.stripe.com/checkout/custom/quickstart#create-checkout-session)\nAdd an endpoint on your server that creates a [Checkout\nSession](https://docs.stripe.com/api/checkout/sessions/create) and returns its\n[client\nsecret](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-client_secret)\nto your front end. A Checkout Session represents your customer’s session as they\npay for one-time purchases or subscriptions. Checkout Sessions expire 24 hours\nafter creation.\n\n```\nimport express, {Express} from 'express';\n\nconst app: Express = express();\n\napp.post('/create-checkout-session', async (req: Express.Request, res:\nExpress.Response) => {\n const session = await stripe.checkout.sessions.create({\n line_items: [\n {\n price_data: {\n currency: 'usd',\n product_data: {\n name: 'T-shirt',\n },\n unit_amount: 2000,\n },\n quantity: 1,\n },\n ],\n mode: 'payment',\n ui_mode: 'custom',\n // The URL of your payment completion page\n return_url: '{{RETURN_URL}}'\n });\n\n res.json({clientSecret: session.client_secret});\n});\n\napp.listen(3000, () => {\n console.log('Running on port 3000');\n});\n```\n\n[Set up the front\nendClient-side](https://docs.stripe.com/checkout/custom/quickstart#set-up-frontend)ReactHTML\n+ JS\nInstall [React Stripe.js](https://www.npmjs.com/package/@stripe/react-stripe-js)\nand the [Stripe.js loader](https://www.npmjs.com/package/@stripe/stripe-js) from\nthe npm public registry. You need at least version 3.0.0 for React Stripe.js and\nversion 5.2.0 for the Stripe.js loader.\n\n```\nnpm install --save @stripe/react-stripe-js@^3.0.0 @stripe/stripe-js@^5.2.0\n```\n\nInitialize a `stripe` instance on your front end with your publishable key,\npassing in the `custom_checkout_beta_5` beta.\n\n```\nimport {loadStripe} from '@stripe/stripe-js';\nconst stripe = loadStripe(\"pk_test_TYooMQauvdEDq54NiTphI7jx\", {\n betas: ['custom_checkout_beta_5'],\n});\n```\n\n[Initialize\nCheckoutClient-side](https://docs.stripe.com/checkout/custom/quickstart#initialize-checkout)ReactHTML\n+ JS\nRetrieve the `clientSecret` from your server and wrap your application with the\n[CheckoutProvider](https://docs.stripe.com/js/custom_checkout/react/checkout_provider)\ncomponent.\n\nUse the\n[useCheckout](https://docs.stripe.com/js/custom_checkout/react/use_checkout)\nhook in your components to get the `checkout` object, which contains data from\nthe Checkout Session as well as methods to update it. For now, render the line\nitems as text and log the `checkout` object to the console to see what’s\navailable.\n\n```\nimport React from 'react';\nimport {CheckoutProvider} from '@stripe/react-stripe-js';\nimport CheckoutForm from './CheckoutForm';\n\nconst App = () => {\n const [clientSecret, setClientSecret] = React.useState(null);\n React.useEffect(() => {\n fetch('/create-checkout-session', {method: 'POST'})\n .then((response) => response.json())\n .then((json) => setClientSecret(json.clientSecret))\n }, []);\n\n if (clientSecret) {\n return (\n <CheckoutProvider\n stripe={stripe}\n options={{clientSecret}}\n >\n <CheckoutForm />\n </CheckoutProvider>\n );\n } else {\n return null;\n }\n};\n\nexport default App;\n```\n\n```\nimport React from 'react';\nimport {useCheckout} from '@stripe/react-stripe-js';\n\nconst CheckoutForm = () => {\n const checkout = useCheckout();\n console.log(checkout);\n return (\n <pre>\n {JSON.stringify(checkout.lineItems, null, 2)}\n </pre>\n )\n};\n```\n\n[Collect customer\nemailClient-side](https://docs.stripe.com/checkout/custom/quickstart#collect-email)ReactHTML\n+ JS\nCreate a component to collect your customer’s email address. Call\n[updateEmail](https://docs.stripe.com/js/custom_checkout/react/update_email)\nwhen your customer finishes the input to validate and save the email address.\n\n- If you have a multi-step form, call `updateEmail` before moving to the next\nstep, such as clicking a **Save** button.\n- If you have a single-page form, call `updateEmail` before [submitting the\npayment](https://docs.stripe.com/checkout/custom/quickstart#submit-payment). You\ncan also call `updateEmail` to validate earlier, such as on input blur.\n\n```\nimport React from 'react';\nimport {useCheckout} from '@stripe/react-stripe-js';\n\nconst EmailInput = () => {\n const checkout = useCheckout();\n const [email, setEmail] = React.useState('');\n const [error, setError] = React.useState(null);\n\n const handleBlur = () => {\n checkout.updateEmail(email).then((result) => {\n if (result.error) {\n setError(result.error);\n }\n })\n };\n\n const handleChange = (e) => {\n setError(null);\n setEmail(e.target.value);\n };\n return (\n <div>\n <input\n type=\"text\"\n value={email}\n onChange={handleChange}\n onBlur={handleBlur}\n />\n {error && <div>{error.message}</div>}\n </div>\n );\n};\n\nexport default EmailInput;\n```\n\n[Collect payment\ndetailsClient-side](https://docs.stripe.com/checkout/custom/quickstart#collect-payment-details)\nCollect payment details on the client with the [Payment\nElement](https://docs.stripe.com/payments/payment-element). The Payment Element\nis a prebuilt UI component that simplifies collecting payment details for a\nvariety of payment methods.\n\nReactHTML + JS\nMount the [Payment Element](https://docs.stripe.com/payments/payment-element)\ncomponent within the\n[CheckoutProvider](https://docs.stripe.com/js/custom_checkout/react/checkout_provider).\n\n```\nimport React from 'react';\nimport {PaymentElement, useCheckout} from '@stripe/react-stripe-js';\n\nconst CheckoutForm = () => {\n const checkout = useCheckout();\n return (\n <form>\n <PaymentElement options={{layout: 'accordion'}}/>\n </form>\n )\n};\n\nexport default CheckoutForm;\n```\n\nSee the [Stripe.js\ndocs](https://docs.stripe.com/js/custom_checkout/create_element?type=payment#custom_checkout_create_element-options)\nto view what options are supported.\n\nYou can [customize the\nappearance](https://docs.stripe.com/payments/checkout/customization/appearance)\nof all Elements by passing\n[elementsOptions.appearance](https://docs.stripe.com/js/custom_checkout/react/checkout_provider#custom_checkout_react_checkout_provider-options-elementsOptions-appearance)\nto the\n[CheckoutProvider](https://docs.stripe.com/js/custom_checkout/react/checkout_provider).\n\n[Submit the\npaymentClient-side](https://docs.stripe.com/checkout/custom/quickstart#submit-payment)ReactHTML\n+ JS\nRender a “pay” button that calls\n[confirm](https://docs.stripe.com/js/custom_checkout/confirm) from\n[useCheckout](https://docs.stripe.com/js/custom_checkout/react/use_checkout) to\nsubmit the payment.\n\n```\nimport React from 'react';\nimport {useCheckout} from '@stripe/react-stripe-js';\n\nconst PayButton = () => {\n const {confirm} = useCheckout();\n const [loading, setLoading] = React.useState(false);\n const [error, setError] = React.useState(null);\n\n const handleClick = () => {\n setLoading(true);\n confirm().then((result) => {\n if (result.type === 'error') {\n setError(result.error)\n }\n setLoading(false);\n })\n };\n\n return (\n <div>\n <button disabled={loading} onClick={handleClick}>\n Pay\n </button>\n {error && <div>{error.message}</div>}\n </div>\n )\n};\n\nexport default PayButton;\n```\n\n[Test your\nintegration](https://docs.stripe.com/checkout/custom/quickstart#test-the-integration)-\nNavigate to your checkout page.\n- Fill out the payment details with a payment method from the following table.\nFor card payments:- Enter any future date for card expiry.\n- Enter any 3-digit number for CVC.\n- Enter any billing postal code.\n- Submit the payment to Stripe.\n- Go to the Dashboard and look for the payment on the [Transactions\npage](https://dashboard.stripe.com/test/payments?status%5B0%5D=successful). If\nyour payment succeeded, you’ll see it in that list.\n- Click your payment to see more details, like billing information and the list\nof purchased items. You can use this information to [fulfill the\norder](https://docs.stripe.com/checkout/fulfillment).\nCardsWalletsBank redirectsBank debitsVouchersCard numberScenarioHow to\ntest4242424242424242The card payment succeeds and doesn’t require\nauthentication.Fill out the credit card form using the credit card number with\nany expiration, CVC, and postal code.4000002500003155The card payment requires\n[authentication](https://docs.stripe.com/strong-customer-authentication).Fill\nout the credit card form using the credit card number with any expiration, CVC,\nand postal code.4000000000009995The card is declined with a decline code like\n`insufficient_funds`.Fill out the credit card form using the credit card number\nwith any expiration, CVC, and postal code.6205500000000000004The UnionPay card\nhas a variable length of 13-19 digits.Fill out the credit card form using the\ncredit card number with any expiration, CVC, and postal code.\nSee [Testing](https://docs.stripe.com/testing) for additional information to\ntest your integration.\n\n## See also\n\n- [Collect billing and shipping\naddresses](https://docs.stripe.com/payments/collect-addresses)\n- [Add discounts for one-time\npayments](https://docs.stripe.com/payments/checkout/discounts)\n- [Collect taxes](https://docs.stripe.com/payments/checkout/taxes)\n- [Enable adjustable line item\nquantities](https://docs.stripe.com/payments/checkout/adjustable-quantity)\n- [Fulfill orders after a customer\npays](https://docs.stripe.com/checkout/fulfillment)\n\n## Links\n\n- [Stripe Elements](https://docs.stripe.com/payments/elements)\n- [Checkout Sessions](https://docs.stripe.com/api/checkout/sessions)\n- [register](https://dashboard.stripe.com/register)\n- [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys)\n- [Checkout Session](https://docs.stripe.com/api/checkout/sessions/create)\n- [client\nsecret](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-client_secret)\n- [React Stripe.js](https://www.npmjs.com/package/@stripe/react-stripe-js)\n- [Stripe.js loader](https://www.npmjs.com/package/@stripe/stripe-js)\n-\n[CheckoutProvider](https://docs.stripe.com/js/custom_checkout/react/checkout_provider)\n- [useCheckout](https://docs.stripe.com/js/custom_checkout/react/use_checkout)\n- [updateEmail](https://docs.stripe.com/js/custom_checkout/react/update_email)\n- [Payment Element](https://docs.stripe.com/payments/payment-element)\n- [Stripe.js\ndocs](https://docs.stripe.com/js/custom_checkout/create_element?type=payment#custom_checkout_create_element-options)\n- [customize the\nappearance](https://docs.stripe.com/payments/checkout/customization/appearance)\n-\n[elementsOptions.appearance](https://docs.stripe.com/js/custom_checkout/react/checkout_provider#custom_checkout_react_checkout_provider-options-elementsOptions-appearance)\n- [confirm](https://docs.stripe.com/js/custom_checkout/confirm)\n- [Transactions\npage](https://dashboard.stripe.com/test/payments?status%5B0%5D=successful)\n- [fulfill the order](https://docs.stripe.com/checkout/fulfillment)\n- [authentication](https://docs.stripe.com/strong-customer-authentication)\n- [Testing](https://docs.stripe.com/testing)\n- [Collect billing and shipping\naddresses](https://docs.stripe.com/payments/collect-addresses)\n- [Add discounts for one-time\npayments](https://docs.stripe.com/payments/checkout/discounts)\n- [Collect taxes](https://docs.stripe.com/payments/checkout/taxes)\n- [Enable adjustable line item\nquantities](https://docs.stripe.com/payments/checkout/adjustable-quantity)",
  "metadata": {
    "title": "Build a checkout page with embedded components | Stripe Documentation",
    "description": "Use Elements and the Checkout Sessions API to build a checkout page.",
    "sourceURL": "https://docs.stripe.com/checkout/custom/quickstart"
  }
}