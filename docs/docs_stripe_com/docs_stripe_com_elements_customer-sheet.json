{
  "content": "# Integrate the Customer Sheet\n\n## Offer a prebuilt UI for your customers to manage their saved payment methods.\n\niOSAndroidReact Native\nThe Customer Sheet is a prebuilt UI component that lets your customers manage\ntheir saved payment methods. You can use the Customer Sheet UI outside of a\ncheckout flow, and the appearance and styling is customizable to match the\nappearance and aesthetic of your app. Customers can add and remove payment\nmethods, which get saved to the customer object, and set their default payment\nmethod stored locally on the device. Use both the Mobile Payment Element and the\nCustomer Sheet to provide customers a consistent end-to-end solution for saved\npayment methods.\n\n![Screenshot of Customer Sheet presenting multiple saved payment methods in an\niOS\napp.](https://b.stripecdn.com/docs-statics-srv/assets/ios-landing.6c4969968fd6efe3d39fe673628f8284.png)\n\nCustomerAdapter uses Customer Ephemeral Keys and serves as a bridge to help\nusers of legacy products adopt CustomerSheet more quickly. If you’re starting a\nnew integration, we recommend adopting CustomerSession over Customer Ephemeral\nKeys.\n\n[Set up Stripe](https://docs.stripe.com/elements/customer-sheet#ios-setup)\nFirst, you need a Stripe account. [Register\nnow](https://dashboard.stripe.com/register).\n\nThe [Stripe iOS SDK](https://github.com/stripe/stripe-ios) is open source,\n[fully documented](https://stripe.dev/stripe-ios/index.html), and compatible\nwith apps supporting iOS 13 or above.\n\nSwift Package ManagerCocoaPodsCarthageManual Framework\nTo install the SDK, follow these steps:\n\n- In Xcode, select **File** > **Add Package Dependencies…** and enter\n`https://github.com/stripe/stripe-ios-spm` as the repository URL.\n- Select the latest version number from our [releases\npage](https://github.com/stripe/stripe-ios/releases).\n- Add the **StripePaymentSheet** product to the [target of your\napp](https://developer.apple.com/documentation/swift_packages/adding_package_dependencies_to_your_app).\n\n#### Note\n\nFor details on the latest SDK release and past versions, see the\n[Releases](https://github.com/stripe/stripe-ios/releases) page on GitHub. To\nreceive notifications when a new release is published, [watch\nreleases](https://help.github.com/en/articles/watching-and-unwatching-releases-for-a-repository#watching-releases-for-a-repository)\nfor the repository.\n\nConfigure the SDK with your Stripe [publishable\nkey](https://dashboard.stripe.com/test/apikeys) on app start. This enables your\napp to make requests to the Stripe API.\n\n```\nimport UIKit\nimport StripePaymentSheet\n\n@main\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions\nlaunchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n StripeAPI.defaultPublishableKey = \"pk_test_TYooMQauvdEDq54NiTphI7jx\"\n // do any other necessary launch configuration\n return true\n }\n}\n```\n\n#### Note\n\nUse your [test mode](https://docs.stripe.com/keys#obtain-api-keys) keys while\nyou test and develop, and your [live\nmode](https://docs.stripe.com/keys#test-live-modes) keys when you publish your\napp.\n\n[Enable payment\nmethods](https://docs.stripe.com/elements/customer-sheet#ios-enable-payment-methods)\nView your [payment methods\nsettings](https://dashboard.stripe.com/settings/payment_methods) and enable the\npayment methods you want to support. You need at least one payment method\nenabled to create a [SetupIntent](https://docs.stripe.com/api/setup_intents).\n\nBy default, Stripe enables cards and other prevalent payment methods that can\nhelp you reach more customers, but we recommend turning on additional payment\nmethods that are relevant for your business and customers. See [Payment method\nsupport](https://docs.stripe.com/payments/payment-methods/payment-method-support)\nfor product and payment method support, and our [pricing\npage](https://stripe.com/pricing/local-payment-methods) for fees.\n\n#### Note\n\nAt this time, CustomerSheet only supports cards and US bank accounts.\n\n[Add Customer\nendpointsServer-side](https://docs.stripe.com/elements/customer-sheet#ios-add-endpoints)\nCreate two endpoints on your server: one for fetching a Customer’s ephemeral\nkey, and one to create a\n[SetupIntent](https://docs.stripe.com/api/setup_intents) for saving a new\npayment method to the [Customer](https://docs.stripe.com/api/customers).\n\n- Create an endpoint to return a\n[Customer](https://docs.stripe.com/api/customers) ID and an associated ephemeral\nkey. You can view the API version used by the SDK\n[here](https://github.com/stripe/stripe-ios/blob/master/StripeCore/StripeCore/Source/API%20Bindings/STPAPIClient.swift#L233).\n\n```\n# Create a Customer (skip this and get the existing Customer ID if this is a returning customer)\ncurl https://api.stripe.com/v1/customers \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -X \"POST\"\n\ncurl https://api.stripe.com/v1/ephemeral_keys \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -X \"POST\" \\\n -d \"customer\"=\"{{CUSTOMER_ID}}\" \\\n```\n\n- Create an endpoint to return a\n[SetupIntent](https://docs.stripe.com/api/setup_intents) configured with the\n[Customer](https://docs.stripe.com/api/customers) ID.\n\n```\n# Create a Customer (skip this and get the existing Customer ID if this is a returning customer)\ncurl https://api.stripe.com/v1/customers \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -X \"POST\"\n\ncurl https://api.stripe.com/v1/setup_intents \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"customer\"=\"{{CUSTOMER_ID}}\" \\\n```\n\nIf you only plan to use the payment method for future payments when your\ncustomer is present during the checkout flow, set the\n[usage](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-usage)\nparameter to on_session to improve authorization rates.\n\n[Create a Customer\nadapterClient-side](https://docs.stripe.com/elements/customer-sheet#ios-customer-adapter)\nA `StripeCustomerAdapter` enables a `CustomerSheet` to communicate with Stripe.\nOn the client, configure a `StripeCustomerAdapter` with providers that make\nrequests to these endpoints on your server.\n\n```\nimport StripePaymentSheet\n\nlet customerAdapter = StripeCustomerAdapter(customerEphemeralKeyProvider: {\n let json = await myBackend.getCustomerEphemeralKey()\nreturn CustomerEphemeralKey(customerId: json[\"customerId\"]!, ephemeralKeySecret:\njson[\"ephemeralKeySecret\"]!)\n}, setupIntentClientSecretProvider: {\n let json = await myBackend.getSetupIntentForCustomer()\n return json[\"setupIntentClientSecret\"]!\n})\n```\n\n[Configure the\nsheet](https://docs.stripe.com/elements/customer-sheet#ios-configure-wallet-element)\nNext, configure the Customer Sheet with your `StripeCustomerAdapter` and a\n[CustomerSheet.Configuration](https://stripe.dev/stripe-ios/stripepaymentsheet/documentation/stripepaymentsheet/customersheet/configuration/).\n\n```\nvar configuration = CustomerSheet.Configuration()\n\n// Configure settings for the CustomerSheet here. For example:\nconfiguration.headerTextForSelectionScreen = \"Manage your payment method\"\n\nlet customerSheet = CustomerSheet(configuration: configuration, customer:\ncustomerAdapter)\n```\n\n[Present the\nsheet](https://docs.stripe.com/elements/customer-sheet#ios-present-wallet-element)UIKitSwiftUI\nPresent the Customer Sheet. When the customer dismisses the sheet, the Customer\nSheet calls the completion block with a `CustomerSheet.SheetResult`.\n\n```\nimport StripePaymentSheet\n\ncustomerSheet.present(from: self, completion: { result in\n switch result {\n case .canceled(let paymentOption), .selected(let paymentOption):\n // Configure your UI based on the payment option\n self.paymentLabel.text = paymentOption?.displayData().label ?? \"None\"\n\n// Optional: Send the selected payment method ID to your backend for advanced\nuse cases\n // like charging a customer when not present in your app\n if let paymentOption = paymentOption {\n switch paymentOption {\n case .paymentMethod(let paymentMethod, let paymentOptionDisplayData):\n MyBackend.setDefaultPaymentMethod(paymentMethod.stripeId)\n case .applePay(paymentOptionDisplayData: let paymentOptionDisplayData):\n MyBackend.setDefaultPaymentMethodIsApplePay()\n }\n }\n case .error(let error):\n // Show the error in your UI\n }\n})\n```\n\n- If the customer selects a payment method, the result is\n`.selected(PaymentOptionSelection?)`. The associated value is the selected\n[PaymentOptionSelection](https://stripe.dev/stripe-ios/stripepaymentsheet/documentation/stripepaymentsheet/customersheet/paymentoptionselection),\nor `nil` if the user deleted the previously-selected payment method. You can\nfind the full payment method details in the PaymentOptionSelection’s\n`paymentMethod` associated value.\n- If the user cancels the sheet, the result is `.canceled`. The associated value\nis the original payment method selected prior to opening the customer sheet, as\nlong as that payment method is still available.\n- If an error occurs, the result is `.error(Error)`.\n\nLearn more about how to [enable Apple\nPay](https://docs.stripe.com/payments/accept-a-payment?platform=ios&mobile-ui=payment-element#ios-apple-pay).\n\n[OptionalEnable ACH\npayments](https://docs.stripe.com/elements/customer-sheet#ios-ach)[OptionalFetch\nthe selected payment\nmethod](https://docs.stripe.com/elements/customer-sheet#ios-get-selected-payment-method)[OptionalCustomize\nthe sheet](https://docs.stripe.com/elements/customer-sheet#ios-custom-behavior)\n\n## Links\n\n- [Register now](https://dashboard.stripe.com/register)\n- [Stripe iOS SDK](https://github.com/stripe/stripe-ios)\n- [fully documented](https://stripe.dev/stripe-ios/index.html)\n- [releases page](https://github.com/stripe/stripe-ios/releases)\n- [target of your\napp](https://developer.apple.com/documentation/swift_packages/adding_package_dependencies_to_your_app)\n- [watch\nreleases](https://help.github.com/en/articles/watching-and-unwatching-releases-for-a-repository#watching-releases-for-a-repository)\n- [publishable key](https://dashboard.stripe.com/test/apikeys)\n- [test mode](https://docs.stripe.com/keys#obtain-api-keys)\n- [live mode](https://docs.stripe.com/keys#test-live-modes)\n- [payment methods\nsettings](https://dashboard.stripe.com/settings/payment_methods)\n- [SetupIntent](https://docs.stripe.com/api/setup_intents)\n- [Payment method\nsupport](https://docs.stripe.com/payments/payment-methods/payment-method-support)\n- [pricing page](https://stripe.com/pricing/local-payment-methods)\n- [Customer](https://docs.stripe.com/api/customers)\n-\n[here](https://github.com/stripe/stripe-ios/blob/master/StripeCore/StripeCore/Source/API%20Bindings/STPAPIClient.swift#L233)\n-\n[usage](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-usage)\n-\n[CustomerSheet.Configuration](https://stripe.dev/stripe-ios/stripepaymentsheet/documentation/stripepaymentsheet/customersheet/configuration/)\n-\n[PaymentOptionSelection](https://stripe.dev/stripe-ios/stripepaymentsheet/documentation/stripepaymentsheet/customersheet/paymentoptionselection)\n- [enable Apple\nPay](https://docs.stripe.com/payments/accept-a-payment?platform=ios&mobile-ui=payment-element#ios-apple-pay)",
  "metadata": {
    "title": "Integrate the Customer Sheet | Stripe Documentation",
    "description": "Offer a prebuilt UI for your customers to manage their saved payment methods.",
    "sourceURL": "https://docs.stripe.com/elements/customer-sheet"
  }
}