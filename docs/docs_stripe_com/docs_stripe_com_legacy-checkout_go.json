{
  "content": "# Using Checkout and Go (legacy)\n\n#### Warning\n\n**This page is for the legacy version of Checkout**\n\nWe released a [new version of\nCheckout](https://docs.stripe.com/payments/checkout) in April 2019 which\nredirects to a Stripe-hosted payments page and supports card payments, Apple\nPay, and Google Pay. You can use the [Checkout Migration\nGuide](https://docs.stripe.com/payments/checkout/migration) to move from the\nlegacy version of Checkout to the new version. If you’d like to embed your\npayments form on your site, we recommend using [Stripe\nElements](https://docs.stripe.com/payments/elements).\n\nThis tutorial demonstrates how to accept payments with Stripe\n[Checkout](https://docs.stripe.com/payments/checkout) in a web application built\nwith [Go](https://golang.org/). The application uses Checkout to accept credit\ncards from the end user and send tokens to a back-end API. The back-end route\nuses the [Stripe Go library](https://github.com/stripe/stripe-go) to create a\ncharge. There are four steps:\n\n- [Install\ndependencies](https://docs.stripe.com/legacy-checkout/go#step-1-install-dependencies)\n- [Create the view\ntemplate](https://docs.stripe.com/legacy-checkout/go#step-2-create-the-view-template)\n- [Create the\nroutes](https://docs.stripe.com/legacy-checkout/go#step-3-create-routes)\n- [Run the\napplication](https://docs.stripe.com/legacy-checkout/go#step-4-run-the-application)\n[Install and configure\ndependencies](https://docs.stripe.com/legacy-checkout/go#step-1-install-dependencies)\nTo follow along, you need a working Go environment. Create and enter a new\ndirectory, then make sure your package is using Go Modules:\n\n```\ngo mod init\n```\n\nCreate a file named **main.go** and add the necessary imports and configuration\nvalues:\n\n```\npackage main\n\nimport (\n \"fmt\"\n \"html/template\"\n \"net/http\"\n \"os\"\n \"path/filepath\"\n\n \"github.com/stripe/stripe-go/v76.0.0\"\n \"github.com/stripe/stripe-go/v76.0.0/charge\"\n \"github.com/stripe/stripe-go/v76.0.0/customer\"\n \"github.com/stripe/stripe-go/v{{GOLANG_MAJOR_VERSION}}\"\n)\n\nfunc main() {\n publishableKey := os.Getenv(\"PUBLISHABLE_KEY\")\n stripe.Key = os.Getenv(\"SECRET_KEY\")\n}\n```\n\nThe file includes two values, the secret and publishable keys. These keys\nidentify your account when you communicate with Stripe. In this example, the\napplication extracts the values from local environment variables in order to\ncleanly separate configuration from code. Avoid hard-coding API access keys and\nother sensitive data in your application code.\n\nAssign the secret key to the `Key` property of the `stripe` package. Assign the\npublishable key to a new variable called `publishableKey` so that it can be used\nlater.\n\n[Create the view\ntemplate](https://docs.stripe.com/legacy-checkout/go#step-2-create-the-view-template)\nThis example uses Go’s `html/template` package for server-side templating.\nCreate a file named **views/index.html** for the index template:\n\n```\n<html>\n<head>\n <title>Checkout Example</title>\n</head>\n<body>\n<form action=\"/charge\" method=\"post\" class=\"payment\">\n <article>\n <label class=\"amount\">\n <span>Amount: $5.00</span>\n </label>\n </article>\n\n<script src=\"https://checkout.stripe.com/checkout.js\" class=\"stripe-button\"\ndata-key=\"{{ .Key }}\" data-description=\"A month's subscription\"\ndata-amount=\"500\" data-locale=\"auto\"></script>\n</form>\n</body>\n</html>\n```\n\nTo integrate the form, load Checkout in an HTML `<script>` tag. It adds a button\nto the form that the user can click to display the credit card overlay. The\noverlay automatically performs validation and error handling. The `action`\nattribute specifies the path of the **charge** route. In the next step, you will\nsee how the `.Key` attribute is populated with the publishable key for your\nStripe account.\n\nAdd the following code to the `main` function in your **main.go** file so that\nit will load the template when the application runs:\n\n```\ntmpls, _ := template.ParseFiles(filepath.Join(\"views\", \"index.html\"))\n```\n\n[Create routes](https://docs.stripe.com/legacy-checkout/go#step-3-create-routes)\nThe server exposes two routes:\n\n- A GET route that displays the payment form\n- A POST route that receives the payment token and creates the charge\n\nAdd the route handlers to the `main` function of the **main.go** file:\n\n```\nhttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n tmpl := tmpls.Lookup(\"index.html\")\n tmpl.Execute(w, map[string]string{\"Key\": publishableKey})\n})\n\nhttp.HandleFunc(\"/charge\", func(w http.ResponseWriter, r *http.Request) {\n r.ParseForm()\n\n customerParams := &stripe.CustomerParams{\n Email: stripe.String(r.Form.Get(\"stripeEmail\")),\n }\n customerParams.SetSource(r.Form.Get(\"stripeToken\"))\n\n newCustomer, err := customer.New(customerParams)\n\n if err != nil {\n http.Error(w, err.Error(), http.StatusInternalServerError)\n return\n }\n\n chargeParams := &stripe.ChargeParams{\n Amount: stripe.Int64(500),\n Currency: stripe.String(string(stripe.CurrencyUSD)),\n Description: stripe.String(\"Sample Charge\"),\n Customer: stripe.String(newCustomer.ID),\n }\n\n if _, err := charge.New(chargeParams); err != nil {\n http.Error(w, err.Error(), http.StatusInternalServerError)\n return\n }\n\n fmt.Fprintf(w, \"Charge completed successfully!\")\n})\n\nhttp.ListenAndServe(\":4567\", nil)\n```\n\nThe index route renders the Checkout form and displays it to the user. Pass the\npublishable key into the render function via a map literal so that the template\ncan embed it in the Checkout form markup.\n\nThe **charge** route retrieves the email address and card token from the POST\nrequest body. It uses those parameters to create a Stripe customer. Next, it\ninvokes the `charge.New` function, providing the `Customer` ID as an option.\n\nIn this example, the application charges the user $5. Stripe expects the\ndeveloper to describe charges in cents, so compute the value of the `amount`\nparameter by multiplying the desired number of dollars by one hundred. Stripe\ncharges also take an optional `Desc` parameter, which lets you describe the\ncharge.\n\nWhen the charge completes successfully, the application displays a message to\nthe user. You could optionally use a second template in the **charge** route\ninstead of a plain string.\n\nThat’s it, a complete Stripe integration in about 60 lines of Go code.\n\n[Run the\napplication](https://docs.stripe.com/legacy-checkout/go#step-4-run-the-application)\nRun the application from the command line:\n\n```\nPUBLISHABLE_KEY=pk_test_TYooMQauvdEDq54NiTphI7jx\nSECRET_KEY=sk_test_BQokikJOvBiI2HlWgH4olfQ2 go run main.go\n```\n\nSpecify values for the [publishable and secret\nkey](https://dashboard.stripe.com/apikeys) environment variables. `\n\nNavigate to the running application in your browser and click the button to\nlaunch the payment form. If you’re using Stripe test keys, you can test it with\nsome dummy data. Enter the test number **4242 4242 4242 4242**, a three digit\nCVC, and a future expiry date. Submit the form and see if the application\ncorrectly displays the successful charge page.\n\n## Links\n\n- [new version of Checkout](https://docs.stripe.com/payments/checkout)\n- [Checkout Migration\nGuide](https://docs.stripe.com/payments/checkout/migration)\n- [Stripe Elements](https://docs.stripe.com/payments/elements)\n- [Go](https://golang.org/)\n- [Stripe Go library](https://github.com/stripe/stripe-go)\n- [publishable and secret key](https://dashboard.stripe.com/apikeys)",
  "metadata": {
    "title": "Using Checkout and Go (legacy) | Stripe Documentation",
    "description": "",
    "sourceURL": "https://docs.stripe.com/legacy-checkout/go"
  }
}