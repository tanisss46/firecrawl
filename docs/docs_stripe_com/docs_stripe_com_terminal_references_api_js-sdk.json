{
  "content": "# JavaScript API reference\n\n## Use our API reference to navigate the Stripe Terminal JavaScript SDK.\n\n## API methods\n\n-\n[StripeTerminal.create()](https://docs.stripe.com/terminal/references/api/js-sdk#stripeterminal-create)\n-\n[discoverReaders()](https://docs.stripe.com/terminal/references/api/js-sdk#discover-readers)\n-\n[connectReader()](https://docs.stripe.com/terminal/references/api/js-sdk#connect-reader)\n-\n[disconnectReader()](https://docs.stripe.com/terminal/references/api/js-sdk#disconnect)\n-\n[getConnectionStatus()](https://docs.stripe.com/terminal/references/api/js-sdk#get-connection-status)\n-\n[getPaymentStatus()](https://docs.stripe.com/terminal/references/api/js-sdk#get-payment-status)\n-\n[clearCachedCredentials()](https://docs.stripe.com/terminal/references/api/js-sdk#clear-cached-credentials)\n-\n[collectPaymentMethod()](https://docs.stripe.com/terminal/references/api/js-sdk#collect-payment-method)\n-\n[cancelCollectPaymentMethod()](https://docs.stripe.com/terminal/references/api/js-sdk#cancel-collect-payment-method)\n-\n[processPayment()](https://docs.stripe.com/terminal/references/api/js-sdk#process-payment)\n-\n[collectSetupIntentPaymentMethod()](https://docs.stripe.com/terminal/references/api/js-sdk#collect-setup-intent-payment-method)\n-\n[cancelCollectSetupIntentPaymentMethod()](https://docs.stripe.com/terminal/references/api/js-sdk#cancel-collect-setup-intent-payment-method)\n-\n[confirmSetupIntent()](https://docs.stripe.com/terminal/references/api/js-sdk#confirm-setup-intent)\n-\n[readReusableCard()](https://docs.stripe.com/terminal/references/api/js-sdk#read-reusable-card)\n-\n[cancelReadReusableCard()](https://docs.stripe.com/terminal/references/api/js-sdk#cancel-read-reusable-card)\n-\n[setReaderDisplay()](https://docs.stripe.com/terminal/references/api/js-sdk#set-reader-display)\n-\n[clearReaderDisplay()](https://docs.stripe.com/terminal/references/api/js-sdk#clear-reader-display)\n-\n[setSimulatorConfiguration()](https://docs.stripe.com/terminal/references/api/js-sdk#stripeterminal-setsimulatorconfig)\n-\n[getSimulatorConfiguration()](https://docs.stripe.com/terminal/references/api/js-sdk#stripeterminal-getsimulatorconfig)\n-\n[collectRefundPaymentMethod()](https://docs.stripe.com/terminal/references/api/js-sdk#stripeterminal-collectrefundpaymentmethod)\n-\n[processRefund()](https://docs.stripe.com/terminal/references/api/js-sdk#stripeterminal-processrefund)\n-\n[cancelCollectRefundPaymentMethod()](https://docs.stripe.com/terminal/references/api/js-sdk#stripeterminal-cancelcollectrefundpaymentmethod)\n-\n[collectInputs()](https://docs.stripe.com/terminal/references/api/js-sdk#collect-inputs)\n-\n[cancelCollectInputs()](https://docs.stripe.com/terminal/references/api/js-sdk#cancel-collect-inputs)\n\n### StripeTerminal.create([options])\n\nCreates an instance of `StripeTerminal` with the given options:\n\nOption DescriptiononFetchConnectionTokenAn event handler that [fetches a\nconnection\ntoken](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=js#connection-token)\nfrom your backend.onUnexpectedReaderDisconnectAn event handler called when a\nreader disconnects from your app.onConnectionStatusChange optionalAn event\nhandler called when the SDK’s ConnectionStatus changes.onPaymentStatusChange\noptionalAn event handler called when the SDK’s PaymentStatus\nchanges.readerBehavior optionalAn object that sets the behavior on the reader\nthroughout the lifecycle of the SDK. See below for readerBehavior configuration\noptions.\n### Reader Behavior Configuration\n\nToday, there is only one behavior configuration option:\n\nBehavior Description\n**allowCustomerCancel**\n\nA Boolean that determines whether the customer can cancel `collectPaymentMethod`\nfrom the reader’s interface. Defaults to `false`.\n\n**Note:** This property isn’t broadly available, and we’re not accepting users\nat this time.\n\n### discoverReaders([options])\n\nBegins discovering readers with the given options:\n\nOption Descriptionsimulated optionalA Boolean value indicating whether to\ndiscover a [simulated\nreader](https://docs.stripe.com/terminal/references/testing#simulated-reader).\nIf left empty, this value defaults to `false`.\n**location** optional\n\nReturn only readers assigned to the given `location`. This parameter is ignored\nwhen discovering a simulated reader.\n\nFor more information on using locations to filter discovered readers, see\n[Manage locations](https://docs.stripe.com/terminal/fleet/locations-and-zones).\n\nReturns a `Promise` that resolves to an object with the following fields:\n\n- `discoveredReaders`: A list of discovered\n[Reader](https://docs.stripe.com/api/terminal/readers/object) objects, if the\ncommand succeeded.\n- `error`: An\n[error](https://docs.stripe.com/terminal/references/api/js-sdk#errors), if the\ncommand failed.\n\n#### Note\n\nBefore you can discover the Verifone P400 in your application, you must\n[register](https://docs.stripe.com/terminal/payments/connect-reader?reader-type=internet#register-reader)\nthe reader to your account.\n\n### connectReader(reader, connectOptions)\n\nAttempts to\n[connect](https://docs.stripe.com/terminal/payments/connect-reader?reader-type=internet#connect-reader)\nto the given reader with the given options:\n\nOption Descriptionfail_if_in_use optionalA Boolean value indicating that the\nconnection fails if the reader is currently connected to a Terminal SDK. If left\nempty, this value defaults to `false`.\nReturns a `Promise` that resolves to an object with the following fields:\n\n- `reader`: The connected\n[Reader](https://docs.stripe.com/api/terminal/readers/object), if the command\nsucceeded.\n- `error`: An\n[error](https://docs.stripe.com/terminal/references/api/js-sdk#errors), if the\ncommand failed.\n\n#### Note\n\nDon’t cache the `Reader` object in your application. Connecting to a stale\n`Reader` can fail if the reader’s IP address has changed.\n\n### disconnectReader()\n\nDisconnects from the connected reader.\n\n### getConnectionStatus()\n\nReturns the current connection status.\n\nConnectionStatus can be one of `connecting`, `connected`, or `not_connected`.\n\n### getPaymentStatus()\n\nReturns the reader’s payment status.\n\nPaymentStatus can be one of `not_ready`, `ready`, `waiting_for_input`, or\n`processing`.\n\n### clearCachedCredentials()\n\nClears the current\n[ConnectionToken](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=js#connection-token),\nand any other cached credentials.\n\nUse this method to switch accounts in your application (for example, to switch\nbetween live and test Stripe API keys on your backend). To switch accounts,\nfollow these steps:\n\n- If a reader is connected, call `disconnectReader`.\n- Configure your `onFetchConnectionToken` handler to return connection tokens\nfor the new account.\n- Call `clearCachedCredentials`.\n- Reconnect to a reader. The SDK requests a new connection token from your\n`onFetchConnectionToken` handler.\n\n### collectPaymentMethod(request, options)\n\nBegins [collecting a payment\nmethod](https://docs.stripe.com/terminal/payments/collect-card-payment#collect-payment)\nfor a PaymentIntent. This method takes one required parameter, `request`:\n\n- `request`: The `clientSecret` field from a `PaymentIntent` object created on\nyour backend. Learn how to [create a PaymentIntent and pass its client\nsecret](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=elements#web-create-intent).\n- `options`: An object containing additional payment parameters.\nOption Description\n**config_override** optional\n\nAn object that allows you to specify configuration overrides per transaction.\nThis object defaults to null.\n\n`skip_tipping`\n\n- Optional, defaults to false. If true, the reader skips the tipping screen.\n\n`tipping`\n\n- An object that allows you to specify tipping-related options per transaction.\nIt’s described below.\n\n`update_payment_intent`\n\n- A Boolean, when paired with `payment_intent_id`, instructs the call to update\nthe `PaymentIntent` and return the attached `PaymentMethod` with card details.\n\n`enable_customer_cancellation`\n\n- Optional, defaults to false. If true, Android-based smart readers show a\ncancel button.\n\n`allow_redisplay`\n\n- Required if `setup_future_usage` is set; otherwise, it defaults to\n`unspecified`. An enum value indicating whether future checkout flows can show\nthis payment method to its customer.\n\n`moto`\n\n- Optional, defaults to false. If true, Android-based smart readers start\ncollection for a [mail order or telephone\norder](https://docs.stripe.com/terminal/features/mail-telephone-orders/payments)\ntransaction.\n\n```\n{\n update_payment_intent: boolean,\n payment_intent_id: string,\n enable_customer_cancellation: boolean,\n skip_tipping: boolean,\n tipping: object,\n allow_redisplay: string,\n moto: boolean,\n}\n```\n\nThe following option is available for the `tipping` object:\n\nOption Description\n**eligible_amount** optional\n\nA number that allows you to specify the amount of a transaction that\npercentage-based tips are calculated against. Set this value to 0 or higher.\n\nIf it’s equal to 0, tipping is skipped regardless of the value of\n`skip_tipping`.\n\nIf it’s equal to the PaymentIntent amount, the parameter is ignored and the tip\nis calculated based on the specified amount.\n\n```\n{\n eligible_amount: number,\n}\n```\n\nReturns a `Promise` that resolves to an object with the following fields:\n\n- `paymentIntent`: The updated [PaymentIntent\nobject](https://docs.stripe.com/api/payment_intents/object), if the command\nsucceeded.\n- `error`: An\n[error](https://docs.stripe.com/terminal/references/api/js-sdk#errors), if the\ncommand failed.\n\nFor more information on collecting payments, see our [Collecting\nPayments](https://docs.stripe.com/terminal/payments/collect-card-payment) guide.\n\n### cancelCollectPaymentMethod()\n\nCancels an outstanding\n[collectPaymentMethod](https://docs.stripe.com/terminal/references/api/js-sdk#collect-payment-method)\ncommand.\n\nReturns a `Promise` that resolves to an empty object when command has been\nsuccessfully canceled. If cancellation fails, the `Promise` resolves to an\nobject with an\n[error](https://docs.stripe.com/terminal/references/api/js-sdk#errors)\n\n### processPayment(paymentIntent, options)\n\n[Processes](https://docs.stripe.com/terminal/payments/collect-card-payment#process-payment)\na payment after a payment method has been\n[collected](https://docs.stripe.com/terminal/payments/collect-card-payment#collect-payment).\n\nThis method takes one required parameter, `paymentIntent`:\n\n- `paymentIntent`: A `PaymentIntent` object obtained from a successful call to\n`collectPaymentMethod`.\n- `options`: An object containing additional payment parameters.\nOption Description\n**config_override** optional\n\nAn object that allows you to specify configuration overrides per transaction.\nThis object defaults to null.\n\n`return_url`\n\n- The URL to redirect your customer back to after they authenticate or cancel\ntheir payment on the payment method’s app or site. We only use this parameter\nfor redirect-based payment methods. The default is null.\n\n```\n{\n return_url: string,\n}\n```\n\nReturns a `Promise` that resolves to an object with the following fields:\n\n- `paymentIntent`: The confirmed [PaymentIntent\nobject](https://docs.stripe.com/api/payment_intents/object), if the command\nsucceeded.\n- `error`: An\n[error](https://docs.stripe.com/terminal/references/api/js-sdk#errors), if the\ncommand failed. For more information, see [Handling processing\nfailures](https://docs.stripe.com/terminal/payments/collect-card-payment#handling-failures).\n\n### collectSetupIntentPaymentMethod(clientSecret, allowRedisplay, config)\n\nBegins [collecting a payment method for online\nreuse](https://docs.stripe.com/terminal/features/saving-cards/overview) for a\n[SetupIntent](https://docs.stripe.com/api/setup_intents/object).\n\nThe method takes two required parameters:\n\n- `clientSecret`: The `clientSecret` field from a `SetupIntent` object created\non your backend.\n- `allowRedisplay`: An enum value indicating whether future checkout flows can\nshow this payment method to its customer.\n- `config`: an optional object containing collection configuration.\nOption Description\n**enable_customer_cancellation**\n\nOptional, defaults to false.\n\nIf true, Android-based smart readers show a cancel button.\n\n**moto**\n\nOptional, defaults to false.\n\nIf true, Android-based smart readers start saving a [mail order or telephone\norder](https://docs.stripe.com/terminal/features/mail-telephone-orders/save-directly)\ncard.\n\nReturns a `Promise` that resolves to an object with the following fields:\n\n- `setupIntent`: The updated [SetupIntent\nobject](https://docs.stripe.com/api/setup_intents/object), if the command\nsucceeded.\n- `error`: An\n[error](https://docs.stripe.com/terminal/references/api/js-sdk#errors), if the\ncommand failed.\n\nFor more information on saving cards, see our [Saving cards for online\npayments](https://docs.stripe.com/terminal/features/saving-cards/overview)\nguide.\n\n### cancelCollectSetupIntentPaymentMethod()\n\nCancels an outstanding\n[collectSetupIntentPaymentMethod](https://docs.stripe.com/terminal/references/api/js-sdk#collect-setup-intent-payment-method)\ncommand.\n\nReturns a `Promise` that resolves to an empty object when the command has been\nsuccessfully canceled. If cancellation fails, the `Promise` resolves to an\nobject with an\n[error](https://docs.stripe.com/terminal/references/api/js-sdk#errors)\n\n### confirmSetupIntent(setupIntent)\n\n[Confirms](https://docs.stripe.com/terminal/features/saving-cards/save-cards-directly#submit-payment-method)\na SetupIntent after a payment method has been\n[collected](https://docs.stripe.com/terminal/features/saving-cards/save-cards-directly#collect-payment-method).\n\nThis method takes a single parameter, a `SetupIntent` object obtained from a\nsuccessful call to `collectSetupIntentPaymentMethod`.\n\nReturns a `Promise` that resolves to an object with the following fields:\n\n- `setupIntent`: The confirmed [SetupIntent\nobject](https://docs.stripe.com/api/setup_intents/object), if the command\nsucceeded.\n- `error`: An\n[error](https://docs.stripe.com/terminal/references/api/js-sdk#errors), if the\ncommand failed.\n\n### readReusableCard()\n\nReads a card for [online\nreuse](https://docs.stripe.com/terminal/features/saving-cards/overview).\n\nOnline payments initiated from Terminal do *not* benefit from the [lower\npricing](https://stripe.com/terminal#pricing) and liability shift given to\n[standard Terminal\npayments](https://docs.stripe.com/terminal/payments/collect-card-payment). Most\nintegrations do *not* need to use `readReusableCard`. To only collect an\nin-person payment from a customer, use the [standard\nflow](https://docs.stripe.com/terminal/payments/collect-card-payment).\n\nReturns a `Promise` that resolves to an object with the following fields:\n\n- `payment_method`: The [PaymentMethod\nobject](https://docs.stripe.com/api/payment_methods/object), if the command\nsucceeded.\n- `error`: An\n[error](https://docs.stripe.com/terminal/references/api/js-sdk#errors), if the\ncommand failed.\n\n#### Note\n\nCurrently, you can’t use Stripe Terminal to save contactless cards and mobile\nwallets (for example, Apple Pay, Google Pay) for later reuse.\n\n### cancelReadReusableCard()\n\nCancels an outstanding\n[readReusableCard](https://docs.stripe.com/terminal/references/api/js-sdk#read-reusable-card)\ncommand.\n\nReturns a `Promise` that resolves to an empty object when the command has been\nsuccessfully canceled. If cancellation fails, the `Promise` resolves to an\nobject with an\n[error](https://docs.stripe.com/terminal/references/api/js-sdk#errors).\n\n### setReaderDisplay(displayInfo)\n\nUpdates the reader display with [cart\ndetails](https://docs.stripe.com/terminal/features/display).\n\nThis method takes a `DisplayInfo` object as input.\n\n```\n{\n type: 'cart',\n cart: {\n line_items: [\n {\n description: string,\n amount: number,\n quantity: number,\n },\n ],\n tax: number,\n total: number,\n currency: string,\n }\n}\n```\n\nReturns a `Promise` that resolves to an empty object if the command succeeds. If\nthe command fails, the `Promise` resolves to an object with an\n[error](https://docs.stripe.com/terminal/references/api/js-sdk#errors).\n\n### clearReaderDisplay()\n\nIf the reader is displaying cart details set with `setReaderDisplay`, this\nmethod clears the screen and resets it to the splash screen.\n\nReturns a `Promise` that resolves to an empty object if the command succeeds. If\nthe command fails, the `Promise` resolves to an object with an\n[error](https://docs.stripe.com/terminal/references/api/js-sdk#errors).\n\n### setSimulatorConfiguration(configuration)\n\nSets the configuration object for the [simulated card\nreader](https://docs.stripe.com/terminal/references/testing#simulated-reader).\n\nThis method only takes effect when connected to the simulated reader; it\nperforms no action otherwise.\n\nThe simulated reader will follow the specified configuration only until\n`processPayment` is complete. At that point, the simulated reader will revert to\nits default behavior.\n\nNote that this method overwrites any currently active configuration object; to\nadd specific key-value pairs to the object, make sure to use a combination of\nthis method and `getSimulatorConfiguration`.\n\nThe configuration options available are:\n\nFieldValuesDescriptiontestCardNumberRefer to the [Simulated test\ncards](https://docs.stripe.com/terminal/references/testing#simulated-test-cards)\nlist.Configures the simulated reader to use a test card number as the payment\nmethod presented by the user. Use it to test different scenarios in your\nintegration, such as payments with different card brands or processing errors\nlike a declined charge.testPaymentMethodRefer to the [Simulated test\ncards](https://docs.stripe.com/terminal/references/testing#simulated-test-cards)\nlist.Serves the same purpose as `testCardNumber`, but relies on test payment\nmethods instead.tipAmountAny amount or null.Configures the simulated reader to\nsimulate an on-reader tip amount selected by the customer.paymentMethodType\ndeprecated- `card_present` (default)\n- `interac_present`\nDetermine the type of payment method created by the simulated reader when\n`collectPaymentMethod` is called.\n### getSimulatorConfiguration()\n\nReturns the currently active configuration object.\n\nThe Stripe Terminal JavaScript SDK may overwrite this value as necessary,\nincluding (but not limited to) resetting the value after processPayment is\ncomplete, and removing unknown key-value pairs.\n\n### collectRefundPaymentMethod(charge_id, amount, currency, options, config)\n\nBegins collecting a payment method to be refunded. The method takes two required\nparameters:\n\n- `charge_id`, the ID of the charge that will be refunded.\n- `amount`: a number that represents the amount, in cents, that will be refunded\nfrom the charge. This number must be less than or equal to the amount that was\ncharged in the original payment.\n- `currency`: Three-letter [ISO code for the\ncurrency](https://docs.stripe.com/currencies), in lowercase. Must be a\n[supported currency](https://docs.stripe.com/currencies).\n- `options`: an optional object containing additional refund parameters.\nOption Description\n**refund_application_fee**\n\nOptional, defaults to false. Connect only.\n\nBoolean indicating whether the application fee should be refunded when refunding\nthis charge. If a full charge refund is given, the full application fee will be\nrefunded. Otherwise, the application fee will be refunded in an amount\nproportional to the amount of the charge refunded.\n\nAn application fee can be refunded only by the application that created the\ncharge.\n\n**reverse_transfer**\n\nOptional, defaults to false. Connect only.\n\nBoolean indicating whether the transfer should be reversed when refunding this\ncharge. The transfer will be reversed proportionally to the amount being\nrefunded (either the entire or partial amount).\n\nA transfer can be reversed only by the application that created the charge.\n\n- `config`: an optional object containing collection configuration.\nOption Description\n**enable_customer_cancellation**\n\nOptional, defaults to false.\n\nIf true, Android-based smart readers show a cancel button.\n\nReturns a `Promise` that resolves to either:\n\n- an empty object if the payment method collection was successful, or\n- an object with an\n[error](https://docs.stripe.com/terminal/references/api/js-sdk#errors) field if\nthere was an error while collecting the refund payment method.\n\n### processRefund()\n\nProcesses an in-progress refund. This method can only be successfully called\nafter `collectRefundPaymentMethod` has returned successfully.\n\nReturns a `Promise` that resolves to either:\n\n- a refund object if the refund was successful, or\n- an object with an\n[error](https://docs.stripe.com/terminal/references/api/js-sdk#errors) field if\nthere was an error while processing the refund.\n\n### cancelCollectRefundPaymentMethod()\n\nCancels an outstanding `collectRefundPaymentMethod` command.\n\nReturns a `Promise` that resolves to an empty object if the cancellation was\nsuccessful. If the cancellation fails, the `Promise` resolves to an object with\nan `error` field.\n\n### collectInputs(collectInputsParameters)\n\n#### Note\n\nTo request access to the Collect Inputs beta, email us at\n[stripe-terminal-betas@stripe.com](mailto:stripe-terminal-betas@stripe.com).\n\nStart displaying forms and collecting information from customers using [collect\ninputs](https://docs.stripe.com/terminal/features/collect-inputs).\n\nThis method takes a `ICollectInputsParameters` object as input.\n\nReturns a `Promise` that resolves to the collected results if the command\nsucceeds. If the command fails, the `Promise` resolves to an object with an\n[error](https://docs.stripe.com/terminal/references/api/js-sdk#errors).\n\n### cancelCollectInputs()\n\n#### Note\n\nTo request access to the Collect Inputs beta, email us at\n[stripe-terminal-betas@stripe.com](mailto:stripe-terminal-betas@stripe.com).\n\nCancels an outstanding `collectInputs` command.\n\nReturns a `Promise` that resolves to an empty object if the cancellation\nsucceeds. If the command fails, the `Promise` resolves to an object with an\n[error](https://docs.stripe.com/terminal/references/api/js-sdk#errors).\n\n## Errors\n\nErrors returned by the JavaScript SDK include an error `code`, as well as a\nhuman-readable `message`.\n\nFor methods involving a PaymentIntent like\n[processPayment](https://docs.stripe.com/terminal/payments/collect-card-payment#handling-failures),\nthe error may also include a `payment_intent` object.\n\n#### Error codes\n\nCodeDescription`no_established_connection`The command failed because no reader\nis\nconnected.`no_active_collect_payment_method_attempt``cancelCollectPaymentMethod`\ncan only be called when `collectPaymentMethod` is in\nprogress.`no_active_read_reusable_card_attempt``cancelCollectReusableCard` can\nonly be called when `readReusableCard` is in progress.`canceled`The command was\ncanceled.`cancelable_already_completed`Cancellation failed because the operation\nhas already completed.`cancelable_already_canceled`Cancellation failed because\nthe operation has already been canceled.`network_error`An unknown error occurred\nwhen communicating with the server or reader over the network. Refer to the\nerror message for more information.`network_timeout`The request timed out when\ncommunicating with the server or reader over the network. Make sure both your\ndevice and the reader are connected to the network with stable\nconnections.`already_connected``connectReader` failed because a reader is\nalready connected.`failed_fetch_connection_token`Failed to fetch a connection\ntoken. Make sure your connection token handler returns a promise that resolves\nto the connection token.`discovery_too_many_readers``discoverReaders` returned\ntoo many readers. Use\n[Locations](https://docs.stripe.com/terminal/fleet/locations-and-zones) to\nfilter discovered readers by location.`invalid_reader_version`The reader is\nrunning an unsupported software version. Please allow the reader to update and\ntry again.`reader_error`The reader returned an error while processing the\nrequest. Refer to the error message for more\ninformation.`command_already_in_progress`The action can’t be performed, because\nan in-progress action is preventing it.\n## Changelog\n\nIf you’re using an earlier version of the JavaScript SDK (before June 7, 2019),\nupdate to the latest release by changing the URL of the script your integration\nincludes.\n\n```\n<script src=\"https://js.stripe.com/terminal/v1/\"></script>\n```\n\nFor more information on migrating from the Stripe Terminal beta, see the\n[Terminal Beta Migration\nGuide](https://docs.stripe.com/terminal/references/sdk-migration-guide).\n\n#### v1\n\n- Renamed `confirmPaymentIntent` to `processPayment`.\n- Renamed the values for PaymentStatus. PaymentStatus can be one of `not_ready`,\n`ready`, `waiting_for_input`, or `processing`.\n- Removed card details from the response to `collectPaymentMethod`, previously\navailable in `response.paymentIntent.payment_method.card_payment`.\n- Receipt information is now located in the\n`payment_intent.charges[0].payment_method_details.card_present` hash.\n- Changed the API for discovering a simulated reader to `discoverReaders({\nsimulated: true })`.\n- Renamed `readSource` to `readReusableCard`. A successful call to\n`readReusableCard` returns a\n[PaymentMethod](https://docs.stripe.com/api/payment_methods) instead of a\nSource. Payment Methods must be used with PaymentIntents. For more information,\nsee the [Payment Methods API](https://docs.stripe.com/payments/payment-methods)\noverview.\n- Changed the response of `connectReader` to `{ reader: Reader }`, removing the\nwrapper `Connection` object.\n- Removed the `startReaderDiscovery` and `stopReaderDiscovery` methods. To\nrepeatedly discover readers, you can use the JavaScript `setInterval` method.\n- Renamed `clearConnectionToken` to `clearCachedCredentials`.\n\n## Links\n\n- [fetches a connection\ntoken](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=js#connection-token)\n- [simulated\nreader](https://docs.stripe.com/terminal/references/testing#simulated-reader)\n- [Manage locations](https://docs.stripe.com/terminal/fleet/locations-and-zones)\n- [Reader](https://docs.stripe.com/api/terminal/readers/object)\n- [error](https://docs.stripe.com/terminal/references/api/js-sdk#errors)\n-\n[register](https://docs.stripe.com/terminal/payments/connect-reader?reader-type=internet#register-reader)\n-\n[connect](https://docs.stripe.com/terminal/payments/connect-reader?reader-type=internet#connect-reader)\n- [collecting a payment\nmethod](https://docs.stripe.com/terminal/payments/collect-card-payment#collect-payment)\n- [create a PaymentIntent and pass its client\nsecret](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=elements#web-create-intent)\n- [mail order or telephone\norder](https://docs.stripe.com/terminal/features/mail-telephone-orders/payments)\n- [PaymentIntent object](https://docs.stripe.com/api/payment_intents/object)\n- [Collecting\nPayments](https://docs.stripe.com/terminal/payments/collect-card-payment)\n-\n[collectPaymentMethod](https://docs.stripe.com/terminal/references/api/js-sdk#collect-payment-method)\n-\n[Processes](https://docs.stripe.com/terminal/payments/collect-card-payment#process-payment)\n- [Handling processing\nfailures](https://docs.stripe.com/terminal/payments/collect-card-payment#handling-failures)\n- [collecting a payment method for online\nreuse](https://docs.stripe.com/terminal/features/saving-cards/overview)\n- [SetupIntent](https://docs.stripe.com/api/setup_intents/object)\n- [mail order or telephone\norder](https://docs.stripe.com/terminal/features/mail-telephone-orders/save-directly)\n-\n[Confirms](https://docs.stripe.com/terminal/features/saving-cards/save-cards-directly#submit-payment-method)\n-\n[collected](https://docs.stripe.com/terminal/features/saving-cards/save-cards-directly#collect-payment-method)\n- [lower pricing](https://stripe.com/terminal#pricing)\n- [PaymentMethod object](https://docs.stripe.com/api/payment_methods/object)\n-\n[readReusableCard](https://docs.stripe.com/terminal/references/api/js-sdk#read-reusable-card)\n- [cart details](https://docs.stripe.com/terminal/features/display)\n- [Simulated test\ncards](https://docs.stripe.com/terminal/references/testing#simulated-test-cards)\n- [ISO code for the currency](https://docs.stripe.com/currencies)\n- [collect inputs](https://docs.stripe.com/terminal/features/collect-inputs)\n- [https://js.stripe.com/terminal/v1/](https://js.stripe.com/terminal/v1/)\n- [Terminal Beta Migration\nGuide](https://docs.stripe.com/terminal/references/sdk-migration-guide)\n- [PaymentMethod](https://docs.stripe.com/api/payment_methods)\n- [Payment Methods API](https://docs.stripe.com/payments/payment-methods)",
  "metadata": {
    "title": "JavaScript API reference | Stripe Documentation",
    "description": "Use our API reference to navigate the Stripe Terminal JavaScript SDK.",
    "sourceURL": "https://docs.stripe.com/terminal/references/api/js-sdk"
  }
}