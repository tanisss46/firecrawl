{
  "content": "# Card payments with SourcesDeprecated\n\n## Use Sources to accept card payments from around the world.\n\n#### Warning\n\nStripe recommends using the [Payment Intents\nAPI](https://docs.stripe.com/payments/payment-intents) instead of this API. With\na PaymentIntent integration, you can use [Dynamic 3D\nSecure](https://docs.stripe.com/payments/3d-secure/authentication-flow#three-ds-radar),\nwhich helps you avoid declined payments due to [Strong Customer\nAuthentication](https://docs.stripe.com/strong-customer-authentication)\nregulation in Europe. To get started, follow the [Accept a\npayment](https://docs.stripe.com/payments/accept-a-payment) guide.\n\nStripe users can process card payments from customers around the world using\n[Sources](https://docs.stripe.com/sources)—a single integration path for\ncreating payments using any supported method. During the payment process, your\nintegration creates a source representing the card information. This source is\nthen used in a charge request to debit the card and complete the payment.\n\nWithin the scope of Sources, cards are a\n[pull](https://docs.stripe.com/sources#pull-or-push-of-funds)-based,\n[reusable](https://docs.stripe.com/sources#single-use-or-reusable) and\n[synchronous](https://docs.stripe.com/sources#synchronous-or-asynchronous-confirmation)\nmethod of payment. This means that, after capturing the customer’s card details,\nyou can debit arbitrary amounts from the customer’s card without them having to\ntake any additional action and there is immediate confirmation about the success\nor failure of a payment.\n\n## Handling card information\n\nCard information is sensitive by nature. Card sources must be created\nclient-side using [Stripe.js and\nElements](https://docs.stripe.com/payments/elements). This ensures that no\nsensitive card data passes through your server so your integration can operate\nin a [PCI compliant](https://stripe.com/guides/pci-compliance) way.\n\nWhen your customer submits their card information using your payment form, it is\nsent directly to Stripe, and a representative\n[Source](https://docs.stripe.com/api#sources) object is returned for you to use.\nThe process is similar to the creation of\n[tokens](https://docs.stripe.com/api/tokens). If you’re already using Elements\nto tokenize card information, switching to Sources is only a small change.\n\n## Prerequisite: Consider a flexible checkout flow if you want to accept additional payment methods\n\nCard payments with Sources has fewer steps and requirements than other payment\nmethods. As it’s a synchronous method and there is no additional customer action\nto take, the use of [webhooks](https://docs.stripe.com/webhooks) isn’t\nnecessary. If you only want to accept card payments, you can simply follow the\nsteps within this documentation to begin accepting cards with Sources.\n\nHowever, accepting other methods of payment through Sources (for example,\n[iDEAL](https://docs.stripe.com/sources/ideal), [SEPA Direct\nDebit](https://docs.stripe.com/sources/sepa-debit), and so on) requires\nadditional steps, making the use of webhooks necessary. You can refer to our\n[best practices](https://docs.stripe.com/sources/best-practices) for developing\na flexible checkout flow that supports different payment methods.\n\n[Create a Source object](https://docs.stripe.com/sources/cards#create-source)\nTo create a card Source client-side, please refer to [Accept a\npayment](https://docs.stripe.com/payments/accept-a-payment-charges#web-create-token).\nYou then create a `Source` object instead of a Token by calling the\n`createSource` instead of the `createToken` method.\n\nYou can also provide an optional\n[owner](https://docs.stripe.com/api#create_source-owner) dictionary containing\nadditional cardholder information, such as their name and full billing address.\n\n```\n// Create a source or display an error when the form is submitted.\nconst form = document.getElementById('payment-form');\nconst ownerInfo = {\n owner: {\n name: 'Jenny Rosen',\n address: {\n line1: 'Nollendorfstraße 27',\n city: 'Berlin',\n postal_code: '10777',\n country: 'DE',\n },\n email: 'jenny.rosen@example.com'\n },\n};\nform.addEventListener('submit', async (event) => {\n event.preventDefault();\n\n const {source, error} = await stripe.createSource(card, ownerInfo);\n\n if (error) {\n // Inform the user if there was an error\n const errorElement = document.getElementById('card-errors');\n errorElement.textContent = error.message;\n } else {\n // Send the source to your server\n stripeSourceHandler(source);\n }\n});\n```\n\nIf your Elements payment form collects a billing postal code, it’s used as the\nvalue for the `owner` field `address[postal_code]` during source creation. This\nalso overrides any value that is being provided separately as part of `owner`.\nIf you are already collecting your customer’s billing postal code elsewhere on\nyour checkout page, we recommend including it as part of `owner` and hiding the\nElements postal code field—set the [Element\noption](https://docs.stripe.com/js/elements_object/create_element?type=card#elements_create-options-hidePostalCode)\nof `hidePostalCode` to **true**.\n\nThe last steps of the [Accept a\npayment](https://docs.stripe.com/payments/accept-a-payment-charges#web-submit-payment)\nguide remain similar and consist of submitting the source, along with any\nadditional information that has been collected, to your server.\n\n```\nconst stripeSourceHandler = (source) => {\n // Insert the source ID into the form so it gets submitted to the server\n const form = document.getElementById('payment-form');\n const hiddenInput = document.createElement('input');\n hiddenInput.setAttribute('type', 'hidden');\n hiddenInput.setAttribute('name', 'stripeSource');\n hiddenInput.setAttribute('value', source.id);\n form.appendChild(hiddenInput);\n\n // Submit the form\n form.submit();\n}\n```\n\nWhen the source is created, its status immediately changes to `chargeable`. No\nadditional customer action is needed so the source can be used right away.\nInformation about the card is provided within the\n[card](https://docs.stripe.com/api#cards) subhash.\n\n```\n{\n \"id\": \"src_1AhIN74iJb0CbkEwmbRYPsd4\",\n \"object\": \"source\",\n \"amount\": null,\n \"client_secret\": \"src_client_secret_sSPHZ17iQG6j9uKFdAYqPErO\",\n \"created\": 1500471469,\n \"currency\": null,\n \"flow\": \"none\",\n \"livemode\": false,\n \"metadata\": {\n```\n\nSee all 47 lines\nAs card payments are a pull-based payment method, there is no movement of funds\nduring the creation of a source. Only when a successful charge request has been\nmade is the customer’s card debited and you receive the funds.\n\n### Source creation in mobile applications\n\nIf you’re building an iOS or Android app, you can implement sources using our\nmobile SDKs. Refer to our sources documentation for\n[iOS](https://docs.stripe.com/mobile/ios/sources) or\n[Android](https://docs.stripe.com/mobile/android/sources) to learn more.\n\n[Charge the Source](https://docs.stripe.com/sources/cards#charge-request)\nAfter creating a card Source, and before creating a charge request to complete\nthe payment, attach it to a [Customer](https://docs.stripe.com/api#customers)\nfor later reuse.\n\n### Attaching the Source to a Customer\n\nAttaching the Source to a [Customer](https://docs.stripe.com/api/customers) is\nrequired for you to reuse it for future payments. Please refer to our [Sources &\nCustomers](https://docs.stripe.com/sources/customers) guide for more details on\nhow to attach Sources to new or existing Customers and how the two objects\ninteract together. The following snippet attaches the Source to a new Customer:\n\n```\ncurl https://api.stripe.com/v1/customers \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n --data-urlencode email=\"paying.user@example.com\" \\\n -d source=src_18eYalAHEMiOZZp1l9ZTjSU0\n```\n\n### Making a charge request to finalize the payment\n\nOnce attached, you can use the `Source` object’s ID along with the `Customer`\nobject’s ID to perform a charge request and finalize the payment.\n\n```\ncurl https://api.stripe.com/v1/charges \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d amount=\"1000\" \\\n -d currency=\"usd\" \\\n -d customer=cus_AFGbOSiITuJVDs \\\n -d source=src_18eYalAHEMiOZZp1l9ZTjSU0\n```\n\nA card source must be used within a few minutes of its creation as CVC\ninformation is only available for a short amount of time. Card sources do not\nexpire, but using them after a delay can result in a charge request that is\nperformed without CVC information. The consequences of this can be higher\ndecline rates and increased risk of fraud.\n\nAlthough the status of the source is `chargeable`, this does not mean that the\npayment is going to be successful. A charge request can still fail if the\ncustomer’s card issuer [declines](https://docs.stripe.com/declines) the payment.\n\n[Confirm that the charge has\nsucceeded](https://docs.stripe.com/sources/cards#charge-confirmation)\nCard payments are a\n[synchronous](https://docs.stripe.com/sources#synchronous-or-asynchronous-confirmation)\nmethod so confirmation of the charge’s status happens in real-time.\n\nYour integration immediately receives the result of the charge request—either a\n[Charge](https://docs.stripe.com/api#charges) object upon success or an\nexception upon failure. Once the charge has been confirmed as successful, the\npayment has been successfully completed and you can notify your customer and\nfulfill the order.\n\nIf you’re making use of [webhooks](https://docs.stripe.com/webhooks), your\nintegration also receives either of the following events:\n\nEventDescription`charge.succeeded`The charge succeeded and the payment is\ncomplete.`charge.failed`The charge has failed and the payment could not be\ncompleted.\n### Disputed payments\n\nCard networks provide a process for cardholders to\n[dispute](https://docs.stripe.com/disputes) payments made with their card. A\ndispute can be filed by the cardholder any time after a payment has been\nsuccessful. It is still possible for a successful payment to be reversed if the\ncard issuer investigates a dispute and decides it should be refunded.\n\nDisputes can be made for a variety of reasons. As such, you should make the\nappropriate decisions regarding your business and how you manage disputes, if\nthey occur, and how to avoid them completely.\n\n### Updating a card source expiration date\n\nYou can update the `card[exp_month]` and `card[exp_year]` attributes of card\nsources, allowing you to update their expiration date:\n\n```\ncurl https://api.stripe.com/v1/sources/src_18cPLvAHEMiOZZp1YBngt6En \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d currency=usd \\\n -d \"card[exp_month]\"=11 \\\n -d \"card[exp_year]\"=2022\n```\n\n## See also\n\n- [Declines & failed payments](https://docs.stripe.com/declines)\n- [Other supported payment methods](https://docs.stripe.com/sources)\n- [Sources API reference](https://docs.stripe.com/api#sources)\n- [Best practices](https://docs.stripe.com/sources/best-practices)\n\n## Links\n\n- [Payment Intents API](https://docs.stripe.com/payments/payment-intents)\n- [Dynamic 3D\nSecure](https://docs.stripe.com/payments/3d-secure/authentication-flow#three-ds-radar)\n- [Strong Customer\nAuthentication](https://docs.stripe.com/strong-customer-authentication)\n- [Accept a payment](https://docs.stripe.com/payments/accept-a-payment)\n- [Sources](https://docs.stripe.com/sources)\n- [pull](https://docs.stripe.com/sources#pull-or-push-of-funds)\n- [reusable](https://docs.stripe.com/sources#single-use-or-reusable)\n-\n[synchronous](https://docs.stripe.com/sources#synchronous-or-asynchronous-confirmation)\n- [Stripe.js and Elements](https://docs.stripe.com/payments/elements)\n- [PCI compliant](https://stripe.com/guides/pci-compliance)\n- [Source](https://docs.stripe.com/api#sources)\n- [tokens](https://docs.stripe.com/api/tokens)\n- [webhooks](https://docs.stripe.com/webhooks)\n- [iDEAL](https://docs.stripe.com/sources/ideal)\n- [SEPA Direct Debit](https://docs.stripe.com/sources/sepa-debit)\n- [best practices](https://docs.stripe.com/sources/best-practices)\n- [Accept a\npayment](https://docs.stripe.com/payments/accept-a-payment-charges#web-create-token)\n- [owner](https://docs.stripe.com/api#create_source-owner)\n- [Element\noption](https://docs.stripe.com/js/elements_object/create_element?type=card#elements_create-options-hidePostalCode)\n- [Accept a\npayment](https://docs.stripe.com/payments/accept-a-payment-charges#web-submit-payment)\n- [card](https://docs.stripe.com/api#cards)\n- [iOS](https://docs.stripe.com/mobile/ios/sources)\n- [Android](https://docs.stripe.com/mobile/android/sources)\n- [Customer](https://docs.stripe.com/api#customers)\n- [Customer](https://docs.stripe.com/api/customers)\n- [Sources & Customers](https://docs.stripe.com/sources/customers)\n- [declines](https://docs.stripe.com/declines)\n- [Charge](https://docs.stripe.com/api#charges)\n- [dispute](https://docs.stripe.com/disputes)",
  "metadata": {
    "title": "Card payments with Sources | Stripe Documentation",
    "description": "Use Sources to accept card payments from around the world.",
    "sourceURL": "https://docs.stripe.com/sources/cards"
  }
}