{
  "content": "# SettingsView component for Stripe Apps\n\n## Let users change details about how the app works with their account.\n\nSDK version8.x9.x\nYou can define a specialized settings view to let users change specific details\nabout how the app works with their account. For example, an app that uses a\nthird-party API like Zendesk could use `SettingsView` to authorize a user with\ntheir Zendesk account. For more details, learn how to [add a settings\npage](https://docs.stripe.com/stripe-apps/app-settings) for your app.\n\n!\n\nWhat SettingsView looks like\n\n`SettingsView` is a view root component, just like `ContextView`, containing all\nother UI elements. It’s the only view that isn’t tied to a specific object, but\ntied instead to the `settings` viewport. The `settings` viewport maps to\npredefined locations in the Dashboard, outside of the app drawer.\n\n`SettingsView` renders on the app settings page in the Dashboard after you\nupload an app. While previewing your app locally, you can preview the\n`SettingsView` in the Dashboard at\n[https://dashboard.stripe.com/apps/settings-preview](https://dashboard.stripe.com/apps/settings-preview).\n\nTo use `SettingsView`, you must add a view with the `settings` viewport to your\napp manifest. An application with a settings view would have an app manifest\nwith a `ui_extension` field that would look something like this:\n\n```\n{\n ...,\n \"ui_extension\": {\n \"views\": [\n ...,\n {\n \"viewport\": \"settings\",\n \"component\": \"AppSettings\"\n }\n ],\n }\n}\n```\n\n### SettingsView props\n\nPropertyType\n`children`\n\nRequired\n`React.ReactNode`\n\nThe contents of the component.\n\n`onSave`\n\nOptional\n`((values: { [x: string]: string; }) => void) | undefined`\n\nIf provided, a “Save” `Button` will be rendered with the `SettingsView`. This\ncallback will be called when the `Button` is clicked.\n\n`statusMessage`\n\nOptional\n`string | undefined`\n\nA string to display a status such as “Saved” or “Error” in the header of the\nview.\n\n## Example\n\nThis example shows how to fetch settings from an external API, display them, and\nsave changes.\n\n```\nimport React from 'react';\nimport {ExtensionContextValue} from '@stripe/ui-extension-sdk/context';\nimport {Box, SettingsView, TextField} from '@stripe/ui-extension-sdk/ui';\n\ntype FormStatus = 'initial' | 'saving' | 'saved' | 'error';\n\nconst AppSettings = ({userContext}: ExtensionContextValue) => {\n const [storedValue, setStoredValue] = React.useState<string>('');\n const [status, setStatus] = React.useState<FormStatus>('initial');\n\n // use the current user id to retrieve the stored value from an external api\n const key = userContext.id;\n\n React.useEffect(() => {\n if (!key) {\n return;\n }\n\n const fetchSetting = async (key: string) => {\n try {\n const response = await fetch(`https://www.my-api.com/${key}`);\n const storedSettingValue = await response.text();\n if (storedSettingValue) {\n setStoredValue(storedSettingValue);\n }\n } catch (error) {\n console.log('Error fetching setting: ', error);\n }\n };\n fetchSetting(key);\n }, [key]);\n\n const saveSettings = React.useCallback(async (values) => {\n setStatus('saving');\n try {\n const {greeting} = values;\n const result = await fetch('https://www.my-api.com/', {\n method: 'POST',\n body: JSON.stringify(values),\n });\n await result.text();\n setStatus('saved');\n setStoredValue(greeting);\n } catch (error) {\n console.error(error);\n setStatus('error');\n }\n }, []);\n\n const getStatusLabel = React.useCallback(() => {\n switch (status) {\n case 'saving':\n return 'Saving...';\n case 'saved':\n return 'Saved!';\n case 'error':\n return 'Error: There was an error saving your settings.';\n case 'initial':\n default:\n return '';\n }\n }, [status]);\n const statusLabel = getStatusLabel();\n\n return (\n <SettingsView onSave={saveSettings} statusMessage={statusLabel}>\n <Box\n css={{\n padding: 'medium',\n backgroundColor: 'container',\n }}\n >\n <Box\n css={{\n font: 'lead',\n }}\n >\n Please enter a greeting\n </Box>\n <Box\n css={{\n marginBottom: 'medium',\n font: 'caption',\n }}\n >\n Saved value: {storedValue || 'None'}\n </Box>\n <TextField\n name=\"greeting\"\n type=\"text\"\n label=\"Greeting:\"\n size=\"medium\"\n />\n </Box>\n </SettingsView>\n );\n};\n```\n\n## See also\n\n- [Design patterns to follow](https://docs.stripe.com/stripe-apps/patterns)\n- [Style your app](https://docs.stripe.com/stripe-apps/style)\n- [UI testing](https://docs.stripe.com/stripe-apps/ui-testing)\n\n## Links\n\n- [add a settings page](https://docs.stripe.com/stripe-apps/app-settings)\n-\n[https://dashboard.stripe.com/apps/settings-preview](https://dashboard.stripe.com/apps/settings-preview)\n- [Design patterns to follow](https://docs.stripe.com/stripe-apps/patterns)\n- [Style your app](https://docs.stripe.com/stripe-apps/style)\n- [UI testing](https://docs.stripe.com/stripe-apps/ui-testing)",
  "metadata": {
    "title": "SettingsView component for Stripe Apps | Stripe Documentation",
    "description": "Let users change details about how the app works with their account.",
    "sourceURL": "https://docs.stripe.com/stripe-apps/components/settingsview"
  }
}