{
  "content": "# TextField component for Stripe Apps\n\n## Use TextField to create a text input field.\n\nSDK version8.x9.x\nTo add the `TextField` component to your app:\n\n```\nimport {TextField} from '@stripe/ui-extension-sdk/ui';\n```\n\nLoading example...\n```\n<TextField\n label=\"Business name\"\n placeholder=\"Acme Inc…\"\n onChange={(e) => {\n console.log(e.target.value);\n }}\n/>\n```\n\n### TextField props\n\nPropertyType\n`autoComplete`\n\nOptional\n`string | undefined`\n\nSpecifies one of the possible autocomplete behaviors.\n\n`autoFocus`\n\nOptional\n`boolean | undefined`\n\nIf `true`, React will focus the element on mount.\n\n`css`\n\nOptional\n`Object`\n\nRelated types:\n[CSS](https://docs.stripe.com/stripe-apps/components/textfield#css).\n\n`defaultValue`\n\nOptional\n`string | undefined`\n\nSpecifies the initial value that a user can change.\n\n`description`\n\nOptional\n`string | undefined`\n\nDescriptive text that will be rendered adjacent to the control’s label.\n\n`disabled`\n\nOptional\n`boolean | undefined`\n\nSets whether or not the element should be disabled. Prevents selection.\n\n`error`\n\nOptional\n`string | undefined`\n\nError text that will be rendered below the control.\n\n`form`\n\nOptional\n`string | undefined`\n\nSpecifies the `id` of the `<form>` this input belongs to. If omitted, it’s the\nclosest parent form.\n\n`hiddenElements`\n\nOptional\n`(\"label\" | \"description\" | \"error\")[] | undefined`\n\nVisually hides the specified elements. The hidden elements will still be present\nand visible to screen readers.\n\n`invalid`\n\nOptional\n`boolean | undefined`\n\nSets whether or not the element is in an invalid state. This is a display-only\nprop, and will not prevent form submission.\n\n`label`\n\nOptional\n`React.ReactNode`\n\nText that describes the control. Will be both visible and clickable.\n\n`maxLength`\n\nOptional\n`number | undefined`\n\nSpecifies the maximum length of text.\n\n`minLength`\n\nOptional\n`number | undefined`\n\nSpecifies the minimum length of text.\n\n`name`\n\nOptional\n`string | undefined`\n\nSpecifies the name for this input that’s submitted with the form.\n\n`onChange`\n\nOptional\n`((event: React.ChangeEvent<HTMLInputElement>) => void) | undefined`\n\nRequired for controlled inputs. Fires immediately when the input’s value is\nchanged by the user (for example, it fires on every keystroke). Behaves like the\nbrowser input event.\n\n`onKeyDown`\n\nOptional\n`((event: React.KeyboardEvent<HTMLInputElement>) => void) | undefined`\n\nFires when a key is pressed.\n\n`onKeyUp`\n\nOptional\n`((event: React.KeyboardEvent<HTMLInputElement>) => void) | undefined`\n\nFires when a key is released.\n\n`placeholder`\n\nOptional\n`string | undefined`\n\nDisplayed in a dimmed color when the input value is empty.\n\n`readOnly`\n\nOptional\n`boolean | undefined`\n\nIf `true`, the input is not editable by the user.\n\n`required`\n\nOptional\n`boolean | undefined`\n\nIf `true`, the value must be provided for the form to submit.\n\n`size`\n\nOptional\n`(\"small\" | \"medium\" | \"large\") | undefined`\n\nThe size of the component.\n\n`spellCheck`\n\nOptional\n`boolean | \"true\" | \"false\" | undefined`\n\nIf explicitly set to `true` or `false`, enables or disables spellchecking.\n\n`tabIndex`\n\nOptional\n`number | undefined`\n\nOverrides the default tab key behavior. Avoid using values other than `-1` and\n`0`.\n\n`type`\n\nOptional\n`(\"number\" | \"text\" | \"search\" | \"tel\" | \"url\" | \"email\" | \"password\") |\nundefined`\n\nChoose between the text-alike types on an input.\n\n`value`\n\nOptional\n`string | undefined`\n\nControls the input’s text. When you pass this prop, you must also pass an\n`onChange` handler that updates the passed value.\n\n`onKeyPress`\n\nOptionalDeprecated\n`((event: React.KeyboardEvent<HTMLInputElement>) => void) | undefined`\n\n### CSS\n\nPropertyType\n`width`\n\nOptional\n`(number | \"auto\" | \"fill\" | \"min\" | \"max\" | \"fit\" | \"1/2\" | \"1/3\" | \"2/3\" |\n\"1/4\" | \"2/4\" | \"3/4\" | \"1/5\" | \"2/5\" | \"3/5\" | \"4/5\" | \"1/6\" | \"2/6\" | \"3/6\" |\n\"4/6\" | \"5/6\" | \"1/12\" | \"2/12\" | \"3/12\" | \"4/12\" | \"5/12\" | \"6/12\" | \"7/12\" |\n\"8/12\" | \"9/12\" | \"10/12\" | \"11/12\") | undefined`\n\nThe width of the component. See\n[Sizing](https://docs.stripe.com/stripe-apps/style#sizing) for details.\n\n## Invalid\n\nYou can set `invalid` on a TextField element to render the component with a red\noutline as a visual indicator that the value provided isn’t acceptable. Omitting\nthis property defaults to `false`.\n\nLoading example...\n```\n<TextField label=\"Current year\" defaultValue=\"1892\" invalid />\n```\n\n## Type\n\nYou can set the `type` property for the TextField to render it differently\ndepending on the type of text value expected. This is similar to the type\nattribute on an `<input />`, but is restricted to types that allow text.\nOmitting this property defaults to `text`.\n\nLoading example...\n```\n<TextField label=\"Text\" type=\"text\" />\n<TextField label=\"Password\" type=\"password\" />\n<TextField label=\"Search\" type=\"search\" />\n<TextField label=\"Number\" type=\"number\" />\n```\n\n## Size\n\nChanging the `size` allows you to choose variants with slightly more or slightly\nless room than the default. In general you don’t want to mix and match different\nsizes within the same form. The default is `medium`.\n\nLoading example...\n```\n<TextField label=\"Small\" size=\"small\" />\n<TextField label=\"Medium\" size=\"medium\" />\n<TextField label=\"Large\" size=\"large\" />\n```\n\n## Disabled and read only\n\nYou can mark a field as `disabled`, which prevents any interaction and changes\nthe styling. Disabled means that no data from that form element is submitted\nwhen the form is submitted.\n\nYou can also make a field as `readOnly`. Read-only means any data from within\nthe element will be submitted, but the user can’t change it.\n\nLoading example...\n```\n<TextField label=\"Disabled\" defaultValue=\"Field is disabled\" disabled />\n<TextField label=\"Readonly\" defaultValue=\"Field is readonly\" readOnly />\n```\n\n## State management\n\nUse the `TextField` component as an [uncontrolled\ninput](https://docs.stripe.com/stripe-apps/how-ui-extensions-work#use-uncontrolled-components-for-interactions):\n\nLoading example...\n```\n<TextField\n onChange={(e) => {\n console.log(e);\n }}\n label=\"First name\"\n/>\n```\n\n## Width\n\nSet the width of a `TextField` component using [the available\nvalues](https://docs.stripe.com/stripe-apps/style#sizing) with the `css` prop:\n\nLoading example...\n```\n<TextField label=\"Search\" type=\"search\" css={{width: 'fill'}} />\n```\n\n## See also\n\n- [Design patterns to follow](https://docs.stripe.com/stripe-apps/patterns)\n- [Style your app](https://docs.stripe.com/stripe-apps/style)\n- [UI testing](https://docs.stripe.com/stripe-apps/ui-testing)\n\n## Links\n\n- [Sizing](https://docs.stripe.com/stripe-apps/style#sizing)\n- [uncontrolled\ninput](https://docs.stripe.com/stripe-apps/how-ui-extensions-work#use-uncontrolled-components-for-interactions)\n- [Design patterns to follow](https://docs.stripe.com/stripe-apps/patterns)\n- [Style your app](https://docs.stripe.com/stripe-apps/style)\n- [UI testing](https://docs.stripe.com/stripe-apps/ui-testing)",
  "metadata": {
    "title": "TextField component for Stripe Apps | Stripe Documentation",
    "description": "Use TextField to create a text input field.",
    "sourceURL": "https://docs.stripe.com/stripe-apps/components/textfield"
  }
}