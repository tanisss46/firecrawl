{
  "content": "using the link in the code editor.\n\nTerminalBundlerGitHub\nInstall the gem:\n\n`gem install stripe`Server\n### Manage Products, Prices, and Customers\n\nFirst, create a price for your product in the\n[Dashboard](https://docs.stripe.com/invoicing/products-prices) or through the\n[API](https://docs.stripe.com/api/prices/create). After you create a price and\nassociate it with a product, store its ID in your database.\n\nNext, look up a [Customer](https://docs.stripe.com/api/customers) in your\ndatabase by\n[email](https://docs.stripe.com/api/customers/object?lang=dotnet#customer_object-email).\nIf that customer doesn’t exist, create the `Customer` and store their ID for\nfuture purchases. The next step, for example, uses the\n[id](https://docs.stripe.com/api/customers/object#customer_object-id) of\n[Customer object](https://docs.stripe.com/api/customers/object) to create an\ninvoice.\n\n#### Note\n\nThe `Customer` object represents the customer purchasing your product. It’s\nrequired for creating an invoice.\n\nServer2Create an Invoice item and Invoice\n### Create an Empty Invoice\n\nSet the\n[collection_method](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method)\nattribute to `send_invoice`. For Stripe to mark an invoice as past due, you must\nadd the\n[days_until_due](https://docs.stripe.com/api/invoices/create#create_invoice-days_until_due)\nparameter. When you send an invoice, Stripe emails the invoice to the customer\nwith payment instructions.\n\n#### Note\n\nThe other available collection method is `charge_automatically`. When charging\nautomatically, Stripe attempts to immediately pay the invoice using the default\nsource that’s attached to the customer. Here, we use `send_invoice` to prevent\nan immediate, undesired customer charge.\n\nServer\n### Create an Invoice Item\n\nCreate an invoice item by passing in the customer `id`, product `price`, and\ninvoice ID `invoice`.\n\nThe maximum number of invoice items is 250.\n\n#### Note\n\nIf invoice items are created before an invoice is created, set the\n[pending_invoice_items_behavior](https://docs.stripe.com/api/invoices/create#create_invoice-pending_invoice_items_behavior)\nto `include` when creating the invoice so that all pending invoice items are\nautomatically added to the invoice. In this case, only add invoice items to a\nsingle customer at a time to avoid adding them to the wrong customer.\n\nCreating an invoice adds up to 250 pending invoice items with the remainder to\nbe added on the next invoice. To see your customer’s pending invoice items, see\nthe **Customer details** page or set the\n[pending](https://docs.stripe.com/api/invoiceitems/list#list_invoiceitems-pending)\nattribute to `true` when you use the API to list all of the invoice items.\n\nServer3Send an Invoice\nSend the invoice to the email address associated with the customer. As soon as\nyou send an invoice, Stripe finalizes it. Many jurisdictions consider finalized\ninvoices a legal document making certain fields unalterable. If you send\ninvoices that have already been paid, there’s no reference to the payment in the\nemail.\n\nWith any finalized invoice, you can either download and send a\n[PDF](https://docs.stripe.com/api/invoices/object#invoice_object-invoice_pdf) or\n[link](https://docs.stripe.com/api/invoices/object#invoice_object-hosted_invoice_url)\nto the associated [Hosted Invoice\nPage](https://docs.stripe.com/invoicing/hosted-invoice-page).\n\nServer\n## Congratulations!\n\nYou’ve created and sent your first invoice. Take your integration further and\nlearn how to quickly automate tax collection through the API.\n\n### Automate tax collection\n\nCalculate and collect the right amount of tax on your Stripe transactions. Learn\nmore about [Stripe Tax](https://docs.stripe.com/tax), and how to [activate\nit](https://dashboard.stripe.com/settings/tax/activate) in the Dashboard before\nyou integrate it.\n\n## Next steps\n\n#### [Use incoming webhooks to get real-time updates](https://docs.stripe.com/webhooks)\n\nListen for events on your Stripe account so your integration can automatically\ntrigger reactions.\n\n#### [Customize invoices](https://docs.stripe.com/invoicing/customize)\n\nYou can use the [Invoice\ntemplate](https://dashboard.stripe.com/account/billing/invoice) to customize\n​​the content of an invoice. You can also set a customer preferred language and\ninclude public information in your [account\ndetails](https://dashboard.stripe.com/settings/account/?support_details=true).\n\n#### [Invoicing API](https://docs.stripe.com/api/invoices)\n\nLearn more about the Invoicing API.\n\n#### [Stripe CLI](https://docs.stripe.com/stripe-cli)\n\nThe Stripe CLI has several commands that can help you test your Stripe\napplication beyond invoicing.\n\nserver.rbwebhook.rbDownload\n```\n# Create and send an invoice\nCreate and send a Stripe-hosted invoice in minutes.\n## Running the sample\n1. Build the server\n~~~bundle install~~~\n2. Run the server\n~~~ruby server.rb -o 0.0.0.0~~~\n\n## Testing the webhook\nUse the Stripe CLI to test your webhook locally. Download [the\nCLI](https://github.com/stripe/stripe-cli) and log in with your Stripe account.\nAlternatively, use a service like ngrok to make your local endpoint publicly\naccessible.\nSet up event forwarding with the CLI to send all Stripe events in test mode to\nyour local webhook endpoint.\n~~~stripe listen --forward-to localhost:4242/webhook~~~\nUse the CLI to simulate specific events that test your webhook application logic\nby sending a POST request to your webhook endpoint with a mocked Stripe event\nobject.\n~~~stripe trigger payment_intent.succeeded~~~\n```\n\n## Links\n\n- [text version of this\nguide](https://docs.stripe.com/payments/accept-a-payment)\n- [View the text-based guide](https://docs.stripe.com/invoicing/integration)\n- [no-code options](https://docs.stripe.com/no-code)\n- [our partners](https://stripe.partners)\n- [Dashboard](https://docs.stripe.com/invoicing/products-prices)\n- [API](https://docs.stripe.com/api/prices/create)\n- [Customer](https://docs.stripe.com/api/customers)\n-\n[email](https://docs.stripe.com/api/customers/object?lang=dotnet#customer_object-email)\n- [id](https://docs.stripe.com/api/customers/object#customer_object-id)\n- [Customer object](https://docs.stripe.com/api/customers/object)\n-\n[collection_method](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method)\n-\n[days_until_due](https://docs.stripe.com/api/invoices/create#create_invoice-days_until_due)\n-\n[pending_invoice_items_behavior](https://docs.stripe.com/api/invoices/create#create_invoice-pending_invoice_items_behavior)\n-\n[pending](https://docs.stripe.com/api/invoiceitems/list#list_invoiceitems-pending)\n- [PDF](https://docs.stripe.com/api/invoices/object#invoice_object-invoice_pdf)\n-\n[link](https://docs.stripe.com/api/invoices/object#invoice_object-hosted_invoice_url)\n- [Hosted Invoice Page](https://docs.stripe.com/invoicing/hosted-invoice-page)\n- [Stripe Tax](https://docs.stripe.com/tax)\n- [activate it](https://dashboard.stripe.com/settings/tax/activate)\n- [Use incoming webhooks to get real-time\nupdates](https://docs.stripe.com/webhooks)\n- [Customize invoices](https://docs.stripe.com/invoicing/customize)\n- [Invoice template](https://dashboard.stripe.com/account/billing/invoice)\n- [account\ndetails](https://dashboard.stripe.com/settings/account/?support_details=true)\n- [Invoicing API](https://docs.stripe.com/api/invoices)\n- [Stripe CLI](https://docs.stripe.com/stripe-cli)",
  "metadata": {
    "title": "Create and send an invoice | Stripe Documentation",
    "description": "Build an example Invoicing integration.",
    "sourceURL": "https://docs.stripe.com/invoicing/integration/quickstart"
  }
}