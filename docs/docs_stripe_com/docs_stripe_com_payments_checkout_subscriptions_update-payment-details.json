{
  "content": "# Update payment details\n\n## Learn how to update the payment method used for future invoices.\n\nUse the following steps to create a Checkout page that collects your customer’s\npayment details and returns a Payment Method. Then use the Stripe REST APIs to\nupdate the payment method used for future\n[invoices](https://docs.stripe.com/api/invoices).\n\n#### Note\n\nThis guide uses Checkout to update subscription payment methods. You can instead\nimplement the [Billing customer\nportal](https://docs.stripe.com/customer-management) to provide a Stripe-hosted\ndashboard for your customers to manage their subscriptions and billing details.\n\n[Set up\nStripeServer-side](https://docs.stripe.com/payments/checkout/subscriptions/update-payment-details#web-setup)\nFirst, you need a Stripe account. [Register\nnow](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n```\n# Available as a gem\nsudo gem install stripe\n```\n\n```\n# If you use bundler, you can add this line to your Gemfile\ngem 'stripe'\n```\n\n[Create a Checkout\nSessionServer-side](https://docs.stripe.com/payments/checkout/subscriptions/update-payment-details#create-checkout-session)\nTo create a setup mode Session, use the `mode` parameter with a value of `setup`\nwhen creating the Session. See the [Checkout Session API\nreference](https://docs.stripe.com/api/checkout/sessions/create) for a complete\nlist of parameters that you can use for Session creation.\n\nAppend the `{CHECKOUT_SESSION_ID}` template variable to the `success_url` to get\naccess to the Session ID after your customer successfully completes a Checkout\nSession.\n\nFinally, use the\n[setup_intent_data.metadata](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-setup_intent_data-metadata)\ndictionary to pass your customer’s existing Stripe `subscription_id` to the\nCheckout Session. Note that there other ways to pass this data to your server,\nbut we’ll use metadata for this guide.\n\n```\ncurl https://api.stripe.com/v1/checkout/sessions \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"payment_method_types[]\"=\"card\" \\\n -d \"mode\"=\"setup\" \\\n -d \"customer\"=\"cus_FOsk5sbh3ZQpAU\" \\\n -d \"setup_intent_data[metadata][subscription_id]\"=\"sub_8epEF0PuRhmltU\" \\\n-d \"success_url\"=\"https://example.com/success?session_id={CHECKOUT_SESSION_ID}\"\n\\\n -d \"cancel_url\"=\"https://example.com/cancel\"\n```\n\n[Redirect to\nCheckoutClient-side](https://docs.stripe.com/payments/checkout/subscriptions/update-payment-details#redirect-checkout)\nCheckout relies on [Stripe.js](https://docs.stripe.com/payments/elements),\nStripe’s foundational JavaScript library for building payment flows.\n\nHTML + JSReact\nTo get started, include the following script tag on your website—always load it\ndirectly from **https://js.stripe.com**. You can’t include it in a bundle or\nhost it yourself. See [Stripe samples](https://github.com/stripe-samples) for\nexamples.\n\n```\nnpm install @stripe/stripe-js\n```\n\nNext, create an instance of the [Stripe\nobject](https://docs.stripe.com/js#stripe-function) by providing your\npublishable [API key](https://docs.stripe.com/keys) as the first parameter:\n\n```\nimport {loadStripe} from '@stripe/stripe-js';\n\nconst stripe = await loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n```\n\nTo use Checkout on your website, you must add a snippet of code that includes\nthe Session `id` from the [previous\nstep](https://docs.stripe.com/payments/checkout/subscriptions/update-payment-details#create-checkout-session).\nWhen your customer is ready to save or update their payment method, call\n[redirectToCheckout](https://docs.stripe.com/js#stripe-redirect-to-checkout) and\nprovide the Session `id` as a parameter.\n\n```\nconst checkoutButton = document.getElementById('checkout-button');\n\ncheckoutButton.addEventListener('click', () => {\n stripe.redirectToCheckout({\n // Make the id field from the Checkout Session creation API response\n // available to this file, so you can provide it as argument here\n // instead of the {{CHECKOUT_SESSION_ID}} placeholder.\n sessionId: '{{CHECKOUT_SESSION_ID}}'\n })\n // If `redirectToCheckout` fails due to a browser or network\n // error, display the localized error message to your customer\n // using `error.message`.\n});\n```\n\nThis code is typically invoked from an event handler that triggers in response\nto an action taken by your customer, such as clicking on a payment button.\n\n[Retrieve the Checkout\nSessionServer-side](https://docs.stripe.com/payments/checkout/subscriptions/update-payment-details#retrieve-checkout-session)\nAfter a customer successfully completes their Checkout Session, you need to\nretrieve the Session object. There are two ways to do this:\n\n- **Asynchronously**: Handle `checkout.session.completed`\n[webhooks](https://docs.stripe.com/webhooks), which contain a Session object.\nLearn more about [setting up webhooks](https://docs.stripe.com/webhooks).\n- **Synchronously**: Obtain the Session ID from the `success_url` when a user\nredirects back to your site. Use the Session ID to\n[retrieve](https://docs.stripe.com/api/checkout/sessions/retrieve) the Session\nobject.\n\n```\ncurl\nhttps://api.stripe.com/v1/checkout/sessions/cs_test_MlZAaTXUMHjWZ7DcXjusJnDU4MxPalbtL5eYrmS2GKxqscDtpJq8QM0k\n\\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\"\n```\n\nThe right choice depends on your tolerance for dropoff, as customers may not\nalways reach the `success_url` after a successful payment. It’s possible for\nthem close their browser tab before the redirect occurs. Handling webhooks\nprevents your integration from being susceptible to this form of dropoff.\n\nAfter you have retrieved the Session object, get the value of the `setup_intent`\nkey, which is the ID for the SetupIntent created during the Checkout Session. A\n[SetupIntent](https://docs.stripe.com/payments/setup-intents) is an object used\nto set up the customer’s bank account information for future payments.\n\nExample `checkout.session.completed` payload:\n\n```\n{\n \"id\": \"evt_1Ep24XHssDVaQm2PpwS19Yt0\",\n \"object\": \"event\",\n \"api_version\": \"2019-03-14\",\n \"created\": 1561420781,\n \"data\": {\n \"object\": {\n \"id\": \"cs_test_MlZAaTXUMHjWZ7DcXjusJnDU4MxPalbtL5eYrmS2GKxqscDtpJq8QM0k\",\n \"object\": \"checkout.session\",\n \"billing_address_collection\": null,\n \"client_reference_id\": null,\n \"customer\": \"cus_FOsk5sbh3ZQpAU\",\n \"customer_email\": null,\n \"display_items\": [],\n \"mode\": \"setup\",\n \"setup_intent\": \"seti_1EzVO3HssDVaQm2PJjXHmLlM\",\n \"submit_type\": null,\n \"subscription\": null,\n \"success_url\": \"https://example.com/success\"\n }\n },\n \"livemode\": false,\n \"pending_webhooks\": 1,\n \"request\": {\n \"id\": null,\n \"idempotency_key\": null\n },\n \"type\": \"checkout.session.completed\"\n}\n```\n\nNote the `setup_intent` ID for the next step.\n\n[Retrieve the\nSetupIntentServer-side](https://docs.stripe.com/payments/checkout/subscriptions/update-payment-details#retrieve-setup-intent)\nUsing the `setup_intent` ID, retrieve the SetupIntent object using the\n[/v1/setup_intents/:id](https://docs.stripe.com/api/setup_intents/retrieve)\nendpoint.\n\n```\ncurl https://api.stripe.com/v1/setup_intents/seti_1EzVO3HssDVaQm2PJjXHmLlM \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\"\n```\n\nExample response:\n\n```\n{\n \"id\": \"seti_1EzVO3HssDVaQm2PJjXHmLlM\",\n \"object\": \"setup_intent\",\n \"application\": null,\n \"cancellation_reason\": null,\n \"client_secret\": null,\n \"created\": 1561420781,\n \"customer\": \"cus_FOsk5sbh3ZQpAU\",\n \"description\": null,\n \"last_setup_error\": null,\n \"livemode\": false,\n \"metadata\": {\n \"subscription_id\": \"sub_8epEF0PuRhmltU\"\n },\n \"next_action\": null,\n \"on_behalf_of\": null,\n \"payment_method\": \"pm_1F0c9v2eZvKYlo2CJDeTrB4n\",\n \"payment_method_types\": [\n \"card\"\n ],\n \"status\": \"succeeded\",\n \"usage\": \"off_session\"\n}\n```\n\nNote the `customer` ID, `subscription_id`, and `payment_method` ID for the next\nsteps.\n\n#### Note\n\nIf you’re requesting this information synchronously from the Stripe API (as\nopposed to handling webhooks), you can combine the previous step with this step\nby [expanding](https://docs.stripe.com/api/expanding_objects) the SetupIntent\nobject in the request to the /v1/checkout/session endpoint. Doing this prevents\nyou from having to make two network requests to access the newly created\nPaymentMethod ID.\n\n[Set a default payment\nmethodServer-side](https://docs.stripe.com/payments/checkout/subscriptions/update-payment-details#set-default-payment-method)\nThere are two ways to ensure that a payment method is used for future invoices:\n\n- Set it as the Customer’s `invoice_settings.default_payment_method`\n- Set it as the Subscription’s `default_payment_method`\n\nSetting `invoice_settings.default_payment_method` on the Customer will cause all\nfuture invoices for that customer to be paid with the specified payment method.\n\nSetting `default_payment_method` on the Subscription will cause all future\ninvoices for that subscription to be paid with the specified payment method,\noverriding any `invoice_settings.default_payment_method` set on the associated\nCustomer.\n\n### Set invoice_settings.default_payment_method on the Customer\n\nUsing the customer ID and the PaymentMethod ID you retrieved, set the\n`invoice_settings.default_payment_method` for the Customer using the\n[/v1/customers/:id](https://docs.stripe.com/api/customers/update) endpoint.\n\n```\ncurl https://api.stripe.com/v1/customers/cus_FOsk5sbh3ZQpAU \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d \"invoice_settings[default_payment_method]\"=pm_1F0c9v2eZvKYlo2CJDeTrB4n\n```\n\nAll future invoices for this customer will now charge the new PaymentMethod\ncreated with the setup mode Checkout Session.\n\n### Set default_payment_method on the Subscription\n\nUsing the subscription ID and the PaymentMethod ID you retrieved, set the\n`default_payment_method` for the subscription using the\n[/v1/subscriptions/:id](https://docs.stripe.com/api/subscriptions/update)\nendpoint.\n\n```\ncurl https://api.stripe.com/v1/subscriptions/sub_8epEF0PuRhmltU \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -X \"POST\" \\\n -d \"default_payment_method\"=\"pm_1F0c9v2eZvKYlo2CJDeTrB4n\"\n```\n\nAll future invoices for this subscription will now charge the new PaymentMethod\ncreated with the setup mode Checkout Session, overriding any\n`invoice_settings.default_payment_method` set on the associated Customer.\n\n## See also\n\nCongrats! You can now set a default payment method for future invoices. When\ntesting your integration with your test API key, you can use a [test card\nnumber](https://docs.stripe.com/testing#cards) to ensure that it works\ncorrectly.\n\n- [Test Cards](https://docs.stripe.com/testing#cards)\n\n## Links\n\n- [invoices](https://docs.stripe.com/api/invoices)\n- [Billing customer portal](https://docs.stripe.com/customer-management)\n- [Register now](https://dashboard.stripe.com/register)\n- [Checkout Session API\nreference](https://docs.stripe.com/api/checkout/sessions/create)\n-\n[setup_intent_data.metadata](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-setup_intent_data-metadata)\n-\n[https://example.com/success?session_id={CHECKOUT_SESSION_ID}](https://example.com/success?session_id={CHECKOUT_SESSION_ID})\n- [https://example.com/cancel](https://example.com/cancel)\n- [Stripe.js](https://docs.stripe.com/payments/elements)\n- [Stripe samples](https://github.com/stripe-samples)\n- [Stripe object](https://docs.stripe.com/js#stripe-function)\n- [API key](https://docs.stripe.com/keys)\n- [redirectToCheckout](https://docs.stripe.com/js#stripe-redirect-to-checkout)\n- [webhooks](https://docs.stripe.com/webhooks)\n- [retrieve](https://docs.stripe.com/api/checkout/sessions/retrieve)\n- [SetupIntent](https://docs.stripe.com/payments/setup-intents)\n- [https://example.com/success](https://example.com/success)\n- [/v1/setup_intents/:id](https://docs.stripe.com/api/setup_intents/retrieve)\n- [expanding](https://docs.stripe.com/api/expanding_objects)\n- [/v1/customers/:id](https://docs.stripe.com/api/customers/update)\n- [/v1/subscriptions/:id](https://docs.stripe.com/api/subscriptions/update)\n- [test card number](https://docs.stripe.com/testing#cards)",
  "metadata": {
    "title": "Update payment details | Stripe Documentation",
    "description": "Learn how to update the payment method used for future invoices.",
    "sourceURL": "https://docs.stripe.com/payments/checkout/subscriptions/update-payment-details"
  }
}