{
  "content": "# Checkbox component for Stripe Apps\n\n## Use checkboxes to indicate or control boolean values.\n\nSDK version8.x9.x\nTo add the `Checkbox` component to your app:\n\n```\nimport {Checkbox} from '@stripe/ui-extension-sdk/ui';\n```\n\nLoading example...\n```\n<Checkbox\n label=\"This is a Checkbox.\"\n onChange={(e) => {\n console.log(e.target.checked);\n }}\n/>\n```\n\n`Checkbox` takes the following props, in addition to all the appropriate [native\nDOM\nattributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox).\n\n### Checkbox props\n\nPropertyType\n`autoFocus`\n\nOptional\n`boolean | undefined`\n\nIf `true`, React will focus the element on mount.\n\n`checked`\n\nOptional\n`boolean | undefined`\n\nControls whether the input is selected. When you pass this prop, you must also\npass an `onChange` handler that updates the passed value.\n\n`defaultChecked`\n\nOptional\n`boolean | undefined`\n\nSpecifies the initial value that a user can change.\n\n`description`\n\nOptional\n`string | undefined`\n\nDescriptive text that will be rendered adjacent to the control’s label.\n\n`disabled`\n\nOptional\n`boolean | undefined`\n\nSets whether or not the element should be disabled. Prevents selection.\n\n`error`\n\nOptional\n`string | undefined`\n\nError text that will be rendered below the control.\n\n`form`\n\nOptional\n`string | undefined`\n\nSpecifies the `id` of the `<form>` this input belongs to. If omitted, it’s the\nclosest parent form.\n\n`hiddenElements`\n\nOptional\n`(\"label\" | \"description\" | \"error\")[] | undefined`\n\nVisually hides the specified elements. The hidden elements will still be present\nand visible to screen readers.\n\n`indeterminate`\n\nOptional\n`boolean | undefined`\n\nSets whether the `Checkbox` should be rendered as indeterminate (“partially\nchecked”) or not. Note that this is purely visual, and will not change the\nactual `checked` state of the `Checkbox`. If a `Checkbox` is both\n`indeterminate` and `checked`, it will display as `indeterminate`.\n\n`invalid`\n\nOptional\n`boolean | undefined`\n\nSets whether or not the element is in an invalid state. This is a display-only\nprop, and will not prevent form submission.\n\n`label`\n\nOptional\n`React.ReactNode`\n\nText that describes the control. Will be both visible and clickable.\n\n`name`\n\nOptional\n`string | undefined`\n\nSpecifies the name for this input that’s submitted with the form.\n\n`onChange`\n\nOptional\n`((event: React.ChangeEvent<HTMLInputElement>) => void) | undefined`\n\nRequired for controlled inputs. Fires immediately when the input’s value is\nchanged by the user (for example, it fires on every keystroke). Behaves like the\nbrowser input event.\n\n`readOnly`\n\nOptional\n`boolean | undefined`\n\nIf `true`, the input is not editable by the user.\n\n`required`\n\nOptional\n`boolean | undefined`\n\nIf `true`, the value must be provided for the form to submit.\n\n`tabIndex`\n\nOptional\n`number | undefined`\n\nOverrides the default tab key behavior. Avoid using values other than `-1` and\n`0`.\n\n`value`\n\nOptional\n`string | undefined`\n\nControls the input’s text. When you pass this prop, you must also pass an\n`onChange` handler that updates the passed value.\n\nYou can set a `Checkbox` component to different states:\n\n- `indeterminate`\n- `disabled`\n- `invalid`\n\n## Indeterminate\n\nThe `Checkbox` component can be in an `indeterminate` state. This is useful when\nit represents the aggregated state of some other set of checkboxes, of which\nsome may be checked and some may not. Note that this property is purely visual,\nand does not affect the Checkbox’s underlying checked state.\n\nLoading example...\n```\nconst [checked1, setChecked1] = React.useState(false);\nconst [checked2, setChecked2] = React.useState(true);\n\nconst allChecked = checked1 && checked2;\n\nconst handleAggregateChange = () => {\n if (checked1 && checked2) {\n setChecked1(false);\n setChecked2(false);\n } else {\n setChecked1(true);\n setChecked2(true);\n }\n};\n\nreturn (\n <Box\n css={{\n stack: 'y',\n }}\n >\n <Checkbox\n label=\"This Checkbox is aggregating the state of the Checkboxes below it.\"\n checked={allChecked}\n indeterminate={checked1 !== checked2}\n onChange={handleAggregateChange}\n />\n <Checkbox\n label=\"Checkbox 1\"\n checked={checked1}\n onChange={(e) => {\n setChecked1(e.target.checked);\n }}\n />\n <Checkbox\n label=\"Checkbox 2\"\n checked={checked2}\n onChange={(e) => {\n setChecked2(e.target.checked);\n }}\n />\n </Box>\n)\n```\n\n## Disabled\n\n`Checkbox` can be `disabled`. This prevents changes.\n\nLoading example...\n```\n<Checkbox label=\"This Checkbox is disabled.\" defaultChecked disabled />\n<Checkbox disabled invalid label=\"This invalid Checkbox is disabled.\" />\n```\n\n## Invalid\n\nYou can mark a `Checkbox` component as `invalid`. This is a styling-only prop,\nuseful in form validation. It won’t prevent form submission.\n\nLoading example...\n```\n<Checkbox label=\"This Checkbox is in an invalid state.\" invalid />\n```\n\n## State management\n\nUse the `Checkbox` component as an [uncontrolled\ninput](https://docs.stripe.com/stripe-apps/how-ui-extensions-work#use-uncontrolled-components-for-interactions):\n\nLoading example...\n```\n<Checkbox\n onChange={(e) => {\n console.log(e.target.checked);\n }}\n defaultChecked\n label=\"This Checkbox is uncontrolled.\"\n/>\n```\n\n## See also\n\n- [Design patterns to follow](https://docs.stripe.com/stripe-apps/patterns)\n- [Style your app](https://docs.stripe.com/stripe-apps/style)\n- [UI testing](https://docs.stripe.com/stripe-apps/ui-testing)\n\n## Links\n\n- [native DOM\nattributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox)\n- [uncontrolled\ninput](https://docs.stripe.com/stripe-apps/how-ui-extensions-work#use-uncontrolled-components-for-interactions)\n- [Design patterns to follow](https://docs.stripe.com/stripe-apps/patterns)\n- [Style your app](https://docs.stripe.com/stripe-apps/style)\n- [UI testing](https://docs.stripe.com/stripe-apps/ui-testing)",
  "metadata": {
    "title": "Checkbox component for Stripe Apps | Stripe Documentation",
    "description": "Use checkboxes to indicate or control boolean values.",
    "sourceURL": "https://docs.stripe.com/stripe-apps/components/checkbox"
  }
}