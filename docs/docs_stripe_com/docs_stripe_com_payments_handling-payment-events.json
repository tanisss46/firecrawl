{
  "content": "# Triggering actions with webhooks\n\n## How to use webhooks to respond to offline payment events.\n\nA [webhook](https://docs.stripe.com/webhooks) is an HTTP endpoint that receives\nevents from Stripe.\n\nWebhooks allow you to be notified about payment events that happen outside of\nyour payment flow such as:\n\n- Successful payments (`payment_intent.succeeded`)\n- Disputed payments (`charge.dispute.created`)\n- Available balance in your Stripe account (`balance.available`)\n\nYou can use the Dashboard for one-off actions like refunding a payment or\nupdating a customer’s information, while webhooks help you scale your payments\nintegration and process large volumes of business-critical events.\n\n## Build your own webhook\n\nYou can build a webhook handler on your own server to manage all your offline\npayment flows. Start by exposing an endpoint that can receive requests from\nStripe and use the CLI to locally test your integration. Each request from\nStripe contains an [Event](https://docs.stripe.com/api/events/object) object\nwith a reference to the object on Stripe that was modified.\n\n[Create a webhook\nendpoint](https://docs.stripe.com/payments/handling-payment-events#create-webhook)\nAdd a new endpoint in your application. You can act on certain events by\nchecking the `type` field of the event object sent in the request body. Then you\ncan print to standard output to make sure your webhook is working.\n\nStart your server after adding the new endpoint.\n\n```\n# Set your secret key. Remember to switch to your live secret key in production.\n# See your keys here: https://dashboard.stripe.com/apikeys\nStripe.api_key = 'sk_test_BQokikJOvBiI2HlWgH4olfQ2'\n\nrequire 'stripe'\nrequire 'sinatra'\nrequire 'json'\n\n# Using the Sinatra framework\nset :port, 4242\n\npost '/webhook' do\n payload = request.body.read\n event = nil\n\n begin\n event = Stripe::Event.construct_from(\n JSON.parse(payload, symbolize_names: true)\n )\n rescue JSON::ParserError => e\n # Invalid payload\n status 400\n return\n end\n\n # Handle the event\n case event.type\n when 'payment_intent.succeeded'\n payment_intent = event.data.object # contains a Stripe::PaymentIntent\n puts 'PaymentIntent was successful!'\n when 'payment_method.attached'\n payment_method = event.data.object # contains a Stripe::PaymentMethod\n puts 'PaymentMethod was attached to a Customer!'\n # ... handle other event types\n else\n puts \"Unhandled event type: #{event.type}\"\n end\n\n status 200\nend\n```\n\n[Install and set up the Stripe\nCLI](https://docs.stripe.com/payments/handling-payment-events#install-cli)\n```\n# Install Homebrew to run this command: https://brew.sh/\nbrew install stripe/stripe-cli/stripe\n\n# Connect the CLI to your dashboard\nstripe login\n```\n\nFor additional install options, see [Get started with the Stripe\nCLI](https://docs.stripe.com/stripe-cli).\n\nAfter you have the Stripe CLI installed, run `stripe login` in the command line\nto generate a pairing code to link to your Stripe account. Press **Enter** to\nlaunch your browser and log in to your Stripe account to allow access. The\ngenerated API key is valid for 90 days. You can modify or delete the key under\n[API Keys](https://dashboard.stripe.com/apikeys) in the Dashboard.\n\n#### Note\n\nYou can create a project-specific configuration by including the\n[–project-name](https://docs.stripe.com/cli/login#login-project-name) flag when\nyou log in and when you run commands for that project.\n\nTest\n\n```\nstripe login\nYour pairing code is: humour-nifty-finer-magic\nPress Enter to open up the browser (^C to quit)\n```\n\nIf you want to use an existing API key, use the `--api-key` flag:\n\n```\nstripe login --api-key sk_test_BQokikJOvBiI2HlWgH4olfQ2\nYour pairing code is: humour-nifty-finer-magic\nPress Enter to open up the browser (^C to quit)\n```\n\n[Test your webhook\nlocally](https://docs.stripe.com/payments/handling-payment-events#use-cli)\nUse the CLI to forward events to your local webhook endpoint using the `listen`\ncommand.\n\nAssuming your application is running on port 4242, run:\n\n```\nstripe listen --forward-to http://localhost:4242/webhook\n```\n\nIn a different terminal tab, use the `trigger` CLI command to trigger a mock\nwebhook event.\n\n```\nstripe trigger payment_intent.succeeded\n```\n\nThe following event appears in your `listen` tab:\n\n```\n[200 POST] OK payment_intent.succeeded\n```\n\n“PaymentIntent was successful!” appears in the terminal tab your server is\nrunning.\n\n[OptionalCheck webhook\nsignature](https://docs.stripe.com/payments/handling-payment-events#signature-checking)[Deploy\nyour webhook\nendpoint](https://docs.stripe.com/payments/handling-payment-events#deploy-endpoint)\nWhen you’re ready to deploy your webhook endpoint to production you need to do\nthe following:\n\n- Use your [live mode API keys](https://docs.stripe.com/keys#test-live-modes)\nand not your test mode keys.\n- Configure your webhook endpoint in the Stripe Dashboard or with the API.\n\nTo configure your endpoint in the Dashboard, go to your [webhook\nsettings](https://dashboard.stripe.com/webhooks).\n\nClick **Add endpoint** and enter the URL of your endpoint, the Stripe API\nversion, and the specific events you want Stripe to send.\n\nReplace the webhook endpoint secret in your application with the new secret\nshown in the Dashboard view of your endpoint.\n\nYour application is now ready to accept live events. For more information on\nconfiguring your webhook endpoint, see the [Webhook\nEndpoint](https://docs.stripe.com/api/webhook_endpoints) API. For testing in\ntest mode, [see our Development guide](https://docs.stripe.com/webhooks).\n\n## Links\n\n- [webhook](https://docs.stripe.com/webhooks)\n- [Event](https://docs.stripe.com/api/events/object)\n- [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys)\n- [https://brew.sh/](https://brew.sh/)\n- [Get started with the Stripe CLI](https://docs.stripe.com/stripe-cli)\n- [–project-name](https://docs.stripe.com/cli/login#login-project-name)\n- [http://localhost:4242/webhook](http://localhost:4242/webhook)\n- [live mode API keys](https://docs.stripe.com/keys#test-live-modes)\n- [webhook settings](https://dashboard.stripe.com/webhooks)\n- [Webhook Endpoint](https://docs.stripe.com/api/webhook_endpoints)",
  "metadata": {
    "title": "Triggering actions with webhooks | Stripe Documentation",
    "description": "How to use webhooks to respond to offline payment events.",
    "sourceURL": "https://docs.stripe.com/payments/handling-payment-events"
  }
}