{
  "content": "# Authenticate with 3D Secure\n\n## Integrate 3D Secure (3DS) into your checkout flow.\n\n#### Caution\n\nMajor card brands no longer support 3D Secure 1. If your implementation uses 3D\nSecure 1, update it to use the [Payment\nIntents](https://docs.stripe.com/api/payment_intents) and [Setup\nIntents](https://docs.stripe.com/api/setup_intents) APIs. Using those APIs:\n\n- Supports [3D Secure 2 (3DS2)](https://stripe.com/guides/3d-secure-2).\n- Takes advantage of [Dynamic 3D\nSecure](https://docs.stripe.com/payments/3d-secure/authentication-flow#three-ds-radar).\n- Complies with European [Strong Customer\nAuthentication](https://docs.stripe.com/strong-customer-authentication)\nregulations.\n\nYou can integrate 3D Secure (3DS) authentication into your checkout flow on\nmultiple platforms, including Web, iOS, Android, and React Native. This\nintegration runs [3D Secure 2 (3DS2)](https://stripe.com/guides/3d-secure-2)\nwhen supported by the customer’s bank and falls back to 3D Secure 1 otherwise.\nTo use Stripe’s 3DS service with other processors, [contact\nsupport](https://support.stripe.com/contact).\n\nWebiOSAndroid\n\n![Checkout\nscreen](https://b.stripecdn.com/docs-statics-srv/assets/auth-flow-step01-confirm.399f5a4abbd7f303861689d186b79557.png)\n\nThe customer enters their payment information.\n\n![Initiate\nauthentication](https://b.stripecdn.com/docs-statics-srv/assets/auth-flow-step02-processing.3877946d74743878ec86cec56dd69085.png)\n\nThe SDK presents a loading screen while the customer’s bank checks whether\nauthentication is required.\n\n![Challenge flow\nscreen](https://b.stripecdn.com/docs-statics-srv/assets/auth-flow-step03-otp.f42397e1ce4ec5975e05f1bada72d195.png)\n\nIf required by their bank, the SDK authenticates the customer.\n\n## Control the 3DS flow\n\nStripe triggers 3DS automatically if required by a regulatory mandate such as\n[Strong Customer\nAuthentication](https://docs.stripe.com/strong-customer-authentication) or\nrequested by an issuer with the [soft\ndecline](https://docs.stripe.com/declines/codes) code `authentication_required`.\n\nYou can also [use Radar\nrules](https://docs.stripe.com/payments/3d-secure/authentication-flow#three-ds-radar)\nor [the\nAPI](https://docs.stripe.com/payments/3d-secure/authentication-flow#manual-three-ds)\nto control when to prompt users to complete 3DS authentication, making a\ndetermination for each user based on the desired parameters. However, not all\ntransactions support 3DS, for example wallets or off-session payments.\n\nWhen a payment triggers 3DS, Stripe requires the user to perform authentication\nto complete the payment if 3DS authentication is available for a card. Depending\non what frontend you use, this might require you to [display the 3DS\nFlow](https://docs.stripe.com/payments/3d-secure/authentication-flow#when-to-use-3d-secure).\n\nIn a typical Payment Intent API flow that triggers 3DS:\n\n- The user enters their payment information, which confirms a PaymentIntent,\nSetupIntent, or attaches a PaymentMethod to a Customer.\n- Stripe assesses if the transaction supports and requires 3DS based on\nregulatory mandates, Radar rules, manual API requests, issuer soft declines, and\nother criteria.\n- If 3DS is:- **Not required**: For example, because of an\n[exemption](https://stripe.com/guides/strong-customer-authentication#exemptions-to-strong-customer-authentication),\nStripe attempts the charge. The PaymentIntent transitions to a status of\n`processing`. If requested by the issuer with a [soft\ndecline](https://docs.stripe.com/declines/codes), we automatically reattempt and\ncontinue as if required.\n- **Not supported**: The PaymentIntent transitions to a status of\n`requires_payment_method`. Depending on the reason 3DS was triggered it might be\npermissible to continue to the authorization step for the charge. In that case,\nthe PaymentIntent transitions to a status of `processing`.\n- **Required**: Stripe starts the 3DS authentication flow by contacting the card\nissuer’s 3D Secure Access Control Server (ACS) and starting the 3DS flow.\n- When Stripe receives 3DS flow information from the issuer, we attempt\nauthentication. The PaymentIntent transitions to a status of `requires_action`:-\nSee below for how to [display the required 3DS\naction](https://docs.stripe.com/payments/3d-secure/authentication-flow#when-to-use-3d-secure).\nIssuers might request different 3DS flow action types, which might not always\nresult in visibly displaying a 3DS challenge (for example, a frictionless flow).\n- If the issuer doesn’t support 3DS at all or has an outage, Stripe might\nattempt to complete the payment without authentication if permissible.\n- Data for 3DS authentication requests is typically provided by the customer at\nthe time of the transaction. To reduce friction and the possibility of failed\nauthentication, we might complete these requests with data we infer from other\nsources such as data collected from your customer during the payment flow,\nrecords related to your customer’s past transactions with you, or relevant\ninformation available from the customer’s card or issuers.\n- If Stripe already has access to all the required 3DS data elements, our\noptimized 3DS server might attempt to complete the authentication request for\nyou while confirming the PaymentIntent. This can result in the PaymentIntent\ndirectly transitioning to a status of `processing` if the 3DS flow succeeds, or\nto a status of `requires_action` if additional steps or data elements are\nrequired to complete the 3DS flow.\n- Depending on the 3DS authentication result:- **Authenticated**: Stripe\nattempts the charge and the PaymentIntent transitions to a status of\n`processing`.\n- **Failure**: The PaymentIntent transitions to a status of\n`requires_payment_method`, indicating that you need to try a different payment\nmethod, or you can retry 3DS by reconfirming.\n- **Other scenarios**: Depending on the reason the payment triggered 3DS, it\nmight be permissible to continue authorization for the charge in [edge\ncases](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-three_d_secure-result).\nFor example, a result of `attempt_acknowledged` leads to a charge and the\nPaymentIntent transitions to a status of `processing`.- An exception is when\ncreating [Indian e-mandates for recurring\npayments](https://docs.stripe.com/india-recurring-payments). Anything but an\n`authenticated` result is treated as failure.\n- The PaymentIntent transitions to one of the following statuses, depending on\nthe outcome of the payment: `succeeded`, `requires_capture`, or\n`requires_payment_method`.\n\nTo track whether 3DS was supported and attempted on a card payment, read the\n[three_d_secure](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-three_d_secure)\nproperty on the card information in the Charge’s `payment_method_details`.\nStripe populates the `three_d_secure` property when the customer attempts to\nauthenticate the card—`three_d_secure.result` indicates the authentication\noutcome.\n\n### Use Radar rules in the Dashboard\n\nStripe provides [default\nRadar](https://docs.stripe.com/radar/rules#request-3d-secure) rules to\ndynamically request 3DS when creating or confirming a\n[PaymentIntent](https://docs.stripe.com/api/payment_intents) or\n[SetupIntent](https://docs.stripe.com/api/setup_intents). You can configure\nthese rules in your\n[Dashboard](https://dashboard.stripe.com/settings/radar/rules).\n\nIf you have [Radar for Fraud Teams](https://stripe.com/radar/fraud-teams), you\ncan add [custom 3DS\nrules](https://docs.stripe.com/radar/rules#request-3d-secure).\n\n### Manually request 3DS with the API\n\nThe default method to trigger 3DS is [using Radar to dynamically request 3D\nSecure](https://docs.stripe.com/payments/3d-secure/authentication-flow#three-ds-radar)\nbased on risk level and other requirements. Triggering 3DS manually is for\nadvanced users integrating Stripe with their own fraud engine.\n\nTo trigger 3DS manually, set\n`payment_method_options[card][request_three_d_secure]` to `any` or `challenge`\ndepending on what you want to optimize for when either creating or confirming a\n[PaymentIntent](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-card-request_three_d_secure)\nor\n[SetupIntent](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-payment_method_options-card-request_three_d_secure),\nor creating a [Checkout\nSession](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-payment_method_options-card-request_three_d_secure).\nThis process is the same for one-time payments or when setting up a payment\nmethod for future payments. When you provide this parameter, Stripe attempts to\nperform 3DS and overrides any [dynamic 3D Secure Radar\nrules](https://docs.stripe.com/radar/rules) on the PaymentIntent, SetupIntent,\nor Checkout Session.\n\nPayment Intents APISetup Intents APICheckout Session API\n```\ncurl https://api.stripe.com/v1/payment_intents \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d amount=1000 \\\n -d currency=usd \\\n -d \"payment_method_options[card][request_three_d_secure]\"=any\n```\n\nWhen to provide this parameter depends on when your fraud engine detects risk.\nFor example, if your fraud engine only inspects card details, you know whether\nto request 3DS before you create the PaymentIntent or SetupIntent. If your fraud\nengine inspects both card and transaction details, provide the parameter during\nconfirmation—when you have more information. Then pass the resulting\nPaymentIntent or SetupIntent to your client to complete the process.\n\nExplore the `request_three_d_secure` parameter’s usage for each case in the API\nreference:\n\n- [Create a\nPaymentIntent](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-card-request_three_d_secure)\n- [Confirm a\nPaymentIntent](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-payment_method_options-card-request_three_d_secure)\n- [Create a\nSetupIntent](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-payment_method_options-card-request_three_d_secure)\n- [Confirm a\nSetupIntent](https://docs.stripe.com/api/setup_intents/confirm#confirm_setup_intent-payment_method_options-card-request_three_d_secure)\n- [Create a Checkout\nSession](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-payment_method_options-card-request_three_d_secure)\n\nSet `request_three_d_secure` to `any` to manually request 3DS with a preference\nfor a `frictionless` flow, increasing the likelihood of the authentication being\ncompleted without any additional input from the customer.\n\nSet `request_three_d_secure` to `challenge` to request 3DS with a preference for\na `challenge` flow, where the customer must respond to a prompt for active\nauthentication.\n\nStripe can’t guarantee your preference because the issuer determines the\nultimate authentication flow. You can find out what the ultimate authentication\nflow was by inspecting the `authentication_flow` on the `three_d_secure`\nproperty of the\n[Charge](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-three_d_secure-authentication_flow)\nor\n[SetupAttempt](https://docs.stripe.com/api/setup_attempts/object#setup_attempt_object-payment_method_details-card-three_d_secure-authentication_flow).\nTo learn more about 3DS flows, read our\n[guide](https://stripe.com/guides/3d-secure-2#frictionless-authentication).\n\n#### Caution\n\nStripe only requires your customer to perform authentication to complete the\npayment successfully if 3DS authentication is available for a card. If it’s not\navailable for the given card or if an error occurred during the authentication\nprocess, the payment proceeds normally.\n\nStripe’s SCA rules run automatically, regardless of whether or not you manually\nrequest 3DS. Any 3DS prompts from you are additional and not required for SCA.\n\n## Display the 3DS flow\n\nWebiOSAndroidReact Native\n#### Note\n\n[PaymentSheet](https://stripe.dev/stripe-android/paymentsheet/com.stripe.android.paymentsheet/-payment-sheet/index.html)\nand\n[PaymentSheet.FlowController](https://stripe.dev/stripe-android/paymentsheet/com.stripe.android.paymentsheet/-payment-sheet/-flow-controller/index.html)\nautomatically support 3DS authentication. If you’re using one of these classes,\nthis guide doesn’t apply.\n\n[PaymentAuthConfig.Stripe3ds2Config](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-payment-auth-config/-stripe3ds2-config/index.html)\ncontains the customizable items for 3DS authentication interactions.\n\nThe [timeout\nproperty](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-payment-auth-config/-stripe3ds2-config/-builder/set-timeout.html)\ncontrols how long the 3DS authentication process runs before it times out. This\nduration includes both network round trips and awaiting customer input. This\nvalue must be at least 5 minutes to remain compliant with Strong\n[Customer](https://docs.stripe.com/api/customers) Authentication regulation. A\nvalue less than 5 minutes results in an error.\n\nThe\n[uiCustomization](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-payment-auth-config/-stripe3ds2-config/-builder/set-ui-customization.html)\nproperty allows you to provide a `StripeUiCustomization` instance to control the\nlook of views presented by the Android SDK during 3DS authentication. Stripe\ncurrently supports customization parameters for colors, fonts, text, borders on\napp bars, labels, text fields, and buttons. For a full explanation of each\nparameter, see the [Android SDK](https://stripe.dev/stripe-android/) reference.\n\nThe Stripe Android SDK collects [basic device\ninformation](https://support.stripe.com/questions/3d-secure-2-device-information)\nduring 3DS2 authentication and sends it to the issuing bank for their risk\nanalysis.\n\n```\nfinal PaymentAuthConfig.Stripe3ds2UiCustomization uiCustomization =\n new PaymentAuthConfig.Stripe3ds2UiCustomization.Builder()\n .setLabelCustomization(\nnew PaymentAuthConfig.Stripe3ds2LabelCustomization.Builder()\n .setTextFontSize(12)\n .build())\n .build();\n PaymentAuthConfig.init(new PaymentAuthConfig.Builder()\n .set3ds2Config(new PaymentAuthConfig.Stripe3ds2Config.Builder()\n .setTimeout(5)\n .setUiCustomization(uiCustomization)\n .build())\n .build());\n```\n\n## Test the 3DS flow\n\nUse a Stripe test card with any CVC, postal code, and future expiration date to\ntrigger 3DS authentication challenge flows while in a sandbox.\n\nWhen you build an integration with your test API keys, the authentication\nprocess displays a mock authentication page. On that page, you can either\nauthorize or cancel the payment. Authorizing the payment simulates successful\nauthentication and redirects you to the specified return URL. Clicking the\n**Failure** button simulates an unsuccessful attempt at authentication.\n\nWebiOSAndroidReact Native\nWhen testing your custom Android integration, pick a test card to trigger a\nspecific challenge flow.\n\nNumberChallenge flowDescription4000582600000094Out of Band3D Secure 2\nauthentication must be completed on all transactions. Triggers the challenge\nflow with Out of Band UI.4000582600000045One Time Passcode3D Secure 2\nauthentication must be completed on all transactions. Triggers the challenge\nflow with One Time Passcode UI.4000582600000102Single Select3D Secure 2\nauthentication must be completed on all transactions. Triggers the challenge\nflow with single-select UI.4000582600000110Multi Select3D Secure 2\nauthentication must be completed on all transactions. Triggers the challenge\nflow with multi-select UI.\nAll other Visa and Mastercard [test cards](https://docs.stripe.com/testing)\ndon’t require authentication from the customer’s card issuer.\n\nYou can write [custom Radar rules in a test\nenvironment](https://dashboard.stripe.com/settings/radar/rules) to trigger\nauthentication on test cards. Learn more about [testing your Radar\nrules](https://docs.stripe.com/radar/testing).\n\n## Disputes and liability shift\n\nThe liability shift rule applies to payments successfully authenticated using\n[3D Secure](https://docs.stripe.com/payments/3d-secure). In some cases,\nliability shift applies with equivalent cryptograms, such as [Apple\nPay](https://docs.stripe.com/apple-pay) or [Google\nPay](https://docs.stripe.com/google-pay). If a cardholder\n[disputes](https://docs.stripe.com/disputes) a 3DS payment as fraudulent, the\nliability typically shifts from you to the card issuer.\n\nIf a card doesn’t support 3DS or an error occurs during the authentication\nprocess, the payment proceeds normally. When this occurs, liability doesn’t\ngenerally shift to the issuer, because a successful 3DS authentication hasn’t\ntaken place.\n\nIn practice, this means you typically won’t receive disputes marked as\nfraudulent if the payment is covered by the liability shift rule, but you might\nstill receive an [Early Fraud\nWarning](https://docs.stripe.com/disputes/how-disputes-work#early-fraud-warnings).\nYou might still receive a low percentage of fraudulent disputes, and we list a\nfew cases below where the liability shift rule might not apply.\n\nYou might receive a [dispute\ninquiry](https://docs.stripe.com/disputes/how-disputes-work#inquiries) on a\nsuccessfully authenticated payment using 3DS. This type of dispute doesn’t\nprecipitate a chargeback because it’s only a request for information.\n\nIf you receive an inquiry for a 3D-Secure-authenticated charge, you *must*\nrespond. If you don’t, the cardholder’s bank can initiate a financial chargeback\nknown as a “no-reply” chargeback that could invalidate the liability shift. To\nprevent no-reply chargebacks on 3DS charges, submit sufficient information about\nthe charge. Include information about what was ordered, how it was delivered,\nand who it was delivered to (whether it was physical or electronic goods, or\nservices).\n\n#### Note\n\nIf a customer disputes a payment for any other reason (for example, [product not\nreceived](https://docs.stripe.com/disputes/categories)), then the standard\ndispute process applies. Make informed decisions about your business management,\nespecially in handling and completely avoiding disputes.\n\nLiability shift might also occur when the card network requires 3DS, but it\nisn’t available for the card or issuer. This can happen if the issuer’s 3DS\nserver is down or if the issuer doesn’t support it, despite the card network\nrequiring support. During the payment process, the cardholder isn’t prompted to\ncomplete 3DS authentication, because the card isn’t enrolled. Although the\ncardholder didn’t complete 3DS authentication, liability can still shift to the\nissuer.\n\nStripe returns the requested Electronic Commerce Indicator (ECI) in the\n`electronic_commerce_indicator` of the [3DS authentication\noutcome](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-three_d_secure).\nThis indicator can aid in determining whether a charge should adhere to the\nliability shift rule. As 3DS occurs subsequent to the initial payment intent\nresponse, you typically get this from a `charge.succeeded` event that’s sent to\none of your configured [webhook endpoints or other event\ndestinations](https://docs.stripe.com/event-destinations). A requested ECI might\nbe degraded in the issuer response, which we don’t reveal.\n\nSometimes payments that are successfully authenticated using 3DS don’t fall\nunder liability shift. This is rare and can happen, for example, if you have an\nexcessive level of fraud on your account and are enrolled in a [fraud monitoring\nprogram](https://docs.stripe.com/disputes/monitoring-programs#vfmp). Certain\nnetworks have also exempted some industries from liability shift. For example,\nVisa doesn’t support liability shift for businesses engaging in wire transfer or\nmoney orders, non-financial institutions offering foreign or non-fiat currency,\nor stored-value card purchase or load.\n\nIn rare cases, liability shift might get downgraded post-authorization, or the\ncard networks’ dispute rejection system might fail to catch liability shift for\na transaction. In these cases, if you counter the dispute, Stripe automatically\nadds the requested ECI and the [3DS authentication\noutcome](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-three_d_secure-result)\nfor the payment to your evidence details, but we encourage you to include\nadditional details to improve your odds of winning the dispute.\n\n### Custom Radar rules for 3DS and liability shift\n\nIf you have [Radar for Fraud Teams](https://stripe.com/radar/fraud-teams), you\ncan [customize your\nrules](https://docs.stripe.com/radar/rules#request-3d-secure) to control when to\nrequest 3DS and how to handle each specific authentication outcome and liability\nshift. Stripe’s [Strong Customer\nAuthentication](https://stripe.com/guides/strong-customer-authentication) (SCA)\nrules run automatically and independently of custom Radar rules, and block\nunauthenticated payments unless exempted.\n\n## See also\n\n- [Import 3DS\nresults](https://docs.stripe.com/payments/payment-intents/three-d-secure-import)\n- [Authentication\nanalytics](https://docs.stripe.com/payments/analytics/authentication)\n\n## Links\n\n- [Payment Intents](https://docs.stripe.com/api/payment_intents)\n- [Setup Intents](https://docs.stripe.com/api/setup_intents)\n- [3D Secure 2 (3DS2)](https://stripe.com/guides/3d-secure-2)\n- [Dynamic 3D\nSecure](https://docs.stripe.com/payments/3d-secure/authentication-flow#three-ds-radar)\n- [Strong Customer\nAuthentication](https://docs.stripe.com/strong-customer-authentication)\n- [contact support](https://support.stripe.com/contact)\n- [soft decline](https://docs.stripe.com/declines/codes)\n-\n[exemption](https://stripe.com/guides/strong-customer-authentication#exemptions-to-strong-customer-authentication)\n- [edge\ncases](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-three_d_secure-result)\n- [Indian e-mandates for recurring\npayments](https://docs.stripe.com/india-recurring-payments)\n-\n[three_d_secure](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-three_d_secure)\n- [default Radar](https://docs.stripe.com/radar/rules#request-3d-secure)\n- [Dashboard](https://dashboard.stripe.com/settings/radar/rules)\n- [Radar for Fraud Teams](https://stripe.com/radar/fraud-teams)\n-\n[PaymentIntent](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-card-request_three_d_secure)\n-\n[SetupIntent](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-payment_method_options-card-request_three_d_secure)\n- [Checkout\nSession](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-payment_method_options-card-request_three_d_secure)\n- [dynamic 3D Secure Radar rules](https://docs.stripe.com/radar/rules)\n- [Confirm a\nPaymentIntent](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-payment_method_options-card-request_three_d_secure)\n- [Confirm a\nSetupIntent](https://docs.stripe.com/api/setup_intents/confirm#confirm_setup_intent-payment_method_options-card-request_three_d_secure)\n-\n[Charge](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-three_d_secure-authentication_flow)\n-\n[SetupAttempt](https://docs.stripe.com/api/setup_attempts/object#setup_attempt_object-payment_method_details-card-three_d_secure-authentication_flow)\n- [guide](https://stripe.com/guides/3d-secure-2#frictionless-authentication)\n-\n[PaymentSheet](https://stripe.dev/stripe-android/paymentsheet/com.stripe.android.paymentsheet/-payment-sheet/index.html)\n-\n[PaymentSheet.FlowController](https://stripe.dev/stripe-android/paymentsheet/com.stripe.android.paymentsheet/-payment-sheet/-flow-controller/index.html)\n-\n[PaymentAuthConfig.Stripe3ds2Config](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-payment-auth-config/-stripe3ds2-config/index.html)\n- [timeout\nproperty](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-payment-auth-config/-stripe3ds2-config/-builder/set-timeout.html)\n- [Customer](https://docs.stripe.com/api/customers)\n-\n[uiCustomization](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-payment-auth-config/-stripe3ds2-config/-builder/set-ui-customization.html)\n- [Android SDK](https://stripe.dev/stripe-android/)\n- [basic device\ninformation](https://support.stripe.com/questions/3d-secure-2-device-information)\n- [test cards](https://docs.stripe.com/testing)\n- [testing your Radar rules](https://docs.stripe.com/radar/testing)\n- [3D Secure](https://docs.stripe.com/payments/3d-secure)\n- [Apple Pay](https://docs.stripe.com/apple-pay)\n- [Google Pay](https://docs.stripe.com/google-pay)\n- [disputes](https://docs.stripe.com/disputes)\n- [Early Fraud\nWarning](https://docs.stripe.com/disputes/how-disputes-work#early-fraud-warnings)\n- [dispute\ninquiry](https://docs.stripe.com/disputes/how-disputes-work#inquiries)\n- [product not received](https://docs.stripe.com/disputes/categories)\n- [webhook endpoints or other event\ndestinations](https://docs.stripe.com/event-destinations)\n- [fraud monitoring\nprogram](https://docs.stripe.com/disputes/monitoring-programs#vfmp)\n- [Strong Customer\nAuthentication](https://stripe.com/guides/strong-customer-authentication)\n- [Import 3DS\nresults](https://docs.stripe.com/payments/payment-intents/three-d-secure-import)\n- [Authentication\nanalytics](https://docs.stripe.com/payments/analytics/authentication)",
  "metadata": {
    "title": "Authenticate with 3D Secure | Stripe Documentation",
    "description": "Integrate 3D Secure (3DS) into your checkout flow.",
    "sourceURL": "https://docs.stripe.com/payments/3d-secure/authentication-flow"
  }
}