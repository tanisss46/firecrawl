{
  "content": "# API upgrades\n\n## Keep track of changes and upgrades to the Stripe API.\n\nYour API version controls the API and webhook behavior you see (for example,\nwhat parameters you can include in requests, what properties you see in\nresponses, and so on). Your version gets set the first time you make an API\nrequest. Each major release, such as\n[Acacia](https://docs.stripe.com/changelog/acacia), includes changes that aren’t\nbackward-compatible with previous releases. Upgrading to a new major release can\nrequire updates to existing code. Each monthly release includes only\nbackward-compatible changes, and uses the same name as the last major release.\nYou can safely upgrade to a new monthly release without breaking any existing\ncode. To upgrade your API version, follow [these\nsteps](https://docs.stripe.com/upgrades#how-can-i-upgrade-my-api).\n\nWhen a [Connect](https://stripe.com/connect) platform makes requests on behalf\nof connected accounts without specifying an API version, Stripe always uses the\nplatform’s API version. Regardless of a connected account’s API version, the\nplatform’s requests on its behalf always return responses matching the API\nversion of the request.\n\n## Backward-compatible changes\n\nStripe considers the following changes to be backward-compatible:\n\n- Adding new API resources.\n- Adding new optional request parameters to existing API methods.\n- Adding new properties to existing API responses.\n- Changing the order of properties in existing API responses.\n- Changing the length or format of opaque strings, such as object IDs, error\nmessages, and other human-readable strings.- This includes adding or removing\nfixed prefixes (such as `ch_` on charge IDs).\n- Make sure that your integration can handle Stripe-generated object IDs, which\ncan contain up to 255 characters. For example, if you’re using MySQL, store the\nIDs in a `VARCHAR(255) COLLATE utf8_bin` column (the `COLLATE` configuration\nprovides case-sensitivity during lookups).\n- Adding new event types.- Make sure that your webhook listener gracefully\nhandles unfamiliar event types.\n\n## Upgrade your API version\n\nIf you’re running an older version of the API, upgrade to the latest version to\ntake advantage of new features and enhanced functionality.\n\nUpgrading your API version affects:\n\n- The API calls you make without a `Stripe-Version` header: the parameters you\ncan send and the structure of objects returned.\n- The structure of objects received with\n[Stripe.js](https://docs.stripe.com/payments/elements) methods such as\n[confirmCardPayment](https://docs.stripe.com/js#stripe-confirm-card-payment).\n- The structure of objects sent to your webhook endpoints (both Account and\n[Connect](https://docs.stripe.com/connect/webhooks)). However, if an endpoint\nhas an explicit version set, it always uses that version.\n- Automated Billing operations performed by Stripe (for example, generating an\n[invoice](https://docs.stripe.com/api/invoices) for a new subscription period)\nuse your account’s default API version. See the API changelog for details about\nhow your default API version impacts these operations.\n\n### View your API version and the latest available upgrade in Workbench\n\nSee the [API version used by recent\nrequests](https://docs.stripe.com/workbench/guides#view-api-versions) on your\naccount and the latest available upgrade from the\n[Overview](https://dashboard.stripe.com/workbench/overview) tab in Workbench.\n\nWhen performing an API upgrade, make sure that you specify the API version that\nyou’re integrating against in your code instead of relying on your account’s\ndefault API version. To test a newer version for API calls, set the\n`Stripe-Version` header (in live or test mode). Learn how to manage versioning\nin our [server-side SDKs](https://docs.stripe.com/sdks#server-side-libraries).\n\n### Upgrade and test your webhooks\n\nRead our guide on [how to handle webhook\nversioning](https://docs.stripe.com/webhooks/versioning).\n\n### Perform the upgrade\n\nWhen you’re confident that your code can handle the latest API version, perform\nthe upgrade using Workbench:\n\n- Open the [Overview](https://dashboard.stripe.com/workbench/overview) tab in\nWorkbench.\n- In the **API versions** section, click **Upgrade available**, which is visible\nif a newer API version is available.\n- Review which API version will be assigned to your account, and click\n**Upgrade.**\n\nThis switches the version used by API calls that don’t have the `Stripe-Version`\nheader and also switches the version used to render objects sent to your\nwebhooks.\n\n#### Caution\n\nThe shape of resources inside [events retrieved from the\nAPI](https://docs.stripe.com/api/events) is defined by the default API version\nof your account at the time the event occurred. If your code retrieves events\ncreated when your default API version was different, it must account for any\ndifferences in the event versions.\n\n### Roll back your API version\n\nFor 72 hours after you’ve upgraded your API version, you can safely roll back to\nthe version you were upgrading from in Workbench.\n\nAfter you’ve rolled back, webhooks that were sent with the new object structure\nand failed will be retried with the old structure.\n\n## Stay informed\n\nWe send information on new additions and changes to Stripe’s API and language\nlibraries in the Stripe Developer Digest. Be sure to subscribe to stay informed.\n\n## Sign up for the Developer Digest\n\nShare your email so Stripe can send you updates about the API and developer\nplatform.\n\nCollect EmailGet updatesRead our [privacy policy](https://stripe.com/privacy).\n## API versions\n\nListed below are all the [breaking\nchanges](https://docs.stripe.com/upgrades#breaking-change) to the Stripe API.\nEach date corresponds with a new version of the Stripe API. If you’re looking\nfor all API additions and updates, see the [API\nchangelog](https://docs.stripe.com/changelog). If you are looking for new\nproduct releases, see the [product\nchangelog](https://stripe.com/blog/changelog).\n\n### 2024-09-30.acacia\n\n- New values have been added to the [Issuing\nCard](https://docs.stripe.com/api/issuing/card/object) `shipping.status` enum:\n\n- `submitted`\n- The `allow_redisplay` parameter may now be passed via `collect_config` on\n`collect_payment_method` and via `process_config` on `process_payment_intent`.\n- The `customer_consent_collected` parameter has been removed and is replaced by\nthe `allow_redisplay` parameter on the [Terminal Process Setup\nIntent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)\nendpoint. Instead of passing `customer_consent_collected=true`, pass\n`allow_redisplay=always` or `allow_redisplay=limited`. Instead of passing\n`customer_consent_collected=false`, pass `allow_redisplay=unspecified`.\n- In the Accounts API, the following error codes have been added as new error\ncodes in the `requirements.errors` array. See [Account requirements\nerrors](https://docs.stripe.com/api/accounts/object#account_object-requirements-errors)\nfor more information.\n\n- `verification_supportability`\n- The alert.filter field has been deprecated in favour of a filters field on the\nactual config. For example, `alert.usage_threshold.filter`.\n\n### 2024-06-20\n\n- New values have been added to the [Issuing\nAuthorization](https://docs.stripe.com/api/issuing/authorizations/object)\n`request_history.reason` enum:\n\n- `card_canceled`\n- `card_expired`\n- `cardholder_blocked`\n- `insecure_authorization_method`\n- `pin_blocked`\n- On the [Issuing\nAuthorization](https://docs.stripe.com/api/issuing/authorizations/object)\nresource and related `test_helper` APIs, `fuel.volume_decimal` has been renamed\nto `fuel.quantity_decimal`.\n- On the [Issuing\nTransaction](https://docs.stripe.com/api/issuing/transactions/object) resource\nand related `test_helper` APIs, `purchase_details.fuel.volume_decimal` has been\nrenamed to `purchase_details.fuel.quantity_decimal`.\n- The following undocumented fuel fields have been removed from the [Issuing\nTransaction](https://docs.stripe.com/api/issuing/transactions/object) resource\nin favor of the `_decimal` equivalents:\n\n- `purchase_details.fuel.unit_cost`\n- `purchase_details.fuel.volume`\n- The following undocumented fleet fields have been removed from the [Issuing\nTransaction](https://docs.stripe.com/api/issuing/transactions/object) resource\nin favor of their corresponding `_decimal` equivalents:\n\n- `purchase_details.fleet.reported_breakdown.fuel.gross_amount`\n- `purchase_details.fleet.reported_breakdown.non_fuel.gross_amount`\n- `purchase_details.fleet.reported_breakdown.tax.local_amount`\n- `purchase_details.fleet.reported_breakdown.tax.national_amount`\n- New values have been added to the [Issuing\nTransaction](https://docs.stripe.com/api/issuing/transactions/object)\n`purchase_details.fuel.unit` enum:\n\n- `imperial_gallon`\n- `kilogram`\n- `pound`\n- `charging_minute`\n- `kilowatt_hour`\n- The `fleet.cardholder_prompt_data.alphanumeric_id` property on the [Issuing\nAuthorization](https://docs.stripe.com/api/issuing/authorizations/object)\nresource has been deprecated and will be removed in a future API version.\nDepending on the configuration of your card program, use `driver_id`,\n`vehicle_number`, `unspecified_id` or `user_id` instead.\n- In the Capabilities API, `paused.inactivity` and `other` have been added as\nnew disabled reasons. See [Capability disabled\nreasons](https://docs.stripe.com/api/accounts/object#capability_object-requirements-disabled_reason)\nfor more information.\n- In the Capabilities API, `bank_transfer_payments` capability type is being\ndeprecated in favor of newer capability types per buyer’s location. The newer\ncapability types are:\n\n- `gb_bank_transfer_payments` for UK Bank Transfers (GBP customer balance\npayments)\n- `jp_bank_transfer_payments` for JP Bank Transfers (JPY customer balance\npayments)\n- `mx_bank_transfer_payments` for MX Bank Transfers (MXN customer balance\npayments)\n- `sepa_bank_transfer_payments` for SEPA Bank Transfers (EUR customer balance\npayments)\n- `us_bank_transfer_payments` for US Bank Transfers (USD customer balance\npayments)\n\n### 2024-04-10\n\n- [PaymentIntents](https://docs.stripe.com/api/payment_intents) now has\n`automatic_async` as the default capture method when capture method is not\nspecified during PaymentIntents creation. For more information about async\ncapture, view the [asynchronous capture\nguide](https://docs.stripe.com/payments/payment-intents/asynchronous-capture).\n- Fields under `rendering_options` for invoices are now migrated under\n`rendering`.\n- Product ‘features’ has been renamed to `marketing_features`.\n\n### 2023-10-16\n\n- In the Accounts API, the following error codes have been added as new error\ncodes in the `requirements.errors` array. See [Account requirements\nerrors](https://docs.stripe.com/api/accounts/object#account_object-requirements-errors)\nfor more information.\n\n- `invalid_address_highway_contract_box`\n- `invalid_address_private_mailbox`\n- `invalid_business_profile_name`\n- `invalid_business_profile_name_denylisted`\n- `invalid_company_name_denylisted`\n- `invalid_dob_age_over_maximum`\n- `invalid_dob_age_under_minimum`\n- `invalid_product_description_length`\n- `invalid_product_description_url_match`\n- `invalid_statement_descriptor_business_mismatch`\n- `invalid_statement_descriptor_denylisted`\n- `invalid_statement_descriptor_length`\n- `invalid_statement_descriptor_prefix_denylisted`\n- `invalid_statement_descriptor_prefix_mismatch`\n- `invalid_tax_id_format`\n- `invalid_url_denylisted`\n- `invalid_url_format`\n- `invalid_url_web_presence_detected`\n- `invalid_url_website_business_information_mismatch`\n- `invalid_url_website_empty`\n- `invalid_url_website_inaccessible`\n- `invalid_url_website_inaccessible_geoblocked`\n- `invalid_url_website_inaccessible_password_protected`\n- `invalid_url_website_incomplete`\n- `invalid_url_website_incomplete_cancellation_policy`\n- `invalid_url_website_incomplete_customer_service_details`\n- `invalid_url_website_incomplete_legal_restrictions`\n- `invalid_url_website_incomplete_refund_policy`\n- `invalid_url_website_incomplete_return_policy`\n- `invalid_url_website_incomplete_terms_and_conditions`\n- `invalid_url_website_incomplete_under_construction`\n- `invalid_url_website_other`\n- In the Accounts API, if no `settings.payments.statement_descriptor` is\nsupplied, the statement descriptor is automatically set to the first supplied\nparameter of (in priority order):\n\n- `business_profile.name`\n- `business_profile.url`\n- `company.name` or `individual.first_name` + `individual.last_name` (dependent\non the `business_type`)\n\nThe statement descriptor is only set automatically when one of the above fields\nis provided as a parameter, so existing accounts will not be impacted unless a\ndependent field is updated. Similarly,\n`settings.card_payments.statement_descriptor_prefix` will be defaulted to a\nshortened version of the `settings.payments.statement_descriptor`. This will\ntake place whenever the statement descriptor is updated (either explicitly, or\nwhen defaulted).\n\n### 2023-08-16\n\n- Major\n[PaymentIntents](https://docs.stripe.com/api/payment_intents) and\n[SetupIntents](https://docs.stripe.com/api/setup_intents) now have\n`automatic_payment_methods` enabled by default, which allows you to configure\npayment method settings from the\n[Dashboard](https://dashboard.stripe.com/settings/payment_methods)—no code\nrequired. The previous default was to accept only card payments when both\n`payment_method_types` and `automatic_payment_methods` were not specified. For\nmore information, view the [upgrade\nguide](https://docs.stripe.com/upgrades/manage-payment-methods).\n\n- When confirming a PaymentIntent, you will be required to provide a\n`return_url` unless `off_session=true`.\n- When confirming a PaymentIntent, you cannot use `error_on_requires_action`.\nUse `payment_method_types` with `error_on_requires_action` if you wish to fail\npayment attempts when PaymentIntents transition into `requires_action`.\n- When confirming a SetupIntent, you will be required to provide a `return_url`.\n- You can bypass the `return_url` requirement using\n`automatic_payment_methods[allow_redirects]=never`, this will automatically\nfilter payment methods that [require\nredirect](https://docs.stripe.com/payments/payment-methods/integration-options#additional-api-supportability)\neven if they are enabled in the Dashboard.\n- [No-cost orders](https://docs.stripe.com/payments/checkout/no-cost-orders) are\nnow enabled for one-time payments in Checkout Sessions. The value of\n`payment_method_collection` has changed from `always` to `if_required`\naccordingly.\n- When being viewed by a platform, PaymentMethod fingerprints of types\n`us_bank_account`, `acss_debit`, `sepa_debit`, `bacs_debit`, and `au_becs_debit`\nare rendered in platform scope, not the owning merchant (connected account)\nscope. This works similarly to the\n[2018-01-23](https://docs.stripe.com/upgrades#2018-01-23) change for cards and\nbank accounts.\n- Added more specific error codes to the\n[PaymentIntent](https://docs.stripe.com/api/payment_intents) API for when a\n[Klarna](https://docs.stripe.com/payments/klarna) payment fails:\n\n- `payment_method_customer_decline`\n- `payment_method_not_available`\n- `payment_method_provider_decline`\n- `payment_intent_payment_attempt_expired`\n- In the Accounts API, `verification_missing_directors`,\n`verification_directors_mismatch`, `verification_document_directors_mismatch`\nand `verification_extraneous_directors` has been added as a new error code in\nthe `requirements.errors` array. See [Account requirements\nerrors](https://docs.stripe.com/api/accounts/object#account_object-requirements-errors)\nfor more information.\n\n### 2022-11-15\n\n- [Charge](https://docs.stripe.com/api/charges/object) no longer auto-expands\nrefunds by default. You can [expand the\nlist](https://docs.stripe.com/api#expanding_objects) but for performance reasons\nwe recommended against doing so unless needed.\n- The `charges` property on\n[PaymentIntent](https://docs.stripe.com/api/payment_intents/object) has been\nremoved. You can use the `latest_charge` property instead.\n- Added more specific error codes for the following bank redirect payment\nmethods: Bancontact, EPS, Giropay, iDEAL, Przelewy24, and Sofort.\n\n- Added the following error codes to the\n[PaymentIntent](https://docs.stripe.com/api/payment_intents) and\n[PaymentMethod](https://docs.stripe.com/api/payment_methods) APIs:\n\n- `payment_intent_payment_attempt_expired`\n- `payment_method_customer_decline`\n- `payment_method_provider_timeout`\n- `payment_method_not_available`\n- `payment_method_provider_decline`\n- Added the following error codes to the\n[SetupIntent](https://docs.stripe.com/api/setup_intents) APIs:\n\n- `setup_intent_setup_attempt_expired`\n- `payment_method_customer_decline`\n- `payment_method_provider_timeout`\n- `payment_method_not_available`\n- `payment_method_provider_decline`\n- In the Accounts API, `verification_legal_entity_structure_mismatch` has been\nadded as a new error code in the `requirements.errors` array. See [Account\nrequirements\nerrors](https://docs.stripe.com/api/accounts/object#account_object-requirements-errors)\nfor more information.\n\n### 2022-08-01\n\n- The `pending_invoice_items_behavior` parameter on [create\nInvoice](https://docs.stripe.com/api/invoices/create) no longer supports the\n`include_and_require` value. When the parameter is omitted the default value of\n`pending_invoice_items_behavior` is now `exclude`.\n- When creating a Checkout Session in payment mode, the default value of\n`customer_creation` has changed from `always` to `if_required`.\n- A PaymentIntent is no longer created during Checkout Session creation in\npayment mode. Instead, a PaymentIntent will be created when the Session is\nconfirmed.\n- Checkout Sessions no longer return the `setup_intent` property in subscription\nmode.\n- The following parameters have been removed from [create Checkout\nSession](https://docs.stripe.com/api/checkout/sessions/create):\n\n- `line_items[amount]`\n- `line_items[currency]`\n- `line_items[name]`\n- `line_items[description]`\n- `line_items[images]`\n\nYou can use the `price` and `price_data` parameters instead.\n- The `subscription_data[coupon]` parameter has been removed from [create\nCheckout Session](https://docs.stripe.com/api/checkout/sessions/create). You can\nuse the `discounts` parameter instead.\n- The `shipping_rates` parameter has been removed from [create Checkout\nSession](https://docs.stripe.com/api/checkout/sessions/create). You can use the\n`shipping_options` parameter instead.\n- On the Checkout Session resource, several shipping properties have changed.\n\n- `shipping_rate` has been moved into the new `shipping_cost` hash.\n- `shipping` has been renamed to `shipping_details`.\n- `exempted` now appears in the `three_d_secure` hash for card Charges. It\nindicates that a 3D Secure exemption was granted.\n- In the Accounts API, `invalid_tos_acceptance` has been added as a new error\ncode in the `requirements.errors` array. See [Account requirements\nerrors](https://docs.stripe.com/api/accounts/object#account_object-requirements-errors)\nfor more information.\n- When creating a `physical` Issuing card in testmode, its shipping\n[status](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-shipping-status)\nno longer automatically changes from `pending` to `delivered`. This\nfunctionality is now accessible via the following new endpoints:\n\n- `/v1/test_helpers/issuing/cards/:card/shipping/ship`\n- `/v1/test_helpers/issuing/cards/:card/shipping/deliver`\n- `/v1/test_helpers/issuing/cards/:card/shipping/return`\n- `/v1/test_helpers/issuing/cards/:card/shipping/fail`\n- `design_rejected` is now a possible value for the `cancellation_reason` field\non the issued card object, indicating that the card’s design was rejected by\nStripe.\n- The `default_currency` field on the Customer API resource has been removed.\n\n### 2020-08-27\n\n- We have removed `tax_percent` from objects and requests in favor of [tax\nrates](https://docs.stripe.com/api/tax_rates).\n- On subscription schedules, `phases.plans` has been renamed to `phases.items`.\nThis applies for the [subscription\nschedule](https://docs.stripe.com/api/subscription_schedules/object#subscription_schedule_object-phases)\nobject as well as\n[create](https://docs.stripe.com/api/subscription_schedules/create#create_subscription_schedule-phases)\nand\n[update](https://docs.stripe.com/api/subscription_schedules/update#update_subscription_schedule-phases)\nrequests.\n- Deprecate the `payment_method.card_automatically_updated` webhook in favor of\n`payment_method.automatically_updated`.\n- Checkout Sessions no longer include the `display_items` property. Use the\nincludable `line_items` property instead.\n- The `requirements` hash on the Account and Capability objects, and the\n`verification_fields` hash on the Country Spec object have newly formatted\nstrings for requirements that are related to key persons associated with an\naccount:\n\n- Fields that are required for persons with `representative`, `owner`,\n`director`, and `executive` roles will be prefixed with `representative`,\n`owners`, `directors`, and `executives`, respectively. Person requirements will\nbe previewed as follows:- When the representative’s phone number is required, it\nwill appear as `representative.phone` instead of `relationship.representative`.\n- When an owner’s full name is required, it will appear as `owners.first_name`\nand `owners.last_name` instead of `relationship.owner`.\n- When an executive’s ID number is required, it will appear as\n`executives.id_number` instead of `relationship.executive`.\n- When a director’s date of birth is required, it will appear as\n`directors.dob.day`, `directors.dob.month`, and `directors.dob.year` instead of\n`relationship.director`.\n- The boolean values that indicate the associated owners, executives, or\ndirectors have been provided now appear as `company.owners_provided`,\n`company.executives_provided`, or `company.directors_provided` instead of\n`relationship.owner`, `relationship.executive`, or `relationship.director`,\nrespectively.\n- In the Accounts/Persons/Capabilities API, several new error codes have been\nintroduced in the `requirements.errors` array. See [Account requirements\nerrors](https://docs.stripe.com/api/accounts/object#account_object-requirements-errors)\nfor more information. These error codes are:\n\n- `verification_document_issue_or_expiry_date_missing`\n- `verification_document_not_signed`\n- `verification_failed_tax_id_not_issued`\n- `verification_failed_tax_id_match`\n- `invalid_address_po_boxes_disallowed`\n- The `payment_method_details.card.three_d_secure` fields on the Charge object\nhave been updated. The `succeeded` and `authenticated` booleans have been\nremoved; please use the `result` enum instead.\n- The `subscriptions` property on Customers is no longer included by default.\nYou can [expand the list](https://stripe.com/docs/api#expanding_objects) but for\nperformance reasons we recommended against doing so unless needed.\n- The `tiers` property on Plan is no longer included by default. You can [expand\nthe list](https://stripe.com/docs/api#expanding_objects) but for performance\nreasons we recommended against doing so unless needed.\n- The `sources` property on Customers is no longer included by default. You can\n[expand the list](https://stripe.com/docs/api#expanding_objects) but for\nperformance reasons we recommended against doing so unless needed.\n- The `tax_ids` property on Customers is no longer included by default. You can\n[expand the list](https://stripe.com/docs/api#expanding_objects) but for\nperformance reasons we recommended against doing so unless needed.\n- The `prorate` and `subscription_prorate` parameters are deprecated in favor of\n`proration_behavior`.\n\n### 2020-03-02\n\n- Major\nYou can now optionally number invoices [sequentially across your\naccount](https://stripe.com/docs/billing/invoices/customizing#invoice-prefix-number)\ninstead of sequentially for each customer. To use this feature, enable [account\nlevel numbering](https://dashboard.stripe.com/settings/billing/invoice) in the\nStripe Dashboard.\n\n- To ensure invoices are numbered sequentially and without gaps, invoices that\ncan be deleted (drafts) are only assigned numbers when finalized.\n\n### 2019-12-03\n\n- Major\nThe\n[id](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-id)\nfield of all invoice line items have changed and are now prefixed with `il_`.\nThe new id has consistent prefixes across all line items, is globally unique,\nand can be used for pagination. Old prefixes included `sub_`, `su_`, `item_`,\n`sli_`, and `ii_` and weren’t globally unique.\n\n- You can no longer use the prefix of the id to determine the source of the line\nitem. Instead use the `type` field for this purpose.\n- For lines with `type=invoiceitem`, use the `invoice_item` field to reference\nor update the originating Invoice Item object.\n- The Invoice Line Item object on earlier API versions also have a `unique_id`\nfield to be used for migrating internal references before upgrading to this\nversion.\n- When [setting a tax rate to individual line\nitems](https://docs.stripe.com/billing/invoices/tax-rates#setting-tax-rates-on-individual-items),\nuse the new `id`. Users on earlier API versions can pass in either a line item\n`id` or `unique_id`.\n- When [creating](https://docs.stripe.com/api/credit_notes/create) a\npost-payment credit note on an invoice:\n\n-\n[out_of_band_amount](https://docs.stripe.com/api/credit_notes/create#create_credit_note-out_of_band_amount)\nis required if the sum of `credit_amount` and (`refund` or `refund_amount`) is\nless than the credit note total.\n- In previous API versions `out_of_band_amount` is optional and, in the case\nthat the `credit_amount` and refund amounts are less than the credit note total,\nthe difference will automatically be allocated to the `out_of_band_amount`.\n- Customer balances applied to all invoices are now debited or credited back to\nthe customer when voided. Earlier, applied customer balances were not returned\nback to the customer and were consumed.\n\n- To achieve this behavior in earlier API versions:- Set\n`consume_applied_balance` to `false` when voiding invoices in\n[/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void).\n- Set `invoice_customer_balance_settings[consume_applied_balance_on_void]` to\n`false` in `/v1/subscriptions`\n[create](https://docs.stripe.com/api/subscriptions/create) or\n[update](https://docs.stripe.com/api/subscriptions/update) to force this\nbehavior for Invoices voided by a Subscription.\n- Set\n`subscription_data[invoice_customer_balance_settings][consume_applied_balance_on_void]`\nto `false` in `/v1/checkout/sessions`\n[create](https://docs.stripe.com/api/checkout/sessions/create) to force this\nbehavior for Invoices voided by Subscriptions created with Checkout.\n- Deprecated tax information for Customers have been removed.\n\n- The deprecated `tax_info` and `tax_info_verification` fields on the `Customer`\nobject are now removed in favor of `tax_ids`.\n- The deprecated `tax_info` parameter on the `Customer` create and update\nmethods are removed in favor of `tax_id_data`.\n- For more information, view the [migration\nguide](https://docs.stripe.com/billing/taxes/tax-rates#migration).\n\n### 2019-11-05\n\n- In the Accounts API, the `requested_capabilities` property is now required at\ncreation time for Custom accounts in all countries. See [Account\ncapabilities](https://docs.stripe.com/connect/account-capabilities) for more\ninformation.\n- On subscription schedules, `invoice_settings`, `default_payment_method`,\n`billing_thresholds` and `collection_method` are now nested under\n`default_settings`.\n\n### 2019-10-17\n\n- There are changes to subscription schedules.\n\n- Rename `renewal_behavior` to `end_behavior` with values `cancel` and\n`release`.\n- Remove `renewal_interval`.\n- A side effect of this change is that if you wrote a `renewal_behavior` of\n`none` on an old API version, `end_behavior` will be converted to `cancel` when\nreading the value back.\n- In the event that you are upgrading your API and set `renewal_behavior` as\n`renew`, with this API version enabled you will see `end_behavior` as `renew`\nhowever you will not be able to update `renewal_interval`. Additionally you can\nnot set `end_behavior` to `renew`, so it is in a read-only state.\n- The `start` field on a subscription resource has been removed and is replaced\nby a `start_date` field which represents when the entire subscription started as\nopposed to when the current plan configuration started.\n- The `due_date` property is always null on invoices with\n`billing=charge_automatically`.\n- The `billing` attribute on invoices, subscriptions, and subscription schedules\nis renamed to `collection_method`.\n- The [customer object](https://stripe.com/docs/api/customers)’s\n`account_balance` value has been renamed to `balance`. A new [customer balance\ntransactions API](https://stripe.com/docs/api/customer_balance_transactions) is\navailable:\n\n- Update the customer’s `balance` by incrementing or decrementing its current\nvalue by a specified `amount` and attaching `metadata` to the change.\n- Retrieve history of changes to the customer’s `balance`.\n\n### 2019-10-08\n\n- The `relationship[account_opener]` field on a Person object has been renamed\nto `relationship[representative]`.\n\n### 2019-09-09\n\n- In the Accounts API, the `requested_capabilities` property is now required at\ncreation time for accounts in Australia, Austria, Belgium, Denmark, Finland,\nFrance, Germany, Ireland, Italy, Luxembourg, the Netherlands, New Zealand,\nNorway, Portugal, Spain, Sweden, Switzerland, and the United Kingdom. See\n[Account capabilities](https://docs.stripe.com/connect/account-capabilities) for\nmore information.\n- Adds additional `details_code` values to the `verification[document]` hash on\na Person object.\n\n### 2019-08-14\n\n- Major\nThe `platform_payments` capability has been renamed to `transfers`, to better\nindicate the Stripe primitives that this capability supports.\n\n- The `card_payments` capability has been updated to no longer imply\n`transfers`. You’ll now need to additionally request the `transfers` capability\nwhen creating an account.\n- The `relationship[executive]` field on a Person object will no longer be\nautomatically set to `true` when a Person object with\n`relationship[account_opener]` is created. The `requirements` hash on an Account\nobject may require that you explicitly indicate that the `account_opener` is\nalso an `executive`. If this is the case, you will need to indicate it by\nsetting `relationship[executive]=true`.\n\n### 2019-05-16\n\n- Bank pull payments no longer expose internal system refunds on failure.\n\nSystem refunds can still be accessed via the [list\nrefunds](https://stripe.com/docs/api/refunds/list#list_refunds-charge) endpoint.\n\n### 2019-03-14\n\n- The `application_fee` parameter on invoice API methods and the\n`application_fee` field on the invoice object have both been renamed to\n`application_fee_amount`.\n- Major\nCreating a subscription succeeds even when the first payment fails. The\nsubscription will be created in an incomplete status, where it will remain for\nup to 23 hours. During that time period, it can be moved into an active state by\npaying the first invoice. If no successful payment is made, the subscription\nwill move into a final incomplete_expired state. Updates to a non-incomplete\nsubscription that require a payment will also succeed regardless of the payment\nstatus. Prior to this version, all creations or updates would fail if the\ncorresponding payment failed. For more details see [our\nguide](https://stripe.com/docs/billing/subscriptions/overview#subscription-lifecycle).\n- There are a few changes to the [invoice\nobject](https://stripe.com/docs/api/invoices):\n\n- A `status_transitions` hash now contains the timestamps when an invoice was\nfinalized, paid, marked uncollectible, or voided.\n- The `date` property has been renamed to `created`.\n- The `finalized_at` property has been moved into the `status_transitions` hash.\n\n### 2019-02-19\n\n- Major\nStatement descriptor behaviors for card payments [created via\n/v1/charges](https://docs.stripe.com/api/charges/create) have changed. See [our\nstatement descriptor\nguide](https://docs.stripe.com/payments/charges-api#dynamic-statement-descriptor)\nfor details.\n\n- Instead of using the platform’s statement descriptor, charges created with\n`on_behalf_of` or `destination` will now use the descriptor of the connected\naccount.\n- The full statement descriptor for a card payment may no longer be provided at\ncharge creation. Dynamic descriptors provided at charge time will now be\nprefixed by the descriptor prefix set in the dashboard or via the new\n`settings[card_payments][statement_descriptor_prefix]` parameter in the Accounts\nAPI.\n- If an account has no `statement_descriptor` set, the account’s business or\nlegal name will be used as statement descriptor.\n- Statement descriptors may no longer contain `*`, `'`, and `\"`.\n- `legal_entity[business_id_number]` has been renamed\n`legal_entity[business_registration_number]`.\n- Major\nMany properties on the Account API object have been reworked. To see a mapping\nof the old argument names to the new ones, see [Accounts API Argument\nChanges](https://docs.stripe.com/connect/updated-requirements/accounts-arguments).\n\n- The `legal_entity` property on the Account API resource has been replaced with\n`individual`, `company`, and `business_type`.\n- The `verification` hash has been replaced with a `requirements` hash.- The\n`verification[fields_needed]` array has been replaced with three arrays to\nbetter represent when info is required: `requirements[eventually_due]`,\n`requirements[currently_due]`, and `requirements[past_due]`.\n- `verification[due_by]` has been renamed to `requirements[current_deadline]`.\n- The `disabled_reason` enum value of `fields_needed` has been renamed to\n`requirements.past_due`.\n- Properties on the Account API object that configure behavior within Stripe\nhave been moved into the new `settings` hash.- The `payout_schedule`,\n`payout_statement_descriptor` and `debit_negative_balances` fields have been\nmoved to `settings[payouts]` and renamed to `schedule`, `statement_descriptor`\nand `debit_negative_balances`.\n- The `statement_descriptor` field has been moved to\n`settings[payments][statement_descriptor]`.\n- The `decline_charge_on` fields have been moved to `settings[card_payments]`\nand renamed to `decline_on`.\n- The `business_logo`, `business_logo_large` and `business_primary_color` fields\nhave been moved to `settings[branding]` and renamed to `icon`, `logo` and\n`primary_color`. The `icon` field additionally requires the uploaded image file\nto be square.\n- The `display_name` and `timezone` fields have been moved to\n`settings[dashboard]`.\n- `business_name`, `business_url`, `product_description`, `support_address`,\n`support_email`, `support_phone` and `support_url` have been moved to the\n`business_profile` subhash.\n- The `legal_entity[verification][document]` property (now located at\n`individual[verification]` and at `verification` in the Person API object) has\nbeen changed to a hash.- The `front` and `back` fields support uploading both\nsides of documents.\n- The `details_code` field has new error types: `document_corrupt`,\n`document_failed_copy`, `document_failed_greyscale`, `document_failed_other`,\n`document_failed_test_mode`, `document_fraudulent`,\n`document_id_country_not_supported`, `document_id_type_not_supported`,\n`document_invalid`, `document_manipulated`, `document_missing_back`,\n`document_missing_front`, `document_not_readable`, `document_not_uploaded`,\n`document_photo_mismatch`, and `document_too_large`.\n- The `keys` property on Account creation has been removed. Platforms should now\nauthenticate as their connected accounts with their own key via [the\nStripe-Account\nheader](https://stripe.com/docs/connect/authentication#stripe-account-header).\n- Starting with the 2019-02-19 API, the `requested_capabilities` property is now\nrequired at creation time for accounts in the U.S. See [Account\ncapabilities](https://docs.stripe.com/connect/account-capabilities) for more\ninformation.\n\n### 2019-02-11\n\n- Some PaymentIntent statuses have been renamed\n\n- `requires_source` is now `requires_payment_method`\n- `requires_source_action` is now `requires_action`\n- All other statuses are unchanged\n- `save_source_to_customer` has been renamed to `save_payment_method`.\n- `allowed_source_types` has been renamed to `payment_method_types`.\n- The `next_source_action` property on PaymentIntent has been renamed to\n`next_action`, and the `authorize_with_url` within has been renamed to\n`redirect_to_url`.\n\n### 2018-11-08\n\n- The `closed` property on the [invoice\nobject](https://stripe.com/docs/api/invoices) controls [automatic\ncollection](https://docs.stripe.com/billing/invoices/workflow#auto_advance).\n`closed` has been deprecated in favor of the more specific `auto_advance` field.\nWhere you might have set `closed=true` on invoices in the past, set\n`auto_advance=false`.\n- `auto_advance` now also defaults to false for one-off invoices, allowing you\nto control how long their\n[status](https://stripe.com/docs/billing/migration/invoice-states#status) stays\na `draft`. A longer explanation of these series of changes is [in the\ndocumentation](https://stripe.com/docs/billing/migration/invoice-states#autoadvance).\n- Instead of checking the `forgiven` field on an invoice, check for the\n`uncollectible` status.\n\n- Instead of setting the `forgiven` field on an invoice, [mark it as\nuncollectible.](https://docs.stripe.com/api/invoices/mark_uncollectible)\n- The `immutable_frozen_invoice` error code was renamed to\n`invoice_already_finalized`\n- The following changes only affect users of PaymentIntents as part of the\nprivate beta before November 15, 2018. If you did not use PaymentIntents before\nthen, these don’t affect you.\n\n- The `next_source_action` dictionary on PaymentIntents previously contained a\nkey called `value`. This has been replaced with the `authorize_with_url` and\n`use_stripe_sdk` keys.\n- When creating PaymentIntents, the `attempt_confirmation` parameter has been\nrenamed to `confirm`.\n- The PaymentIntent confirm endpoint no longer supports the `payment_intent`\nparameter. To update a PaymentIntent’s source, pass `source` or `source_data` as\na top-level parameter.\n- The `return_url` parameter is only allowed when confirming a PaymentIntent.\nPassing `return_url` when updating a PaymentIntent is no longer allowed.\n- When creating a PaymentIntent with `transfer_data[destination]`, the\n`on_behalf_of` parameter must be provided and must match the account provided to\n`transfer_data[destination]`. This is because when you provide a destination,\nStripe will [settle charges in the country of the destination\naccount](https://stripe.com/docs/connect/separate-charges-and-transfers#settlement-merchant).\n- The `next_source_action` dictionary on PaymentIntents no longer contains the\n`source_type` property. To view the source type when retrieving PaymentIntents,\n[expand](https://stripe.com/docs/api/expanding_objects) the `source` parameter.\n\n### 2018-10-31\n\n- The `description` field on customer endpoints has a maximum character length\nlimit of `350` now. The `name` field on product endpoints has a maximum\ncharacter length limit of `250` now. The `description` field on invoice line\nitems has a maximum character length limit of `500` now.\n- The `billing_reason` attribute of the invoice object now can take the value of\n`subscription_create`, indicating that it is the first invoice of a\nsubscription. For older API versions, `billing_reason=subscription_create` is\nrepresented as `subscription_update`.\n\n### 2018-09-24\n\n- `FileUpload` objects have been renamed to `File` objects. Additionally, the\n`url` attribute now contains an authenticated URL (i.e. you will need to use\nyour secret API key to download the file’s contents.) You can [create a file\nlink](https://docs.stripe.com/api#create_file_link) to obtain a\npublicly-accessible URL for the file.\n\n### 2018-09-06\n\n- When creating or updating a SKU, its attribute values no longer need to be\nunique. It is now possible to create multiple SKUs without attributes or with\nidentical attribute values.\n\n### 2018-08-23\n\n- You can no longer set `at_period_end` in the subscription `DELETE` endpoints.\nThe `DELETE` endpoint is reserved for immediate canceling going forward. Use\n`cancel_at_period_end` on the subscription update endpoints instead.\n- The [customer object](https://stripe.com/docs/api/customers)’s\n`business_vat_id` was changed from String to Hash called `tax_info`, consisting\nof `tax_id` and `type`, in both requests and responses.\n- The `amount` field field in the `tiers` configuration for `plans` was renamed\nto `unit_amount`.\n\n### 2018-07-27\n\n- The subscription endpoints no longer support the `source` parameter. If you\nwant to change the default source for a customer, instead use the [source\ncreation API](https://stripe.com/docs/api#create_source) to add the new source\nand then the [customer update API](https://stripe.com/docs/api#update_customer)\nto set it as the default.\n- When ending a trial on a subscription using `trial_end=now` the updated\nsubscription will now receive a `trial_end` timestamp from the time of the\nrequest rather than being unset.\n- The `percent_off` field of coupons was changed from Integer to Float, with a\nprecision of two decimal places.\n- When creating or updating a customer the `email` parameter must contain an\nemail address of valid shape.\n\n### 2018-05-21\n\n- Products no longer have SKU lists embedded.\n- Major\nThe `id` field of invoice line items of `type=subscription` no longer can be\ninterpreted as a subscription ID, but instead is a unique invoice line item ID.\nIt can be used for pagination.\n- Coupon, SKU, customer, product and plan `id`s may only contain alphanumeric\nand `_-` characters on creation.\n- Major\nWhen creating or updating subscriptions, the default value of `trial_from_plan`\nis now `false`, meaning that a subscription will not automatically inherit a\nplan’s `trial_period_days`. If a subscription is already trialing, switching to\na new plan without specifying `trial_from_plan` will maintain the trial. We\nrecommend setting an explicit trial per subscription instead of setting trials\non plans.\n- When changing the plan on a subscription to a new plan with a trial (together\nwith `trial_from_plan=true`), the new plan’s full trial period will be added to\nthe subscription, without subtracting already-used time from previous trials.\n\n### 2018-02-28\n\n- Updating a subscription set to cancel on a future date no longer clears the\ncancellation status. In order to clear the cancellation status, specify\n[cancel_at_period_end=false](https://docs.stripe.com/api#update_subscription-cancel_at_period_end)\nwhen updating a subscription.\n\n### 2018-02-06\n\n- For a Source’s `card[three_d_secure]` property, adds `recommended` as a\npossible value. Previously, the only valid values were `not supported`,\n`optional`, and `required`.\n\n### 2018-02-05\n\n- Major\nEach plan object is now linked to a product object with `type=service`. The plan\nobject `statement_descriptor` and `name` attributes have been [moved to\nproduct](https://docs.stripe.com/api#product_object-statement_descriptor)\nobjects, and plan objects now have a `nickname` attribute. Creating a plan now\nrequires passing a [product\nattribute](https://docs.stripe.com/api#create_plan-product) to `POST /v1/plans`.\nThis may be either an existing product ID or a dictionary of product fields, so\nthat you may continue to create plans without separately creating products.\n- Products now have a required `type`: `good` for products used with Orders\nSKUs, or `service` for products used with Subscriptions and Plans.\n\n- On API versions older than 2018-02-05, `type` is set to `good` by default, and\n`GET /v1/products` omits products with `type=service` from the list. (If you\nwant to see products with `type=service` on API versions older than 2018-02-05,\nyou can specify\n[type=service](https://docs.stripe.com/api/products/list#list_products-type)\nwhen listing products.)\n- Major\nAllows a new subscription’s first full invoice to be on a future date, by\nspecifying `billing_cycle_anchor`, with an optional proration up to that\ndate.`billing_cycle_anchor` on its own is available retroactively to past\nversions, and starting in this version, `billing_cycle_anchor` can be combined\nwith a trial, enabling a free trial to be followed by a prorated period,\nfollowed by a fixed billing cycle.\n- Prorations on free plans now create $0 invoices. In past versions, these did\nnot create invoices.\n\n### 2018-01-23\n\n- When being viewed by a platform, cards and bank accounts created on behalf of\nconnected accounts will have a fingerprint that is universal across all\nconnected accounts. For accounts that are not connect platforms, there will be\nno change.\n\n### 2017-12-14\n\n- Updates invoice payment attempts to return a `card_error` when the charge is\ndeclined. This aligns `/v1/invoices/{INVOICE_ID}/pay` with `/v1/charges`.\n- Updates invoice line items to always have a `description` set, including\ninvoice line items generated from subscription items.\n\n### 2017-08-15\n\n- Adds `not_required` as a possible `redirect[status]` value on the `Source`\nobject. Previously, optional redirects were marked as `succeeded`.\n\n### 2017-06-05\n\n- Adds `under_review` as a possible `verification[disabled_reason]` value on the\n`Account` object. Previously, an under review status used the value `other`.\n\n### 2017-05-25\n\n- Replaces the `managed` Boolean property on `Account` objects with `type`,\nwhose possible values are: `standard`, `express`, and `custom`. A `type` value\nis required when creating accounts. The `standard` type replaces `managed:\nfalse`, and the `custom` type replaces `managed: true`.\n- Updates the `previous_attributes` property on `Event` objects to show entire\nsub-arrays when those arrays have changes. Previously, those sub-arrays only\nshowed the specific fields that changed.\n- Updates the `request` property on the `Event` object to be a hash containing\nthe request ID and the idempotency key. Previously, `request` was just the ID.\n- Renames the `user_id` property on Connect-related event objects to `account`.\n\n### 2017-04-06\n\n- Major\nSplits the `Transfer` object into `Payout` and `Transfer`. The `Payout` object\nrepresents money moving from a Stripe account to an external account (bank or\ndebit card). The `Transfer` object now only represents money moving between\nStripe accounts on a Connect platform. For more details, see\n[https://stripe.com/docs/transfer-payout-split](https://stripe.com/docs/transfer-payout-split).\n\n### 2017-02-14\n\n- Updates the `dispute` property on the `Charge` object to contain the ID of an\nassociated dispute. Previously, `dispute` contained the entire `Dispute` object.\nYou can [expand this property](https://stripe.com/docs/api#expanding_objects)\nwhen retrieving charges to render the full `Dispute` object as before.\n- Updates the `outcome[rule]` property on the `Charge` object to contain the ID\nof the rule that blocked the charge. Previously, `outcome[rule]` contained the\nentire `Rule` object. You can [expand this\nproperty](https://stripe.com/docs/api#expanding_objects) when retrieving charges\nto render the full `Rule` object as before.\n\n### 2017-01-27\n\n- Removes the `sourced_transfers` property from the `Balance Transaction`\nobject.\n\n### 2016-10-19\n\n- Returns the status code 403 when an API request is made with insufficient\npermission. Previously, the API returned a 401 status code.\n\n### 2016-07-06\n\n- Updates the list all subscriptions call to also return canceled subscriptions.\nThe endpoint now supports fetching only canceled subscriptions by specifying\n`status=canceled`. You can now retrieve a single canceled subscription by\nproviding its ID.\n\n### 2016-06-15\n\n- Updates the `active` property on the `Product` object so that setting `active`\nto false no longer marks the product’s SKUs as inactive.\n\n### 2016-03-07\n\n- Removes the `currencies_supported` property from the `Account` object. You can\nfind a list of supported currencies by retrieving a `Country Spec` object for\nthe country of the account.\n\n### 2016-02-29\n\n- Adds postal code validation for legal entity addresses when creating and\nupdating accounts.\n\n### 2016-02-23\n\n- Updates the behavior of orders so that changing an order from `paid` or\n`fulfilled` to `canceled` or `returned` automatically refunds the associated\ncharge. Previously, attempting to change an order from `paid` or `fulfilled` to\n`canceled` or `returned` raised an error if the associated charge had not\nalready been refunded.\n\n### 2016-02-22\n\n- Returns an error on attempts to add more than 250 invoice items to an invoice.\n\n### 2016-02-19\n\n- Renames the `name` property on the `Bank Account` object to\n`account_holder_name`.\n\n### 2016-02-03\n\n- Updates the returned `Account` object to only show sub-properties of\n`legal_entity` that are applicable to the account’s country, or that were\npreviously provided.\n\n### 2015-10-16\n\n- Returns an error if a `tax_percent` is provided without a `plan` during a\ncustomer update or creation.\n\n### 2015-10-12\n\n- Major\nReturns an error when invalid parameters are passed in the card or bank account\nhash during token, source, or external account creation. Changes the error code\nreturned for missing required parameters in the card or bank account hash to\n400. Previously, a 402 code was returned.\n\n### 2015-10-01\n\n- Replaces the `bank_accounts` property on the `Account` object with\n`external_accounts`. Replaces the `bank_account` value in the `fields_needed`\nproperty with `external_account`.\n\n### 2015-09-23\n\n- Updates the `charge` property on the `Invoice` object to always show the\ninvoice’s latest charge, regardless of the charge’s source (e.g, a card or a\nbank account). Removes the `payment` property, which previously reflected a\nnon-card charge.\n- Major\nUpdates the list all charges call to return all charges, including those made to\nbank accounts and other non-card sources. Previously, it only returned charges\nmade to cards. Updates the deprecated `offset` parameter to only be supported\nwhen filtering by source type.\n\n### 2015-09-08\n\n- Updates API rate limit errors to return a 429 HTTP status code instead of 400.\nThey also no longer return a `rate_limit` error code.\n\n### 2015-09-03\n\n- Returns an error if a request reuses an idempotency token with different\nparameters than the original request. Previously, errors were only returned for\nreusing the same idempotency token across different API endpoints.\n\n### 2015-08-19\n\n- Updates the `Balance Transaction` object to provide the refund ID or dispute\nID as the `source` value when the balance transaction is associated with a\nrefund or dispute. Previously, the original charge ID was shown.\n\n### 2015-08-07\n\n- Adds date validation to the `tos_acceptance[date]` property on the `Account`\nobject. Accepted values are timestamps after 2009 and before the current moment.\n\n### 2015-07-28\n\n- The `balance.available` event is now triggered when immediate transfers are\nprocessed.\n\n### 2015-07-13\n\n- Replaces the `verification[contacted]` Boolean property on the `Account`\nobject with a `verification[disabled_reason]` string that describes why the\naccount is unable to make transfers or charges.\n\n### 2015-07-07\n\n- Updates the `status` property on the `Transfer` object so that transfers not\nyet submitted to the bank are still `pending` and transfers submitted to the\nbank that have not yet arrived are `in_transit`. Previously, both states were\ndescribed as `pending`.\n\n### 2015-06-15\n\n- Updates the `payout_schedule[delay_days]` property on the `Account` object to\nreturn an error if provided when the `interval` is set to `manual`. Manual\npayouts always use the minimum `delay_days` value.\n\n### 2015-04-07\n\n- Updates the `period[end]` property on proration invoice line items to reflect\nthe subscription’s `current_period_end` property when the update and proration\nwas made. A proration invoice line item’s `period[start]` and `period[end]`\nproperties now represent the prorated adjustment interval. Previously,\n`period[end]` marked the time at which the proration was made, and was the same\nas `period[start]`.\n- Updates the `Invoice` object to change the order of the `lines` list: first\ninvoice items in reverse chronological order, followed by the subscription, if\napplicable.\n\n### 2015-03-24\n\n- Updates coupons so they no longer apply to negative invoice items by default.\nPreviously, coupons applied to all non-proration invoice items. To allow a\ncoupon to apply to a negative invoice item, pass `discountable=true` when\ncreating or updating the invoice item.\n\n### 2015-02-18\n\n- Updates the `status` property on the `Charge` object to have a value of\n`succeeded` for successful charges. Previously, the `status` property would be\n`paid` for successful charges.\n- Major\nReplaces the `card` property on the `Charge` object with `source`. Provide this\nparameter with a `Card` token, as before, or with a `Source` token that has an\n`object` value of `card`. Older API versions return both the `card` and `source`\nproperties on `Charge`.\n- Major\nReplaces the `cards` and `default_card` properties on the `Customer` object with\n`sources` and `default_source`. Both properties can represent `Card` objects, as\nbefore, and `Source` objects with an `object` value of `card`. Older API\nversions return both the new and old properties on `Customer`. Replaces the\n`customer.card.*` and `customer.bank_account.*` events with `customer.source.*`.\n\n### 2015-02-16\n\n- Renames the `transfer.canceled` event to `transfer.reversed`.\n\n### 2015-02-10\n\n- Adds the value `warning_closed` to the `status` property on the `Dispute`\nobject.\n- Updates test mode transfers to require sufficient funds in your available test\nmode balance (for consistency with live mode transfers). Add funds directly to\nyour available test mode balance—bypassing the pending balance—by creating a\ncharge using the special test card number **4000 0000 0000 0077**.\n\n### 2015-01-26\n\n- Updates the presentation of nested hashes in the `previous_attributes`\nproperty of events to only show the difference. For example, a change from\n`{address: {line1: \"Foo\", line2: \"Bar\"}}` to `{address: {line1: \"Foo\", line2:\n\"Baz\"}}` is represented as `{previous_attributes: {address: {line2: \"Baz\"}}}`.\nPreviously, it was represented as `{previous_attributes: {address: {line1:\n\"Foo\", line2: \"Baz\"}}}`.\n- Updates the `canceled_at` property on the `Subscription` object to always be\nthe timestamp from the API call or invoice payment failure that canceled the\nsubscription. Previously, `canceled_at` reflected “at period end” subscription\ncancellations, too. The `ended_at` property still reflects the time that the\nsubscription actually stopped.\n\n### 2015-01-11\n\n- Removes the `mimetype` property from the `File Upload` object. Returns\nsimplified file types in the `type` property and uses simpler naming conventions\nthan mimetypes (e.g., `type` contains **pdf** instead of **application/pdf**).\n\n### 2014-12-22\n\n- Updates the `Card` object so a value of `unchecked` for the\n`address_line1_check`, `address_zip_check`, or `cvc_check` properties means the\nproperty has not been checked. Previously, it meant the issuing bank does not\nsupport the particular check. That state now shows as `unavailable`. Unchecked\nproperties are checked when a card is charged or added to a `Customer` object.\n- Removes the `customer` property from the `Card` object that appears on the\n`Token` object.\n\n### 2014-12-17\n\n- Replaces the `statement_description` property on the `Charge`, `Invoice`,\n`Plan`, and `Transfer` objects with `statement_descriptor`. To determine what\nappears on a customer’s transaction, `statement_description` is appended to your\nStripe account’s statement descriptor while `statement_descriptor` sets the full\nstatement value. If not on this API version or newer, providing a\n`statement_descriptor` still triggers the `statement_description` behavior.\nRegardless of API version, the `statement_description` behavior does not apply\nwith PaymentIntents.\n- Updates the Accounts API to require API version 2014-12-17 or newer.\n\n### 2014-12-08\n\n- Updates the `Dispute` object so evidence can be provided as a hash of typed\nfields rather than a single block of text. Replaces the `evidence_due_by`\nproperty with the `evidence_details` hash, which includes `due_by` and\n`submission_count` (for the number of times a dispute has been submitted).\n\n### 2014-11-20\n\n- Updates disputes that are won to return the status `won` even if the charge\nwas refunded. Previously, a dispute won that had a refunded charge would\ntransition to `charge_refunded`.\n- Updates the `metadata` property of the `Invoice Item` object with a type of\n`subscription` to show the subscription’s metadata. Previously, it showed the\nplan’s metadata.\n\n### 2014-11-05\n\n- Renames the `charge_enabled` and `transfer_enabled` properties on the\n`Account` object to `charges_enabled` and `transfers_enabled`.\n\n### 2014-10-07\n\n- Prevents publishable keys from retrieving `Token` objects. When a card or bank\naccount token is created with a publishable key, the `fingerprint` property is\nnot included in the response.\n\n### 2014-09-08\n\n- Replaces the `disabled`, `validated`, and `verified` properties on the `Bank\nAccount` object with a `status` enum property.\n\n### 2014-08-20\n\n- Adds three values to the `status` property on the `Dispute` object:\n`warning_needs_response`, `warning_under_review`, and `charge_refunded`.\nReplaces the `balance_transaction` property of the `Dispute` object with\n`balance_transactions` (this provides greater detail around funds withdrawn and\nreinstated as a result of disputes).\n\n### 2014-08-04\n\n- Removes the `other_transfers`, `summary`, and `transactions` properties from\nautomatic transfer responses in favor of the balance history endpoint\n(**/v1/balance/history**). *Update*: As of June 20, 2024, these properties are\nno longer available in any versions, including those prior to 2014-08-04.\n\n### 2014-07-26\n\n- Changes the `refunds` property on the `Application Fee` object from an array\nto a sublist object, which contains the `data`, `has_more`, and `url`\nproperties. This makes application fee refunds consistent with charge refunds.\n\n### 2014-07-22\n\n- Updates proration line items on invoices to include the associated\nsubscription’s plan and quantity.\n\n### 2014-06-17\n\n- Changes the `refunds` property on the `Charge` object from an array to a\nsublist object, which contains the `data`, `has_more`, and `url` properties.\n\n### 2014-06-13\n\n- Renames the `type` property on the `Card` object to `brand`.\n\n### 2014-05-19\n\n- Replaces the `account` property on the `Transfer` object with `bank_account`.\nThe `bank_account` property is only included when the transfer is made to a bank\naccount.\n\n### 2014-03-28\n\n- Major\nRemoves the `count` property from list responses.\n\n### 2014-03-13\n\n- Renames the `statement_descriptor` property on the `Transfer` object to\n`statement_description`.\n\n### 2014-01-31\n\n- Major\nReplaces the `subscription` property on the `Customer` object with the\n`subscriptions` property, as customers can have multiple subscriptions.\n- Ignores trial dates on canceled subscriptions when automatically computing\ntrial end dates for new subscriptions.\n\n### 2013-12-03\n\n- Replaces the `user` and `user_email` properties on the `Application Fee`\nobject with an expandable `account` property.\n- Updates the refunding of application fees to be proportional to the amount of\nthe charge refunded (when setting `refund_application_fee=true`). Previously,\nthe entire application fee was refunded even when only part of the charge was.\n\n### 2013-10-29\n\n- Major\nChanges coupon behavior so that applying an amount-off coupon to an invoice does\nnot increase the `Customer` account balance if the discount is greater than the\ninvoice amount. Coupons are ignored—and not counted as redeemed—when applied to\nzero-cost invoices. This change does not apply to coupons created on earlier API\nversion.\n\n### 2013-08-13\n\n- Removes the `fee` and `fee_details` properties from the `Charge` and\n`Transfer` objects. Fee information is in the corresponding balance transaction.\n\n### 2013-08-12\n\n- Allows the `description` property on `Customer`, `Charge`, `InvoiceItem`, and\n`Recipient` objects, and the `email` property on `Customer` and `Recipient`\nobjects, to be set to null by providing empty string values in POST requests.\n\n### 2013-07-05\n\n- Major\nReplaces the `active_card` property on the `Customer` object with a `cards`\nsublist and a `default_card` ID property.\n\n### 2013-02-13\n\n- Updates the `Charge` object so disputed charges include another `stripe_fee`\nobject in the `fee_details` array, representing the dispute fees. Includes the\ndispute fees in the fee total on the `Charge` object.\n\n### 2013-02-11\n\n- Major\nUpdates the pay invoice call to return an error when the charge is not\nsuccessful. Previously, the API would return a 200 status and set the invoice’s\n`paid` property to false.\n\n### 2012-11-07\n\n- Replaces the `disputed` property on the `Charge` object with `dispute`.\n\n### 2012-10-26\n\n- Updates the `Invoice` object format. The `lines` property is now a *sublist*,\na paginated list of all items that contribute to the invoice.\n\n### 2012-09-24\n\n- Removes the extraneous `id` property from the `Discount` object.\n\n### 2012-07-09\n\n- Removes the `uncaptured` property from the `Customer` object.\n\n### 2012-06-18\n\n- Removes the `amount` and `currency` properties from the `Token` object.\n\n### 2012-03-25\n\n- Removes the `next_recurring_charge` property from the `Customer` object. Use\nthe upcoming invoice call instead.\n\n### 2012-02-23\n\n- Shows all response fields, even those with null values. Previously, the API\nhid fields with null values.\n\n### 2011-09-15\n\n- Updates the card validation behavior when creating tokens.\n\n### 2011-08-01\n\n- Updates the list format. New list objects have a `data` property that\nrepresents an array of objects (by default, 10) and a `count` property that\nrepresents the total count.\n\n### 2011-06-28\n\n- Removes the `identifier` property (duplicate of `id`) from the `Plan` object.\n\n### 2011-06-21\n\n- Raises exceptions on unrecognized parameters passed to the API instead of\nsilently allowing and ignoring them.\n\n## Links\n\n- [Acacia](https://docs.stripe.com/changelog/acacia)\n- [Connect](https://stripe.com/connect)\n- [Stripe.js](https://docs.stripe.com/payments/elements)\n- [confirmCardPayment](https://docs.stripe.com/js#stripe-confirm-card-payment)\n- [Connect](https://docs.stripe.com/connect/webhooks)\n- [invoice](https://docs.stripe.com/api/invoices)\n- [API version used by recent\nrequests](https://docs.stripe.com/workbench/guides#view-api-versions)\n- [Overview](https://dashboard.stripe.com/workbench/overview)\n- [server-side SDKs](https://docs.stripe.com/sdks#server-side-libraries)\n- [how to handle webhook\nversioning](https://docs.stripe.com/webhooks/versioning)\n- [events retrieved from the API](https://docs.stripe.com/api/events)\n- [privacy policy](https://stripe.com/privacy)\n- [API changelog](https://docs.stripe.com/changelog)\n- [product changelog](https://stripe.com/blog/changelog)\n- [Issuing Card](https://docs.stripe.com/api/issuing/card/object)\n- [Terminal Process Setup\nIntent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)\n- [Account requirements\nerrors](https://docs.stripe.com/api/accounts/object#account_object-requirements-errors)\n- [Issuing\nAuthorization](https://docs.stripe.com/api/issuing/authorizations/object)\n- [Issuing Transaction](https://docs.stripe.com/api/issuing/transactions/object)\n- [Capability disabled\nreasons](https://docs.stripe.com/api/accounts/object#capability_object-requirements-disabled_reason)\n- [PaymentIntents](https://docs.stripe.com/api/payment_intents)\n- [asynchronous capture\nguide](https://docs.stripe.com/payments/payment-intents/asynchronous-capture)\n- [SetupIntents](https://docs.stripe.com/api/setup_intents)\n- [Dashboard](https://dashboard.stripe.com/settings/payment_methods)\n- [upgrade guide](https://docs.stripe.com/upgrades/manage-payment-methods)\n- [require\nredirect](https://docs.stripe.com/payments/payment-methods/integration-options#additional-api-supportability)\n- [No-cost orders](https://docs.stripe.com/payments/checkout/no-cost-orders)\n- [Klarna](https://docs.stripe.com/payments/klarna)\n- [Charge](https://docs.stripe.com/api/charges/object)\n- [expand the list](https://docs.stripe.com/api#expanding_objects)\n- [PaymentIntent](https://docs.stripe.com/api/payment_intents/object)\n- [PaymentMethod](https://docs.stripe.com/api/payment_methods)\n- [create Invoice](https://docs.stripe.com/api/invoices/create)\n- [create Checkout\nSession](https://docs.stripe.com/api/checkout/sessions/create)\n-\n[status](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-shipping-status)\n- [tax rates](https://docs.stripe.com/api/tax_rates)\n- [subscription\nschedule](https://docs.stripe.com/api/subscription_schedules/object#subscription_schedule_object-phases)\n-\n[create](https://docs.stripe.com/api/subscription_schedules/create#create_subscription_schedule-phases)\n-\n[update](https://docs.stripe.com/api/subscription_schedules/update#update_subscription_schedule-phases)\n- [expand the list](https://stripe.com/docs/api#expanding_objects)\n- [sequentially across your\naccount](https://stripe.com/docs/billing/invoices/customizing#invoice-prefix-number)\n- [account level\nnumbering](https://dashboard.stripe.com/settings/billing/invoice)\n-\n[id](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-id)\n- [setting a tax rate to individual line\nitems](https://docs.stripe.com/billing/invoices/tax-rates#setting-tax-rates-on-individual-items)\n- [creating](https://docs.stripe.com/api/credit_notes/create)\n-\n[out_of_band_amount](https://docs.stripe.com/api/credit_notes/create#create_credit_note-out_of_band_amount)\n- [/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n- [create](https://docs.stripe.com/api/subscriptions/create)\n- [update](https://docs.stripe.com/api/subscriptions/update)\n- [migration guide](https://docs.stripe.com/billing/taxes/tax-rates#migration)\n- [Account capabilities](https://docs.stripe.com/connect/account-capabilities)\n- [customer object](https://stripe.com/docs/api/customers)\n- [customer balance transactions\nAPI](https://stripe.com/docs/api/customer_balance_transactions)\n- [list refunds](https://stripe.com/docs/api/refunds/list#list_refunds-charge)\n- [our\nguide](https://stripe.com/docs/billing/subscriptions/overview#subscription-lifecycle)\n- [invoice object](https://stripe.com/docs/api/invoices)\n- [created via /v1/charges](https://docs.stripe.com/api/charges/create)\n- [our statement descriptor\nguide](https://docs.stripe.com/payments/charges-api#dynamic-statement-descriptor)\n- [Accounts API Argument\nChanges](https://docs.stripe.com/connect/updated-requirements/accounts-arguments)\n- [the Stripe-Account\nheader](https://stripe.com/docs/connect/authentication#stripe-account-header)\n- [automatic\ncollection](https://docs.stripe.com/billing/invoices/workflow#auto_advance)\n- [status](https://stripe.com/docs/billing/migration/invoice-states#status)\n- [in the\ndocumentation](https://stripe.com/docs/billing/migration/invoice-states#autoadvance)\n- [mark it as\nuncollectible.](https://docs.stripe.com/api/invoices/mark_uncollectible)\n- [settle charges in the country of the destination\naccount](https://stripe.com/docs/connect/separate-charges-and-transfers#settlement-merchant)\n- [expand](https://stripe.com/docs/api/expanding_objects)\n- [create a file link](https://docs.stripe.com/api#create_file_link)\n- [source creation API](https://stripe.com/docs/api#create_source)\n- [customer update API](https://stripe.com/docs/api#update_customer)\n-\n[cancel_at_period_end=false](https://docs.stripe.com/api#update_subscription-cancel_at_period_end)\n- [moved to\nproduct](https://docs.stripe.com/api#product_object-statement_descriptor)\n- [product attribute](https://docs.stripe.com/api#create_plan-product)\n- [type=service](https://docs.stripe.com/api/products/list#list_products-type)\n-\n[https://stripe.com/docs/transfer-payout-split](https://stripe.com/docs/transfer-payout-split)",
  "metadata": {
    "title": "API upgrades | Stripe Documentation",
    "description": "Keep track of changes and upgrades to the Stripe API.",
    "sourceURL": "https://docs.stripe.com/upgrades"
  }
}