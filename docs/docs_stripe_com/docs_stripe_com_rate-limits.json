{
  "content": "# Rate limits\n\n## Learn about API rate limits and how to work with them.\n\nThe Stripe API uses a number of safeguards against bursts of incoming traffic to\nhelp maximize its stability. If you send many requests in quick succession, you\nmight see error responses with status code `429`.\n\n## API limiters\n\nWe have several limiters in the API, including a rate limiter and a concurrency\nlimiter.\n\nTreat the limits as maximums, and don’t generate unnecessary load. To prevent\nabuse, we might reduce the limits.\n\nFor advice on handling 429 errors, see [Handling limiting\ngracefully](https://docs.stripe.com/rate-limits#handling-limiting-gracefully).\nIf you suddenly see a rising number of rate-limited requests, [contact Stripe\nSupport](https://support.stripe.com/).\n\nYou can request a limit increase to enable a high-traffic application by\n[contacting Stripe Support](https://support.stripe.com/). If you’re requesting a\nlarge increase, contact us at least 6 weeks in advance.\n\n### Rate limiter\n\nThe basic rate limiter restricts the number of API requests per second as\nfollows:\n\n- **Live mode**: 100 read operations and 100 write operations\n- **Test mode**: 25 read operations and 25 write operations\n\nCalls to certain resources have stricter limits, and also count against the\nbasic limits. These stricter limits apply separately to live mode and test mode.\n\n- [Files API](https://docs.stripe.com/api/files): 20 read operations and 20\nwrite operations per second\n- [Search API](https://docs.stripe.com/search#rate-limits): 20 read operations\nper second\n\nCalls to the [Meter events\nendpoint](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage-api#rate-limits)\nin live mode are subject to a separate rate limit, and don’t count against the\nbasic limits. The limit is 1000 calls per second per Stripe account. In test\nmode, calls to the Meter events endpoint count toward the basic limit. For\nConnect platforms, calls on a connected account to the Meter events endpoint\nalso count toward the basic limit.\n\n### Concurrency limiter\n\nThe concurrency limiter restricts the number of concurrent active requests.\nProblems with this limiter are less common than with the rate limiter, but they\nlikely indicate the existence of resource-intensive, long-lived requests.\n\nCalls to the [Meter events\nendpoint](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage-api#rate-limits)\nare limited to one concurrent call per customer per meter.\n\n## Common causes and mitigations\n\nRate limiting can occur under a variety of conditions, but it’s most common in\nthese scenarios:\n\n- Running **a large volume of closely-spaced requests** can lead to rate\nlimiting. Often this is part of an analytical or migration operation. When\nengaging in these activities, you should try to control the request rate on the\nclient side (see [Handling limiting\ngracefully](https://docs.stripe.com/rate-limits#handling-limiting-gracefully)).\n- Issuing **many long-lived requests** can trigger limiting. Requests vary in\nthe amount of Stripe’s server resources they use, and more resource-intensive\nrequests tend to take longer and run the risk of causing new requests to be shed\nby the concurrency limiter. Resource requirements vary widely, but list requests\nand requests that include expansions generally use more resources and take\nlonger to run. We suggest profiling the duration of Stripe API requests and\nwatching for timeouts to try and spot those that are unexpectedly slow.\n- A sudden increase in charge volume like a **flash sale** might result in rate\nlimiting. We try to set our rates high enough that legitimate payment traffic\nnever exceeds the limits, but if you suspect that an upcoming event might push\nyou over the limits listed above, [contact Stripe\nSupport](https://support.stripe.com/).\n\n## Handling limiting gracefully\n\nA basic technique for integrations to gracefully handle limiting is to watch for\n`429` status codes and build in a retry mechanism. The retry mechanism should\nfollow an exponential backoff schedule to reduce request volume when necessary.\nWe’d also recommend building some randomness into the backoff schedule to avoid\na [thundering herd\neffect](https://en.wikipedia.org/wiki/Thundering_herd_problem).\n\nYou can only optimize individual requests to a limited degree, so an even more\nsophisticated approach would be to control traffic to Stripe at a global level,\nand throttle it back if you detect substantial rate limiting. A common technique\nfor controlling rate is to implement something like a [token bucket rate\nlimiting algorithm](https://en.wikipedia.org/wiki/Token_bucket) on the\nclient-side. Ready-made and mature implementations for token bucket are\navailable in almost any programming language.\n\n## Object lock timeouts\n\nIntegrations might encounter errors with HTTP status `429`, code `lock_timeout`,\nand this message:\n\nThis object cannot be accessed right now because another API request or Stripe\nprocess currently accessing it. If you see this error intermittently, retry the\nrequest. If you see this error frequently and are making multiple concurrent\nrequests to a single object, make your requests serially or at a lower rate.\n\nThe Stripe API locks objects on some operations so that concurrent workloads\ndon’t interfere and produce an inconsistent result. The error above is caused by\na request trying to acquire a lock that’s already held elsewhere, and timing out\nafter it couldn’t be acquired in time.\n\nLock timeouts have a different cause than rate limiting, but their mitigations\nare similar. As with rate limiting errors, we recommend retrying on an\nexponential backoff schedule (see [Handling limiting\ngracefully](https://docs.stripe.com/rate-limits#handling-limiting-gracefully)).\nBut unlike rate limiting errors, the automatic retry mechanisms built into\nStripe’s [SDKs](https://docs.stripe.com/sdks) retry `429`s caused by lock\ntimeouts:\n\n```\nStripe.max_network_retries = 2\n```\n\nLock contention is caused by concurrent access on related objects. Integrations\ncan vastly reduce this by making sure that mutations on the same object are\nqueued up and run sequentially instead. Concurrent operations against the API\nare still okay, but try to make sure simultaneous operations operate only on\nunique objects. It’s also possible to see lock contention caused by a conflict\nwith an internal Stripe background process—this should be rare, but because it’s\nbeyond user control, we recommend that all integrations are able to retry\nrequests.\n\n## Load testing\n\nIt’s common for users to prepare for a major sales event by load testing their\nsystems, with the Stripe API running in test mode as part of it. We generally\ndiscourage this practice because API limits are lower in test mode, so the load\ntest is likely to hit limits that it wouldn’t hit in production. Test mode is\nalso not a perfect stand-in for live API calls, and that can be somewhat\nmisleading. For example, creating a charge in live mode sends a request to a\npayment gateway and that request is mocked in test mode, resulting in\nsignificantly different latency profiles.\n\nAs an alternative, we recommend building integrations so that they have a\nconfigurable system for mocking out requests to the Stripe API, which you can\nenable for load tests. For realistic results, they should simulate latency by\nsleeping for a time that you determine by sampling the durations of real live\nmode Stripe API calls, as seen from the perspective of the integration.\n\n## API read request allocations\n\nStripe provides access to its read (GET) API requests to facilitate reasonable\nlookup activity related to payment integrations. To maximize quality of service\nfor all users, Stripe provides the following allocations for read requests based\non transaction count:\n\n- Read API requests shouldn’t exceed an average ratio of **500 requests per\ntransaction** for an account. For example, if an account processes 100\ntransactions in a 30-day period, they shouldn’t exceed 50,000 read API requests\nduring that same period.\n- When using Connect, a platform and its connected accounts have distinct read\nAPI allowances:- Each connected account has their own allocation for requests\nthey initiate (500 requests per transaction).\n- Connect platforms use a separate allocation to make read requests on behalf of\ntheir connected accounts using either their secret API key or OAuth access\ntokens. This allocation is also 500 requests per transaction based on the\naggregate transaction count across its connected accounts.\n- Ratios are measured on a rolling 30-day basis.\n- Every account, regardless of transaction count, has a minimum allocation of\n10,000 read requests per month.\n- Write API requests have no allocation limit.\n\nCalls to the following API endpoints are excluded from the above allocation\nlimits:\n\n- [Data products](https://docs.stripe.com/stripe-data)\n- [Reporting products](https://docs.stripe.com/stripe-reports)\n- [Tax products](https://docs.stripe.com/tax)\n\nTo reduce your API request volume, consider using [Stripe Data\nPipeline](https://stripe.com/data-pipeline) for a complete export of API data to\nyour local database or provider.\n\n#### Filter requests to limit paginated calls\n\nSome list endpoints return [multiple\npages](https://docs.stripe.com/api/pagination) of results and might require\nmultiple requests to return the full set of API objects for a list operation.\nApply filters when possible to narrow your list results.\n\n## Links\n\n- [contact Stripe Support](https://support.stripe.com/)\n- [Files API](https://docs.stripe.com/api/files)\n- [Search API](https://docs.stripe.com/search#rate-limits)\n- [Meter events\nendpoint](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage-api#rate-limits)\n- [thundering herd\neffect](https://en.wikipedia.org/wiki/Thundering_herd_problem)\n- [token bucket rate limiting\nalgorithm](https://en.wikipedia.org/wiki/Token_bucket)\n- [SDKs](https://docs.stripe.com/sdks)\n- [Data products](https://docs.stripe.com/stripe-data)\n- [Reporting products](https://docs.stripe.com/stripe-reports)\n- [Tax products](https://docs.stripe.com/tax)\n- [Stripe Data Pipeline](https://stripe.com/data-pipeline)\n- [multiple pages](https://docs.stripe.com/api/pagination)",
  "metadata": {
    "title": "Rate limits | Stripe Documentation",
    "description": "Learn about API rate limits and how to work with them.",
    "sourceURL": "https://docs.stripe.com/rate-limits"
  }
}