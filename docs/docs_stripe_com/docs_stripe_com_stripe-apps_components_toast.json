{
  "content": "# Toast component for Stripe AppsDashboard only\n\n## Inform users of temporary status.\n\nSDK version8.x9.x\nTo add the Toast component to your app:\n\n```\nimport { showToast } from \"@stripe/ui-extension-sdk/utils\";\n```\n\n```\nconst App = () => {\n React.useEffect(() => {\n showToast('Changes saved', {type: 'success'});\n }, []);\n};\n```\n\nRender a toast at the bottom of your view to inform the user about the status of\nan action. For example, a toast can show a user whether an API call succeeded or\nfailed.\n\n```\nimport {showToast} from '@stripe/ui-extension-sdk/utils';\n\nconst App = () => {\n const handleClick = () => {\n fetch(...)\n .then((response) => {\n showToast(\"Invoice updated\", {type: \"success\"})\n return response.json()\n })\n .catch(() => {\n showToast(\"Invoice could not be updated\", {type: \"caution\"})\n })\n }\n\n // Use the `handleClick`...\n}\n```\n\nThe `showToast()` function takes two arguments, a `message` and `options`. The\nfunction is defined as follows:\n\n```\ntype ToastType = \"success\" | \"caution\" | \"pending\" | undefined;\ntype ToastOptions = { type?: ToastType; action?: string; onAction: () => void; }\n(message: string, options?: ToastOptions) => Promise<{\n update: (updateMessage: string, updateOptions?: ToastOptions) => void;\n dismiss: () => void;\n}>;\n```\n\nToast messages can’t exceed 30 characters in length or be empty. If a message is\ntoo long or empty, the console logs an error.\n\nUnless they’re of type `pending`, toasts dismiss automatically.\n\nIs PendingHas\nActionTimeout`false``false`4s`false``true`6s`true``false`None`true``true`None\n```\nimport {showToast} from '@stripe/ui-extension-sdk/utils';\n\nconst App = () => {\n const handleClick = async () => {\n const { dismiss, update } = await showToast(\"Refreshing data\", {\n type: \"pending\",\n });\n try {\n await refreshData();\n dismiss();\n } catch (error) {\n update(\"Data could not be refreshed\", { type: \"caution\" });\n }\n }\n\n // Use the `handleClick`...\n}\n```\n\nToasts can also prompt the user to take an action. Clicking the action button\nautomatically dismisses the toast.\n\n```\nimport {showToast} from '@stripe/ui-extension-sdk/utils';\n\nconst App = () => {\n const handleClick = async () => {\n let timeout;\n const { dismiss } = await showToast('Message \"sent\"', {\n action: \"Undo\",\n onAction: () => {\n clearTimeout(timeout);\n showToast('Message \"unsent\"');\n },\n });\n timeout = setTimeout(() => {\n sendMessage();\n dismiss();\n }, 3000);\n }\n\n // Use the `handleClick`...\n}\n```\n\n## See also\n\n- [Design patterns to follow](https://docs.stripe.com/stripe-apps/patterns)\n- [Style your app](https://docs.stripe.com/stripe-apps/style)\n- [UI testing](https://docs.stripe.com/stripe-apps/ui-testing)\n\n## Links\n\n- [Design patterns to follow](https://docs.stripe.com/stripe-apps/patterns)\n- [Style your app](https://docs.stripe.com/stripe-apps/style)\n- [UI testing](https://docs.stripe.com/stripe-apps/ui-testing)",
  "metadata": {
    "title": "Toast component for Stripe Apps | Stripe Documentation",
    "description": "Inform users of temporary status.",
    "sourceURL": "https://docs.stripe.com/stripe-apps/components/toast"
  }
}