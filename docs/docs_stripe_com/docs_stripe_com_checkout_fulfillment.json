{
  "content": "# Fulfill orders\n\n## Learn how to fulfill payments received with the Checkout Sessions API.\n\nStripe-hosted pageEmbedded formEmbedded componentsPublic preview\nWhen you receive a payment with the Checkout Sessions API (including Payment\nLinks), you might need to take action to provide your customer with what they\npaid for. For example, you might need to grant them access to a service, or you\nmight need to ship them physical goods. This process is known as fulfillment,\nand you have two ways to handle this process:\n\n- **Manually**: You can manually fulfill orders using information that Stripe\nmakes available to you. For example, you can monitor the\n[Dashboard](https://docs.stripe.com/dashboard/basics), check payment\nnotification emails, or look at reports and then fulfill orders.\n- **Automatically**: You can build an automated fulfillment system. Recommended\n\nThe first option works for low volume or experimental ventures, but for most\nsituations we recommend automating fulfillment. The rest of this guide shows you\nhow to build an automatic fulfillment system.\n\n## Automatic fulfillment\n\nThe automatic fulfillment system outlined below uses a combination of\n[webhooks](https://docs.stripe.com/webhooks) and a redirect to your website to\ntrigger fulfillment. You must use webhooks to make sure fulfillment happens for\nevery payment, and redirects let your customers access services or fulfillment\ndetails immediately after paying.\n\n#### Note\n\nPayment Links use Checkout, so all of the information below applies to both\nPayment Links and Checkout unless otherwise noted.\n\n[Create a fulfillment\nfunctionServer-side](https://docs.stripe.com/checkout/fulfillment#create-fulfillment-function)\nCreate a function on your server to fulfill successful payments. Webhooks\ntrigger this function, and it’s called when customers are sent to your website\nafter completing checkout. This guide refers to this function as\n`fulfill_checkout`, but you can name the function whatever you wish.\n\nYour `fulfill_checkout` function must:\n\n- Correctly handle being called multiple times with the same Checkout Session\nID.\n- Accept a [Checkout Session](https://docs.stripe.com/api/checkout/sessions) ID\nas an argument.\n- Retrieve the Checkout Session from the API with the\n[line_items](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-line_items)\nproperty [expanded](https://docs.stripe.com/api/expanding_objects).\n- Check the\n[payment_status](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-payment_status)\nproperty to determine if it requires fulfillment.\n- Perform fulfillment of the line items.\n- Record fulfillment status for the provided Checkout Session.\n\nUse the code below as a starting point for your `fulfill_checkout` function. The\n`TODO` comments indicate any functionality you must implement.\n\n#### Note\n\nThe code snippets below might name the `fulfill_checkout` function\n`fulfillCheckout` or `FulfillCheckout` depending on the language selected, but\nthey all represent the same function.\n\n```\ndef fulfill_checkout(session_id)\n# Set your secret key. Remember to switch to your live secret key in production.\n # See your keys here: https://dashboard.stripe.com/apikeys\n Stripe.api_key = 'sk_test_BQokikJOvBiI2HlWgH4olfQ2'\n\n puts \"Fullfilling Checkout Session #{session_id}\"\n\n # TODO: Make this function safe to run multiple times,\n # even concurrently, with the same session ID\n\n # TODO: Make sure fulfillment hasn't already been\n # peformed for this Checkout Session\n\n # Retrieve the Checkout Session from the API with line_items expanded\n checkout_session = Stripe::Checkout::Session.retrieve({\n id: session_id,\n expand: ['line_items'],\n })\n\n # Check the Checkout Session's payment_status property\n # to determine if fulfillment should be peformed\n if checkout_session.payment_status != 'unpaid'\n # TODO: Perform fulfillment of the line items\n\n # TODO: Record/save fulfillment status for this\n # Checkout Session\n end\nend\n```\n\n#### Note\n\nIf a Checkout Session has many line items, use\n[auto-pagination](https://docs.stripe.com/api/pagination/auto) with the [API for\nCheckout line items](https://docs.stripe.com/api/checkout/sessions/line_items)\nto retrieve all of them.\n\nDepending on the payment methods you accept and your business needs, you might\nwant to have your `fulfill_checkout` function do the following:\n\n- Provision access to services.\n- Trigger shipment of goods.\n- Save a copy of the payment details and line items in your own database.\n- Send the customer a custom receipt email if you don’t have [Stripe’s\nreceipts](https://docs.stripe.com/receipts) enabled.\n- Reconcile line items and quantities purchased if you allow customers to adjust\nquantities in Checkout.\n- Update inventory or stock records.\n[Create a payment event\nhandlerServer-side](https://docs.stripe.com/checkout/fulfillment#create-payment-event-handler)\nTo trigger fulfillment, create a webhook event handler to listen for payment\nevents and trigger your `fulfill_checkout` function.\n\nWhen someone pays you, it creates a `checkout.session.completed` event. Set up\nan endpoint on your server to accept, process, and confirm receipt of these\nevents.\n\n### Immediate versus delayed payment methods\n\nSome payment methods aren’t\n[instant](https://docs.stripe.com/payments/payment-methods#payment-notification),\nsuch as [ACH direct debit](https://docs.stripe.com/payments/ach-direct-debit)\nand other bank transfers. This means, funds won’t be immediately available when\nCheckout completes. Delayed payment methods generate a\n[checkout.session.async_payment_succeeded](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_succeeded)\nevent when payment succeeds later. The status of the object is in processing\nuntil the payment status either succeeds or fails.\n\n#### Note\n\nThe webhook secret (`whsec_...`) shown in the code below comes from either the\nStripe CLI or your webhook endpoint. You can use the Stripe CLI for local\ntesting, and Stripe uses a webhook endpoint to send events to your handler when\nit’s running on a server. See the next section for more details.\n\n```\nrequire 'sinatra'\n\n# Use the secret provided by Stripe CLI for local testing\n# or your webhook endpoint's secret.\nendpoint_secret = 'whsec_...'\n\npost '/webhook' do\n event = nil\n\n # Verify webhook signature and extract the event\n # See https://stripe.com/docs/webhooks#verify-events for more information.\n begin\n sig_header = request.env['HTTP_STRIPE_SIGNATURE']\n payload = request.body.read\nevent = Stripe::Webhook.construct_event(payload, sig_header, endpoint_secret)\n rescue JSON::ParserError => e\n # Invalid payload\n return status 400\n rescue Stripe::SignatureVerificationError => e\n # Invalid signature\n return status 400\n end\n\n if event['type'] == 'checkout.session.completed' ||\n event['type'] == 'checkout.session.async_payment_succeeded'\n fulfill_checkout(event['data']['object']['id'])\n end\n\n status 200\nend\n```\n\nYou might also want to listen for and handle\n`checkout.session.async_payment_failed` events. For example, you can send an\nemail to your customer when a delayed payment fails.\n\n[Test your event handler\nlocally](https://docs.stripe.com/checkout/fulfillment#test-event-handler)\nThe quickest way to develop and test your webhook event handler is with the\n[Stripe CLI](https://docs.stripe.com/stripe-cli). If you don’t have the Stripe\nCLI, follow the [install guide](https://docs.stripe.com/stripe-cli#install) to\nget started.\n\nWhen the Stripe CLI is installed, you can test your event handler locally. Run\nyour server (for example, on `localhost:4242`), then run the [stripe\nlisten](https://docs.stripe.com/cli/listen) command to have the Stripe CLI\nforward events to your local server:\n\n```\nstripe listen --forward-to localhost:4242/webhook\n\nReady! Your webhook signing secret is 'whsec_<REDACTED>' (^C to quit)\n```\n\nAdd the webhook secret (`whsec_...`) to your event handling code, then test\nfulfillment by going through Checkout as a customer:\n\n- Press the checkout button that takes you to Checkout, or visit your Payment\nLink\n- Provide the following test data in Checkout:- Enter `4242 4242 4242 4242` as\nthe card number\n- Enter any future date for card expiry\n- Enter any 3-digit number for CVV\n- Enter any billing postal code (`90210`)\n- Press the **Pay** button\n\nWhen the payment completes, verify the following:\n\n- On your command line, where `stripe listen` is running, it shows a\n`checkout.session.completed` event forwarded to your local server.\n- Your server logs show the expected output from your `fulfill_checkout`\nfunction.\n[Create a webhook\nendpoint](https://docs.stripe.com/checkout/fulfillment#create-webhook-endpoint)\nAfter testing locally, get your webhook event handler up and running on your\nserver. Next, [create a webhook\nendpoint](https://docs.stripe.com/webhooks#register-webhook) to send\n`checkout.session.completed` events to your server, then test the Checkout flow\nagain.\n\n[Configure a landing page\nURLRecommended](https://docs.stripe.com/checkout/fulfillment#configure-landing-page-url)\nConfigure Checkout to send your customer to a page on your website after they\ncomplete Checkout. Include the `{CHECKOUT_SESSION_ID}` placeholder in your\npage’s URL, which is replaced with the Checkout Session ID when your customer is\nredirected from Checkout.\n\n### Hosted Checkout\n\nFor Checkout Sessions with the default\n[ui_mode](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-ui_mode)\nof `hosted`, set the `success_url`.\n\n```\ncurl https://api.stripe.com/v1/checkout/sessions \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d \"line_items[0][price]\"={{PRICE_ID}} \\\n -d \"line_items[0][quantity]\"=1 \\\n -d mode=payment \\\n--data-urlencode\nsuccess_url=\"https://example.com/after-checkout?session_id={CHECKOUT_SESSION_ID}\"\n```\n\n#### Note\n\nWhen you have a webhook endpoint set up to listen for\n`checkout.session.completed` events and you set a `success_url`, Checkout waits\nfor your server to respond to the webhook event delivery before redirecting your\ncustomer. If you use this approach, make sure your server responds to\n`checkout.session.completed` events as quickly as possible.\n\n### Payment Links\n\nFor Payment Links you create with the API, set the\n[after_completion.redirect.url](https://docs.stripe.com/api/payment_links/payment_links/create#create_payment_link-after_completion-redirect-url).\n\n```\ncurl https://api.stripe.com/v1/payment_links \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d \"line_items[0][price]\"={{PRICE_ID}} \\\n -d \"line_items[0][quantity]\"=1 \\\n -d \"after_completion[type]\"=redirect \\\n--data-urlencode\n\"after_completion[redirect][url]\"=\"https://example.com/after-checkout?session_id={CHECKOUT_SESSION_ID}\"\n```\n\nFor Payment Links you [create in the\nDashboard](https://dashboard.stripe.com/payment-links/create):\n\n- Go to the **After Payment** tab.\n- Select **Don’t show confirmation page**.\n- Provide the URL to your landing page that includes the `{CHECKOUT_SESSION_ID}`\nplaceholder (for example,\n`https://example.com/after-checkout?session_id={CHECKOUT_SESSION_ID}`)\n[Trigger fulfillment on your landing\npageRecommended](https://docs.stripe.com/checkout/fulfillment#trigger-fulfillment-on-landing-page)\n[Listening to\nwebhooks](https://docs.stripe.com/checkout/fulfillment#create-payment-event-handler)\nis required to make sure you always trigger fulfillment for every payment, but\nwebhooks can sometimes be delayed. To optimize your payment flow and guarantee\nimmediate fulfillment when your customer is present, trigger fulfillment from\nyour landing page as well.\n\nUse the Checkout Session ID from the URL you specified in the previous step to\ndo the following:\n\n- When your server receives a request for your Checkout landing page, extract\nthe Checkout Session ID from the URL.\n- Run your `fulfill_checkout` function with the ID provided.\n- Render the page after the fulfillment attempt is complete.\n\nWhen you render your landing page you can display the following:\n\n- Details from the fulfillment process.\n- Links or information about services the customer now has access to.\n- Shipping or logistical details for physical goods.\n\n#### Webhooks are required\n\nYou can’t rely on triggering fulfillment only from your Checkout landing page,\nbecause your customers aren’t guaranteed to visit that page. For example,\nsomeone can pay successfully in Checkout and then lose their connection to the\ninternet before your landing page loads.\n\n[Set up a webhook event\nhandler](https://docs.stripe.com/checkout/fulfillment#create-payment-event-handler)\nso Stripe can send payment events directly to your server, bypassing the client\nentirely. Webhooks provide the most reliable way to confirm when you get paid.\nIf webhook event delivery fails, Stripe [retries multiple\ntimes](https://docs.stripe.com/webhooks#automatic-retries).\n\n## Links\n\n- [Dashboard](https://docs.stripe.com/dashboard/basics)\n- [webhooks](https://docs.stripe.com/webhooks)\n- [Checkout Session](https://docs.stripe.com/api/checkout/sessions)\n-\n[line_items](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-line_items)\n- [expanded](https://docs.stripe.com/api/expanding_objects)\n-\n[payment_status](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-payment_status)\n- [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys)\n- [auto-pagination](https://docs.stripe.com/api/pagination/auto)\n- [API for Checkout line\nitems](https://docs.stripe.com/api/checkout/sessions/line_items)\n- [Stripe’s receipts](https://docs.stripe.com/receipts)\n-\n[instant](https://docs.stripe.com/payments/payment-methods#payment-notification)\n- [ACH direct debit](https://docs.stripe.com/payments/ach-direct-debit)\n-\n[checkout.session.async_payment_succeeded](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_succeeded)\n-\n[https://stripe.com/docs/webhooks#verify-events](https://stripe.com/docs/webhooks#verify-events)\n- [Stripe CLI](https://docs.stripe.com/stripe-cli)\n- [install guide](https://docs.stripe.com/stripe-cli#install)\n- [stripe listen](https://docs.stripe.com/cli/listen)\n- [create a webhook endpoint](https://docs.stripe.com/webhooks#register-webhook)\n-\n[ui_mode](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-ui_mode)\n-\n[https://example.com/after-checkout?session_id={CHECKOUT_SESSION_ID}](https://example.com/after-checkout?session_id={CHECKOUT_SESSION_ID})\n-\n[after_completion.redirect.url](https://docs.stripe.com/api/payment_links/payment_links/create#create_payment_link-after_completion-redirect-url)\n- [create in the Dashboard](https://dashboard.stripe.com/payment-links/create)\n- [retries multiple times](https://docs.stripe.com/webhooks#automatic-retries)",
  "metadata": {
    "title": "Fulfill orders | Stripe Documentation",
    "description": "Learn how to fulfill payments received with the Checkout Sessions API.",
    "sourceURL": "https://docs.stripe.com/checkout/fulfillment"
  }
}