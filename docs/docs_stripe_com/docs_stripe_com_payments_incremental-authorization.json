{
  "content": "# Increment an authorization\n\n## Increase an existing authorization on a confirmed PaymentIntent before you capture it.\n\nStripe-hosted pageEmbedded formAdvanced integration\nIncremental authorization allows you to increase the authorized amount on a\nconfirmed PaymentIntent before you capture it. Before capture, each incremental\nauthorization appears on the credit card statement as an additional pending\nentry (for example, a 10 USD authorization incremented to 15 USD appears as\nseparate 10 USD and 5 USD pending entries). After capture, the pending\nauthorizations are removed, and the total captured amount appears as one final\nentry.\n\n## Availability\n\nWhen using incremental authorizations, be aware of the following restrictions:\n\n- It’s only available with Visa, Mastercard, or Discover.\n- Certain card brands have merchant category restrictions (see below).\n-\n[mode](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-mode)\nis set to `payment` and\n[capture_method](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-payment_intent_data-capture_method)\nis set to `manual` on the\n[CheckoutSession](https://docs.stripe.com/api/checkout/sessions/).\n\nTo learn more about incremental authorization and in-person payments made using\nTerminal, see [Incremental\nAuthorizations](https://docs.stripe.com/terminal/features/incremental-authorizations).\n\n#### IC+ feature\n\nWe offer incremental authorizations to users on\n[IC+](https://support.stripe.com/questions/understanding-blended-interchange-pricing)\npricing. If you’re on standard Stripe pricing and want access to this feature,\nyou can learn more at [support.stripe.com](https://support.stripe.com/).\n\n### Availability by card network and merchant category\n\nUse incremental authorizations on payments that fulfill the criteria below. You\ncan find your user category in the\n[Dashboard](https://dashboard.stripe.com/settings/update/company/update).\n\nAttempting to perform an incremental authorization on a payment that doesn’t\nfulfill the below criteria results in an error.\n\nCard brandMerchant countryPayment typeMerchant categoryVisaGlobalAll card\npayment typesAll user categoriesMastercardGlobal*All card payment typesAll user\ncategoriesDiscoverGlobalAll card payment typesCar rental, hotels, local/suburban\ncommuter, passenger transportation, including ferries, passenger railways, bus\nlines-charter, tour, steamship/cruise lines, boat rentals & lease, grocery\nstores and supermarkets, electric vehicle charging, eating places and\nrestaurants, drinking places (alcoholic beverages), hotels, motels, resorts,\ntrailer parks & campgrounds, equip/tool/furn/appl rental & leasing, automobile\nrental agency, truck and utility trailer rentals, motor home and rec vehicle\nrentals, parking lots, parking meters, and garages, amusement parks, circuses,\nfortune tell, recreation services (not classified)DiscoverGlobalCard not\npresentTaxicabs and limousines\n* Excludes MX users and JPY transactions for JP users\n\n### Networks with limited support (beta)\n\n### Incremental authorizations with Strong Customer Authentication (SCA)\n\nIf you and the cardholder are in a [country with SCA\nrequirements](https://support.stripe.com/questions/countries-in-the-european-economic-area-(eea)-impacted-by-strong-customer-authentication-(sca)-regulation),\nthere are important considerations to keep in mind when using incremental\nauthorization.\n\nWhen you request the incremental authorization feature during the initial\nauthorization, Stripe automatically configures the payment method for future\noff-session usage. Although this requires 3D Secure (3DS) for the initial\nauthorization, subsequent incremental authorizations on this payment is\nconsidered merchant-initiated, potentially exempting any additional SCA. Clearly\nindicate to your customer during the initial transaction that their payment will\nbe saved for future off-session usage with the incremental authorizations.\n\nWith some 3DS transactions, the [liability for fraudulent chargebacks (stolen or\ncounterfeit cards) shifts from you to the card\nissuer](https://docs.stripe.com/payments/3d-secure/authentication-flow#disputed-payments).\nYou don’t benefit from liability shift when submitting merchant-initiated\ntransactions.\n\n#### Compliance\n\nYou’re responsible for your compliance with all applicable laws, regulations,\nand network rules when saving a customer’s payment details. For instance, if you\nwant to save their payment method for future use, such as charging them when\nthey’re not actively using your website or app. Add terms to your website or app\nthat state how you plan to save payment method details and allow customers to\nopt in.\n\nIf you want to charge them when they’re offline, make sure your terms include\nthe following:\n\n- The customer’s agreement to your initiating a payment or a series of payments\non their behalf for specified transactions.\n- The anticipated timing and frequency of payments (for example, if the charges\nare for scheduled installments, subscription payments, or unscheduled top-ups).\n- How you determine the payment amount.\n- Your cancellation policy, if the payment method is for a subscription service.\n\nMake sure you keep a record of your customer’s written agreement to these terms.\n\n## Best practices\n\nWhen using incremental authorization, proactively notify your end customer with\nthe details of any authorizations for estimated amounts, which might be followed\nby incremental authorizations that increase those amounts. Here are some best\npractices for doing so:\n\n- Disclose that an authorization is for an estimated amount and that subsequent\nauthorization requests might follow at the time of checkout, before purchase.\n- Base estimated amounts on a genuine estimate of what the total transaction\namount will be.\n\nYou can use the\n[custom_text](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-custom_text)\nfield when creating a new\n[CheckoutSession](https://docs.stripe.com/api/checkout_sessions) to display\nadditional text on the checkout page to help meet compliance requirements.\n\n#### Compliance\n\nYou’re responsible for your compliance with all applicable laws, regulations,\nand network rules when using incremental authorization. Consult the network\nrules for the card networks that you plan to use this feature with to make sure\nyour sales comply with applicable rules, which vary by network. For example,\nmost card networks restrict how you can calculate estimated amounts included in\nthe initial authorization, and prohibit the use of incremental authorizations\nfor transactions where the transaction amount should be known at the time of\nauthorization (for example, charges for recurring subscriptions).\n\nThe information provided on this page relating to your compliance with these\nrequirements is for your general guidance, and isn’t legal, tax, accounting, or\nother professional advice. Consult with a professional if you’re unsure about\nyour obligations.\n\n[Create a\nCheckoutSession](https://docs.stripe.com/payments/incremental-authorization#create-and-confirm)\nAdd a checkout button to your website that calls a server-side endpoint to\ncreate a [Checkout\nSession](https://docs.stripe.com/api/checkout/sessions/create).\n\n```\n<html>\n <head>\n <title>Buy cool new product</title>\n </head>\n <body>\n<!-- Use action=\"/create-checkout-session.php\" if your server is PHP based. -->\n <form action=\"/create-checkout-session\" method=\"POST\">\n <button type=\"submit\">Checkout</button>\n </form>\n </body>\n</html>\n```\n\nA Checkout Session is the programmatic representation of what your customer sees\nwhen they’re redirected to the payment form. You can configure it with options\nsuch as:\n\n- [Line\nitems](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items)\nto charge\n- Currencies to use\n\nYou must populate `success_url` with the URL value of a page on your website\nthat Checkout returns your customer to after they complete the payment. You can\noptionally also provide a `cancel_url` value of a page on your website that\nCheckout returns your customer to if they terminate the payment process before\ncompletion.\n\n#### Note\n\nCheckout Sessions expire 24 hours after creation by default.\n\nAfter creating a Checkout Session, redirect your customer to the\n[URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url)\nreturned in the response.\n\nLastly, set\n[request_incremental_authorization](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-payment_method_options-card-request_incremental_authorization)\nas `if_available` to enable the incremental authorization feature.\n\n```\n# This example sets up an endpoint using the Sinatra framework.\n# Watch this video to get started: https://youtu.be/8aA9Enb8NVc.\n\nrequire 'json'\nrequire 'sinatra'\nrequire 'stripe'\n\n# Set your secret key. Remember to switch to your live secret key in production.\n# See your keys here: https://dashboard.stripe.com/apikeys\nStripe.api_key = 'sk_test_BQokikJOvBiI2HlWgH4olfQ2'\n\npost '/create-checkout-session' do\n session = Stripe::Checkout::Session.create({\n line_items: [{\n price_data: {\n currency: 'usd',\n product_data: {\n name: 'T-shirt',\n },\n unit_amount: 2000,\n },\n quantity: 1,\n }],\n payment_method_options: {\n card: {\n request_incremental_authorization: 'if_available',\n },\n },\n mode: 'payment',\n # These placeholder URLs will be replaced in a following step.\n success_url: 'https://example.com/success',\n cancel_url: 'https://example.com/cancel',\n })\n\n redirect session.url, 303\nend\n```\n\nAfter the customer has completed checkout, the\n[payment_method_details](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details)\nfield on the [latest_charge](https://docs.stripe.com/api/charges/object) in the\n[PaymentIntent](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-payment_intent)\ncontains `available` or `unavailable` based on the customer’s payment method and\n[the availability criteria mentioned\nabove](https://docs.stripe.com/payments/incremental-authorization#availability),\nwhich determines whether a PaymentIntent is eligible for incremental\nauthorization or not. (If you didn’t request incremental authorization when\ncreating the CheckoutSession, it will be `unavailable`.)\n\n```\n{\n \"id\": \"pi_ANipwO3zNfjeWODtRPIg\",\n \"object\": \"payment_intent\",\n \"amount\": 1000,\n \"amount_capturable\": 1000,\n \"amount_received\": 0,\n ...\n // if latest_charge is expanded\n {\n \"latest_charge\": {\n \"amount\": 1000,\n \"payment_method_details\": {\n \"card\": {\n \"incremental_authorization\": {\n \"status\": \"available\" // or \"unavailable\"\n }\n }\n }\n ...\n }\n }\n\n}\n```\n\n[Mount\nCheckout](https://docs.stripe.com/payments/incremental-authorization#mount-checkout)HTML\n+ JSReact\nCheckout is available as part of [Stripe.js](https://docs.stripe.com/js).\nInclude the Stripe.js script on your page by adding it to the head of your HTML\nfile. Next, create an empty DOM node (container) to use for mounting.\n\n```\n<head>\n <script src=\"https://js.stripe.com/v3/\"></script>\n</head>\n<body>\n <div id=\"checkout\">\n <!-- Checkout will insert the payment form here -->\n </div>\n</body>\n```\n\nInitialize Stripe.js with your publishable API key.\n\nCreate an asynchronous `fetchClientSecret` function that makes a request to your\nserver to create the Checkout Session and retrieve the client secret. Pass this\nfunction into `options` when you create the Checkout instance:\n\n```\n// Initialize Stripe.js\nconst stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\ninitialize();\n\n// Fetch Checkout Session and retrieve the client secret\nasync function initialize() {\n const fetchClientSecret = async () => {\n const response = await fetch(\"/create-checkout-session\", {\n method: \"POST\",\n });\n const { clientSecret } = await response.json();\n return clientSecret;\n };\n\n // Initialize Checkout\n const checkout = await stripe.initEmbeddedCheckout({\n fetchClientSecret,\n });\n\n // Mount Checkout\n checkout.mount('#checkout');\n}\n```\n\nCheckout renders in an iframe that securely sends payment information to Stripe\nover an HTTPS connection.\n\n#### Common mistake\n\nAvoid placing Checkout within another iframe because some payment methods\nrequire redirecting to another page for payment confirmation.\n\n### Customize appearance\n\nCustomize Checkout to match the design of your site by setting the background\ncolor, button color, border radius, and fonts in your account’s [branding\nsettings](https://dashboard.stripe.com/settings/branding).\n\nBy default, Checkout renders with no external padding or margin. We recommend\nusing a container element such as a div to apply your desired margin (for\nexample, 16px on all sides).\n\n[Show a return\npage](https://docs.stripe.com/payments/incremental-authorization#return-page)\nAfter your customer attempts payment, Stripe redirects them to a return page\nthat you host on your site. When you created the Checkout Session, you specified\nthe URL of the return page in the\n[return_url](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-return_url)\nparameter. Read more about other options for [customizing redirect\nbehavior](https://docs.stripe.com/payments/checkout/custom-success-page?payment-ui=embedded-form).\n\nWhen rendering your return page, retrieve the Checkout Session status using the\nCheckout Session ID in the URL. Handle the result according to the session\nstatus as follows:\n\n- `complete`: The payment succeeded. Use the information from the Checkout\nSession to render a success page.\n- `open`: The payment failed or was canceled. Remount Checkout so that your\ncustomer can try again.\n\n```\nget '/session-status' do\n session = Stripe::Checkout::Session.retrieve(params[:session_id])\n\n{status: session.status, customer_email: session.customer_details.email}.to_json\nend\n```\n\n```\nconst session = await fetch(`/session_status?session_id=${session_id}`)\nif (session.status == 'open') {\n // Remount embedded Checkout\n} else if (session.status == 'complete') {\n // Show success page\n // Optionally use session.payment_status or session.customer_email\n // to customize the success page\n}\n```\n\n#### Redirect-based payment methods\n\nDuring payment, some payment methods redirect the customer to an intermediate\npage, such as a bank authorization page. When they complete that page, Stripe\nredirects them to your return page.\n\nLearn more about [redirect-based payment methods and redirect\nbehavior](https://docs.stripe.com/payments/checkout/custom-success-page?payment-ui=embedded-form#redirect-based-payment-methods).\n\n[Perform an incremental\nauthorization](https://docs.stripe.com/payments/incremental-authorization#increment-authorization)\nTo increase the authorized amount on a PaymentIntent, use the\n[increment_authorization](https://docs.stripe.com/api/payment_intents/increment_authorization)\nendpoint and provide the updated total [authorization\namount](https://docs.stripe.com/api/payment_intents/increment_authorization#increment_authorization-amount)\nto increment to, which must be greater than the original authorized amount. This\nattempts to authorize for a higher amount on your customer’s card. A single\nPaymentIntent can call this endpoint multiple times to further increase the\nauthorized amount.\n\nYou have a maximum of 10 incremental authorization attempts per PaymentIntent.\n\n```\ncurl\nhttps://api.stripe.com/v1/payment_intents/{{PAYMENT_INTENT_ID}}/increment_authorization\n\\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"amount\"=1500\n```\n\nIf the incremental authorization succeeds, it returns the PaymentIntent object\nwith the updated amount. If the authorization fails, it returns a\n[card_declined](https://docs.stripe.com/error-codes#card-declined) error\ninstead. The PaymentIntent object remains capturable for the previously\nauthorized amount. Any potential updates to other PaymentIntent fields (for\nexample,\n[application_fee_amount](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-application_fee_amount),\n[transfer_data](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-transfer_data),\n[metadata](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-metadata),\n[description](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-description),\nand\n[statement_descriptor](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-statement_descriptor))\naren’t saved if the incremental authorization fails.\n\nIncremental authorization has a maximum cap of either 500 USD (or local\nequivalent) over, or 500% over the previously authorized amount (whichever is\nhigher) for each individual increment.\n\n[Capture the\nPaymentIntent](https://docs.stripe.com/payments/incremental-authorization#capture-payment-intent)\nWhether you increase the authorized amount on a PaymentIntent with an\nincremental authorization or not, you need to capture the funds before the\ninitial authorization expires–incremental authorizations don’t extend [the\nvalidity\nperiod](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method). To\ncapture the authorized amount on a PaymentIntent with prior incremental\nauthorizations, use the [capture\nendpoint](https://docs.stripe.com/api/payment_intents/capture) as usual.\n\n```\ncurl https://api.stripe.com/v1/payment_intents/{{PAYMENT_INTENT_ID}}/capture \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2:\n```\n\nIf the incremental authorization succeeds, it returns the captured PaymentIntent\nobject with the updated amount. If the authorization fails, it returns a\n[card_declined error](https://docs.stripe.com/error-codes#card-declined)\ninstead. The PaymentIntent isn’t captured, but it remains capturable for the\npreviously authorized amount. Any potential updates to other PaymentIntent\nfields (for example,\n[application_fee_amount](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-application_fee_amount),\n[transfer_data](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-transfer_data),\n[metadata](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-metadata),\n[description](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-description)\nand\n[statement_descriptor](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-statement_descriptor))\naren’t saved if the incremental authorization fails.\n\n[Test your\nintegration](https://docs.stripe.com/payments/incremental-authorization#test-your-integration)\nUse the incremental authorization Stripe test card with any CVC, postal code,\nand future expiration to trigger incremental authorization while in test mode:\n\n- First create the CheckoutSession using the test card in the [create a\nCheckoutSession\nstep](https://docs.stripe.com/payments/incremental-authorization#create-and-confirm)\nabove.\n- Perform the incremental authorization with the parameters specified in the\n[perform an incremental authorization\nstep](https://docs.stripe.com/payments/incremental-authorization#increment-authorization)\nabove, and use the test card to trigger an incremental authorization.\nNumberPayment\nMethodDescription4000058400000063`pm_card_debit_incrementalAuthAuthorized`This\nincreases the authorization amount to the amount provided in the request.\n\n## Links\n\n-\n[mode](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-mode)\n-\n[capture_method](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-payment_intent_data-capture_method)\n- [CheckoutSession](https://docs.stripe.com/api/checkout/sessions/)\n- [Incremental\nAuthorizations](https://docs.stripe.com/terminal/features/incremental-authorizations)\n-\n[IC+](https://support.stripe.com/questions/understanding-blended-interchange-pricing)\n- [support.stripe.com](https://support.stripe.com/)\n- [Dashboard](https://dashboard.stripe.com/settings/update/company/update)\n- [country with SCA\nrequirements](https://support.stripe.com/questions/countries-in-the-european-economic-area-(eea)-impacted-by-strong-customer-authentication-(sca)-regulation)\n- [liability for fraudulent chargebacks (stolen or counterfeit cards) shifts\nfrom you to the card\nissuer](https://docs.stripe.com/payments/3d-secure/authentication-flow#disputed-payments)\n-\n[custom_text](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-custom_text)\n- [CheckoutSession](https://docs.stripe.com/api/checkout_sessions)\n- [Checkout Session](https://docs.stripe.com/api/checkout/sessions/create)\n- [Line\nitems](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items)\n-\n[URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url)\n-\n[request_incremental_authorization](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-payment_method_options-card-request_incremental_authorization)\n- [https://youtu.be/8aA9Enb8NVc.](https://youtu.be/8aA9Enb8NVc)\n- [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys)\n- [https://example.com/success](https://example.com/success)\n- [https://example.com/cancel](https://example.com/cancel)\n-\n[payment_method_details](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details)\n- [latest_charge](https://docs.stripe.com/api/charges/object)\n-\n[PaymentIntent](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-payment_intent)\n- [Stripe.js](https://docs.stripe.com/js)\n- [https://js.stripe.com/v3/](https://js.stripe.com/v3/)\n- [branding settings](https://dashboard.stripe.com/settings/branding)\n-\n[return_url](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-return_url)\n- [customizing redirect\nbehavior](https://docs.stripe.com/payments/checkout/custom-success-page?payment-ui=embedded-form)\n- [redirect-based payment methods and redirect\nbehavior](https://docs.stripe.com/payments/checkout/custom-success-page?payment-ui=embedded-form#redirect-based-payment-methods)\n-\n[increment_authorization](https://docs.stripe.com/api/payment_intents/increment_authorization)\n- [authorization\namount](https://docs.stripe.com/api/payment_intents/increment_authorization#increment_authorization-amount)\n- [card_declined](https://docs.stripe.com/error-codes#card-declined)\n-\n[application_fee_amount](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-application_fee_amount)\n-\n[transfer_data](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-transfer_data)\n-\n[metadata](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-metadata)\n-\n[description](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-description)\n-\n[statement_descriptor](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-statement_descriptor)\n- [the validity\nperiod](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method)\n- [capture endpoint](https://docs.stripe.com/api/payment_intents/capture)",
  "metadata": {
    "title": "Increment an authorization | Stripe Documentation",
    "description": "Increase an existing authorization on a confirmed PaymentIntent before you capture it.",
    "sourceURL": "https://docs.stripe.com/payments/incremental-authorization"
  }
}