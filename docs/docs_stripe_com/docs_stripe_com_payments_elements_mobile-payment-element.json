{
  "content": "# Mobile Payment Element\n\n## Accept payments in your mobile app.\n\nThe Mobile Payment Element is a UI component for building checkout flows in your\nmobile app. Use our [iOS](https://github.com/stripe/stripe-ios),\n[Android](https://github.com/stripe/stripe-android), and [React\nNative](https://github.com/stripe/stripe-react-native) SDKs to start building\nwith it. You can style all Elements to match the look and feel of your app.\n\nWith the Mobile Payment Element, you get:\n\n- [Access to over 100 global payment\nmethods](https://docs.stripe.com/payments/payment-methods/overview) This\nincludes Apple Pay, Link, and other popular payment methods that are\nautomatically enabled.\n- [Dynamic payment\nmethods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods)\nSimplify your payment methods code by dynamically ordering and displaying\npayment methods and [launch A/B\ntests](https://docs.stripe.com/payments/a-b-testing) for new payment methods.\n- [UI customizations to match your\napp](https://docs.stripe.com/elements/appearance-api/mobile) Match the UI to the\ndesign of your app. The layout stays consistent, but you can modify colors,\nfonts, and more.\n- [Address\ncollection](https://docs.stripe.com/payments/mobile/save-during-payment?platform=ios&mobile-ui=payment-element#collect-payment-details)\nCollect full or partial billing addresses with any payment method.\n- [Save and display cards and bank\naccounts](https://docs.stripe.com/payments/mobile/accept-payment?platform=ios&type=payment#enable-saved-cards)\nSave, reuse, and manage cards and bank accounts. You can also [store a\ncustomer’s payment details without an initial\npayment](https://docs.stripe.com/payments/mobile/set-up-future-payments).\n\n## Integration options\n\nThe Mobile Payment Element has two main integration options:\n\n- **Payment Sheet:** A prebuilt sheet that can be opened anywhere in your app.\nThe sheet displays the list of payment methods, displays express pay buttons,\nand contains the confirmation button.\n- **Embedded Element:** A customizable drop-in component that embeds a list of\npayment methods on any screen in your app. When a payment method is selected\nfrom the list, a bottom sheet collects payment details. Private preview\n\n![Comparison of Payment Sheet and Embedded Element\nintegrations](https://b.stripecdn.com/docs-statics-srv/assets/mpe-integration-options.0a72f8ef17d8c8f6b20cdeae799282bc.png)\n\nComparison of Payment Sheet and Embedded Element integrations.\n\n## Layout\n\nWhen using the Payment Sheet, set the layout to `.automatic` for Stripe to\nprovide the appropriate payment method layout. You can also select `.vertical`\nor `horizontal` layout.\n\nWhen using the Embedded Element, choose between radio layout, check mark layout,\nor floating buttons with a selected stroke.\n\n![Comparison of Payment Sheet and Embedded Element\nintegrations](https://b.stripecdn.com/docs-statics-srv/assets/mpe-layout.04901cbbebe86045545e9cc08cadfca3.png)\n\nThe Payment Sheet is available in the following modes: horizontal, carousel, and\nvertical.\n\nThe Embedded Element supports: radio buttons, checkmarks, and floating button\nlayouts.\n\n## Appearance\n\nUse the Appearance API to customize the look and feel of the Mobile Payment\nElement to match your app. With the Appearance API, you can control fonts,\ncolors, borders, shadows, and so on.\n\n![Comparison of Payment Sheet and Embedded Element\nintegrations](https://b.stripecdn.com/docs-statics-srv/assets/mpe-appearance.585c8b5f7e554e52bfc9ac5ed7ebeb6f.png)\n\nThe Payment Sheet supports custom styling for the following modes: horizontal,\ncarousel, and vertical.\n\nThe Embedded Element supports custom styling for: radio buttons and floating\nbutton layouts.\n\n## Payment methods\n\nThe Mobile Payment Element provides access to over 100 payment methods across\nall Stripe-supported countries. You can enable payment methods from your Stripe\nDashboard or by using External Payment Methods.\n\nPayment method providers often change their collection and display requirements.\nWhen you use the Mobile Payment Element to display payment methods, Stripe\nhandles all payment detail collection in prebuilt, localized forms that we keep\nup-to-date with each payment provider.\n\n![Comparison of payment method selection in Payment Sheet and Embedded Element\nintegrations](https://b.stripecdn.com/docs-statics-srv/assets/mpe-payment-methods.951d70f0e8fecf0fd4f7efde4c6a5001.png)\n\nThe Payment Sheet shows examples of the card form and Klarna form. The Embedded\nElement shows examples of using P24 and SEPA debit.\n\n## Wallets\n\nThe Mobile Payment Element supports popular wallets, including Apple Pay and\nLink, the Stripe click-to-pay checkout solution.\n\n- The Payment Sheet can show wallets using express buttons.\n- The Embedded Element shows wallets in-line as payment method options.\n\n![Comparison of wallets in Payment Sheet and Embedded Element\nintegrations](https://b.stripecdn.com/docs-statics-srv/assets/mpe-wallets.4fc028e5f210600f6519346be3643562.png)\n\nThe Payment Sheet illustrates native support for Apple Pay. The Embedded Element\nillustrates native support for Link.\n\n## Saved payment methods\n\nThe Mobile Payment Element has built in support for saving, displaying, and\nmanaging saved payment methods. Consent states are handled automatically,\nensuring global compliance.\n\nSaved payment methods supports cards, US bank accounts, and SEPA debit accounts.\n\nThe CustomerSessions API provides additional control over:\n\n- When to show or hide the save consent box\n- When to show or hide the saved payment methods\n- Allowing buyers to remove saved payment methods\n- Preventing buyers from removing the last saved payment method\n\n![Comparison of saved payment methods in Payment Sheet and Embedded Element\nintegrations](https://b.stripecdn.com/docs-statics-srv/assets/mpe-saved-payment-methods.6f4575d3b609aa6033a4f410e30997ee.png)\n\nExamples of how customers can access saved payment methods in the Payment Sheet\nand the Embedded Element.\n\n## Collecting address details\n\nYou can configure The Mobile Payment Element to collect additional payment\ninformation, including name, email, phone and billing address, regardless of\nwhich payment method is being used.\n\n![Comparison of saved payment methods in Payment Sheet and Mobile Payment\nElement\nintegrations](https://b.stripecdn.com/docs-statics-srv/assets/mpe-collecting-address-details.1712b3f2156d395d241b117fddd7d452.png)\n\nThe Payment Sheet displays the card form with billing details enabled. The\nEmbedded Element shows the P24 form with billing details enabled.\n\n## Additional features\n\nThe Mobile Payment Element contains several additional features, including:\n\n- CVC recollection: Configure whether CVC re-collection is required when users\npay with a saved payment method.\n- Card brand filtering: Configure which card brands you accept.\n\n## Links\n\n- [iOS](https://github.com/stripe/stripe-ios)\n- [Android](https://github.com/stripe/stripe-android)\n- [React Native](https://github.com/stripe/stripe-react-native)\n- [Access to over 100 global payment\nmethods](https://docs.stripe.com/payments/payment-methods/overview)\n- [Dynamic payment\nmethods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods)\n- [launch A/B tests](https://docs.stripe.com/payments/a-b-testing)\n- [UI customizations to match your\napp](https://docs.stripe.com/elements/appearance-api/mobile)\n- [Address\ncollection](https://docs.stripe.com/payments/mobile/save-during-payment?platform=ios&mobile-ui=payment-element#collect-payment-details)\n- [Save and display cards and bank\naccounts](https://docs.stripe.com/payments/mobile/accept-payment?platform=ios&type=payment#enable-saved-cards)\n- [store a customer’s payment details without an initial\npayment](https://docs.stripe.com/payments/mobile/set-up-future-payments)",
  "metadata": {
    "title": "Mobile Payment Element | Stripe Documentation",
    "description": "Accept payments in your mobile app.",
    "sourceURL": "https://docs.stripe.com/payments/elements/mobile-payment-element"
  }
}