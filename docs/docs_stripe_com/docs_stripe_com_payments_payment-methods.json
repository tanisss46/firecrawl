{
  "content": "# Payment Methods API\n\n## Learn more about the API that powers a range of global payment methods.\n\nThe Payment Methods API allows you to accept a variety of payment methods\nthrough a single API. A\n[PaymentMethod](https://docs.stripe.com/api/payment_methods/object) object\ncontains the payment method details to create payments. With the Payment Methods\nAPI, you can combine a\n[PaymentMethod](https://docs.stripe.com/api/payment_methods):\n\n- With a [PaymentIntent](https://docs.stripe.com/api/payment_intents) to accept\na payment\n- With a [SetupIntent](https://docs.stripe.com/api/setup_intents) and a\n[Customer](https://docs.stripe.com/api/customers) to save payment details for\nlater\n\n## Supported payment methods\n\nTo determine which payment methods to use for specific locales, see the [guide\nto payment methods](https://stripe.com/payments/payment-methods-guide).\n\nThe guide includes available payment methods for different regions, a detailed\ndescription of each payment method’s characteristics, and the [geographic\nregions](https://stripe.com/payments/payment-methods-guide#payment-methods-fact-sheets)\nwhere they’re most relevant. You can enable any payment methods available to you\nin the [Dashboard](https://dashboard.stripe.com/). Activation is generally\ninstantaneous and doesn’t require additional contracts.\n\n## Customer actions\n\n​​Some payment methods require your customer to take additional steps to\ncomplete the payment. The PaymentIntent object’s `next_action` parameter\nspecifies the type of customer action.\n\nSome common actions that customers need to perform are:\n\n- ​​Redirect to their bank’s online service to authenticate and approve the\npayment.\n- Verify ownership of their account by providing a one-time code that you post\nto the Stripe API (for example, microdeposits).\n- Push funds (for example, in the case for bank transfers) through their bank’s\nonline service.\n\nNot all payment methods require additional customer actions. For example, card\npayments (excluding 3D Secure) require no additional authentication beyond\ncollecting card details.\n\n#### Note\n\nFor payment methods that require customer action, configure [webhook\nendpoints](https://docs.stripe.com/payments/payment-methods#webhooks) for\nnotifications on whether a payment has succeeded or not.\n\n## Immediate or delayed notification of payment success\n\nSome payment methods immediately return payment status when a transaction is\nattempted (for example, card payments) but other methods have a delay such as\nACH debits. For those that immediately return payment status, the PaymentIntent\nstatus either changes to `succeeded` or `requires_payment_method`. A status of\n`succeeded` guarantees that you will receive the funds from your customers.\n\nPayment methods with delayed notification can’t guarantee payment during the\ndelay. The status of the PaymentIntent object will be `processing` until the\npayment status is either successful or failed. It’s common for businesses to\nhold an order in a *pending* state during this time, not fulfilling the order\nuntil the payment is successful.\n\n#### Note\n\n​​For payment methods with delayed notification, configure [webhook\nendpoints](https://docs.stripe.com/payments/payment-methods#webhooks) for\nnotifications on whether a payment has succeeded or not.\n\n## Single-use or reusable\n\nYou can reuse certain payment methods (for example, cards or bank debits) for\nadditional payments without authorizing and collecting payment details again.\n\nYou should always set up reusable payment methods for future use to reduce the\nchance of future declines and payment friction (such as [authentication being\nrequired](https://docs.stripe.com/strong-customer-authentication)). Reusable\npayment methods can be [set up for future use when accepting a\npayment](https://docs.stripe.com/payments/save-during-payment) or [set up for\nfuture use without taking a\npayment](https://docs.stripe.com/payments/save-and-reuse).\n\nSingle-use payment methods (for example, some kinds of bank transfers) can’t be\nattached to customers because they’re consumed after a payment attempt.\n\n## Use webhooks to track payment status\n\nConfigure webhooks by creating a [webhook endpoint or other type of event\ndestination](https://docs.stripe.com/event-destinations) for payment methods\nthat either require customer action or when payment notification is delayed.\nStripe sends the following events when the `PaymentIntent` status is updated:\n\nEventDescriptionNext steps`payment_intent.processing`The customer’s payment was\nsubmitted to Stripe successfully. Only applicable to payment methods with\n[delayed\nnotification](https://docs.stripe.com/payments/payment-methods#payment-notification).Wait\nfor the initiated payment to succeed or fail.`payment_intent.succeeded`The\npayment succeeded.Fulfill the purchased goods or\nservices.`payment_intent.payment_failed`The payment failed.Send an email or push\nnotification to request another payment method.\n​​You can also use the following options instead of setting up an event\ndestination to listen to events:\n\n- Manually track the status of payments in the Stripe Dashboard, if your\nbusiness accepts a low volume of orders from payment methods with delayed\nnotification. The Dashboard allows you to [view all your Stripe\npayments](https://dashboard.stripe.com/test/payments), send email receipts,\nhandle payouts, or retry failed payments.\n- Use polling (for example, repeatedly retrieving a PaymentIntent so that you\ncan check its status). Note that polling is significantly less reliable and may\nnot work at scale. Stripe enforces rate limiting on API requests, so exercise\ncaution if you use polling.\n- Use a partner application to handle common business events, like\n[automation](https://stripe.partners/?f_category=automation) or [marketing and\nsales](https://stripe.partners/?f_category=marketing-and-sales), by integrating\na partner application.\n\n## The PaymentMethod object\n\nA PaymentMethod contains reusable payment method details for creating payments\n(for example, card expiration date or billing address), it doesn’t include\ntransaction-specific information (for example, amount, currency). A\nPaymentMethod is attached to a PaymentIntent to represent the [states of a\npayment lifecycle](https://docs.stripe.com/payments/paymentintents/lifecycle).\nEach PaymentMethod has a [type\nattribute](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type)\n(for example, `\"type\": \"sepa_debit\"` ) and an additional hash whose name matches\nthe type and contains information specific to the PaymentMethod type (for\nexample, `\"sepa_debit\":{}`). Example of a `sepa_debit` PaymentMethod object:\n\n```\n{\n \"id\": \"pm_123456789\",\n \"object\": \"payment_method\",\n \"billing_details\": {\n \"address\": {...},\n \"email\": \"jenny@example.com\",\n \"name\": \"Jenny Rosen\",\n \"phone\": \"+335555555555\"\n },\n \"sepa_debit\": {\n \"bank_code\": \"37040044\",\n \"branch_code\": \"94832\",\n \"country\": \"FR\",\n \"fingerprint\": \"ygEJfUjzWMGyWnZg\",\n \"last4\": \"3000\"\n },\n \"type\": \"sepa_debit\",\n (...)\n}\n```\n\n#### Note\n\nTo safely handle sensitive payment information and automatically handle customer\nactions, Stripe recommends that you create payment methods using\n[Stripe.js](https://docs.stripe.com/js#stripe-create-payment-method).\n\n## See also\n\n- [Guide to Payment Methods](https://stripe.com/payments/payment-methods-guide)\n- [Payment Methods API reference](https://docs.stripe.com/api/payment_methods)\n\n## Links\n\n- [PaymentMethod](https://docs.stripe.com/api/payment_methods/object)\n- [PaymentMethod](https://docs.stripe.com/api/payment_methods)\n- [PaymentIntent](https://docs.stripe.com/api/payment_intents)\n- [SetupIntent](https://docs.stripe.com/api/setup_intents)\n- [Customer](https://docs.stripe.com/api/customers)\n- [guide to payment methods](https://stripe.com/payments/payment-methods-guide)\n- [geographic\nregions](https://stripe.com/payments/payment-methods-guide#payment-methods-fact-sheets)\n- [Dashboard](https://dashboard.stripe.com/)\n- [authentication being\nrequired](https://docs.stripe.com/strong-customer-authentication)\n- [set up for future use when accepting a\npayment](https://docs.stripe.com/payments/save-during-payment)\n- [set up for future use without taking a\npayment](https://docs.stripe.com/payments/save-and-reuse)\n- [webhook endpoint or other type of event\ndestination](https://docs.stripe.com/event-destinations)\n- [delayed\nnotification](https://docs.stripe.com/payments/payment-methods#payment-notification)\n- [view all your Stripe payments](https://dashboard.stripe.com/test/payments)\n- [automation](https://stripe.partners/?f_category=automation)\n- [marketing and sales](https://stripe.partners/?f_category=marketing-and-sales)\n- [states of a payment\nlifecycle](https://docs.stripe.com/payments/paymentintents/lifecycle)\n- [type\nattribute](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type)\n- [Stripe.js](https://docs.stripe.com/js#stripe-create-payment-method)",
  "metadata": {
    "title": "Payment Methods API | Stripe Documentation",
    "description": "Learn more about the API that powers a range of global payment methods.",
    "sourceURL": "https://docs.stripe.com/payments/payment-methods"
  }
}