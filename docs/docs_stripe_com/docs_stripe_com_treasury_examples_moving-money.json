{
  "content": "# Using Treasury to move money\n\n## Learn how to use SetupIntents, PaymentMethods, and verify bank accounts with Stripe Treasury.\n\nHomebox is a fictitious vertical SaaS that builds software for home services\ncompanies like HVAC, cleaners, and plumbers. This integration walks through some\nbasic money movement using the Treasury endpoints of the [Stripe\nAPI](https://docs.stripe.com/api). To see how the company set up a Treasury\nfinancial account and issued payment cards, see [Using Treasury to set up\nfinancial accounts and\ncards](https://docs.stripe.com/treasury/examples/financial-accounts).\n\n## Using external bank accounts\n\nStripe Treasury provides platforms with a suite of account creation and money\nmovement API endpoints to help store, manage, and move connected accounts’\nfunds. Platforms can fund a financial account, and move money between Treasury\nfinancial accounts and external bank accounts.\n\nThe Stripe API offers `InboundTransfer` and `OutboundTransfer` to facilitate\nmoving money between connected accounts’ external bank accounts and their\nTreasury financial accounts. The Stripe API also offers `OutboundPayment` to\nfacilitate moving money from connected accounts’ Treasury financial accounts to\nthird-parties’ external bank accounts. All of these objects can leverage\n`PaymentMethods` to store external bank account details such as routing numbers\nand account numbers.\n\n## PaymentMethods explained\n\nWithin the Stripe API, you can save payment method information using a\n`PaymentMethod` object. For example, Homebox might save their vendors’ accounts\nas `PaymentMethods` to send money without having to re-enter and collect their\ninformation.\n\nYou can attach `PaymentMethods` that contain external bank account information\nto a customer (for sending money to a third party) or to a Stripe account (for\npulling money from or sending money to an external bank account belonging to the\nStripe accountholder). The “customer” refers to the `Customer` object in the\nStripe API, which defines any third party. In Treasury usage, the customer is\ngenerally a vendor receiving payments from the Stripe accountholder rather than\nmaking payments to the Stripe accountholder. Use the `SetupIntent` object to set\nup both customer-attached and account-attached `PaymentMethod` objects.\n\nThe relevant API objects that you can use with a `PaymentMethod` depend on how\nthey’re attached:\n\n- Customer-attached: Use `OutboundPayments`.\n- Account-attached: Use `InboundTransfers` and `OutboundTransfers`.\n\n![Flowchart with external bank account on left and flow moving to SetupIntent\nthen PaymentMethod and attaching to customer or\naccount.](https://b.stripecdn.com/docs-statics-srv/assets/paymentmethods.f429ec4e87b87636c0e2b34c26a69c83.png)\n\nPaymentMethod flow\n\n## InboundTransfers and OutboundTransfers overview\n\nYou can pull funds from a Stripe account’s external bank account using an\n`InboundTransfer` and push funds to their external bank account using an\n`OutboundTransfer`.\n\nTo successfully pull funds into a Treasury financial account with an\n`InboundTransfer`, external bank accounts must be verified by the Stripe\naccountholder. Bank accounts that are used to send funds out of a financial\naccount with an `OutboundTransfer` don’t need to be verified.\n\nWhen an external bank account is used for either `InboundTransfers` or\n`OutboundTransfers`, you need to attach the corresponding `PaymentMethod` to the\nStripe account rather than to a customer. You do this by using the\n`attach_to_self=true` parameter rather than the `customer` parameter when\ncreating the `PaymentMethod` using `SetupIntent`.\n\n![Flow chart with external bank on the left and flow pointing to SetupIntent to\nPaymentMethod and attaching to Stripe\naccount.](https://b.stripecdn.com/docs-statics-srv/assets/iot.38c049d39deca401a3341b34d72189fe.png)\n\n`InboundTransfers` and `OutboundTransfers` flow.\n\n## OutboundPayments\n\nPlatforms use the `OutboundPayment` API to send funds from a Treasury financial\naccount to an external bank account owned by a third party.\n\nYou must attach `PaymentMethods` to a customer to use them with\n`OutboundPayments`. Bank accounts used for `OutboundPayments` don’t need to be\nverified.\n\n!\n\n`OutboundPayments` flow\n\n## Adding an external bank account\n\nHomebox wants to link their customers’ own external bank accounts to their\nTreasury financial accounts. Homebox’s connected accounts want to keep all of\ntheir business capital in their financial accounts and use inbound transfers to\npull money from their external account into their Treasury financial account. To\nenable their connected accounts to transfer money to and from their external\naccounts, Homebox creates a `SetupIntent` with the required parameters and\nattaches it to an account-attached `PaymentMethod`:\n\n```\ncurl https://api.stripe.com/v1/setup_intents \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -H \"Stripe-Account: {{CONNECTED_ACCOUNT_ID}}\" \\\n -d attach_to_self=true \\\n -d \"flow_directions[]\"=inbound \\\n -d \"flow_directions[]\"=outbound \\\n -d \"payment_method_types[]\"=us_bank_account \\\n -d \"payment_method_data[type]\"=us_bank_account \\\n -d \"payment_method_data[us_bank_account][routing_number]\"=110000000 \\\n -d \"payment_method_data[us_bank_account][account_number]\"=000123456789 \\\n -d \"payment_method_data[us_bank_account][account_holder_type]\"=company \\\n -d \"payment_method_data[billing_details][name]\"=\"Company Corp\" \\\n -d confirm=true \\\n -d \"mandate_data[customer_acceptance][type]\"=online \\\n -d \"mandate_data[customer_acceptance][online][ip_address]\"=\"123.123.123.123\" \\\n--data-urlencode\n\"mandate_data[customer_acceptance][online][user_agent]\"=\"curl/1.2.3\"\n```\n\nTo send and receive money through `OutboundTransfers` or `InboundTransfers`,\nHomebox must specify an external bank account with the\n`payment_method_data[us_bank_account]` parameter. Before creating the live\nexternal bank account link, Homebox tests the flow using the [test account\nnumbers](https://docs.stripe.com/payments/ach-direct-debit/set-up-payment?platform=web&payment-ui=stripe-hosted#test-account-numbers)\nStripe provides.\n\nAs shown in the preceding example, Homebox has defined the external bank account\n(`payment_method_data[us_bank_account]`) and set `attach_to_self` as `true`,\nwhich enables the bank account information to be associated with the Stripe\naccountholder (rather than a third party). When the platform sends the request,\nthe Treasury API responds with a `SetupIntent`:\n\n```\n{\n \"id\": \"{{SETUP_INTENT_ID}}\",\n \"object\": \"setup_intent\",\n \"application\": \"{{APPLICATION_ID}}\",\n \"attach_to_self\": true,\n \"cancellation_reason\": null,\n \"client_secret\": \"{{SETUP_INTENT_SECRET}}\",\n \"created\": 1642520861,\n \"customer\": null,\n \"description\": null,\n \"flow_directions\": [\n \"inbound\",\n \"outbound\"\n ],\n \"last_setup_error\": null,\n \"latest_attempt\": \"{{ATTEMPT_ID}}\",\n \"livemode\": false,\n \"mandate\": \"{{MANDATE_ID}}\",\n \"metadata\": {\n },\n \"next_action\": {\n \"type\": \"verify_with_microdeposits\",\n \"verify_with_microdeposits\": {\n \"arrival_date\": 1642579200,\n\"hosted_verification_url\":\n\"https://payments.stripe.com/microdeposit/sacs_test_xxx\",\n \"microdeposit_type\": \"amounts\"\n }\n },\n \"on_behalf_of\": null,\n \"payment_method\": \"{{PAYMENT_METHOD_ID}}\",\n \"payment_method_options\": {\n \"us_bank_account\": {\n \"verification_method\": \"automatic\"\n }\n },\n \"payment_method_types\": [\n \"us_bank_account\"\n ],\n \"single_use_mandate\": null,\n \"status\": \"requires_confirmation\",\n \"usage\": \"off_session\"\n}\n```\n\n## Verifying an external bank account\n\nHomebox linked an external bank account in the previous section. The bank\naccount must be verified, though, before Homebox can use it for\n`InboundTransfers`. Bank account verification enables the account owner to\nconfirm ownership of the external bank account. To verify, Homebox can use\n[Stripe Financial\nConnections](https://docs.stripe.com/treasury/examples/moving-money#connections)\nfor instant verification, or\n[microdeposits](https://docs.stripe.com/treasury/examples/moving-money#microdeposits)\n(which take more time).\n\n### Stripe Financial Connections\n\nStripe offers [Financial\nConnections](https://docs.stripe.com/financial-connections) to instantly verify\nan owned bank account. Financial Connections is a Stripe hosted flow integrated\non the application’s client- and server-side.\n\nThere are three steps necessary for Homebox to collect and verify bank account\ninformation with Financial Connections:\n\n- Create a `SetupIntent` with the property `attach_to_self` (replacing the\n`customer_id` property), and the value `instant` for the `verification_method`\nproperty.\n- Provide the `client_secret` to the frontend application to use\n`stripe.collectBankAccountForSetup` to collect bank account details, create a\n`PaymentMethod`, and attach that `PaymentMethod` to the `SetupIntent`.\n\n#### Note\n\nThe account holder’s name in the `billing_details` parameter is required to\ncreate a US bank account `PaymentMethod`.\n- Display the mandate terms to collect the authorization for the `PaymentMethod`\nusage.\n\nFor step 1, Homebox develops the following code to create a `SetupIntent`\nserver-side and pass the information to a handlebars.js template. This code\nassumes that an application has a user logged in to Stripe and that it passes\nthe Stripe Account ID as part of the [Session\nobject](https://docs.stripe.com/api/financial_connections/sessions/object)\n(`req.session.accountId`).\n\n```\nconst stripe = require(\"stripe\")(process.env.STRIPE_SECRET_KEY);\nrouter.get('/add_bank_account', async (req, res) => {\n const account = await stripe.accounts.retrieve(req.session.accountId);\n const setupIntent = await stripe.setupIntents.create({\n attach_to_self: true,\n flow_directions: ['inbound', 'outbound'],\n payment_method_types: ['us_bank_account'],\npayment_method_options: {us_bank_account: {verification_method: \"automatic\"}}\n },{\n stripeAccount: account.id,\n });\n let client_secret= setupIntent.client_secret;\nres.render('add_bank_account', { account: account, client_secret: client_secret,\nstripe_pk: process.env.STRIPE_PUBLISHABLE_KEY });\n});\n```\n\nStep 2 begins when Homebox passes the following data to the render function:\n\n- The Stripe account ID.\n- The client secret obtained from the `SetupIntent` that’s used as the\nidentifier.\n- The platform’s publishable API key.\n\nIn this example, the client-side page renders with a button for the user to\nvalidate their bank account through Financial Connections.\n\n![Screenshot of a modal titled Add a bank account with a button labeled Save\nPayment\nDetails](https://b.stripecdn.com/docs-statics-srv/assets/add-bank-account-modal.0b727f65d3c6691f3bef211c1a45cb83.png)\n\nModal to add a bank account\n\nHomebox creates the following code to drive the logic behind the preceding\nbutton.\n\n```\nconst getBankAccount = async e => {\n paymentMethodButton.setAttribute(\"disabled\", \"disabled\");\n // Calling this method triggers the Financial Connections modal to display.\nconst response = await stripe.collectBankAccountForSetup(\"{{ client_secret }}\",\n{\n billing_details: {\n name: \"John Doe\",\n email: \"test@test.com\",\n },\n });\n if (response.error)\n {\n console.error(response.error);\n }\n if (response.status == \"requires_confirmation\")\n {\n //Show confirmation modal\n AcceptBankAccountModal.classList.remove(\"hidden\");\n }\n};\n```\n\nIn this code example, the script calls the `collectUsBankAccountForSetup` method\nand passes the `client_secret` from the `SetupIntent`. An application dialog\nwalks the user through linking their bank account.\n\n![Screenshot of a modal going through the workflow of adding a bank account.\nFirst state of modal shows the authorize step with an Agree button and the next\nstate shows the highlighted account with a Link Account\nbutton.](https://b.stripecdn.com/docs-statics-srv/assets/add-account-flow.cfd2209695ca186cd617f682319e564c.png)\n\nWorkflow for adding a bank account\n\nStep 3 begins with the successful completion of the preceding workflow, as the\n`SetupIntent` status changes to `requires_confirmation` and a modal displays an\n[authorization\nmessage](https://docs.stripe.com/payments/ach-direct-debit/set-up-payment?platform=web#web-collect-mandate-and-submit)\nfor the user to confirm.\n\n![Screenshot of a modal displaying the authorization confirmation language with\nan Accept button at the bottom and an x in the top left to\ncancel.](https://b.stripecdn.com/docs-statics-srv/assets/accept-modal.6db14c686b9ec87ff471a18d2f9d2abf.png)\n\nAuthorization message\n\nAfter the user clicks **Accept**, the code calls the `confirmUsBankAccountSetup`\nmethod and the bank account is stored as verified. The bank account can now be\nused for `InboundTransfers`.\n\n```\nconst acceptBankAccount = async e => {\n acceptButton.setAttribute(\"disabled\", \"disabled\");\nconst response = await stripe.confirmUsBankAccountSetup(\"{{ client_secret }}\");\n if (response.setupIntent.status == \"requires_payment_method\") {\n // Confirmation failed. Attempt again with a different payment method.\n console.log(\"Requires payment method\")\n } else if (response.setupIntent.status == \"succeeded\") {\n // Confirmation succeeded! The account is now saved.\n // Display a message to customer.\n AcceptBankAccountModal.classList.add(\"hidden\");\n console.log(\"Account added\");\n} else if (response.setupIntent.next_action?.type ==\n\"verify_with_microdeposits\") {\n // The account needs to be verified via microdeposits.\n // Display a message to consumer with next steps (consumer waits for\n // microdeposits, then enters an amount on a page sent to them via email).\n console.log(\"The account needs to be verified with microdeposits\")\n }\n};\n```\n\n### Microdeposits\n\nMicrodeposits are small sums of money, typically a fraction of a US dollar, that\nStripe deposits into an external bank account. Owners of the account can verify\nownership of the account by confirming the exact amount of those deposits.\n\nThe `SetupIntent` object that Homebox created in the previous section includes a\n`PaymentMethod` ID.\n\n```\n{\n \"id\": \"{{SETUP_INTENT_ID}}\",\n …\n \"on_behalf_of\": null,\n \"payment_method\": \"{{PAYMENT_METHOD_ID}}\",\n \"payment_method_options\": {\n…\n }\n}\n```\n\nThe `SetupIntent` also includes a `next_action` object with a URL defined in the\n`hosted_verification_url` value.\n\n```\n{\n \"id\": \"{{SETUP_INTENT_ID}}\",\n…\n \"next_action\": {\n \"type\": \"verify_with_microdeposits\",\n \"verify_with_microdeposits\": {\n \"arrival_date\": 1642579200,\n\"hosted_verification_url\":\n\"https://payments.stripe.com/microdeposit/sacs_test_xxx\",\n \"microdeposit_type\": \"amounts\"\n }\n…\n }\n```\n\nHomebox provides the URL to the connected account owner to complete\nverification. The owner must follow the URL to verify receipt by entering the\nassociated descriptor code of the microdeposit (in [test\nmode](https://docs.stripe.com/test-mode), use the value `SM11AA`).\n\n![Microdeposit verification dialog showing one cent deposited into an account\nwith a prompt to enter descriptor code and a verify\nbutton.](https://b.stripecdn.com/docs-statics-srv/assets/microdeposits.0b67c00bb4028265c9ed9dbe300f5b81.png)\n\nMicrodeposit verification\n\n## Using PaymentMethods with InboundTransfers\n\nHomebox can begin creating `InboundTransfers` using a bank account verified with\none of the previously described methods.\n\nThe following request transfers 200 USD using an account-attached payment method\ninto the financial account with the provided ID. The `Stripe-Account` header\nvalue identifies the Stripe account that owns both the financial account and the\npayment method.\n\n```\ncurl https://api.stripe.com/v1/treasury/inbound_transfers \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -H \"Stripe-Account: {{CONNECTED_ACCOUNT_ID}}\" \\\n -d origin_payment_method={{PAYMENT_METHOD_ID}} \\\n -d financial_account={{FINANCIAL_ACCOUNT_ID}} \\\n -d amount=20000 \\\n -d currency=usd \\\n -d description=\"Funds for repair\" \\\n -d statement_descriptor=\"Invoice 12\"\n```\n\nIf successful, the response provides the `InboundTransfer` object. The object\nincludes a `hosted_regulatory_receipt_url` that provides access to details of\nthe transaction for the account holder on the Homebox platform.\n\n```\n{\n \"id\": \"{{INBOUND_TRANSFER_ID}}\",\n \"object\": \"inbound_transfer\",\n \"amount\": 20000,\n \"created\": 1648071297,\n \"currency\": \"usd\",\n \"description\": \"Funds for repair\",\n \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",\n\"hosted_regulatory_receipt_url\":\n\"https://payments.stripe.com/regulatory-receipt/{{IBT_URL}}\",\n \"linked_flows\": null,\n \"livemode\": false,\n \"metadata\": {},\n \"origin_payment_method\": \"{{PAYMENT_METHOD_ID}}\",\n ...\n \"statement_descriptor\": \"Invoice 12\",\n \"status\": \"processing\",\n ...\n}\n```\n\n## Using PaymentMethods with OutboundPayments\n\nYou can also use a `PaymentMethod` to send funds to an external bank account\nowned by a third party using `OutboundPayment` objects.\n\nHomebox wants to send funds to one of its connected account’s vendors on a\nrecurring basis to pay for supplies. To do so, the platform needs to first get\nthe customer ID using the `Customers` endpoint.\n\n```\ncurl https://api.stripe.com/v1/customers \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -H \"Stripe-Account: {{CONNECTED_ACCOUNT_ID}}\" \\\n -d description=\"Test Customer\"\n```\n\nThe response provides the customers for the associated connected account.\nHomebox identifies the correct customer and records their ID.\n\n```\n{\n \"id\": \"{{CUSTOMER_ID}}\",\n \"object\": \"customer\",\n \"address\": null,\n \"balance\": 0,\n \"created\": 1642523420,\n \"currency\": null,\n \"default_source\": null,\n \"delinquent\": false,\n \"description\": \"Test Customer\",\n \"discount\": null,\n \"email\": null,\n \"invoice_prefix\": \"96A50A92\",\n \"invoice_settings\": {\n \"custom_fields\": null,\n \"default_payment_method\": null,\n \"footer\": null\n },\n \"livemode\": false,\n \"metadata\": {\n },\n \"name\": null,\n \"next_invoice_sequence\": 1,\n \"phone\": null,\n \"preferred_locales\": [\n\n ],\n \"shipping\": null,\n \"tax_exempt\": \"none\"\n}\n```\n\nHomebox then creates a `SetupIntent` using the ID. Because `OutboundPayments`\nare used for outbound money flows to third parties, Homebox makes sure to set\n`flow_directions` to `outbound` and doesn’t use `attach_to_self`, instead\nspecifying a `customer`.\n\n```\ncurl https://api.stripe.com/v1/setup_intents \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -H \"Stripe-Account: {{CONNECTED_ACCOUNT_ID}}\" \\\n -d customer={{CUSTOMER_ID}} \\\n -d \"flow_directions[]\"=outbound \\\n -d \"payment_method_types[]\"=us_bank_account \\\n -d \"payment_method_data[type]\"=us_bank_account \\\n -d \"payment_method_data[us_bank_account][routing_number]\"=110000000 \\\n -d \"payment_method_data[us_bank_account][account_number]\"=000123456789 \\\n -d \"payment_method_data[us_bank_account][account_holder_type]\"=individual \\\n -d \"payment_method_data[billing_details][name]\"=\"John doe\" \\\n -d confirm=true\n```\n\nA successful call returns the following object to indicate the `PaymentMethod`\nis successfully attached to the customer.\n\n```\n{\n \"id\": \"{{SETUP_INTENT_ID}}\",\n \"object\": \"setup_intent\",\n \"application\": \"{{APPLICATION_ID}}\",\n \"cancellation_reason\": null,\n \"client_secret\": \"{{SETUP_INTENT_SECRET}}\",\n \"created\": 1642528487,\n \"customer\": \"{{CUSTOMER_ID}}\",\n \"description\": null,\n \"flow_directions\": [\n \"outbound\"\n ],\n \"last_setup_error\": null,\n \"latest_attempt\": null,\n \"livemode\": false,\n \"mandate\": null,\n \"metadata\": {\n },\n \"next_action\": null,\n \"on_behalf_of\": null,\n \"payment_method\": \"{{PAYMENT_METHOD_ID}}\",\n \"payment_method_options\": {\n },\n \"payment_method_types\": [\n \"us_bank_account\"\n ],\n \"single_use_mandate\": null,\n \"status\": \"succeeded\",\n \"usage\": \"off_session\"\n}\n```\n\n## Creating an OutboundPayment without a PaymentMethod\n\n`PaymentMethods` aren’t required when sending or using `OutboundPayments` if you\ndon’t have a need to store the recipient’s bank account, as in the case of\none-off payments.\n\nHomebox needed to pay a vendor 50 USD to cover the cost of supplies. To pay the\nvendor, the platform calls `OutboundPayments` with the external bank account\ninformation.\n\n```\ncurl https://api.stripe.com/v1/treasury/outbound_payments \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -H \"Stripe-Account: {{CONNECTED_ACCOUNT_ID}}\" \\\n -d \"destination_payment_method_data[type]\"=us_bank_account \\\n-d \"destination_payment_method_data[us_bank_account][routing_number]\"=110000000\n\\\n-d\n\"destination_payment_method_data[us_bank_account][account_number]\"=000123456789\n\\\n-d\n\"destination_payment_method_data[us_bank_account][account_holder_type]\"=individual\n\\\n -d \"destination_payment_method_data[billing_details][name]\"=\"John Doe\" \\\n -d financial_account={{FINANCIAL_ACCOUNT_ID}} \\\n -d statement_descriptor=payment_1 \\\n -d amount=5000 \\\n -d currency=usd\n```\n\nThe successful call returns the following object:\n\n```\n{\n \"id\": \"{{OUTBOUNDPAYMENT_ID}}\",\n \"object\": \"treasury.outbound_payment\",\n \"amount\": 5000,\n \"cancelable\": true,\n \"created\": 1643033124,\n \"currency\": \"usd\",\n \"customer\": null,\n \"description\": null,\n \"destination_payment_method\": null,\n \"destination_payment_method_details\": {\n \"billing_details\": {\n \"address\": {\n \"city\": null,\n \"country\": null,\n \"line1\": null,\n \"line2\": null,\n \"postal_code\": null,\n \"state\": null\n },\n \"email\": null,\n \"name\": \"John Doe\",\n \"phone\": null\n },\n \"type\": \"us_bank_account\",\n \"us_bank_account\": {\n \"account_holder_type\": \"individual\",\n \"bank_name\": \"STRIPE TEST BANK\",\n \"fingerprint\": \"SzrMIps1gg91aVKG\",\n \"last4\": \"6789\",\n \"network\": \"ach\",\n \"routing_number\": \"110000000\"\n }\n },\n \"end_user_details\": {\n \"present\": false,\n \"ip_address\": null\n },\n \"expected_arrival_date\": 1643068800,\n \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",\n\"hosted_regulatory_receipt_url\":\n\"https://payments.stripe.com/regulatory-receipt/bot_test_xxx\",\n \"livemode\": false,\n \"metadata\": {\n },\n \"statement_descriptor\": \"payment_1\",\n \"status\": \"processing\",\n \"status_transitions\": {\n \"canceled_at\": null,\n \"failed_at\": null,\n \"posted_at\": null,\n \"processing_at\": 1643033124,\n \"returned_at\": null\n },\n \"transaction\": \"{{TRANSACTION_ID}}\"\n}\n```\n\n## See also\n\n- [Using Treasury to set up financial accounts and\ncards](https://docs.stripe.com/treasury/examples/financial-accounts)\n- [API reference](https://docs.stripe.com/api/treasury/financial_accounts)\n\n## Links\n\n- [Stripe API](https://docs.stripe.com/api)\n- [Using Treasury to set up financial accounts and\ncards](https://docs.stripe.com/treasury/examples/financial-accounts)\n- [test account\nnumbers](https://docs.stripe.com/payments/ach-direct-debit/set-up-payment?platform=web&payment-ui=stripe-hosted#test-account-numbers)\n- [Financial Connections](https://docs.stripe.com/financial-connections)\n- [Session\nobject](https://docs.stripe.com/api/financial_connections/sessions/object)\n- [authorization\nmessage](https://docs.stripe.com/payments/ach-direct-debit/set-up-payment?platform=web#web-collect-mandate-and-submit)\n- [test mode](https://docs.stripe.com/test-mode)\n- [API reference](https://docs.stripe.com/api/treasury/financial_accounts)",
  "metadata": {
    "title": "Using Treasury to move money | Stripe Documentation",
    "description": "Learn how to use SetupIntents, PaymentMethods, and verify bank accounts with Stripe Treasury.",
    "sourceURL": "https://docs.stripe.com/treasury/examples/moving-money"
  }
}