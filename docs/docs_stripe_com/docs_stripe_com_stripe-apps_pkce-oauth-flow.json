{
  "content": "# Add authorization flows\n\n## Implement PKCE OAuth workflows in your Stripe app.\n\nYou can implement OAuth with your UI extension in the Dashboard to retrieve\naccess tokens from an OAuth provider instead of building an OAuth backend. If\nthe user gives your Stripe App access to an OAuth provider, they can interact\nwith the services of the OAuth provider directly from your Stripe app in the\nDashboard.\n\n![A Stripe app's OAuth\nflow](https://b.stripecdn.com/docs-statics-srv/assets/oauth_pkce_flow_diagram_v2.491ae76870978963e8b69e82e2b1a1a1.png)\n\nOAuth flow with a Stripe app\n\n## Before you begin\n\n- Ensure that your OAuth provider supports the [Proof Key for Code Exchange\n(PKCE)](https://auth0.com/docs/get-started/authentication-and-authorization-flow/authorization-code-flow-with-proof-key-for-code-exchange-pkce)\nflow.\n- If you haven’t already, create an app with your OAuth provider to connect and\nuse with your Stripe App.\n- [Create a Stripe app](https://docs.stripe.com/stripe-apps/create-app) and\n[build a UI](https://docs.stripe.com/stripe-apps/build-ui). The UI extension\nretrieves the access token from the OAuth provider with the PKCE flow.\n[Create an authorization\nlink](https://docs.stripe.com/stripe-apps/pkce-oauth-flow#create-authorization-link)\nEnd users click on an authorization link from your app to start the OAuth flow\nand give your app access to the service of the OAuth provider.\n\n- Create the [test mode](https://docs.stripe.com/test-mode) and live mode OAuth\nredirect URLs. The redirect URL is unique to your app and includes your app `id`\nin the path. For example, if the `id` field in your [app\nmanifest](https://docs.stripe.com/stripe-apps/reference/app-manifest) is `\"id\":\n\"com.example.oauth-example\"`:\n\n- The test mode URL is:\n\n```\nhttps://dashboard.stripe.com/test/apps-oauth/com.example.oauth-example\n\n```\n\n- The live mode URL is:\n\n```\nhttps://dashboard.stripe.com/apps-oauth/com.example.oauth-example\n\n```\n- Register the test and live OAuth redirect URLs with your OAuth provider.\n- From your app’s UI extension, create a pathway that routes users from your\nStripe app to authorize the OAuth provider by passing the following parameters\nin the OAuth redirect URLs:\n\nParameterValue`reponse_type`This is always `code`. The PKCE flow uses `code` as\nthe value to request an authorization code from the OAuth\nprovider.`client_id`The ID of your OAuth app assigned from your OAuth\nprovider.`redirect_uri`The Stripe app’s OAuth redirect URL. This is the URL the\nOAuth provider uses to redirect a user to your app.`state`The `state` return\nvalue from the\n[createOAuthState](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#createOAuthState)\nfunction.`code_challenge`The `challenge` return value from the\n[createOAuthState](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#createOAuthState)\nfunction.`code_challenge_method`This is always `S256`.\n\nYou can use the following code example to route users from your Stripe App to\nauthorize a third-party app using the OAuth redirect URLs and the\n[Button](https://docs.stripe.com/stripe-apps/components/button) UI component:\n\n```\nimport {\n ContextView,\n Button,\n} from '@stripe/ui-extension-sdk/ui';\nimport * as React from 'react';\nimport {createOAuthState} from '@stripe/ui-extension-sdk/oauth';\nimport type {ExtensionContextValue} from '@stripe/ui-extension-sdk/context';\n\nconst {useState, useEffect} = React;\n\nconst clientID = 'your_client_id';\nconst getRedirectURL = (mode: 'live' | 'test') =>\n`https://dashboard.stripe.com/${\n mode === 'test' ? 'test/' : ''\n}apps-oauth/com.example.oauth-example`;\nconst getAuthURL = (state: string, challenge: string, mode: 'live' | 'test') =>\n\n`https://www.example.com/oauth2/authorize?response_type=code&client_id=${clientID}&redirect_uri=${getRedirectURL(mode)}&state=${state}&code_challenge=${challenge}&code_challenge_method=S256`;\n\nconst ExampleApp = ({environment}: ExtensionContextValue) => {\n const {mode} = environment;\n const [authURL, setAuthURL] = useState('');\n useEffect(() => {\n createOAuthState().then(({state, challenge}) => {\n setAuthURL(getAuthURL(state, challenge, mode));\n });\n }, [mode]);\n\n return (\n <ContextView title=\"Example\">\n<Button type=\"primary\" href={authURL} target=\"_blank\">Authorize\nExampleApp</Button>\n </ContextView>\n );\n};\nexport default ExampleApp;\n```\n\n[Retrieve an access token from the OAuth\nprovider](https://docs.stripe.com/stripe-apps/pkce-oauth-flow#retrieve-an-access-token)\nYour app can only make requests on behalf of the current user. After the user\nauthorizes your app, the Dashboard passes their OAuth data to your app through\nthe `code` and `verifier` values of the `oauthContext` [context\nprop](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#props).\n\nOnly valid authorization attempts allow your app to read the `code`, `verifier`,\nand if applicable, custom `state` values. An authorization attempt is valid if\nthe OAuth provider redirects to the `redirect_uri` and includes the `state`\nvalue in the matching query string parameter of the authorization link. The\n`state` value must be identical to the `state` value returned by\n`createOAuthState` function (when you created the authorization link).\n\nFrom your app’s UI extension, retrieve the access token from the OAuth provider\nwith the following parameters:\n\nParameterValue`code`The value of the `oauthContext.code` [React\nprop](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#props).`grant_type`This\nis always `authorization_code`.`code_verifier`The value of the\n`oauthContext.verifier` [React\nprop](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#props).`client_id`Your\nclient ID from the OAuth provider.`redirect_uri`The Stripe app’s OAuth redirect\nURL.\nYou can use the following code example to retrieve an access token from an OAuth\nprovider:\n\n```\nimport {ContextView} from '@stripe/ui-extension-sdk/ui';\nimport * as React from 'react';\nimport type {ExtensionContextValue} from '@stripe/ui-extension-sdk/context';\n\nconst {useState, useEffect} = React;\n\n// Store the authorization token data.\ninterface TokenData {\n account_id: string;\n access_token: string;\n expires_in: number;\n}\n\nconst clientID = 'your_client_id';\nconst getRedirectURL = (mode: 'live' | 'test') =>\n`https://dashboard.stripe.com/${\n mode === 'test' ? 'test/' : ''\n}apps-oauth/com.example.oauth-example`;\n\n// Fetch the authorization token from an example authorization server.\nconst getTokenFromAuthServer = async ({code, verifier, mode}: {code: string,\nverifier: string, mode: 'live' | 'test'}): Promise<null | TokenData> => {\n try {\nconst response = await\nfetch(`https://api.example.com/oauth2/token?code=${code}&grant_type=authorization_code&code_verifier=${verifier}&client_id=${clientID}&redirect_uri=${getRedirectURL(mode)}`,\n{\n method: 'POST',\n headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n });\n if (response.ok) {\n return await response.json();\n }\n throw new Error(await response.text());\n } catch (e) {\nconsole.error('Unable to retrieve token from authorization server:', (e as\nError).message);\n return null;\n }\n};\n\nconst ExampleApp = ({environment, oauthContext}: ExtensionContextValue) => {\n const [tokenData, setTokenData] = useState<TokenData | null>(null);\n const code = oauthContext?.code || '';\n const verifier = oauthContext?.verifier || '';\n const {mode} = environment;\n\n useEffect(() => {\n if (code && verifier && !tokenData) {\n getTokenFromAuthServer({code, verifier, mode}).then(setTokenData);\n }\n }, [code, verifier, mode, tokenData]);\n\n return (\n <ContextView title=\"Example\" />\n )\n};\nexport default ExampleApp;\n```\n\n[Set and find an access\ntoken](https://docs.stripe.com/stripe-apps/pkce-oauth-flow#set-and-find-access-token)\nSet and find the access token in the Secret Store API to enable your app to\nstore and use it in later sessions:\n\n- Add the `secret_write` permission to your app:\n\n```\nstripe apps grant permission \"secret_write\" \"Allows storing secrets between page\nreloads\"\n```\n- From your app’s UI extension, set the access token in the Secret Store API:\n\n```\nimport {ContextView} from '@stripe/ui-extension-sdk/ui';\nimport * as React from 'react';\nimport Stripe from 'stripe';\nimport {createHttpClient, STRIPE_API_KEY} from\n'@stripe/ui-extension-sdk/http_client';\nimport type {ExtensionContextValue} from '@stripe/ui-extension-sdk/context';\n\nconst {useState, useEffect} = React;\n\ninterface TokenData {\n account_id: string;\n access_token: string;\n expires_in: number;\n}\n\nconst clientID = 'your_client_id';\nconst getRedirectURL = (mode: 'live' | 'test') =>\n`https://dashboard.stripe.com/${\n mode === 'test' ? 'test/' : ''\n}apps-oauth/com.example.oauth-example`;\n\n// Fetch the authorization token from an example authorization server.\nconst getTokenFromAuthServer = async ({code, verifier, mode}: {code: string,\nverifier: string, mode: 'live' | 'test'}): Promise<null | TokenData> => {\n try {\nconst response = await\nfetch(`https://api.example.com/oauth2/token?code=${code}&grant_type=authorization_code&code_verifier=${verifier}&client_id=${clientID}&redirect_uri=${getRedirectURL(mode)}`,\n{\n method: 'POST',\n headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n });\n if (response.ok) {\n return await response.json();\n }\n throw new Error(await response.text());\n } catch (e) {\nconsole.error('Unable to retrieve token from authorization server:', (e as\nError).message);\n return null;\n }\n};\n\nconst stripe = new Stripe(STRIPE_API_KEY, {\n httpClient: createHttpClient(),\n apiVersion: '2025-02-24.acacia',\n});\n\n// Save the token to Secret Store API\nconst saveTokenData = async ({userID, tokenData}: {userID: string, tokenData:\nTokenData}) => {\n try {\n await stripe.apps.secrets.create({\n scope: { type: 'user', user: userID },\n name: 'oauth_token',\n payload: JSON.stringify(tokenData),\n });\n } catch (e) {\nconsole.error('Unable to save token to Secret Store API:', (e as\nError).message);\n }\n}\n\nconst ExampleApp = ({userContext, environment, oauthContext}:\nExtensionContextValue) => {\n const [tokenData, setTokenData] = useState<TokenData | null>(null);\n const code = oauthContext?.code || '';\n const verifier = oauthContext?.verifier || '';\n const {mode} = environment;\n const {id: userID} = userContext;\n\n useEffect(() => {\n if (code && verifier && !tokenData) {\n getTokenFromAuthServer({code, verifier, mode}).then(tokenData => {\n if (tokenData) {\n setTokenData(tokenData);\n saveTokenData({userID, tokenData});\n }\n });\n }\n }, [code, verifier, mode, userID, tokenData]);\n\n return (\n <ContextView title=\"Example\" />\n )\n};\n\nexport default ExampleApp;\n```\n\nFor more information, see [Set a\nsecret](https://docs.stripe.com/api/apps/secret_store/set).\n- From your app’s UI extension, find the access token in the Secret Store API:\n\n```\nimport {ContextView} from '@stripe/ui-extension-sdk/ui';\nimport * as React from 'react';\nimport Stripe from 'stripe';\nimport {createHttpClient, STRIPE_API_KEY} from\n'@stripe/ui-extension-sdk/http_client';\nimport type {ExtensionContextValue} from '@stripe/ui-extension-sdk/context';\n\nconst {useState, useEffect} = React;\n\ninterface TokenData {\n account_id: string;\n access_token: string;\n expires_in: number;\n}\n\nconst stripe = new Stripe(STRIPE_API_KEY, {\n httpClient: createHttpClient(),\n apiVersion: '2025-02-24.acacia',\n});\n\n// Read the token from Secret Store API\nconst getTokenFromSecretStore = async (userID: string): Promise<TokenData |\nnull> => {\n try {\n const response = await stripe.apps.secrets.find({\n scope: { type: 'user', user: userID },\n name: 'oauth_token',\n expand: ['payload'],\n });\n const secretValue: string = response.payload!;\n return JSON.parse(secretValue) as TokenData;\n } catch (e) {\nconsole.error('Unable to retrieve token from Secret Store API:', (e as\nError).message);\n return null;\n }\n};\n\nconst ExampleApp = ({userContext}: ExtensionContextValue) => {\n const [tokenData, setTokenData] = useState<TokenData | null>(null);\n const {id: userID} = userContext;\n\n useEffect(() => {\n if (!tokenData) {\n getTokenFromSecretStore(userID).then(setTokenData);\n }\n }, [userID, tokenData]);\n\n return (\n <ContextView title=\"Example\" />\n )\n};\n\nexport default ExampleApp;\n```\n\nFor more information, see [Find a\nsecret](https://docs.stripe.com/api/apps/secret_store/find).\n\n## See also\n\n- [Store secrets](https://docs.stripe.com/stripe-apps/store-secrets)\n- [Server-side logic](https://docs.stripe.com/stripe-apps/build-backend)\n- [Upload your app](https://docs.stripe.com/stripe-apps/upload-install-app)\n\n## Links\n\n- [Proof Key for Code Exchange\n(PKCE)](https://auth0.com/docs/get-started/authentication-and-authorization-flow/authorization-code-flow-with-proof-key-for-code-exchange-pkce)\n- [Create a Stripe app](https://docs.stripe.com/stripe-apps/create-app)\n- [build a UI](https://docs.stripe.com/stripe-apps/build-ui)\n- [test mode](https://docs.stripe.com/test-mode)\n- [app manifest](https://docs.stripe.com/stripe-apps/reference/app-manifest)\n-\n[createOAuthState](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#createOAuthState)\n- [Button](https://docs.stripe.com/stripe-apps/components/button)\n- [https://dashboard.stripe.com/${](https://dashboard.stripe.com/${)\n-\n[https://www.example.com/oauth2/authorize?response_type=code&client_id=${clientID}&redirect_uri=${getRedirectURL(mode)}&state=${state}&code_challenge=${challenge}&code_challenge_method=S256`;](https://www.example.com/oauth2/authorize?response_type=code&client_id=${clientID}&redirect_uri=${getRedirectURL(mode)}&state=${state}&code_challenge=${challenge}&code_challenge_method=S256`;)\n- [context\nprop](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#props)\n-\n[https://api.example.com/oauth2/token?code=${code}&grant_type=authorization_code&code_verifier=${verifier}&client_id=${clientID}&redirect_uri=${getRedirectURL(mode)}`,](https://api.example.com/oauth2/token?code=${code}&grant_type=authorization_code&code_verifier=${verifier}&client_id=${clientID}&redirect_uri=${getRedirectURL(mode)}`,)\n- [Set a secret](https://docs.stripe.com/api/apps/secret_store/set)\n- [Find a secret](https://docs.stripe.com/api/apps/secret_store/find)\n- [Store secrets](https://docs.stripe.com/stripe-apps/store-secrets)\n- [Server-side logic](https://docs.stripe.com/stripe-apps/build-backend)\n- [Upload your app](https://docs.stripe.com/stripe-apps/upload-install-app)",
  "metadata": {
    "title": "Add authorization flows | Stripe Documentation",
    "description": "Implement PKCE OAuth workflows in your Stripe app.",
    "sourceURL": "https://docs.stripe.com/stripe-apps/pkce-oauth-flow"
  }
}