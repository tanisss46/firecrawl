{
  "content": "# Sync Stripe data to NetSuite\n\n## Learn how the connector syncs Stripe data to NetSuite.\n\nUse the Stripe Connector for NetSuite to sync your data from Stripe to NetSuite.\nThe table below describes how the connector handles these [webhook\nevents](https://docs.stripe.com/webhooks).\n\nWebhook eventNetSuite\nactionaccount.updatedNoneaccount.application.deauthorizedNoneaccount.external_account.createdNoneaccount.external_account.deletedNoneaccount.external_account.updatedNoneapplication_fee.createdNoneapplication_fee.refundedNoneapplication_fee.refund.updatedNonebalance.availableNonecharge.capturedThe\nconnector creates a `CustomerPayment`. For charges associated with a Stripe\ninvoice, the connector also creates a NetSuite invoice. If one doesn’t exist,\nthe connector creates a `Customer`.charge.failedNone. The connector only syncs\nsuccessful payments.charge.refundedFor charges associated with a Stripe invoice,\nthe connector creates a `CreditMemo` for the invoice and a `CustomerRefund` for\nthe credit memo. For charges that aren’t associated with a Stripe invoice, the\nconnector creates a `CustomerRefund` for the\n`CustomerPayment`.charge.succeededThe connector creates a `CustomerPayment`. For\ncharges associated with a Stripe invoice, the connector also creates a NetSuite\ninvoice. If one doesn’t exist, the connector creates a\n`Customer`.charge.updatedThe connector creates a `CustomerPayment`. For charges\nassociated with a Stripe invoice, the connector also creates a NetSuite invoice.\nIf one doesn’t exist, the connector creates a\n`Customer`.charge.dispute.closedNone. Disputed funds appear as a line item on\nthe payout they’re included in.charge.dispute.createdFor disputes associated\nwith a Stripe invoice, the connector creates a `CreditMemo` for the invoice and\na `CustomerRefund` for the credit memo. For disputes that aren’t associated with\na Stripe invoice, the connector creates a `CustomerRefund` for the\n`CustomerPayment`.charge.dispute.funds_reinstatedNone. Reinstated funds appear\nas a line item on the payout they’re included\nin.charge.dispute.funds_withdrawnFor disputes associated with a Stripe invoice,\nthe connector creates a `CreditMemo` for the invoice and a `CustomerRefund` for\nthe credit memo. For disputes that aren’t associated with a Stripe invoice, the\nconnector creates a `CustomerRefund` for the\n`CustomerPayment`.charge.dispute.updatedThe connector follows the logic for\n`charge.dispute.created` or `charge.dispute.funds_reinstated`, depending on the\nupdates.coupon.createdNone. The connector only syncs coupons associated with an\ninvoice and represents them as a NetSuite `DiscountItem`.coupon.deletedNone. The\nconnector doesn’t mark records as inactive nor delete any records in your\nNetSuite instance.coupon.updatedNone. The connector only syncs coupons\nassociated with an invoice and represents them as a NetSuite `DiscountItem`.\ncustomer.created\n\nThe connector does one of the following, depending on your settings:\n\n- Creates a `Customer` in NetSuite\n- Does nothing, if you enabled the global customer workflow setting\n- Associates the customer with an existing NetSuite customer ID, if you enabled\ncustomer matching or created the customer with the `netsuite_customer_id`\nmetadata key\ncustomer.deletedNone. The connector doesn’t mark records as inactive nor delete\nany records in your NetSuite\ninstance.customer.updatedNonecustomer.discount.createdNonecustomer.discount.deletedNonecustomer.discount.updatedNonecustomer.source.createdNone.\nThe connector doesn’t represent customer payment sources in\nNetSuite.customer.source.deletedNonecustomer.source.updatedNonecustomer.subscription.createdNone.\nThe connector doesn’t represent customer subscriptions in NetSuite. Instead, it\nsyncs invoices created by customer\nsubscriptions.customer.subscription.deletedNonecustomer.subscription.trial_will_endNonecustomer.subscription.updatedNoneinvoice.createdNone.\nThe connector only syncs finalized invoices.invoice.payment_succeededThe\nconnector creates the customer and invoice in NetSuite, and represents each\nStripe `InvoiceItem` as a `ServiceSaleItem`. The connector applies a\n`CustomerPayment` to the created NetSuite invoice.invoice.payment_failedThe\nconnector creates the customer and invoice in NetSuite. The invoice remains open\nuntil it’s paid.invoice.updatedThe connector checks the invoice for updates that\nmight affect the general ledger and updates NetSuite as\nneeded.invoice.item.createdNoneinvoice.item.deletedNoneinvoice.item.updatedNone\nprice.created\n\nThe connector does one of the following, depending on your settings:\n\n- Creates a `ServiceSaleItem` in NetSuite\n- Does nothing, if you enabled the global price workflow setting\n- Associates the price with an existing NetSuite item ID, if you enabled price\nmatching or created the price with one of the following metadata keys:\n\n- `netsuite_service_sale_item_id`\n- `netsuite_service_resale_item_id`\n- `netsuite_non_inventory_sale_item_id`\n- `netsuite_non_inventory_resale_item_id`\nprice.deletedNone. The connector doesn’t modify the item status to prevent\ncreating issues with the business logic in your\naccount.price.updatedNoneproduct.createdNone. The connector doesn’t sync\nproducts, only their child prices.product.updatedNonepayout.createdThe connector\nvalidates the payout’s underlying transactions, but doesn’t sync the payout.\nThis includes connect payouts.payout.failedNone. The connector ignores failed\npayouts.payout.paidThe connector validates the payout’s underlying transactions,\nand creates deposits for successful payouts.payout.reversedNonepayout.updatedThe\nconnector syncs the payout, if it hasn’t already synced successfully.\n\n## Links\n\n- [webhook events](https://docs.stripe.com/webhooks)",
  "metadata": {
    "title": "Sync Stripe data to NetSuite | Stripe Documentation",
    "description": "Learn how the connector syncs Stripe data to NetSuite.",
    "sourceURL": "https://docs.stripe.com/connectors/netsuite/sync-data"
  }
}