{
  "content": "TerminalBundlerGitHub\nInstall the gem:\n\n`gem install stripe`Server\n### Configure your endpoint\n\nUsing the synchronous webhook, you can approve or decline authorization requests\nin real time.\n\nYou can configure your [webhook](https://docs.stripe.com/webhooks) endpoint in\nyour [Issuing settings](https://dashboard.stripe.com/account/issuing). When a\npurchase attempt occurs, Stripe creates an `issuing_authorization.request` event\nand sends it to your configured endpoint for your approval.\n\nServer2 Handle requests from Stripe\n### Read the event data\n\nStripe sends the event data in the request body. Each event is structured as an\n[Event object](https://docs.stripe.com/api/events) with a `type`, `id`, and\nrelated Stripe resource nested under `data`.\n\nServer\n### Handle the event\n\nAs soon as you have the event object, check the\n[type](https://docs.stripe.com/api/events/types) and filter for\n`issuing_authorization.request`. This is the webhook event that Stripe sends\nwhen a card is used to make a purchase.\n\nWrite your business logic here to decide to approve or decline the\nauthorization. For example, you can reject any authorization over a certain\n`amount`.\n\nServer\n### Respond to the request\n\nThe `issuing_authorization.request` webhook is synchronous, which enables you to\napprove or decline authorization requests in real time. You can include your\napproval decision in the response body of the webhook request. To do so you must\nalso specify the `Content-Type` header as `application/json`. See [responding\ndirectly to authorization\nrequests](https://docs.stripe.com/issuing/controls/real-time-authorizations#authorization-handling)\nto learn more.\n\nIf Stripe doesn’t receive your approve or decline response or request within 2\nseconds, the `Authorization` is automatically approved or declined based on your\ntimeout settings.\n\nServer3 Test the authorization\n### Run the server\n\nBuild and run your server to test the endpoint at\n`http://localhost:4242/webhook`.\n\n`ruby server.rb`Server\n### Download the CLI\n\nUse the Stripe CLI to test your webhook locally. [Download the\nCLI](https://github.com/stripe/stripe-cli) and log in with your Stripe account.\nAlternatively, use a service like ngrok to make your local endpoint publicly\naccessible.\n\n`stripe login`Run in the Stripe ShellServer\n### Forward events to your webhook\n\nSet up [event forwarding](https://docs.stripe.com/webhooks#test-webhook) with\nthe CLI to send all Stripe events in testmode to your local webhook endpoint.\n\n`stripe listen --forward-to localhost:4242/webhook`Run in the Stripe ShellServer\n### Simulate an authorization\n\nUse the CLI to simulate the authorization request by sending a POST request to\nyour webhook endpoint with a mocked Stripe event object.\n\n`stripe trigger issuing_authorization.request`Run in the Stripe ShellServer\n## Congratulations!\n\nYou have a basic webhook endpoint ready to accept authorization requests from\nStripe.\n\n### Secure your webhook\n\nVerify the source of a webhook request to prevent bad actors from sending fake\npayloads or injecting SQL that modify your backend systems. Secure your webhook\nwith a client signature to validate that Stripe generated a webhook request and\nthat it didn’t come from a server acting like Stripe.\n\n### Add the endpoint secret\n\nEach webhook endpoint has a unique signing secret. Find the secret in the\nDashboard or, if you’re testing locally with the Stripe CLI, from the CLI output\nwith the command `stripe listen`.\n\nServer\n### Verify the event\n\nUse the Stripe library to verify and construct the event from Stripe. You need\nthe endpoint secret, the request headers, and the raw request body to properly\nverify the event. Alternatively, you can [manually\nverify](https://docs.stripe.com/webhooks#verify-manually) the signature without\nhaving to use the Stripe library.\n\nServer\n### Read the request signature\n\nEach request from Stripe contains a `Stripe-Signature` header. Store a reference\nto this header value for later use.\n\nServer\n### Verify the request\n\nUse the Stripe library to verify that the request came from Stripe. Pass the raw\nrequest body, `Stripe-Signature` header, and endpoint secret to construct an\n[Event](https://docs.stripe.com/api/events/object).\n\nServer\n### Handle errors\n\nChecking for errors helps catch improperly configured webhooks or malformed\nrequests from non-Stripe services. Common errors include using the wrong\nendpoint secret, passing a parsed representation (for example, JSON) of the\nrequest body, or reading the wrong request header.\n\nServer\n### Test the endpoint\n\nTest your secured endpoint by using the Stripe CLI, which sends the proper\nsignature header in each test event. Otherwise use the webhooks view in the\n[Dashboard](https://dashboard.stripe.com/webhooks) to send one-off events.\n\nServer\n## Next steps\n\n#### [Going live](https://docs.stripe.com/webhooks#register-webhook)\n\nLearn how to deploy your webhook endpoint to production and handle events at\nscale by only sending the specific events you need.\n\n#### [Stripe CLI](https://docs.stripe.com/stripe-cli)\n\nThe Stripe CLI has several commands that can help test your Stripe application\nbeyond webhooks.\n\nserver.rbDownload\n```\n# Real-time authorization endpoint builder\nBuild a webhook to respond to real-time Issuing authorizations. Included are\nsome basic build and run scripts you can use to start up the application.\n## Running the sample\n1. Build the server\n~~~bundle install~~~\n2. Run the server\n~~~ruby server.rb -o 0.0.0.0~~~\n\n## Testing the webhook\nThe easiest way to test your webhook locally is with the Stripe CLI. Download\n[the CLI](https://github.com/stripe/stripe-cli) and log in with your Stripe\naccount. Alternatively, use a service like ngrok to make your local endpoint\npublicly accessible.\nSet up event forwarding with the CLI to send all Stripe events in test mode to\nyour local webhook endpoint.\n~~~stripe listen --forward-to localhost:4242/webhook~~~\nUse the CLI to simulate an Issuing authorization event that tests your webhook\napplication logic by sending a POST request to your webhook endpoint with a\nmocked Stripe event object.\n~~~stripe trigger issuing_authorization.request~~~\n```\n\n## Links\n\n- [text version of this\nguide](https://docs.stripe.com/payments/accept-a-payment)\n- [View the text-based\nguide](https://docs.stripe.com/issuing/controls/real-time-authorizations)\n- [webhook](https://docs.stripe.com/webhooks)\n- [Issuing settings](https://dashboard.stripe.com/account/issuing)\n- [Event object](https://docs.stripe.com/api/events)\n- [type](https://docs.stripe.com/api/events/types)\n- [responding directly to authorization\nrequests](https://docs.stripe.com/issuing/controls/real-time-authorizations#authorization-handling)\n- [Download the CLI](https://github.com/stripe/stripe-cli)\n- [event forwarding](https://docs.stripe.com/webhooks#test-webhook)\n- [manually verify](https://docs.stripe.com/webhooks#verify-manually)\n- [Event](https://docs.stripe.com/api/events/object)\n- [Dashboard](https://dashboard.stripe.com/webhooks)\n- [Going live](https://docs.stripe.com/webhooks#register-webhook)\n- [Stripe CLI](https://docs.stripe.com/stripe-cli)",
  "metadata": {
    "title": "Set up and manage real-time authorizations | Stripe Documentation",
    "description": "Learn how to set up and deploy a webhook to respond to Issuing authorizations.",
    "sourceURL": "https://docs.stripe.com/issuing/controls/real-time-authorizations/quickstart"
  }
}