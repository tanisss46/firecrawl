{
  "content": "# Query disputes and fraud data\n\n## Use Sigma or Data Pipeline to retrieve information about disputes and fraud.\n\nThe `disputes` table contains data about all\n[disputes](https://docs.stripe.com/disputes) on your account. Each row\nrepresents a [Dispute](https://docs.stripe.com/api#dispute_object) object, which\nis created when a charge is disputed. Each dispute also includes any available\ndata about dispute evidence that you’ve submitted.\n\n!\n\nThe following example provides some preliminary information about the five most\nrecent lost disputes. It joins the `disputes` and `charges` tables together\nusing the `disputes.charge_id` and `charges.id` columns. Along with a dispute\nID, each row contains an associated charge ID, the amount, and the outcome of\nthe ZIP and CVC checks.\n\n```\nselect\n date_format(date_trunc('day', disputes.created), '%m-%d-%Y') as day,\n disputes.id,\n disputes.charge_id,\n disputes.amount,\n charges.card_address_zip_check as zip,\n charges.card_cvc_check as cvc\nfrom disputes\ninner join charges\non charges.id=disputes.charge_id\nwhere disputes.status = 'lost'\nand disputes.reason = 'fraudulent'\norder by day desc\nlimit 5\n```\n\ndayidcharge_idamountzipcvc3/9/2025dp_8WEg4Cis6n7GuaQch_2UwzyhF3xhbmx6x1,000pass3/9/2025dp_XZrnaX4mL65ynPTch_OeUCQu0YDI4mmKf1,000passfail3/9/2025dp_Ez2b7o0slS2IfPCch_8XQReVcKlwTKXsj1,000failfail3/9/2025dp_mEmP893yhTxowXzch_zzLouulYcNWDltj1,000pass3/9/2025dp_nmBB5pFTvgpsTwDch_bPq1qYTRTKFJgvg1,000pass\nUsing Sigma or Data Pipeline to create reports about your disputes can help you\nidentify fraudulent payments, which you can prevent by using\n[Radar](https://docs.stripe.com/radar).\n\n## Radar for Fraud Teams Data\n\nIf you use Radar for Fraud Teams, you have a table `radar_rules` that contains\nall Radar custom rules with their action and predicate. You can use this to\nobtain the `rule_id` which can then be used in `rule_decisions` table to find\nall charges affected by rules. This is more flexible than looking at the\n`outcome_rule_id` attribute in the `charges` table, as it also shows 3DS Rules\ntriggered for Payment Intents and Setup Intents. Radar’s [built-in\nrules](https://docs.stripe.com/radar/rules#built-in-rules) have fixed rule IDs.\n\nThe following example shows recent payments allowed by an allow-list and their\nRadar score to check if potentially fraudulent payments were allowed:\n\n```\nselect\n outcome_type,\n card_cvc_check,\n count(*) as cnt,\n avg(outcome_risk_score) as avg_risk_score\nfrom\n charges\nwhere\n outcome_rule_id = 'allow_if_in_allowlist'\n and created >= current_date - interval '14' day\ngroup by\n 1,\n 2\n```\n\n### Platform data\n\nMultiparty payment businesses such as Connect platforms have [particular risk\nmanagement requirements](https://docs.stripe.com/connect/risk-management).\nHere’s an example of listing [destination\ncharge](https://docs.stripe.com/connect/destination-charges) businesses on your\nplatform by their dispute rate:\n\n```\nselect\n m.value as merchant_external_account_id,\n c.destination_id,\n arbitrary(a.business_name) as destination_name,\n count(*) as cnt_charges,\n count_if(c.paid) as cnt_success_charges,\n count_if(c.paid) * 1.0 / count(*) as success_rate,\n if(\n count_if(dispute_id is not null) > 0,\n count_if(c.paid) * 1.0 / count_if(c.paid),\n 0.0\n ) as dispute_rate\nfrom\n charges c\n left join charges_metadata m on m.charge_id = c.id\n and m.key = 'merchant_external_account_id'\n join connected_accounts a on a.id = c.destination_id\nwhere\n c.created >= current_date - interval '120' day\ngroup by\n 1,2\norder by dispute_rate desc\n```\n\n### 3D Secure Data\n\nSigma and Data Pipelines contains data on 3D Secure Authentication\n([3DS](https://docs.stripe.com/payments/3d-secure)). This more complex example\nshows for each 3DS Rule how many times it triggered 3DS and what the outcomes\nwere, considering there might be more than one attempt:\n\n```\nselect\n rd.rule_id,\n count(distinct rd.id) as cnt_rule_triggered,\ncount(distinct rd.payment_intent_id) * 1.0 / count(distinct rd.id) * 100.0 as\npct_pis,\ncount_if(at.is_final_attempt) * 1.0 / count(distinct rd.id) * 100.0 as\npct_final_attempts,\n count_if(\n at.is_final_attempt\n and at.threeds_outcome_result = 'authenticated'\n ) * 1.0 / count(distinct rd.id) * 100.0 as pct_3ds_final_authenticated,\n count_if(\n at.threeds_outcome_result = 'authenticated'\n and at.charge_outcome = 'authorized'\n ) * 1.0 / count(distinct rd.id) * 100.0 as pct_3ds_authorized\nfrom\n rule_decisions rd\nleft join authentication_report_attempts at on at.intent_id =\nrd.payment_intent_id\nwhere\n action = 'request_credentials'\n and rd.created >= current_date - interval '30' day\ngroup by\n 1\n```\n\n### All Radar Rule Attributes and Decisions\n\nYou also have access to the `radar_rule_attributes` table. Each row contains\nmost of the [Radar rule\nattribute](https://docs.stripe.com/radar/rules/reference#supported-attributes)\nvalues for a single [charge](https://docs.stripe.com/api/charges/object). You\ncan join the `radar_rule_attributes` and `disputes` tables together using the\n`radar_rule_attributes.transaction_id` and `disputes.charge_id` columns, which\nallows you to write rules targeting your disputes and understand trends in your\ngood and bad customers.\n\n```\nselect\n card_3d_secure_support,\n is_3d_secure_authenticated,\n cvc_check,\n avg(risk_score) as avg_risk_score,\navg(total_charges_per_card_number_all_time) as\navg_total_charges_per_card_number_all_time,\n count(*) as cnt_disputes\nfrom\n radar_rule_attributes r\n join disputes d on r.transaction_id = d.charge_id\nwhere\n d.created >= current_date - interval '60' day\ngroup by\n 1,2,3\norder by\n cnt_disputes desc\n```\n\nFor more details on columns available see our guide on [How to continuously\nimprove your fraud management with Radar for Fraud Teams and Stripe\nData](https://stripe.com/guides/improve-fraud-management-with-radar-for-fraud-teams-and-stripe-data).\nIt explains, for instance, where to find Radar scores per Charges and so on.\n\n## Tracking Monitoring Programs\n\n[Card brand monitoring\nprogram](https://docs.stripe.com/disputes/monitoring-programs) metrics are\ndifficult to track because rules are very specific. Some details are crucial,\nsuch as when to use volume or transaction count. Tracking them is required to\nestimate fraud and chargeback levels and take action promptly, because\nmonitoring program notifications don’t happen immediately. We recommend a\n[continous\nprocess](https://stripe.com/guides/improve-fraud-management-with-radar-for-fraud-teams-and-stripe-data)\nto track and estimate chargeback and fraud metrics.\n\nWith Sigma, you can write a query to estimate fraud levels that simulate how\ncard monitoring programs might assess your payments. The query below isn’t\nperfect (for example, we assume this is a US merchant where domestic and\ncross-border payments are counted, but you can adjust the query for your use\ncase). Most importantly, it takes FX (currency exchange rates) into account, and\napplies the same method of counting payment and fraud periods independently as\nthe monitoring programs typically do.\n\n```\nwith exchange_rates as (\n select\n date,\n currency,\n rate\n from\n exchange_rates_from_usd\n cross join unnest (\n cast(\n json_parse(buy_currency_exchange_rates) as map(varchar, double)\n )\n ) as t(currency, rate)\n where\n date = (\n select\n max(date)\n from\n exchange_rates_from_usd\n ) -- note the calculation for jpy is decimal and may look off\n),\npayments as (\n select\n-- technically these values are calculated per statement descriptor for CNP but\nwe assume this equals merchant\n date_format(p.captured_at, '%Y-%m-01') as start_of_month,\n if(\n p.card_brand = 'Visa'\n or p.card_brand = 'MasterCard',\n p.card_brand,\n 'Other'\n ) as network,\n count(*) as sales_count,\n -- For US, both Cross-Border and Domestic charges are counted\n -- we can ignore this in CBMP but show it here just to get a magnitude\n count_if(p.card_country != 'US') as sales_count_crossborder,\n count_if(pmd.card_3ds_succeeded) as sales_count_3ds,\n sum(p.amount / fx.rate / 100.0) as sales_volume_usd,\n sum(\n if(\n p.card_country != 'US',\n p.amount / fx.rate / 100.0\n )\n ) as sales_volume_crossborder_usd,\n sum(\n if(\n p.card_country = 'US'\n and pmd.card_3ds_succeeded,\n p.amount / fx.rate / 100.0\n )\n ) as sales_volume_3ds_us_usd\n from\n charges p\n join exchange_rates fx on p.currency = fx.currency\n left join payment_method_details pmd on pmd.charge_id = p.id\n -- for more information you may use\n -- left join authentication_report_attempts aa on attempt_id intent_id\n where\n p.captured_at >= date_trunc('month', current_date - interval '150' day)\n-- CBMPs only consider cleared amounts; refunds still count in the volume unless\nreversed\n and p.status = 'succeeded'\n and p.payment_method_type = 'card'\n group by\n 1,\n 2 -- used for VFMP\n),\nefw as (\n select\n date_format(e.created, '%Y-%m-01') as start_of_month,\n if(\n c.card_brand = 'Visa'\n or c.card_brand = 'MasterCard',\n c.card_brand,\n 'Other'\n ) as network,\n -- For US, both Cross-Border and Domestic charges are counted\n -- count_if(card_country != 'US') as efw_count_crossborder\n count(distinct c.id) as efw_count,\n count(distinct if(pmd.card_3ds_succeeded, c.id)) as efw_count_3ds,\n sum(c.amount / fx.rate / 100.0) as efw_volume_usd,\n sum(\n if(\n pmd.card_3ds_succeeded,\n c.amount / fx.rate / 100.0\n )\n ) as efw_volume_3ds_usd,\n -- for VFMP-3DS\n sum(\n if(\n c.card_country = 'US'\n and pmd.card_3ds_succeeded,\n c.amount / fx.rate / 100.0\n )\n ) as efw_volume_3ds_us_usd\n from\n early_fraud_warnings e\n join charges c on e.charge_id = c.id\n join exchange_rates fx on c.currency = fx.currency\n left join payment_method_details pmd on pmd.charge_id = c.id\n where\n e.created >= date_trunc('month', current_date - interval '150' day)\n group by\n 1,\n 2 -- used for VDMP and ECM/ECP\n),\ndisputes as (\n select\n date_format(d.created, '%Y-%m-01') as start_of_month,\n if(\n c.card_brand = 'Visa'\n or c.card_brand = 'MasterCard',\n c.card_brand,\n 'Other'\n ) as network,\n -- For US, both Cross-Border and Domestic charges are counted\n -- count_if(card_country != 'US') as dispute_count_crossborder\n -- Because a payment can have multiple disputes, we count the disputes here\n count(distinct d.id) as dispute_count_all,\ncount(distinct if(d.reason = 'fraudulent', d.id)) as fraud_dispute_count_all,\n count(\n distinct if(\n d.network_details_visa_rapid_dispute_resolution,\n d.id\n )\n ) as dispute_count_rdr,\n count(\n distinct if(\n d.network_details_visa_rapid_dispute_resolution is null\n or not d.network_details_visa_rapid_dispute_resolution,\n d.id\n )\n ) as dispute_count_exrdr,\n count(distinct if(pmd.card_3ds_succeeded, d.id)) as dispute_count_3ds,\n count(\n distinct if(\n d.reason = 'fraudulent'\n and pmd.card_3ds_succeeded,\n d.id\n )\n ) as fraud_dispute_count_3ds,\n count(\n distinct if(\n d.reason = 'fraudulent'\n and (\n d.network_details_visa_rapid_dispute_resolution is null\n or not d.network_details_visa_rapid_dispute_resolution\n ),\n d.id\n )\n ) as fraud_dispute_count_exrdr,\n count_if(d.status = 'won') * 1.0 / count_if(\n d.status = 'won'\n or d.status = 'lost'\n ) as win_rate,\n -- The sum of disputes should match and cannot exceed the payment\n sum(d.amount / fx.rate / 100.0) as dispute_volume_usd_all,\n sum(\n if(\n reason = 'fraudulent',\n d.amount / fx.rate / 100.0\n )\n ) as fraud_dispute_volume_usd_all,\n sum(\n if(\n (\n d.network_details_visa_rapid_dispute_resolution is null\n or not d.network_details_visa_rapid_dispute_resolution\n ),\n d.amount / fx.rate / 100.0\n )\n ) as dispute_volume_usd_exrdr,\n sum(\n if(\n d.reason = 'fraudulent'\n and (\n d.network_details_visa_rapid_dispute_resolution is null\n or not d.network_details_visa_rapid_dispute_resolution\n ),\n d.amount / fx.rate / 100.0\n )\n ) as fraud_dispute_volume_usd_exrdr\n from\n disputes d\n join charges c on d.charge_id = c.id\n join exchange_rates fx on c.currency = fx.currency\n left join payment_method_details pmd on pmd.charge_id = c.id\n where\n -- current month data will usually be off due to dispute delays,\n -- we still show it as an indicator but it's better tracked weekly\n d.created >= date_trunc('month', current_date - interval '150' day)\n group by\n 1,\n 2\n)\nselect\n -- theoretically this might cause gaps if there is a month\n-- without payments but a helper table with continuous dates would complicate\nthis example query\n p.start_of_month,\n p.network,\n -- Used for VDMP/ECP/ECM/HEC\n p.sales_count,\n lag(p.sales_count, 1) over (\n order by\n p.network,\n p.start_of_month\n ) as sales_count_prior_month,\n p.sales_count_crossborder,\n p.sales_count_3ds,\n -- Used for VFMP\n p.sales_volume_usd,\n p.sales_volume_crossborder_usd,\n p.sales_volume_3ds_us_usd,\n e.efw_count,\n e.efw_count_3ds,\n -- Used for VFMP\n e.efw_volume_usd,\n e.efw_volume_3ds_usd,\n -- Used for VFMP-3DS\n e.efw_volume_3ds_us_usd,\n -- Used for VDMP/ECP/ECM/HEC\n d.dispute_count_all,\n d.dispute_count_rdr,\n d.fraud_dispute_count_all,\n d.dispute_count_exrdr,\n d.dispute_count_3ds,\n d.fraud_dispute_count_3ds,\n d.fraud_dispute_count_exrdr,\n d.dispute_volume_usd_all,\n -- Used for EFM\n d.fraud_dispute_volume_usd_all,\n d.dispute_volume_usd_exrdr,\n d.fraud_dispute_volume_usd_exrdr,\n d.win_rate,\n-- we show all the values below for all networks for comparison but they're only\nrelevant for the indicated ones\n -- VDMP deducting RDR actuals\n if(\n p.network = 'visa',\n d.dispute_count_exrdr,\n d.dispute_count_all\n ) * 1.0 / p.sales_count as rdr_chargeback_ratio_for_visa,\n -- ECP/ECM/HECM based on prior month sales\n d.dispute_count_all * 1.0 / lag(p.sales_count, 1) over (\n order by\n p.network,\n p.start_of_month\n ) as all_chargeback_ratio_for_mastercard,\n -- VDMP ignoring RDR and ECP/ECM/HECM for crosscheck\nd.dispute_count_all * 1.0 / p.sales_count as\nall_chargeback_ratio_for_visa_and_mastercard,\n -- VFMP\n e.efw_volume_usd * 1.0 / p.sales_volume_usd as fraud_ratio_for_visa,\n -- VFMP-3DS\ne.efw_volume_3ds_us_usd * 1.0 / p.sales_volume_3ds_us_usd as\nfraud_ratio_for_visa_3ds,\n -- EFM based on prior month sales\n d.fraud_dispute_count_all * 1.0 / lag(p.sales_count, 1) over (\n order by\n p.network,\n p.start_of_month\n ) as fraud_ratio_for_mastercard\nfrom\n payments p\n left join efw e on p.start_of_month = e.start_of_month\n and p.network = e.network\n left join disputes d on p.start_of_month = d.start_of_month\n and p.network = d.network\norder by\n start_of_month desc,\n network;\n```\n\n## Links\n\n- [disputes](https://docs.stripe.com/disputes)\n- [Dispute](https://docs.stripe.com/api#dispute_object)\n- [Radar](https://docs.stripe.com/radar)\n- [built-in rules](https://docs.stripe.com/radar/rules#built-in-rules)\n- [particular risk management\nrequirements](https://docs.stripe.com/connect/risk-management)\n- [destination charge](https://docs.stripe.com/connect/destination-charges)\n- [3DS](https://docs.stripe.com/payments/3d-secure)\n- [Radar rule\nattribute](https://docs.stripe.com/radar/rules/reference#supported-attributes)\n- [charge](https://docs.stripe.com/api/charges/object)\n- [How to continuously improve your fraud management with Radar for Fraud Teams\nand Stripe\nData](https://stripe.com/guides/improve-fraud-management-with-radar-for-fraud-teams-and-stripe-data)\n- [Card brand monitoring\nprogram](https://docs.stripe.com/disputes/monitoring-programs)",
  "metadata": {
    "title": "Query disputes and fraud data | Stripe Documentation",
    "description": "Use Sigma or Data Pipeline to retrieve information about disputes and fraud.",
    "sourceURL": "https://docs.stripe.com/stripe-data/query-disputes-and-fraud-data"
  }
}