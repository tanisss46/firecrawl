{
  "content": "# Legacy pluginsDeprecated\n\n## Ensure your legacy plugin meets Stripe's requirements.\n\n#### Deprecated\n\nThe plugin integration pattern is deprecated. This means you can no longer\nrequest secret API keys from users.\n\nStripe Apps is the new method for authenticating users and includes support for\nboth restricted API keys and OAuth 2.0. For more information, see the [migration\ndocs](https://docs.stripe.com/stripe-apps/plugins/decide-migration).\n\n## What is a plugin?\n\nPlugins are any integration between a third-party solution and Stripe that\nrequires a user to authenticate with their secret API keys. A plugin typically\ninteracts with Stripe APIs either by making API calls or responding to Stripe\nAPI events on behalf of its users. Plugins often run code that allows Stripe to\ninteract with other software, such as accepting payments on WordPress. They can\nalso take other forms, like open-source libraries or website builders.\n\n## Best practices for legacy plugins\n\n#### Note\n\nJoin the [Stripe Insiders](https://insiders.stripe.dev/c/stripe-plugins/15)\ncommunity to stay updated on the latest product changes affecting your\nintegration.\n\nFollow these best practices to help your users safely process on Stripe’s\nplatform without disruption if our API upgrades or changes. If you have\nquestions, contact us at [plugins@stripe.com](mailto:plugins@stripe.com).\n\n- Register your plugin by creating a Stripe account or using an existing one\n- [Identify your\nplugin](https://docs.stripe.com/building-plugins#identify-plugin) using\n`setAppInfo` and `registerAppInfo` so we can alert you to any potential issues\nwe notice\n- Set [Stripe’s API\nversion](https://docs.stripe.com/building-plugins#set-api-version) in your\nplugin to avoid potentially breaking changes for your users\n- Use [client-side\ntokenization](https://docs.stripe.com/building-plugins#tokenization) to securely\ncollect payment details in the browser\n\nYou can also take a few steps to improve the quality of your connector:\n\n- Add the [Express Checkout\nElement](https://docs.stripe.com/building-plugins#express-checkout-element) to\noffer multiple one-click payment buttons to your customers, including [Apple\nPay](https://docs.stripe.com/apple-pay), [Google\nPay](https://docs.stripe.com/google-pay),\n[Link](https://docs.stripe.com/payments/link), and\n[PayPal](https://docs.stripe.com/payments/paypal)\n- Enable [multiple payment\nmethods](https://docs.stripe.com/building-plugins#apms) beyond credit cards to\nsupport international users\n- Verify your users [have HTTPS\nenabled](https://docs.stripe.com/building-plugins#https) to improve their\nsecurity\n- Subscribe to our [mailing\nlist](https://docs.stripe.com/building-plugins#subscribe) to keep up to speed\nwith changes to Stripe’s API\n\n#### Note\n\n[Become a Stripe Partner](https://stripe.com/partner-program) to reach\nbusinesses on Stripe who are looking to add capabilities to their platforms.\n\n## Identifying your plugin\n\nProvide identifying information so that we can contact you if there’s an issue\nwith your connector or critical update to the API.\n\n### Backend API calls\n\nIf you use the APIs to create server-side requests, use `setAppInfo` with a hash\ncontaining the following options:\n\n- `name` (required): your plugin’s name\n- `partner_id` (required for [Stripe Verified\nPartners](https://stripe.com/partner-program), optional otherwise): your Partner\nID from the [Partners](https://dashboard.stripe.com/partners/settings) section\nof the Dashboard\n- `version` (optional): your plugin’s version\n- `url` (optional): the URL for your plugin’s website with your contact details\n\n```\nStripe.set_app_info(\n 'MyStripePlugin',\n partner_id: '{{PARTNER_ID}}', # Used by Stripe to identify your connector\n version: '1.2.34',\n url: 'https://example.com'\n)\n```\n\n#### Caution\n\nIf your connector is designed for a particular platform, include that platform\nin the `name` field (for example, **WordPress MyStripePlugin** or **WooCommerce\nMyStripePlugin**).\n\nIf you’re building a connector and not using one of our official libraries, set\nthe value of the User-Agent header on requests made to the Stripe API as\n`name/version (url)`.\n\nThe following is an example:\n\n```\nUser-Agent: WordPress MyStripePlugin/1.2.34 (https://example.com)\n\n```\n\n### Client side / Stripe.js\n\nFor frontend libraries that use Stripe.js, use `registerAppInfo` with the same\noptions as `setAppInfo` above. For example, using JavaScript:\n\n```\nstripe.registerAppInfo({\n name: \"MyOSSLibrary\",\n partner_id: '{{PARTNER_ID}}', // Used by Stripe to identify your connector\n version: \"1.2.34\",\n url: \"https://example.com\",\n});\n```\n\n## Setting the API version\n\nYour plugin should use the `setApiVersion` function, which will set the\n`Stripe-Version` HTTP header on all requests. Your users will use their own API\nkeys to access Stripe, but this header will be included with every request. We\nrecommend that you use the most recently published version of the API. The\ncurrent API version and details on our [versioning\npolicy](https://docs.stripe.com/api#versioning) can be found in the API\nreference.\n\n```\nStripe.api_key = 'sk_test_BQokikJOvBiI2HlWgH4olfQ2'\nStripe.api_version = '2022-08-01'\n```\n\nNew Stripe users automatically default to the latest version of the API. This\nheader ensures that your connector is pinned to a specific API version, which\nkeeps the occasional [backward-incompatible\nchange](https://docs.stripe.com/upgrades#what-changes-does-stripe-consider-to-be-backward-compatible)\nfrom breaking your connector’s functionality.\n\nUsers can upgrade their own API version through the [Stripe\nDashboard](https://docs.stripe.com/upgrades#how-can-i-upgrade-my-api). If your\nconnector relies on [webhook](https://docs.stripe.com/webhooks) events, their\ndata format and structure depend on the user’s account API version. You should\ninstruct your users to set the version in their Dashboard to match your plugin.\n\n#### Caution\n\n**API versions can’t be downgraded.** You should regularly release new versions\nof your connector to correctly handle any changes to JSON responses.\n\n## Subscribing to our mailing list for updates\n\nWe regularly release new versions of the Stripe API that bring new features and\nbug fixes. You can subscribe to the\n[api-announce](https://groups.google.com/a/lists.stripe.com/forum/#!forum/api-announce)\nmailing list to be notified of updates that might affect users of your\nconnector.\n\n## Securely collecting payment details\n\nStripe users are subject to [PCI\ncompliance](https://stripe.com/guides/pci-compliance), which specifies how\ncredit card data should be securely stored, processed, and transmitted. Their\nbusinesses could face stiff penalties for noncompliance or potential breaches,\nso it’s important to help them safely process on Stripe.\n\nSince your connector will make API calls on behalf of a Stripe user, you must\ntransmit credit card data securely using *client-side tokenization*.\n[Customers](https://docs.stripe.com/api/customers) submit their personal\ninformation through their web browser or mobile app directly to Stripe, and in\nexchange a simple token will be sent to the Stripe user. This allows your users\nto securely collect card details without sensitive data ever touching their\nserver.\n\nIf your connector includes a client-side payment form in the browser, we\nrecommend that you use either [Stripe.js and\nElements](https://docs.stripe.com/payments/elements) or\n[Checkout](https://docs.stripe.com/payments/checkout):\n\n- Elements provides prebuilt UI components and complete control over the look\nand feel of payment forms\n- Checkout provides a complete checkout experience and can be quickly added to a\nStripe user’s website\n\nBoth of these options provide client-side tokenization.\n\nIf your plugin only operates in a backend environment, please include a note in\nyour connector’s documentation asking users to tokenize payment details using\nElements or Checkout. Tokenization helps Stripe users process as safely as\npossible on our platform.\n\n## Add the Express Checkout Element\n\nThe [Express Checkout\nElement](https://docs.stripe.com/elements/express-checkout-element) gives you a\nsingle integration for accepting payments through one-click payment buttons,\nincluding [Apple Pay](https://docs.stripe.com/apple-pay), [Google\nPay](https://docs.stripe.com/google-pay),\n[Link](https://docs.stripe.com/payments/link), or\n[PayPal](https://docs.stripe.com/payments/paypal).\n\nThe Express Checkout Element allows you to display multiple buttons at the same\ntime. Customers see different payment buttons depending on what their device and\nbrowser combination supports.\n\n## Enabling multiple payment methods\n\nStripe supports multiple payment methods, aside from credit cards. We’ve\npublished a [guide to payment\nmethods](https://stripe.com/payments/payment-methods-guide) that introduces\nterminology, key considerations, and how we support each method on our platform.\n\nThe [Payment Methods API](https://docs.stripe.com/payments/payment-methods)\nenables your users to collect payments using additional payment methods (for\nexample, Alipay, iDEAL, Sofort). You can add these [payment\nmethods](https://docs.stripe.com/payments/payment-methods#supported-payment-methods)\nusing one integration path.\n\n## Verifying that HTTPS is enabled\n\nIf your plugin presents a payment form in a web browser, it should check if the\nform is being served over HTTPS. We require our users to enable HTTPS: you\nshould present a clear error to your user if they’re not properly secured.\n\nHere are a few examples to verify whether your users have HTTPS enabled:\n\n```\n# This example uses Sinatra, but the `request` object is provided by Rack\nrequire 'sinatra'\n\nget '/' do\n if !request.https?\n # Present an error to the user\n end\n # ...\nend\n```\n\nIf your connector has a front-end component, check whether HTTPS is being used\nfrom the browser. For example, using JavaScript:\n\n```\n// This example checks for HTTPS from the browser\nif (window.location.protocol !== \"https:\") {\n // Present an error to the user\n}\n```\n\n## Links\n\n- [migration docs](https://docs.stripe.com/stripe-apps/plugins/decide-migration)\n- [Stripe Insiders](https://insiders.stripe.dev/c/stripe-plugins/15)\n- [Apple Pay](https://docs.stripe.com/apple-pay)\n- [Google Pay](https://docs.stripe.com/google-pay)\n- [Link](https://docs.stripe.com/payments/link)\n- [PayPal](https://docs.stripe.com/payments/paypal)\n- [Become a Stripe Partner](https://stripe.com/partner-program)\n- [Partners](https://dashboard.stripe.com/partners/settings)\n- [https://example.com](https://example.com)\n- [versioning policy](https://docs.stripe.com/api#versioning)\n- [backward-incompatible\nchange](https://docs.stripe.com/upgrades#what-changes-does-stripe-consider-to-be-backward-compatible)\n- [Stripe Dashboard](https://docs.stripe.com/upgrades#how-can-i-upgrade-my-api)\n- [webhook](https://docs.stripe.com/webhooks)\n-\n[api-announce](https://groups.google.com/a/lists.stripe.com/forum/#!forum/api-announce)\n- [PCI compliance](https://stripe.com/guides/pci-compliance)\n- [Customers](https://docs.stripe.com/api/customers)\n- [Stripe.js and Elements](https://docs.stripe.com/payments/elements)\n- [Checkout](https://docs.stripe.com/payments/checkout)\n- [Express Checkout\nElement](https://docs.stripe.com/elements/express-checkout-element)\n- [guide to payment methods](https://stripe.com/payments/payment-methods-guide)\n- [Payment Methods API](https://docs.stripe.com/payments/payment-methods)\n- [payment\nmethods](https://docs.stripe.com/payments/payment-methods#supported-payment-methods)",
  "metadata": {
    "title": "Legacy plugins | Stripe Documentation",
    "description": "Ensure your legacy plugin meets Stripe's requirements.",
    "sourceURL": "https://docs.stripe.com/building-plugins"
  }
}