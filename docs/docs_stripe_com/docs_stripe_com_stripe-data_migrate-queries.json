{
  "content": "# Migrate queries\n\n## Migrate your Sigma queries from Presto to Trino.\n\nWe upgraded Sigma’s query infrastructure from [Presto\nv334](https://trino.io/docs/334/sql.html) to [Trino\nv414](https://trino.io/docs/414/sql/select.html). Most queries run faster as a\nresult of the upgrade, but a few queries might error unexpectedly or produce\nresults in different formats.\n\nUse the following suggestions to make your Sigma queries compatible with Trino\nv414.\n\n## Invalid time zones\n\nThe `AMERICA/NEW_YORK` time zone is no longer valid in Trino v414.\n\n```\n-- FAILED: Presto error: NOT_SUPPORTED: Time zone not supported:\nAMERICA/NEW_YORK\nselect\n date_format(\n c.created AT TIME ZONE 'AMERICA/NEW_YORK',\n '%Y-%m-%d'\n )\nfrom\n charges c\n```\n\nInstead, use `America/New_York`.\n\n```\n-- VALID\nselect\n date_format(\n c.created AT TIME ZONE 'America/New_York',\n '%Y-%m-%d'\n )\nfrom\n charges c\n```\n\n## Invalid column references\n\nTrino v414 doesn’t allow referencing column names with their originating\nsub-query or conditional table expression (CTE) out of scope.\n\n```\n-- FAILED: Presto error: COLUMN_NOT_FOUND: Column 'c.created' cannot be resolved\nselect c.created from (select created from charges c)\n```\n\nThe previous query is invalid because the sub-query `c` isn’t defined at the top\nlevel but is referenced at the top level, out of its defined scope.\n\n```\n-- VALID\nselect created from (select created from charges c)\n```\n\n```\n-- VALID\nselect c.created from (select created from charges) c\n```\n\nEither reference the column without the sub-query or define the sub-query at the\nsame level as its reference.\n\n## Scientific notation\n\nCasting a [double](https://trino.io/docs/414/language/types.html#double) to a\n[varchar](https://trino.io/docs/414/language/types.html#string) in Trino v414\nproduces results in scientific notation instead of decimal notation as in Presto\nv334.\n\n```\n-- RESULT: 1.0E2\nselect cast(100.0 as varchar)\n```\n\nTo maintain this decimal notation, cast the double as a\n[decimal](https://trino.io/docs/414/language/types.html#decimal) and then as a\nvarchar.\n\n```\n-- RESULT: 100.0\nselect cast(cast(100.0 as decimal(18,1)) as varchar)\n```\n\n## Timestamp functions\n\n### FROM_UNIXTIME\n\nTrino v414 assumes that the result timestamp is in UTC and adds a trailing “UTC”\nwhen using\n[from_unixtime](https://trino.io/docs/414/functions/datetime.html?highlight=from_unixtime#from_unixtime).\n\n```\n-- Trino v414 RESULT: 1970-01-01 00:00:00.000 UTC\n-- Presto v334 RESULT: 1970-01-01 00:00:00 +0000\nselect from_unixtime(0)\n```\n\nTo remove the trailing “UTC”, cast the result of `from_unixtime` as `timestamp`.\n\n```\n-- RESULT: 1970-01-01 00:00:00 +0000\nselect cast(from_unixtime(0) as timestamp)\n```\n\n### TO_ISO8601\n\nIn Presto v334,\n[to_iso8601](https://trino.io/docs/414/functions/datetime.html?highlight=to_iso8601#to_iso8601)\nadds a trailing Zulu time zone suffix (“Z”) to a timestamp without a time zone\nwhile Trino v414 doesn’t.\n\n```\n-- Presto v334 RESULT: 2024-04-01T00:00:00.000Z\n-- Trino v414 RESULT: 2024-04-01T00:00:00\nselect to_iso8601(timestamp '2024-04-01')\n```\n\nTo make sure the trailing Zulu time zone suffix is added, interpret the\ntimestamp in UTC before calling `to_iso8601`.\n\n```\n-- RESULT: 2024-04-01T00:00:00Z\nselect to_iso8601(timestamp '2024-04-01' at time zone 'UTC')\n```\n\n## Query non-determinism\n\nIf you query is non-deterministic, regardless of the Sigma version, different\nexecutions can yield different results. Here are common query patterns that can\nlead to non-deterministic results.\n\n### Top K queries\n\n```\n-- POTENTIALLY NON-DETERMINISTIC\nselect * from charges order by created DESC limit 10\n```\n\nIf the 10th and 11th latest created charges were created at the same time,\nthere’s no guarantee which charge is returned. Make sure to also sort on a\nunique identifier for deterministic results.\n\n```\n-- DETERMINISTIC\nselect * from charges order by created DESC, id limit 10\n```\n\n### Window aggregation\n\n```\n-- POTENTIALLY NON-DETERMINISTIC\nselect\n *\nfrom\n (\n select\n c.*,\n row_number() over (\n partition by c.customer_id\n order by\n c.amount DESC\n ) as row_rank\n from\n charges c\n )\nwhere\n row_rank = 1\n```\n\nThe above query returns the biggest charge for each customer using\n[row_number](https://trino.io/docs/414/functions/window.html?highlight=row_number#row_number).\nSee [window functions](https://trino.io/docs/414/functions/window.html). If a\ncustomer has multiple charges with the same maximum amount, there’s no guarantee\nwhich charge is returned.\n\nSort on a unique identifier in the window ordering for deterministic results.\n\n```\n-- DETERMINISTIC\nselect\n *\nfrom\n (\n select\n c.*,\n row_number() over (\n partition by c.customer_id\n order by\n c.amount DESC, c.created DESC, c.id\n ) as row_rank\n from\n charges c\n )\nwhere\n row_rank = 1\n```\n\n## Links\n\n- [Presto v334](https://trino.io/docs/334/sql.html)\n- [Trino v414](https://trino.io/docs/414/sql/select.html)\n- [double](https://trino.io/docs/414/language/types.html#double)\n- [varchar](https://trino.io/docs/414/language/types.html#string)\n- [decimal](https://trino.io/docs/414/language/types.html#decimal)\n-\n[from_unixtime](https://trino.io/docs/414/functions/datetime.html?highlight=from_unixtime#from_unixtime)\n-\n[to_iso8601](https://trino.io/docs/414/functions/datetime.html?highlight=to_iso8601#to_iso8601)\n-\n[row_number](https://trino.io/docs/414/functions/window.html?highlight=row_number#row_number)\n- [window functions](https://trino.io/docs/414/functions/window.html)",
  "metadata": {
    "title": "Migrate queries | Stripe Documentation",
    "description": "Migrate your Sigma queries from Presto to Trino.",
    "sourceURL": "https://docs.stripe.com/stripe-data/migrate-queries"
  }
}