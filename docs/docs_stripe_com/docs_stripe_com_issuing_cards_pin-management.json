{
  "content": "# PIN management\n\n## Let your cardholders manage their personal identification numbers.\n\nSome Point-of-Sale and ATM card terminals require cardholders to enter their\ncard’s PIN to authenticate transactions. Cardholders also need to use their PINs\nwith physical cards in many regions of the world. You can use the Stripe API and\n[Stripe Elements](https://docs.stripe.com/payments/elements) to manage and view\nPINs on your issued cards.\n\nBoth [physical card](https://docs.stripe.com/issuing/cards/physical) and\n[virtual card](https://docs.stripe.com/issuing/cards/virtual) PINs are set to a\nrandom value at creation. Cards created as a [replacement\nfor](https://docs.stripe.com/api/issuing/cards/create#create_issuing_card-replacement_for)\nother cards won’t inherit the old card’s PIN. In [test\nmode](https://docs.stripe.com/test-mode), all PINs are set to 0000 by default.\n\n## Set a card’s initial PIN at creation\n\nWhen issuing a new card through the API, you can provide a desired PIN to be\npre-set on the card. This is optional, and if you don’t provide an initial PIN,\nwe randomly generate one for you. You can always [view a card’s\nPIN](https://docs.stripe.com/issuing/cards/pin-management#viewing-a-cards-pin).\n\nTo pre-set a PIN when issuing a new card, pass it in encrypted form as the\n`pin.encrypted_number` parameter to the Create Card API method:\n\n```\ncurl https://api.stripe.com/v1/issuing/cards \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"cardholder\"=\"ich_1D4b3fdsa\" \\\n -d \"pin[encrypted_number]\"=\"eyJhbGciOiJSU0...\"\n -d \"type\"=\"virtual\" \\\n -d \"currency\"=\"usd\"\n```\n\nSee [Encrypting\nPINs](https://docs.stripe.com/issuing/cards/pin-management#encrypting-pins) for\nmore information about how to encrypt a PIN before passing it to the Stripe API\nor your own servers.\n\n#### Note\n\nWhen setting a card’s initial PIN in a request to the Create Card API method,\nthe response to the creation request won’t return the PIN (in either encrypted\nor plain-text form).\n\n## View a card’s PIN\n\nYou can use [Issuing Elements](https://docs.stripe.com/issuing/elements) to\nretrieve a card’s PIN in a\n[PCI-DSS](https://docs.stripe.com/security/guide#validating-pci-compliance)-compliant\nway.\n\n### Use Issuing Elements\n\nStripe provides a browser-side JavaScript library that allows you to display the\nsensitive data (including PINs) of your Issuing cards in a PCI-compliant manner.\nThe PIN renders inside of a Stripe-hosted `iframe` and never touches your\nservers. Stripe offers this library as a part of\n[Stripe.js](https://docs.stripe.com/js).\n\nAll Issuing users, whether they’re PCI-compliant or not, can use Issuing\nElements to retrieve PINs.\n\nTo retrieve a card’s PIN using Issuing Elements, first [create an Issuing\nElements integration](https://docs.stripe.com/issuing/elements), and then use it\nto display the `issuingCardPinDisplay` Element:\n\n```\nconst stripe = Stripe(\"pk_test_TYooMQauvdEDq54NiTphI7jx\");\n\nconst cardId = 'ic_abc123'; // ID of the issued Card you want to retrieve the\nPIN for\nconst ephemeralKeyNonce = ...;\nconst ephemeralKey = ...;\n\n// create the PIN Element with Stripe.js\nconst pinElement = stripe.elements().create('issuingCardPinDisplay', {\n issuingCard: cardId,\n nonce: ephemeralKeyNonce,\n ephemeralKeySecret: ephemeralKey.secret,\n});\n\n// Mount the PIN element onto DOM elements on your web page\npinElement.mount('#card-pin');\n```\n\n## Change a card’s PIN\n\n### Change a card’s PIN with the Cards API\n\nYou can change the PIN for an issued card using the [Card Update\nAPI](https://docs.stripe.com/api/issuing/cards/update). However, depending on\nthe region the card is used in, the new PIN might not be immediately usable. See\n[Online and offline\nPINs](https://docs.stripe.com/issuing/cards/pin-management#online-and-offline-pins)\nfor further guidance.\n\nYou can also [change a card’s PIN at an\nATM](https://docs.stripe.com/issuing/cards/pin-management#changing-a-cards-pin-at-an-atm)\n(if supported by ATMs in your region). PIN changes at an ATM are instantaneous.\n\nTo change the PIN for a given card using the API, pass it in encrypted form as\nthe `pin.encrypted_number` parameter to the Update Card API method:\n\nSee [Encrypting\nPINs](https://docs.stripe.com/issuing/cards/pin-management#encrypting-pins) for\nmore information about how to encrypt a PIN before passing it to the Stripe API\nor your own servers.\n\n#### Note\n\nWhen changing a card’s PIN in a request to the Update Card API method, the\nresponse to the update request won’t return the PIN (in either encrypted or\nplain-text form).\n\n### Change a card’s PIN at an ATM\n\nCardholders can change the PIN for their Stripe Issuing card at most ATMs. The\ncardholder must know the card’s current PIN to change it at an ATM. You can\n[retrieve a card’s\nPIN](https://docs.stripe.com/issuing/cards/pin-management#viewing-a-cards-pin)\nbefore changing it. Some countries, such as France, don’t provide PIN management\nfeatures at ATMs.\n\n#### Note\n\nATMs are the recommended way to change PINs on Issuing cards because they avoid\noffline PIN synchronization issues that are possible when changing PINs with the\n[Cards API](https://docs.stripe.com/api/issuing/cards). See [Online and offline\nPINs](https://docs.stripe.com/issuing/cards/pin-management#online-and-offline-pins)\nfor more details.\n\n## Unblock a card’s PIN\n\nIf you incorrectly enter a card’s PIN three consecutive times, the PIN becomes\nblocked. No further PIN-authenticated payments can be made through the card\nuntil the PIN is unblocked. Additionally, when a card’s online PIN is blocked,\nthe card’s status is set to `inactive`, and no payments of any kind can be made\nuntil the card is reactivated.\n\nTo unblock a card’s online PIN, and reactivate the card, use the Cards API to\nset its\n[status](https://docs.stripe.com/api/issuing/cards/update#update_issuing_card-status)\nto `active`. You can also reactivate a card in your Stripe Dashboard.\n\nTo unblock a card’s offline PIN, change the card’s PIN using the [Cards\nAPI](https://docs.stripe.com/api/issuing/cards/update#update_issuing_card-pin-encrypted_number).\nChanging a card’s PIN, even to the same value as before, unblocks the card’s\noffline PIN. Alternatively, in most countries, cardholders can also unblock a\ncard’s offline PIN at an ATM.\n\n#### Note\n\nAfter unblocking a card’s offline PIN with the Cards API, the next offline PIN\ntransaction might still fail once. When this happens, the cardholder needs to\nretry the transaction. After the retry, the card’s offline PIN is unblocked.\n\n## Encrypting PINs\n\nTo enable you to set a card’s PIN in a way that doesn’t require it to pass\nthrough your servers in plain text, the Stripe API expects you to provide PINs\nin an encrypted form.\n\nEncrypt the desired PIN (for example, `\"0123\"`) in JWE (JSON Web Encryption)\nformat using [Stripe’s RSA public key](https://issuing-key.stripe.com/v1/keys).\nWhen encrypting, use the `RSA-OAEP` algorithm for key wrapping and\n`A128CBC-HS256` for content encryption.\n\nStripe provides its public key for PIN encryption in both PKCS#8 and JWK format.\nDepending on your client environment and the library used, one might be easier\nto use than the other.\n\n### PIN encryption best practices\n\n- Don’t cache, store, or reuse encrypted PINs for longer than necessary to call\nthe Stripe API.\n- Don’t encrypt PINs on your servers. Instead, perform encryption as soon as\nyour user provides the PIN (for example, in your mobile application or in your\nweb application’s frontend) and pass the encrypted form to your servers, and\nthen on to the Stripe API.\n- Don’t cache Stripe’s Issuing public key: we can change it or rotate it without\nnotice. Instead, fetch it for every PIN operation you perform on the Stripe API.\n- Don’t roll your own cryptography. JWE libraries are available for most common\nlanguages and platforms.\n\n### PIN encryption examples\n\n```\nimport fetch from 'node-fetch';\nimport { importJWK, CompactEncrypt } from 'jose'\n\nasync function encryptPin(myNewPin) {\n // Fetch Stripe's RSA public key\n const keyData = await fetch('https://issuing-key.stripe.com/v1/keys')\n .then(r => r.json());\n\n // Import the public key. Here, we choose to import the JWK-formatted key,\n // but it will also be available in PKCS#8 format as `keyData.pkcs8`\n const publicKey = await importJWK(keyData.jwk, 'RSA');\n\n // Encrypt the new PIN with the given public key, using the RSA-OAEP\n // algorithm to wrap the key, and A128CBC-HS256 to produce the ciphertext\n const jwe = await new CompactEncrypt(new TextEncoder().encode(myNewPin))\n.setProtectedHeader({ alg: 'RSA-OAEP', enc: 'A128CBC-HS256', kid: keyData.key_id\n})\n .encrypt(publicKey);\n\n // Return our JWE (JWEs are base64url-encoded)\n return jwe;\n}\n\nawait encryptPin(\"0123\");\n// => eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkExMjhDQkMtSFMyNTYiLCJraWQiOiJz...\n```\n\nThe example above encrypts a PIN (0123) using JSON Object Signing and Encryption\nlibraries for various languages. Equivalent libraries exist for other languages:\n\nLanguageLibraryJavaScript[jose](https://github.com/panva/jose)Python[jwcrypto](https://github.com/latchset/jwcrypto)Ruby[ruby-jose](https://github.com/potatosalad/ruby-jose)Go[go-jose](https://github.com/square/go-jose)Swift[JOSESwift](https://github.com/airsidemobile/JOSESwift)Java[jose4j](https://bitbucket.org/b_c/jose4j/wiki/Home).NET[jose-jwt](https://github.com/dvsekhvalnov/jose-jwt)\n## Online and offline PINs\n\nThe physical cards that Stripe issues have EMV chips. One function of an EMV\nchip is to store the card’s PIN. This allows card terminals to verify an entered\nPIN against the card itself, without needing to verify it online, directly with\nthe issuer. This is known as an “offline” PIN (or cardholder) verification.\n\nWhen a cardholder is asked to enter their PIN, depending on where they’re using\nit, the card terminal might use either an online or an offline verification.\nSome countries use online PIN verifications, and others use offline. For\nexample, card terminals in the US and Germany generally use an online PIN\nverification, while those in the UK, Ireland, or France use offline PIN.\n\n### Change a PIN in regions that use offline PIN verification\n\nEven when a card has an EMV chip, its PIN is also stored online, with the issuer\n(Stripe). Because a card’s PIN is stored in two places, changing it using the\nStripe API only takes effect immediately for online PIN verifications.\n\nAfter changing a PIN with the Stripe API, and then using it in an offline PIN\nregion, the cardholder must first make a successful transaction using their\nprevious PIN. An “offline” card terminal only updates the offline PIN stored on\nthe EMV chip with the new one given to the Stripe API after it successfully\ncompletes a PIN verification.\n\nIn addition to using the Stripe API, you can also allow a cardholder change a\ncard’s PIN at an ATM—but only in regions where ATMs support PIN changes. When\nchanged at an ATM, the PIN simultaneously updates on both the EMV chip and at\nthe issuer. PIN changes at ATMs take effect immediately for both online and\noffline PIN verifications.\n\nCountry PIN change behavior- Ireland\n- Mexico\n- United Arab Emirates\n- United Kingdom\n- PIN verifications generally happen offline\n- After changing a card’s PIN using the Stripe API, the card must complete one\ntransaction using the card’s previous PIN. After that, the new PIN takes effect\n- PIN changes at ATMs take effect immediately for all PIN verifications\n- France\n- PIN verifications generally happen offline\n- After changing a card’s PIN using the Stripe API, the card must complete one\ntransaction using the card’s previous PIN. After that, the new PIN takes effect\n- PINs can’t be changed at ATMs, so can only be changed using the Stripe API\n- Belgium\n- Brazil\n- Cyprus\n- Germany\n- Greece\n- Italy\n- Netherlands\n- Poland\n- Portugal\n- Romania\n- Spain\n- Switzerland\n- Turkey\n- United States\n- PIN verifications generally happen online\n- Changes to a card’s PIN made with the Stripe API take effect immediately for\nonline PIN verifications\n- PIN changes at ATMs take effect immediately for all PIN verifications\n\nIf the country your cardholders want to use cards in isn’t listed above,\n[contact Issuing support](mailto:support-issuing@stripe.com) for PIN guidance in\nyour region.\n\n## PIN verification during authorization\n\nIf a transaction requires PIN verification, the cardholder must enter their\ncard’s PIN on the card terminal. If the cardholder enters their PIN incorrectly,\nthen the transaction is declined, and no `issuing_authorization.request` webhook\nis sent.\n\nThe timing to create PIN verification authorization objects depends on whether\nthe transaction used the card’s online or offline PIN. The authorization’s\n[verification_data.pin_check](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-verification_data-pin_check)\nattribute tells you the type of PIN verification used and the result.\n\n### Online PIN verification\n\n[Authorizations](https://docs.stripe.com/api/issuing/authorizations/object) with\nonline PIN verifications have a `pin_check` value of `online_pin_match` or\n`online_pin_mismatch`. A mismatch means that the cardholder entered the wrong\nPIN, so Stripe declined the transaction. Every PIN verification attempt creates\nan Authorization object.\n\nAfter three consecutive online PIN verification failures, the card’s online PIN\nis blocked and the card’s `status` is set to `inactive`. The cardholder can’t\nmake any further transactions, PIN-verified or otherwise, until the card becomes\n[active\nagain](https://docs.stripe.com/issuing/cards/pin-management#unblock-a-cards-pin).\n\nAuthorizations declined because of a blocked online PIN have a `reason` of\n`pin_blocked` in the\n[request_history](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-request_history-reason)\narray.\n\n### Offline PIN verification\n\n[Authorizations](https://docs.stripe.com/api/issuing/authorizations/object) with\noffline PIN verifications have a `pin_check` value of `offline_pin_match` or\n`offline_pin_mismatch`. A mismatch means that the cardholder entered the wrong\nPIN, so Stripe declined the transaction.\n\nHowever, because the terminal performs offline PIN verification, Stripe isn’t\nnotified of every failed PIN attempt. we only create an Authorization object\nafter authorization either succeeds or the cardholder fails all three PIN\nattempts.\n\nThree incorrect PIN attempts blocks the card’s offline PIN. The cardholder can’t\nattempt a PIN-verified transaction until the offline PIN is\n[unblocked](https://docs.stripe.com/issuing/cards/pin-management#unblock-a-cards-pin).\nIn contrast to online PIN blocks, the cardholder can still use the card for\nnon-PIN-verified transactions (such as e-commerce transactions) while the\noffline PIN is blocked.\n\nA terminal that performs offline PIN verification won’t attempt to authorize an\ninserted card with a blocked offline PIN. Instead, the terminal might display a\nmessage to the cardholder stating that the card’s PIN is blocked, suggesting\nthat the cardholder contact their issuer.\n\n## Links\n\n- [Stripe Elements](https://docs.stripe.com/payments/elements)\n- [physical card](https://docs.stripe.com/issuing/cards/physical)\n- [virtual card](https://docs.stripe.com/issuing/cards/virtual)\n- [replacement\nfor](https://docs.stripe.com/api/issuing/cards/create#create_issuing_card-replacement_for)\n- [test mode](https://docs.stripe.com/test-mode)\n- [Issuing Elements](https://docs.stripe.com/issuing/elements)\n- [PCI-DSS](https://docs.stripe.com/security/guide#validating-pci-compliance)\n- [Stripe.js](https://docs.stripe.com/js)\n- [Card Update API](https://docs.stripe.com/api/issuing/cards/update)\n- [Cards API](https://docs.stripe.com/api/issuing/cards)\n-\n[status](https://docs.stripe.com/api/issuing/cards/update#update_issuing_card-status)\n- [Cards\nAPI](https://docs.stripe.com/api/issuing/cards/update#update_issuing_card-pin-encrypted_number)\n- [Stripe’s RSA public key](https://issuing-key.stripe.com/v1/keys)\n- [jose](https://github.com/panva/jose)\n- [jwcrypto](https://github.com/latchset/jwcrypto)\n- [ruby-jose](https://github.com/potatosalad/ruby-jose)\n- [go-jose](https://github.com/square/go-jose)\n- [JOSESwift](https://github.com/airsidemobile/JOSESwift)\n- [jose4j](https://bitbucket.org/b_c/jose4j/wiki/Home)\n- [jose-jwt](https://github.com/dvsekhvalnov/jose-jwt)\n-\n[verification_data.pin_check](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-verification_data-pin_check)\n- [Authorizations](https://docs.stripe.com/api/issuing/authorizations/object)\n-\n[request_history](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-request_history-reason)",
  "metadata": {
    "title": "PIN management | Stripe Documentation",
    "description": "Let your cardholders manage their personal identification numbers.",
    "sourceURL": "https://docs.stripe.com/issuing/cards/pin-management"
  }
}