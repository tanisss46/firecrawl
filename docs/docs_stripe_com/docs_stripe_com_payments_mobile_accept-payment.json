{
  "content": "# Accept in-app payments\n\n## Build a customized payments integration and checkout flows for your iOS, Android, and React Native apps.\n\nAdd a payments form to your app.\n\niOSAndroidReact NativeAccept a paymentSet up a payment method\nThe Payment Element allows you to accept multiple payment methods using a single\nintegration. In this integration, you build a custom payment flow where you\nrender the Payment Element, create the\n[PaymentIntent](https://docs.stripe.com/payments/payment-intents), and confirm\nthe payment in your app. To confirm the payment on the server instead, see\n[Finalize payments on the\nserver](https://docs.stripe.com/payments/finalize-payments-on-the-server).\n\n[Set up\nStripeServer-sideClient-side](https://docs.stripe.com/payments/mobile/accept-payment?platform=react-native#setup)\n### Server-side\n\nThis integration requires endpoints on your server that talk to the Stripe API.\nUse our official libraries for access to the Stripe API from your server:\n\n```\n# Available as a gem\nsudo gem install stripe\n```\n\n```\n# If you use bundler, you can add this line to your Gemfile\ngem 'stripe'\n```\n\n### Client-side\n\nThe [React Native SDK](https://github.com/stripe/stripe-react-native) is open\nsource and fully documented. Internally, it uses the [native\niOS](https://github.com/stripe/stripe-ios) and\n[Android](https://github.com/stripe/stripe-android) SDKs. To install Stripe’s\nReact Native SDK, run one of the following commands in your project’s directory\n(depending on which package manager you use):\n\nyarnnpm\n```\nyarn add @stripe/stripe-react-native\n```\n\nNext, install some other necessary dependencies:\n\n- For iOS, navigate to the **ios** directory and run `pod install` to ensure\nthat you also install the required native dependencies.\n- For Android, there are no more dependencies to install.\n\n### Stripe initialization\n\nTo initialize Stripe in your React Native app, either wrap your payment screen\nwith the `StripeProvider` component, or use the `initStripe` initialization\nmethod. Only the API [publishable\nkey](https://docs.stripe.com/keys#obtain-api-keys) in `publishableKey` is\nrequired. The following example shows how to initialize Stripe using the\n`StripeProvider` component.\n\n```\nimport { StripeProvider } from '@stripe/stripe-react-native';\n\nfunction App() {\n const [publishableKey, setPublishableKey] = useState('');\n\n const fetchPublishableKey = async () => {\n const key = await fetchKey(); // fetch key from your server here\n setPublishableKey(key);\n };\n\n useEffect(() => {\n fetchPublishableKey();\n }, []);\n\n return (\n <StripeProvider\n publishableKey={publishableKey}\n merchantIdentifier=\"merchant.identifier\" // required for Apple Pay\n urlScheme=\"your-url-scheme\" // required for 3D Secure and bank redirects\n >\n // Your app code here\n </StripeProvider>\n );\n}\n```\n\n#### Note\n\nUse your API keys for [test mode](https://docs.stripe.com/keys#obtain-api-keys)\nwhile you test and develop, and your [live\nmode](https://docs.stripe.com/keys#test-live-modes) keys when you publish your\napp.\n\n[Enable payment\nmethods](https://docs.stripe.com/payments/mobile/accept-payment?platform=react-native#enable-payment-methods)\nView your [payment methods\nsettings](https://dashboard.stripe.com/settings/payment_methods) and enable the\npayment methods you want to support. You need at least one payment method\nenabled to create a\n[PaymentIntent](https://docs.stripe.com/payments/payment-intents).\n\nBy default, Stripe enables cards and other prevalent payment methods that can\nhelp you reach more customers, but we recommend turning on additional payment\nmethods that are relevant for your business and customers. See [Payment method\nsupport](https://docs.stripe.com/payments/payment-methods/payment-method-support)\nfor product and payment method support, and our [pricing\npage](https://stripe.com/pricing/local-payment-methods) for fees.\n\n[Set up a return\nURLClient-side](https://docs.stripe.com/payments/mobile/accept-payment?platform=react-native#set-up-return-url)\nWhen a customer exits your app, for example to authenticate in Safari or their\nbanking app, provide a way for them to automatically return to your app\nafterward. Many payment method types **require** a return URL, so if you fail to\nprovide it, we can’t present those payment methods to your user, even if you’ve\nenabled them.\n\nTo provide a return URL:\n\n-\n[Register](https://developer.apple.com/documentation/xcode/defining-a-custom-url-scheme-for-your-app#Register-your-URL-scheme)\na custom URL. Universal links aren’t supported.\n- [Configure](https://reactnative.dev/docs/linking) your custom URL.\n- Set up your root component to forward the URL to the Stripe SDK as shown\nbelow.\n\n#### Note\n\nIf you’re using Expo, [set your\nscheme](https://docs.expo.io/guides/linking/#in-a-standalone-app) in the\n`app.json` file.\n\n```\nimport React, { useEffect, useCallback } from 'react';\nimport { Linking } from 'react-native';\nimport { useStripe } from '@stripe/stripe-react-native';\n\nexport default function MyApp() {\n const { handleURLCallback } = useStripe();\n\n const handleDeepLink = useCallback(\n async (url: string | null) => {\n if (url) {\n const stripeHandled = await handleURLCallback(url);\n if (stripeHandled) {\n// This was a Stripe URL - you can return or add extra handling here as you see\nfit\n } else {\n // This was NOT a Stripe URL – handle as you normally would\n }\n }\n },\n [handleURLCallback]\n );\n\n useEffect(() => {\n const getUrlAsync = async () => {\n const initialUrl = await Linking.getInitialURL();\n handleDeepLink(initialUrl);\n };\n\n getUrlAsync();\n\n const deepLinkListener = Linking.addEventListener(\n 'url',\n (event: { url: string }) => {\n handleDeepLink(event.url);\n }\n );\n\n return () => deepLinkListener.remove();\n }, [handleDeepLink]);\n\n return (\n <View>\n <AwesomeAppComponent />\n </View>\n );\n}\n```\n\nAdditionally, set the `returnURL` when you call the `initPaymentSheet` method:\n\n```\nawait initPaymentSheet({\n ...\n returnURL: 'your-app://stripe-redirect',\n ...\n});\n```\n\nFor more information on native URL schemes, refer to the\n[Android](https://developer.android.com/training/app-links/deep-linking) and\n[iOS](https://developer.apple.com/documentation/xcode/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app)\ndocs.\n\n[Collect payment\ndetailsClient-side](https://docs.stripe.com/payments/mobile/accept-payment?platform=react-native#collect-payment-details)\nThe integration can use the default payment flow or a custom flow.\n\nDefault Custom flow \n\n![PaymentSheet](https://b.stripecdn.com/docs-statics-srv/assets/ios-overview.9e0d68d009dc005f73a6f5df69e00458.png)\n\n \n\n![Custom\nflow](https://b.stripecdn.com/docs-statics-srv/assets/ios-multi-step.cd631ea4f1cd8cf3f39b6b9e1e92b6c5.png)\n\nDisplays a sheet to collect payment details and complete the payment. The button\nin the sheet says Pay $X and completes the payment. Displays a sheet to collect\npayment details only. The button in the sheet says Continue and returns the\ncustomer to your app, where your own button completes payment. DefaultCustom\nflow\n### Initialize PaymentSheet\n\nWhen you’re ready to take a payment, for example, when a customer checks out,\ninitialize the PaymentSheet with an `intentConfiguration`. The\n`intentConfiguration` object contains details about the specific payment, such\nas the amount and currency, and a `confirmHandler` callback.\n\n```\nimport { useStripe } from '@stripe/stripe-react-native';\nimport {View, Button} from 'react-native';\n\nexport default function CheckoutScreen() {\n const { initPaymentSheet, presentPaymentSheet } = useStripe();\n\n const initializePaymentSheet = async () => {\n const { error } = await initPaymentSheet({\n merchantDisplayName: \"Example, Inc.\",\n intentConfiguration: {\n mode: {\n amount: 1099,\n currencyCode: 'USD',\n },\n confirmHandler: confirmHandler\n }\n });\n if (error) {\n // handle error\n }\n };\n\n useEffect(() => {\n initializePaymentSheet();\n }, []);\n\nconst confirmHandler = async (paymentMethod, shouldSavePaymentMethod,\nintentCreationCallback) => {\n // explained later\n }\n\n const didTapCheckoutButton = async () => {\n // implement later\n }\n return (\n <View>\n <Button\n title=\"Checkout\"\n onPress={didTapCheckoutButton}\n />\n </View>\n );\n}\n```\n\n### Present PaymentSheet\n\nNext, present the PaymentSheet. The `presentPaymentSheet` method resolves with a\npromise when the customer finishes paying, and then the sheet is dismissed.\n\n```\nexport default function CheckoutScreen() {\n // ...\n const didTapCheckoutButton = async () => {\n const { error } = await presentPaymentSheet();\n\n if (error) {\n if (error.code === PaymentSheetError.Canceled) {\n // Customer canceled - you should probably do nothing.\n } else {\n// PaymentSheet encountered an unrecoverable error. You can display the error to\nthe user, log it, etc.\n }\n } else {\n // Payment completed - show a confirmation screen.\n }\n }\n // ...\n}\n```\n\n### Confirm the payment\n\nWhen the customer taps **Pay** in the PaymentSheet, it calls the callback you\npassed to `initPaymentSheet` with a\n[PaymentMethod.Result](https://stripe.dev/stripe-react-native/api-reference/interfaces/PaymentMethod.Result.html)\nobject representing the customer’s payment details.\n\nImplement this method to send a request to your server. Your server creates a\nPaymentIntent and returns its client secret (explained in the next step).\n\nWhen the request returns, call the `intentCreationCallback` with your server\nresponse’s client secret or an error. The PaymentSheet confirms the\nPaymentIntent using the client secret.\n\n```\nexport default function CheckoutScreen() {\n // ...\n\nconst confirmHandler = async (paymentMethod, shouldSavePaymentMethod,\nintentCreationCallback) => {\n // Make a request to your own server.\n const response = await fetch(`${API_URL}/create-intent`, {\n method: 'POST',\n headers: {\n 'Content-Type': 'application/json',\n }});\n// Call the `intentCreationCallback` with your server response's client secret\nor error\n const { client_secret, error } = await response.json();\n if (client_secret) {\n intentCreationCallback({clientSecret: client_secret});\n } else {\n intentCreationCallback({error});\n }\n }\n // ...\n}\n```\n\n[Create a\nPaymentIntentServer-side](https://docs.stripe.com/payments/mobile/accept-payment?platform=react-native#ios-submit-payment)\nOn your server, create a\n[PaymentIntent](https://docs.stripe.com/payments/payment-intents) with an amount\nand currency. You can manage payment methods from the\n[Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe\nhandles the return of eligible payment methods based on factors such as the\ntransaction’s amount, currency, and payment flow. To prevent malicious customers\nfrom choosing their own prices, always decide how much to charge on the\nserver-side (a trusted environment) and not the client.\n\nIf the call succeeds, return the PaymentIntent [client\nsecret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret).\nIf the call fails, [handle the error](https://docs.stripe.com/error-handling)\nand return an error message with a brief explanation for your customer.\n\n#### Note\n\nVerify that all IntentConfiguration properties match your PaymentIntent (for\nexample, `setup_future_usage`, `amount`, and `currency`).\n\n```\nrequire 'stripe'\nStripe.api_key = 'sk_test_BQokikJOvBiI2HlWgH4olfQ2'\n\npost '/create-intent' do\n data = JSON.parse request.body.read\n params = {\n amount: 1099,\n currency: 'usd',\n# In the latest version of the API, specifying the `automatic_payment_methods`\nparameter is optional because Stripe enables its functionality by default.\n automatic_payment_methods: {enabled: true},\n }\n begin\n intent = Stripe::PaymentIntent.create(params)\n {client_secret: intent.client_secret}.to_json\n rescue Stripe::StripeError => e\n {error: e.error.message}.to_json\n end\nend\n```\n\n[Handle post-payment\neventsServer-side](https://docs.stripe.com/payments/mobile/accept-payment?platform=react-native#ios-post-payment)\nStripe sends a\n[payment_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-payment_intent.succeeded)\nevent when the payment completes. Use the [Dashboard webhook\ntool](https://dashboard.stripe.com/webhooks) or follow the [webhook\nguide](https://docs.stripe.com/webhooks/quickstart) to receive these events and\nrun actions, such as sending an order confirmation email to your customer,\nlogging the sale in a database, or starting a shipping workflow.\n\nListen for these events rather than waiting on a callback from the client. On\nthe client, the customer could close the browser window or quit the app before\nthe callback executes, and malicious clients could manipulate the response.\nSetting up your integration to listen for asynchronous events is what enables\nyou to accept [different types of payment\nmethods](https://stripe.com/payments/payment-methods-guide) with a single\nintegration.\n\nIn addition to handling the `payment_intent.succeeded` event, we recommend\nhandling these other events when collecting payments with the Payment Element:\n\nEventDescriptionAction[payment_intent.succeeded](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.succeeded)Sent\nwhen a customer successfully completes a payment.Send the customer an order\nconfirmation and fulfill their\norder.[payment_intent.processing](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.processing)Sent\nwhen a customer successfully initiates a payment, but the payment has yet to\ncomplete. This event is most commonly sent when the customer initiates a bank\ndebit. It’s followed by either a `payment_intent.succeeded` or\n`payment_intent.payment_failed` event in the future.Send the customer an order\nconfirmation that indicates their payment is pending. For digital goods, you\nmight want to fulfill the order before waiting for payment to\ncomplete.[payment_intent.payment_failed](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.payment_failed)Sent\nwhen a customer attempts a payment, but the payment fails.If a payment\ntransitions from `processing` to `payment_failed`, offer the customer another\nattempt to pay.[Test the\nintegration](https://docs.stripe.com/payments/mobile/accept-payment?platform=react-native#ios-test-the-integration)CardsBank\nredirectsBank debitsCard numberScenarioHow to test4242424242424242The card\npayment succeeds and doesn’t require authentication.Fill out the credit card\nform using the credit card number with any expiration, CVC, and postal\ncode.4000002500003155The card payment requires\n[authentication](https://docs.stripe.com/strong-customer-authentication).Fill\nout the credit card form using the credit card number with any expiration, CVC,\nand postal code.4000000000009995The card is declined with a decline code like\n`insufficient_funds`.Fill out the credit card form using the credit card number\nwith any expiration, CVC, and postal code.6205500000000000004The UnionPay card\nhas a variable length of 13-19 digits.Fill out the credit card form using the\ncredit card number with any expiration, CVC, and postal code.\nSee [Testing](https://docs.stripe.com/testing) for additional information to\ntest your integration.\n\n[OptionalEnable saved\ncardsServer-sideClient-side](https://docs.stripe.com/payments/mobile/accept-payment?platform=react-native#ios-enable-saved-cards)[OptionalAllow\ndelayed payment\nmethodsClient-side](https://docs.stripe.com/payments/mobile/accept-payment?platform=react-native#ios-allow-delayed-payment-methods)[OptionalEnable\nApple\nPay](https://docs.stripe.com/payments/mobile/accept-payment?platform=react-native#ios-apple-pay)[OptionalEnable\ncard\nscanning](https://docs.stripe.com/payments/mobile/accept-payment?platform=react-native#ios-card-scanning)[OptionalCustomize\nthe\nsheet](https://docs.stripe.com/payments/mobile/accept-payment?platform=react-native#ios-customization)\n\n## Links\n\n- [PaymentIntent](https://docs.stripe.com/payments/payment-intents)\n- [Finalize payments on the\nserver](https://docs.stripe.com/payments/finalize-payments-on-the-server)\n- [React Native SDK](https://github.com/stripe/stripe-react-native)\n- [native iOS](https://github.com/stripe/stripe-ios)\n- [Android](https://github.com/stripe/stripe-android)\n- [publishable key](https://docs.stripe.com/keys#obtain-api-keys)\n- [live mode](https://docs.stripe.com/keys#test-live-modes)\n- [payment methods\nsettings](https://dashboard.stripe.com/settings/payment_methods)\n- [Payment method\nsupport](https://docs.stripe.com/payments/payment-methods/payment-method-support)\n- [pricing page](https://stripe.com/pricing/local-payment-methods)\n-\n[Register](https://developer.apple.com/documentation/xcode/defining-a-custom-url-scheme-for-your-app#Register-your-URL-scheme)\n- [Configure](https://reactnative.dev/docs/linking)\n- [set your scheme](https://docs.expo.io/guides/linking/#in-a-standalone-app)\n- [Android](https://developer.android.com/training/app-links/deep-linking)\n-\n[iOS](https://developer.apple.com/documentation/xcode/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app)\n-\n[PaymentMethod.Result](https://stripe.dev/stripe-react-native/api-reference/interfaces/PaymentMethod.Result.html)\n- [client\nsecret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret)\n- [handle the error](https://docs.stripe.com/error-handling)\n-\n[payment_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-payment_intent.succeeded)\n- [Dashboard webhook tool](https://dashboard.stripe.com/webhooks)\n- [webhook guide](https://docs.stripe.com/webhooks/quickstart)\n- [different types of payment\nmethods](https://stripe.com/payments/payment-methods-guide)\n-\n[payment_intent.succeeded](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.succeeded)\n-\n[payment_intent.processing](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.processing)\n-\n[payment_intent.payment_failed](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.payment_failed)\n- [authentication](https://docs.stripe.com/strong-customer-authentication)\n- [Testing](https://docs.stripe.com/testing)",
  "metadata": {
    "title": "Accept in-app payments | Stripe Documentation",
    "description": "Build a customized payments integration and checkout flows for your iOS, Android, and React Native apps.",
    "sourceURL": "https://docs.stripe.com/payments/mobile/accept-payment?platform=react-native"
  }
}