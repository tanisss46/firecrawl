{
  "content": "# Payment Request ButtonDeprecated\n\n## Collect payment and address information from customers who use Apple Pay, Google Pay, or Link.\n\n#### Legacy feature\n\nThe content on this page refers to a Legacy\n[Element](https://docs.stripe.com/payments/elements). Use the [Express Checkout\nElement](https://docs.stripe.com/elements/express-checkout-element) instead. If\nyou have an existing Payment Request Button integration, use our [migration\nguide](https://docs.stripe.com/elements/express-checkout-element/migration) to\nswitch to Express Checkout Element.\n\nThe Payment Request Button has the following limitations:\n\n- Only supports card payment methods\n- [Link](https://docs.stripe.com/payments/link) is supported, but only when card\n[funding\nsources](https://docs.stripe.com/payments/link/add-link-elements-integration#multiple-funding-sources)\nare used\n- Only shows one payment option\n\n## Demo\n\n#### Caution\n\nEither your browser does not support the Payment Request API, or you do not have\na saved payment method. To try out the Payment Request Button live demo, switch\nto one of the [supported\nbrowsers](https://docs.stripe.com/stripe-js/elements/payment-request-button#html-js-testing)\nbelow, and make sure you have a saved payment method.HTML + JSReact\nThe Payment Request Button Element dynamically displays wallet options during\ncheckout, giving you a single integration for [Apple\nPay](https://docs.stripe.com/apple-pay), [Google\nPay](https://docs.stripe.com/google-pay), and\n[Link](https://docs.stripe.com/stripe-js/elements/payment-request-button#link-prb).\nAlternatively, you can use the [Express Checkout\nElement](https://docs.stripe.com/elements/express-checkout-element) to offer\nmultiple one-click payment buttons to your customers.\n[Compare](https://docs.stripe.com/elements/express-checkout-element/comparison)\nthe Express Checkout Element and Payment Request Button.\n\nCustomers see Apple Pay or Google Pay if they enabled them on their device, and\ndepending on the browser they use. If Link appears, it could be because\ncustomers:\n\n- Don’t have Apple Pay or Google Pay enabled on their device.\n- Use Chrome with active, authenticated Link sessions.\nBrowser + WalletPayment ButtonSafari + Apple Pay enabledApple PayChrome + Link\nauthenticatedLinkChrome + Google Pay enabled and Link not authenticatedGoogle\nPayChrome on iOS 16 + Apple Pay and Google Pay enabledApple PayAny browser + No\nactive Apple Pay or Google PayLink\n## Prerequisites\n\nBefore you start, you need to:\n\n- Review the requirements for each payment button type:\n\n- Apple Pay and Google Pay don’t display for IP addresses in India, so plan your\nintegration testing accordingly.\n- Apple Pay requires macOS 10.12.1+ or iOS 10.1+.\n- Compatible devices automatically support Google Pay.\n- **Register your domain** in both test mode and live mode.\n- **Add a payment method to your browser.** For example, you can save a card in\nChrome, add a card to your Google Pay account, or add a card to your Wallet for\nSafari.\n- **Serve your application over HTTPS.** This is a requirement both in\ndevelopment and production. One way to get started is to use a service such as\n[ngrok](https://ngrok.com/).\n[Set up Stripe\nElementsClient-side](https://docs.stripe.com/stripe-js/elements/payment-request-button#set-up-stripe-elements)\nElements is available as part of\n[Stripe.js](https://docs.stripe.com/payments/elements). Include this in your\npage and create a container to use for the `paymentRequestButton` Element:\n\n```\n<script src=\"https://js.stripe.com/v3/\"></script>\n<div id=\"payment-request-button\">\n <!-- A Stripe Element will be inserted here. -->\n</div>\n```\n\nYour Stripe publishable [API key](https://docs.stripe.com/keys) is also required\nas it identifies your website to Stripe:\n\n```\nconst stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx', {\n apiVersion: \"2025-02-24.acacia\",\n});\n```\n\n[Create a paymentRequest\ninstanceClient-side](https://docs.stripe.com/stripe-js/elements/payment-request-button#create-payment-request-instance)\nCreate an instance of\n[stripe.paymentRequest](https://docs.stripe.com/js#stripe-payment-request) with\nall required options.\n\n```\nconst paymentRequest = stripe.paymentRequest({\n country: 'US',\n currency: 'usd',\n total: {\n label: 'Demo total',\n amount: 1099,\n },\n requestPayerName: true,\n requestPayerEmail: true,\n});\n```\n\n#### Note\n\nUse the `requestPayerName` parameter to collect the payer’s billing address for\nApple Pay and Link. You can use the billing address to perform address\nverification and block fraudulent payments. All other payment methods\nautomatically collect the billing address when one is available.\n\n[Create and mount the\npaymentRequestButtonClient-side](https://docs.stripe.com/stripe-js/elements/payment-request-button#mount-element)\nCreate the `paymentRequestButton` Element and check to make sure that your\ncustomer has an active payment method using `canMakePayment()`. If they do,\nmount the Element to the container to display the **Payment Request** button. If\nthey don’t, you can’t mount the Element, and we recommend that you show a\ntraditional checkout form instead.\n\n#### Note\n\nIf you accept Apple Pay with the Payment Request Button, you must offer Apple\nPay as the primary payment option on your website per [Apple\nguidelines](https://developer.apple.com/apple-pay/acceptable-use-guidelines-for-websites/#:~:text=canMakePaymentWithActiveCard).\nInternally, the Payment Request Button uses the Apple Pay\n`canMakePaymentWithActiveCard` API.\n\n```\nconst elements = stripe.elements();\nconst prButton = elements.create('paymentRequestButton', {\n paymentRequest,\n});\n\n(async () => {\n // Check the availability of the Payment Request API first.\n const result = await paymentRequest.canMakePayment();\n if (result) {\n prButton.mount('#payment-request-button');\n } else {\n document.getElementById('payment-request-button').style.display = 'none';\n }\n})();\n```\n\n[Create a\nPaymentIntentServer-side](https://docs.stripe.com/stripe-js/elements/payment-request-button#create-payment)\nStripe uses a [PaymentIntent](https://docs.stripe.com/api/payment_intents)\nobject to represent your intent to collect payment from a customer, tracking\ncharge attempts and payment state changes throughout the process.\n\n!\n\nCreate a `PaymentIntent` on your server with an amount and currency. Always\ndecide how much to charge on the server side, a trusted environment, as opposed\nto the client. This prevents malicious customers from being able to choose their\nown prices.\n\n```\ncurl https://api.stripe.com/v1/payment_intents \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d amount=1099 \\\n -d currency=usd \\\n -d \"payment_method_types[]\"=card\n```\n\nIncluded in the returned PaymentIntent is a [client\nsecret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret),\nwhich you use to securely complete the payment process instead of passing the\nentire PaymentIntent object. Send the client secret back to the client to use in\nthe next step.\n\n[Complete the\npaymentClient-side](https://docs.stripe.com/stripe-js/elements/payment-request-button#complete-payment)\nListen to the `paymentmethod` event to receive a\n[PaymentMethod](https://docs.stripe.com/api/payment_methods) object. Pass the\nPaymentMethod ID and the PaymentIntent’s client secret to\n[stripe.confirmCardPayment](https://docs.stripe.com/js#stripe-confirm-card-payment)\nto complete the payment.\n\n```\npaymentRequest.on('paymentmethod', async (ev) => {\n // Confirm the PaymentIntent without handling potential next actions (yet).\n const {paymentIntent, error: confirmError} = await stripe.confirmCardPayment(\n clientSecret,\n {payment_method: ev.paymentMethod.id},\n {handleActions: false}\n );\n\n if (confirmError) {\n // Report to the browser that the payment failed, prompting it to\n // re-show the payment interface, or show an error message and close\n // the payment interface.\n ev.complete('fail');\n } else {\n // Report to the browser that the confirmation was successful, prompting\n // it to close the browser payment method collection interface.\n ev.complete('success');\n // Check if the PaymentIntent requires any actions and, if so, let Stripe.js\n // handle the flow. If using an API version older than \"2019-02-11\"\n // instead check for: `paymentIntent.status === \"requires_source_action\"`.\n if (paymentIntent.status === \"requires_action\") {\n // Let Stripe.js handle the rest of the payment flow.\n const {error} = await stripe.confirmCardPayment(clientSecret);\n if (error) {\n // The payment failed -- ask your customer for a new payment method.\n } else {\n // The payment has succeeded -- show a success message to your customer.\n }\n } else {\n // The payment has succeeded -- show a success message to your customer.\n }\n }\n});\n```\n\n#### Caution\n\nThe customer can dismiss the payment interface in some browsers even after they\nauthorize the payment. This means that you might receive a [cancel\nevent](https://docs.stripe.com/js#payment-request-on) on your PaymentRequest\nobject after receiving a `paymentmethod` event. If you use the `cancel` event as\na hook for canceling the customer’s order, make sure you also refund the payment\nthat you just created.\n\n[Test your\nintegration](https://docs.stripe.com/stripe-js/elements/payment-request-button#testing)\nTo test your integration, you must use HTTPS and a supported browser. If you use\nthe `paymentRequestButton` Element within an iframe, the iframe must have the\n[allow](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-allowpaymentrequest)\nattribute set to equal “payment *”.\n\n#### Regional TestingIndia\n\nStripe Elements doesn’t support Google Pay or Apple Pay for Stripe accounts and\ncustomers in India. Therefore, you can’t test your Google Pay or Apple Pay\nintegration if the tester’s IP address is in India, even if the Stripe account\nis based outside India.\n\nIn addition, each payment method and browser has specific requirements:\n\nApple PayGoogle PayLink\n#### Safari\n\n- Safari on Mac running macOS Sierra or later\n- A compatible device with a card in its Wallet paired to your Mac with Handoff,\nor a Mac with TouchID. You can find instructions on the [Apple Support\nsite](https://support.apple.com/en-us/HT204681).\n- A [registered domain with Apple\nPay](https://docs.stripe.com/payments/payment-methods/pmd-registration).\n- When using an iframe, its origin must match the top-level origin (except for\nSafari 17+ when specifying `allow=\"payment\"` attribute). Two pages have the same\norigin if the protocol, host (full domain name), and port (if specified) are the\nsame for both pages.\n\n#### Mobile Safari\n\n- Mobile Safari on iOS 10.1 or later\n- A card in your Wallet (go to **Settings** > **Wallet & Apple Pay**).\n- A [registered domain with Apple\nPay](https://docs.stripe.com/payments/payment-methods/pmd-registration).\n- When using an iframe, its origin must match the top-level origin (except for\nSafari 17+ when specifying `allow=\"payment\"` attribute). Two pages have the same\norigin if the protocol, host (full domain name), and port (if specified) are the\nsame for both pages.\n\nAs of iOS 16, Apple Pay might work in some non-Safari mobile browsers with a\ncard saved in your Wallet.\n\n## Collect shipping information\n\nTo collect shipping information, begin by including `requestShipping: true` when\ncreating the payment request.\n\nYou can also provide an array of `shippingOptions` at this point, if your\nshipping options don’t depend on the customer’s address.\n\n```\nconst paymentRequest = stripe.paymentRequest({\n country: 'US',\n currency: 'usd',\n total: {\n label: 'Demo total',\n amount: 1099,\n },\n\n requestShipping: true,\n // `shippingOptions` is optional at this point:\n shippingOptions: [\n // The first shipping option in this list appears as the default\n // option in the browser payment interface.\n {\n id: 'free-shipping',\n label: 'Free shipping',\n detail: 'Arrives in 5 to 7 days',\n amount: 0,\n },\n ],\n});\n```\n\nNext, listen to the `shippingaddresschange` event to detect when a customer\nselects a shipping address. Use the address to fetch valid shipping options from\nyour server, update the total, or perform other business logic. You can\nanonymize the address data on the `shippingaddresschange` event in the browser\nto not reveal sensitive information that isn’t necessary for shipping cost\ncalculation.\n\nThe customer must provide valid `shippingOptions` at this point to proceed in\nthe flow.\n\n```\npaymentRequest.on('shippingaddresschange', async (ev) => {\n if (ev.shippingAddress.country !== 'US') {\n ev.updateWith({status: 'invalid_shipping_address'});\n } else {\n // Perform server-side request to fetch shipping options\n const response = await fetch('/calculateShipping', {\n data: JSON.stringify({\n shippingAddress: ev.shippingAddress\n })\n });\n const result = await response.json();\n\n ev.updateWith({\n status: 'success',\n shippingOptions: result.supportedShippingOptions,\n });\n }\n});\n```\n\n## Display line items\n\nUse\n[displayItems](https://docs.stripe.com/js/payment_request/create#stripe_payment_request-options-displayItems)\nto display\n[PaymentItem](https://docs.stripe.com/js/appendix/payment_item_object) objects\nand show the price breakdown in the browser’s payment interface.\n\n```\nconst paymentRequest = stripe.paymentRequest({\n country: 'US',\n currency: 'usd',\n total: {\n label: 'Demo total',\n amount: 2000,\n },\n\n displayItems: [\n {\n label: 'Sample item',\n amount: 1000,\n },\n {\n label: 'Shipping cost',\n amount: 1000,\n }\n ],\n});\n```\n\n## Style the button\n\nUse the following parameters to customize the Element:\n\n```\nelements.create('paymentRequestButton', {\n paymentRequest,\n style: {\n paymentRequestButton: {\n type: 'default',\n // One of 'default', 'book', 'buy', or 'donate'\n // Defaults to 'default'\n\n theme: 'dark',\n // One of 'dark', 'light', or 'light-outline'\n // Defaults to 'dark'\n\n height: '64px',\n // Defaults to '40px'. The width is always '100%'.\n },\n },\n});\n```\n\n### Using your own button\n\nIf you want to design your own button instead of using the\n`paymentRequestButton` Element, you can show your custom button based on the\nresult of\n[paymentRequest.canMakePayment()](https://docs.stripe.com/js#payment-request-can-make-payment).\nThen, use\n[paymentRequest.show()](https://docs.stripe.com/js#payment-request-show) to\ndisplay the browser interface when your button is clicked.\n\nWhen building your own button, follow the Apple Pay [Human Interface\nGuidelines](https://developer.apple.com/design/human-interface-guidelines) and\nGoogle Pay [Brand\nGuidelines](https://developers.google.com/pay/api/web/guides/brand-guidelines).\n\n#### Caution\n\nLink isn’t supported in custom button configurations and won’t display for the\ncustomer if you decide to use one.\n\n## Add an Apple Pay merchant token for merchant initiated transactions\n\nSet up your Payment Request Button to request an [Apple Pay\nMPAN](https://docs.stripe.com/apple-pay/merchant-tokens) to facilitate merchant\ninitiated transactions (MIT) for recurring, auto-load, or deferred payments.\n\n- Create an instance of the [Payment\nRequest](https://docs.stripe.com/stripe-js/elements/payment-request-button#create-payment-request-instance).\n- Pass the `applePay` object relevant to your MPAN use case (choose from the\ndrop-down to see use case code samples).\n- Include relevant parameters for your use case.\nMPAN use case:Recurring paymentsAutomatic reloadDeferred payment\n```\nconst paymentRequest = stripe.paymentRequest({\n applePay: {\n recurringPaymentRequest: {\n paymentDescription: 'My subscription',\n managementURL: 'https://example.com/billing',\n regularBilling: {\n amount: 2500,\n label: 'Monthly subscription fee',\n recurringPaymentIntervalUnit: 'month',\n recurringPaymentIntervalCount: 1,\n },\n },\n },\n // Other options\n});\n```\n\n## Use the Payment Request Button with Stripe Connect\n\n[Connect](https://docs.stripe.com/connect) platforms that either create direct\ncharges or add the token to a Customer on the connected account must take\nadditional steps when using the Payment Request Button.\n\n- On your frontend, before creating the `PaymentRequest` instance, set the\n`stripeAccount` option on the Stripe instance:\n\n```\nconst stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx', {\n apiVersion: \"2025-02-24.acacia\",\n stripeAccount: 'CONNECTED_STRIPE_ACCOUNT_ID',\n});\n```\n\n- [Register all\ndomains](https://docs.stripe.com/payments/payment-methods/pmd-registration?dashboard-or-api=api#register-your-domain-while-using-connect)\nwhere you plan to show the Payment Request Button.\n\n## Link for the Payment Request Button\n\nWhen new customers come to your site, they can use [Link in the Payment Request\nButton](https://docs.stripe.com/payments/link/payment-request-button-link) to\npay with their saved payment details. With\n[Link](https://docs.stripe.com/payments/link), they don’t need to manually enter\ntheir payment information. Link requires [domain\nregistration](https://docs.stripe.com/payments/payment-methods/pmd-registration).\n\n## Disclose Stripe to your customers\n\nStripe collects information on customer interactions with Elements to provide\nservices to you, prevent fraud, and improve its services. This includes using\ncookies and IP addresses to identify which Elements a customer saw during a\nsingle checkout session. You’re responsible for disclosing and obtaining all\nrights and consents necessary for Stripe to use data in these ways. For more\ninformation, visit our [privacy\ncenter](https://stripe.com/legal/privacy-center#as-a-business-user-what-notice-do-i-provide-to-my-end-customers-about-stripe).\n\n## See also\n\n- [Learn about Apple Pay](https://docs.stripe.com/apple-pay)\n- [Learn about Google Pay](https://docs.stripe.com/google-pay)\n\n## Links\n\n- [Element](https://docs.stripe.com/payments/elements)\n- [Express Checkout\nElement](https://docs.stripe.com/elements/express-checkout-element)\n- [migration\nguide](https://docs.stripe.com/elements/express-checkout-element/migration)\n- [Link](https://docs.stripe.com/payments/link)\n- [funding\nsources](https://docs.stripe.com/payments/link/add-link-elements-integration#multiple-funding-sources)\n- [Apple Pay](https://docs.stripe.com/apple-pay)\n- [Google Pay](https://docs.stripe.com/google-pay)\n-\n[Compare](https://docs.stripe.com/elements/express-checkout-element/comparison)\n- [Register your\ndomain](https://docs.stripe.com/payments/payment-methods/pmd-registration)\n- [ngrok](https://ngrok.com)\n- [https://js.stripe.com/v3/](https://js.stripe.com/v3/)\n- [API key](https://docs.stripe.com/keys)\n- [stripe.paymentRequest](https://docs.stripe.com/js#stripe-payment-request)\n- [Apple\nguidelines](https://developer.apple.com/apple-pay/acceptable-use-guidelines-for-websites/#:~:text=canMakePaymentWithActiveCard)\n- [PaymentIntent](https://docs.stripe.com/api/payment_intents)\n- [client\nsecret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret)\n- [PaymentMethod](https://docs.stripe.com/api/payment_methods)\n-\n[stripe.confirmCardPayment](https://docs.stripe.com/js#stripe-confirm-card-payment)\n- [cancel event](https://docs.stripe.com/js#payment-request-on)\n-\n[allow](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-allowpaymentrequest)\n- [Apple Support site](https://support.apple.com/en-us/HT204681)\n-\n[displayItems](https://docs.stripe.com/js/payment_request/create#stripe_payment_request-options-displayItems)\n- [PaymentItem](https://docs.stripe.com/js/appendix/payment_item_object)\n-\n[paymentRequest.canMakePayment()](https://docs.stripe.com/js#payment-request-can-make-payment)\n- [paymentRequest.show()](https://docs.stripe.com/js#payment-request-show)\n- [Human Interface\nGuidelines](https://developer.apple.com/design/human-interface-guidelines)\n- [Brand\nGuidelines](https://developers.google.com/pay/api/web/guides/brand-guidelines)\n- [Apple Pay MPAN](https://docs.stripe.com/apple-pay/merchant-tokens)\n- [https://example.com/billing](https://example.com/billing)\n- [Connect](https://docs.stripe.com/connect)\n- [Register all\ndomains](https://docs.stripe.com/payments/payment-methods/pmd-registration?dashboard-or-api=api#register-your-domain-while-using-connect)\n- [Link in the Payment Request\nButton](https://docs.stripe.com/payments/link/payment-request-button-link)\n- [privacy\ncenter](https://stripe.com/legal/privacy-center#as-a-business-user-what-notice-do-i-provide-to-my-end-customers-about-stripe)",
  "metadata": {
    "title": "Payment Request Button | Stripe Documentation",
    "description": "Collect payment and address information from customers who use Apple Pay, Google Pay, or Link.",
    "sourceURL": "https://docs.stripe.com/stripe-js/elements/payment-request-button"
  }
}