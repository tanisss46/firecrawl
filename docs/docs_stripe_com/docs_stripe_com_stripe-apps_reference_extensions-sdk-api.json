{
  "content": "# Extension SDK API reference\n\n## An index of all fields, types, and descriptions for the Extension SDK API.\n\nUI extensions have access to [context\nprops](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#props)\nand [utility\nfunctions](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#functions)\nthat let them interact with an app’s users and the Stripe Dashboard ecosystem.\nThis page documents these values and functions.\n\n## Props\n\nViews are passed props that the extension can use for context on where the\nextension is being displayed. Your view can take some or all of these props as\narguments, and they’re of type `ExtensionContextValue`.\n\n```\nimport type {ExtensionContextValue} from '@stripe/ui-extension-sdk/context';\n\nconst ExampleApp = ({ userContext, environment, oauthContext, appContext}:\nExtensionContextValue) => {\n ...\n}\n```\n\n### User context\n\nThe `userContext` prop has data about the end user using your app, including\nthese fields:\n\nFieldTypeExamplenamestringJenny RosenThe app user’s\nnameaccount.countrystringUKThe app user’s\ncountryaccount.idstringacct_1032D82eZvKYlo2CThe app user’s account\nIDaccount.namestringJenny’s Llama EmporiumThe name of the Stripe\naccountrolesArray<[RoleDefinition](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#roledefinition)>noneA\nlist of the active user’s [user\nroles](https://docs.stripe.com/get-started/account/teams/roles).localestringen-GBThe\napp user’s system language ID\n### RoleDefinition\n\nA role definition has these fields:\n\nField nameTypeExampletype‘builtIn’ | ‘custom’builtInSpecifies the role type.\nCustom roles are only available to [private\napps](https://docs.stripe.com/stripe-apps/distribution-options#share-with-team-members).namestringDeveloperThe\nname of the user role.\n### Environment\n\nThe `environment` prop has data about the page a user is viewing, including\nthese fields:\n\nFieldTypeExampleviewportIDstringstripe.dashboard.payment.listCurrent viewport\nrendering your viewmode‘live’ | ‘test’liveThe Stripe API mode the current page\nis inobjectContext.idstringch_3L0pjB2eZvKYlo2C1u1vZ7aKIn the `ObjectView`\nobjects, this is the ID of the current object the user views in the\nDashboard.objectContext.objectstringchargeIn the `ObjectView` objects, this is\nthe type of the current object the user views in the\nDashboard.constantsObject`{\"API_BASE\": \"https://api.example.com/v1\"}`An object\nwith arbitrary constant values passed from the [app\nmanifest](https://docs.stripe.com/stripe-apps/reference/app-manifest) that can\nbe [overridden for local development using the CLI manifest\nflag](https://docs.stripe.com/stripe-apps/reference/app-manifest#extended-manifest).\n### OAuth context\n\nThe `oauthContext` prop contains information about the current [OAuth\nworkflow](https://docs.stripe.com/stripe-apps/pkce-oauth-flow), if one is\nunderway.\n\nFieldTypeExampleerrorstringnoneOAuth error codecodestringnoneOAuth authorization\ncodestatestringnoneOAuth state used by your appverifierstringnoneOAuth code\nverifier\n### App context\n\nThe `appContext` prop contains information about the user’s app install, and has\nthe following fields:\n\nFieldTypeExampleauthorizedPermissionsArray<string>`['event_read',\n'charge_write']`App’s current authorized\npermissionsauthorizedCSP.connectSrcArray<string>`['http://o.ingest.sentry.io/api/']`URLs\nof permitted third-party APIs. If the URL ends in a slash, all of its children\nare also\npermitted.authorizedCSP.imageSrcArray<string>`['https://images.example.com/',\n'https://images.example.org']`URLs the\n[Img](https://stripe.com/stripe-apps/ui-toolkit/components/img) component can\nload from. If the URL ends in a slash, all of its children are also permitted.\n## Utility functions\n\nThe UI extension SDK provides these functions to help apps interact with the\nStripe API and the Dashboard user.\n\n-\n[clipboardWriteText](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#clipboardWriteText)—Write\ntext to the end user’s clipboard.\n-\n[createHttpClient](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#createHttpClient)-Get\nan authenticated Stripe API client.\n-\n[createOAuthState](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#createOAuthState)—Obtain\nvalues to use when you create an authorization link in an OAuth workflow.\n-\n[fetchStripeSignature](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#fetchStripeSignature)—Get\na signature from Stripe’s servers.\n-\n[getDashboardUserEmail](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#getDashboardUserEmail)—Get\nthe end user’s email address.\n-\n[getUserAuthorizedPermissions](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#getUserAuthorizedPermissions)—Get\nthe intersection of the app’s authorized permissions and those of the current\nDashboard user.\n-\n[isPermissionAuthorized](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#isPermissionAuthorized)—Indicate\nwhether a permission is currently in an app’s authorized permissions.\n-\n[isSourceInAuthorizedCSP](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#isSourceInAuthorizedCSP)—Indicate\nwhether a URL is currently in an app’s authorized content security policy.\n-\n[showToast](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#showToast)—Show\na toast message to the user.\n-\n[useRefreshDashboardData](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#useRefreshDashboardData)—Enable\nyour view to update data in the Dashboard.\n\n### clipboardWriteText\n\nWrite text to the app user’s clipboard. The user can then paste it as if they\nhad copied it.\n\nArgumentTypeExampletextstringHello, world!Text to copy\nTo use this function, first import it from the SDK:\n\n```\nimport {clipboardWriteText} from '@stripe/ui-extension-sdk/utils';\n```\n\nFor example, provide a button that copies `Hello, world!` to the clipboard when\npressed. In a real app, you could use this to copy an address, invoice number,\nor other important detail.\n\n```\nimport {useCallback} from 'react';\nimport {Button} from '@stripe/ui-extension-sdk/ui';\nimport {clipboardWriteText} from '@stripe/ui-extension-sdk/utils';\n\nconst App = () => {\n const writeToClipboard = useCallback(async () => {\n try {\n await clipboardWriteText('Hello, world!');\n // Writing to the clipboard succeeded\n } catch (e) {\n // Writing to the clipboard failed\n }\n }, []);\n return (\n <Button\n onPress={writeToClipboard}\n >\n to clipboard\n </Button>\n );\n};\n```\n\n### createHttpClient\n\nObtain an authenticated Stripe API client for the installed user’s account. You\nmust use the `STRIPE_API_KEY` provided by the SDK to give your client the\npermissions defined in the [app\nmanifest](https://docs.stripe.com/stripe-apps/reference/app-manifest).\n\nTo use this function, first import it from the SDK and then provide its values\nto the Stripe constructor from\n[stripe-node](https://github.com/stripe/stripe-node).\n\n```\nimport {createHttpClient, STRIPE_API_KEY} from\n'@stripe/ui-extension-sdk/http_client';\nimport Stripe from 'stripe';\n\nconst stripe = new Stripe(\n STRIPE_API_KEY,\n {\n httpClient: createHttpClient(),\n apiVersion: '2022-11-15'\n }\n)\n```\n\nFor an example in context, see [Build a\nUI](https://docs.stripe.com/stripe-apps/build-ui#code-sample-update-customer-name).\n\n### createOAuthState\n\nObtain `state` and `challenge` values to use when you [create an authorization\nlink](https://docs.stripe.com/stripe-apps/pkce-oauth-flow#create-authorization-link)\nin an OAuth workflow.\n\nTo use this function, first import it from the SDK.\n\n```\nimport {createOAuthState} from '@stripe/ui-extension-sdk/utils';\n```\n\nFor an example in context, see [Add authorization\nworkflows](https://docs.stripe.com/stripe-apps/pkce-oauth-flow).\n\n### fetchStripeSignature\n\nGet a signature from Stripe’s servers. Your UI extension can use this signature\nto send signed requests to your app’s backend.\n\nTo use this function, first import it from the SDK.\n\n```\nimport {fetchStripeSignature} from '@stripe/ui-extension-sdk/utils';\n```\n\nFor more details and an example in context, see [server-side\nlogic](https://docs.stripe.com/stripe-apps/build-backend) docs.\n\n### getDashboardUserEmail\n\nGet the app user’s email address.\n\nTo use this function, first import it from the SDK.\n\n```\nimport {getDashboardUserEmail} from '@stripe/ui-extension-sdk/utils';\n```\n\nYou must also include the `user_email_read` permission in your [app\nmanifest](https://docs.stripe.com/stripe-apps/reference/app-manifest). Add it\nusing a CLI command or edit the app manifest file directly.\n\n```\nstripe apps grant permission user_email_read \"EXPLANATION\"\n```\n\nFor example, access the app user’s email in a view by getting it using the\n`getDashboardUserEmail` function and storing it in a React state variable.\n\n```\nimport {useEffect, useState} from 'react';\nimport {getDashboardUserEmail} from '@stripe/ui-extension-sdk/utils';\n\nexport const useDashboardUserEmail = () => {\n const [email, setEmail] = useState<string | null>(null);\n\n const fetchEmail = async () => {\n try {\n const {email} = await getDashboardUserEmail();\n setEmail(email);\n } catch(e) {\n console.error(e);\n }\n };\n\n useEffect(() => {\n fetchEmail();\n }, []);\n\n return email;\n};\n\nconst App = () => {\n const dashboardUserEmail = useDashboardUserEmail();\n ...\n};\n```\n\n### getUserAuthorizedPermissions\n\nGets the intersection of the app’s authorized permissions and those of the\ncurrent Dashboard user.\n\nFor instance, if the app’s current [authorized\npermissions](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#appContext)\nare `event_read` and `charge_write`, but the current Dashboard user has a\n`view_only` role (that is, no edit permissions), calling the function returns\nthe array `['event_read']`.\n\nTo use this function, first import it from the SDK.\n\n```\nimport {getUserAuthorizedPermissions} from '@stripe/ui-extension-sdk/utils';\n```\n\n### isPermissionAuthorized\n\nIndicate if a permission is in the app’s authorized permissions. Throws an error\nif the permission isn’t on the app manifest.\n\nArgumentTypeExamplepermissionstringcharge_readPermission to check\nTo use this function, first import it from the SDK.\n\n```\nimport {isPermissionAuthorized} from '@stripe/ui-extension-sdk/utils';\n```\n\n#### Gating functionality by permission\n\nThis function can gate app functionality by user authorized permissions.\n\nFor instance, on the customer details page, only update customer details if the\napp user has authorized the `customer_write` permission.\n\n```\nimport {isPermissionAuthorized} from '@stripe/ui-extension-sdk/utils';\n\nconst App = () => {\n\n const updateCustomer = useCallback(async () => {\n\n const customerWriteEnabled = await isPermissionAuthorized('customer_write');\n if (customerWriteEnabled){\n await updateCurrentCustomer()\n }\n ...\n })\n}\n```\n\n### isSourceInAuthorizedCSP\n\nIndicate if a URL is in the app’s authorized connect sources or image sources.\n\nArgumentTypeExamplesourcestringhttps://images.example.org/URL to check\nTo use this function, first import it from the SDK.\n\n```\nimport {isSourceInAuthorizedCSP} from '@stripe/ui-extension-sdk/utils';\n```\n\n### showToast\n\nRender a toast at the bottom of your view to inform the user about the status of\nan action. For example, a toast can show a user whether an API call succeeded or\nfailed.\n\n```\nimport {showToast} from '@stripe/ui-extension-sdk/utils';\n\nconst App = () => {\n const handleClick = () => {\n fetch(...)\n .then((response) => {\n showToast(\"Invoice updated\", {type: \"success\"})\n return response.json()\n })\n .catch(() => {\n showToast(\"Invoice could not be updated\", {type: \"caution\"})\n })\n }\n\n // Use the `handleClick`...\n}\n```\n\nThe `showToast()` function takes two arguments, a `message` and `options`. The\nfunction is defined as follows:\n\n```\ntype ToastType = \"success\" | \"caution\" | \"pending\" | undefined;\ntype ToastOptions = { type?: ToastType; action?: string; onAction: () => void; }\n(message: string, options?: ToastOptions) => Promise<{\n update: (updateMessage: string, updateOptions?: ToastOptions) => void;\n dismiss: () => void;\n}>;\n```\n\nToast messages can’t exceed 30 characters in length or be empty. If a message is\ntoo long or empty, the console logs an error.\n\nUnless they’re of type `pending`, toasts dismiss automatically.\n\nIs PendingHas\nActionTimeout`false``false`4s`false``true`6s`true``false`None`true``true`None\n```\nimport {showToast} from '@stripe/ui-extension-sdk/utils';\n\nconst App = () => {\n const handleClick = async () => {\n const { dismiss, update } = await showToast(\"Refreshing data\", {\n type: \"pending\",\n });\n try {\n await refreshData();\n dismiss();\n } catch (error) {\n update(\"Data could not be refreshed\", { type: \"caution\" });\n }\n }\n\n // Use the `handleClick`...\n}\n```\n\nToasts can also prompt the user to take an action. Clicking the action button\nautomatically dismisses the toast.\n\n```\nimport {showToast} from '@stripe/ui-extension-sdk/utils';\n\nconst App = () => {\n const handleClick = async () => {\n let timeout;\n const { dismiss } = await showToast('Message \"sent\"', {\n action: \"Undo\",\n onAction: () => {\n clearTimeout(timeout);\n showToast('Message \"unsent\"');\n },\n });\n timeout = setTimeout(() => {\n sendMessage();\n dismiss();\n }, 3000);\n }\n\n // Use the `handleClick`...\n}\n```\n\n### useRefreshDashboardData\n\nEnable your view to update data in the Dashboard. This function returns another\ncallback function. Store that callback, and call it when Stripe data changes.\nWhen you call it, the Dashboard updates to reflect the new values.\n\nTo use this function, first import it from the SDK.\n\n```\nimport {useRefreshDashboardData} from '@stripe/ui-extension-sdk/utils';\n```\n\nFor instance, on a customer details page, get the callback function that\nrefreshes Dashboard data, and then call it after updating the current customer.\n\n```\nimport {useCallback} from 'react';\nimport {useRefreshDashboardData} from '@stripe/ui-extension-sdk/utils';\n\nconst App = () => {\n const refreshDashboardData = useRefreshDashboardData();\n\n const updateCustomer = useCallback(async () => {\n try {\n await updateCurrentCustomer();\n await refreshDashboardData();\n } catch (error) {}\n }, [refreshDashboardData]);\n}\n```\n\n## See also\n\n- [How UI extensions\nwork](https://docs.stripe.com/stripe-apps/how-ui-extensions-work)\n- [Viewports reference](https://docs.stripe.com/stripe-apps/reference/viewports)\n- [Using Roles in UI\nExtensions](https://docs.stripe.com/stripe-apps/using-roles-in-ui-extensions)\n\n## Links\n\n- [user roles](https://docs.stripe.com/get-started/account/teams/roles)\n- [private\napps](https://docs.stripe.com/stripe-apps/distribution-options#share-with-team-members)\n- [app manifest](https://docs.stripe.com/stripe-apps/reference/app-manifest)\n- [overridden for local development using the CLI manifest\nflag](https://docs.stripe.com/stripe-apps/reference/app-manifest#extended-manifest)\n- [OAuth workflow](https://docs.stripe.com/stripe-apps/pkce-oauth-flow)\n- [Img](https://stripe.com/stripe-apps/ui-toolkit/components/img)\n- [stripe-node](https://github.com/stripe/stripe-node)\n- [Build a\nUI](https://docs.stripe.com/stripe-apps/build-ui#code-sample-update-customer-name)\n- [create an authorization\nlink](https://docs.stripe.com/stripe-apps/pkce-oauth-flow#create-authorization-link)\n- [server-side logic](https://docs.stripe.com/stripe-apps/build-backend)\n- [How UI extensions\nwork](https://docs.stripe.com/stripe-apps/how-ui-extensions-work)\n- [Viewports reference](https://docs.stripe.com/stripe-apps/reference/viewports)\n- [Using Roles in UI\nExtensions](https://docs.stripe.com/stripe-apps/using-roles-in-ui-extensions)",
  "metadata": {
    "title": "Extension SDK API reference | Stripe Documentation",
    "description": "An index of all fields, types, and descriptions for the Extension SDK API.",
    "sourceURL": "https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api"
  }
}