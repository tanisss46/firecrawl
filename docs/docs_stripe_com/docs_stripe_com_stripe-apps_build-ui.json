{
  "content": "# Build a UI\n\n## Build, test, and edit a custom UI that extends the functionality of the Stripe Dashboard.\n\nGive your app a user interface by using TypeScript, React, and Stripe’s [UI\nExtensions\nSDK](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api) and [UI\ntoolkit](https://docs.stripe.com/stripe-apps/design) to extend the Stripe\nDashboard. This guide explains how to build a simple UI by creating and removing\nviews.\n\nFor a more technical overview, [learn how UI extensions\nwork](https://docs.stripe.com/stripe-apps/how-ui-extensions-work).\n\n## Add a view\n\nUse views to develop your app UI. A view is a pairing of a React component and a\nspecified viewport. The React component is composed of UI components from our UI\ntoolkit. The viewport is the page or section of the Stripe Dashboard where you\nwant to display it.\n\n- Use the `add` command from your project root directory:\n\n```\nstripe apps add view\n```\n- Follow the prompts:\n\n- Select the viewport for your view to appear in. See a list of [available\nviewports](https://docs.stripe.com/stripe-apps/reference/viewports).\n- Name your view (for example, MyComponentName). The CLI suggests names based on\nyour viewport selection.\n\nStripe automatically adds your view to the `views` array in your [app\nmanifest](https://docs.stripe.com/stripe-apps/reference/app-manifest), creates a\nnew React component file in the `src/views` directory, and creates a unit test\nfile alongside it.\n\n## Preview the application\n\nYou can run your app locally, make updates, and preview your changes in the\nDashboard.\n\n- From your project root directory, start the development server:\n\n```\nstripe apps start\n```\n- Press **Enter** to open your browser.\n- Click **Continue** to preview your app in your Stripe account:\n- To stop the development server, type **Ctrl+C** from your command line.\n\nWhen the development server is running, you can make changes to your app and see\nthem automatically in the Dashboard without refreshing the page. Until you\nresolve them, any errors automatically show up in the Stripe Dashboard, your\nbrowser’s dev tools, and the Stripe CLI.\n\n### Switch previews\n\nYou can disable previewing the local version of your app to preview a recently\n[installed version of your app in test\nmode](https://docs.stripe.com/stripe-apps/upload-install-app). If you’ve never\ninstalled any version of your app in test mode, you can’t switch previews.\n\nTo preview the most recently installed version of your app in test mode, run\nyour development server and follow these steps:\n\n- In your app, click the overflow menu in the top right of your app.\n- Click **Turn off app preview**, then **Continue**.\n\n## Access Stripe objects in the Dashboard\n\nWhen you assign a component to a viewport, the component can receive context\nabout the Stripe object on that page using the `environment.objectContext`\nobject.\n\nFor example, if you create a view that uses the\n`stripe.dashboard.customer.detail` viewport, the `environment.objectContext`\nobject returns a `customer` object type and the current customer’s ID. You can\nthen use those values to get more information about the\n[Customer](https://docs.stripe.com/api/customers?lang=node) object and modify\nattributes like their address, description, and so on.\n\nFor an index of the objects that a viewport gives, see [viewports reference\ndocumentation](https://docs.stripe.com/stripe-apps/reference/viewports).\n\n### Example: Update customer name\n\nThe following code updates the customer name by using the [Stripe Node.js API\nclient](https://docs.stripe.com/api?lang=node) and the viewport’s\n`environment.objectContext` ID:\n\n- Add the `customer_write` permission to your app:\n\n```\nstripe apps grant permission \"customer_write\" \"Allows the app to update the name\nof the customer.\"\n```\n- Use the Stripe API in your app to update the customer’s name:\n\n```\nimport {createHttpClient, STRIPE_API_KEY} from\n'@stripe/ui-extension-sdk/http_client';\nimport Stripe from 'stripe';\n\n// Initiate communication with the stripe client.\nconst stripe = new Stripe(STRIPE_API_KEY, {\n httpClient: createHttpClient(),\n apiVersion: '2022-08-01',\n})\n\nconst App = ({environment, userContext}) => {\n // Call the Stripe API to make updates to customer details.\n const updateCurrentCustomer = async (newCustomerName) => {\n try {\n // If the user has permission to update customers, this should succeed.\n const updatedCustomer = await stripe.customers.update(\n // We can use the current objectContext to get the customer ID.\n environment.objectContext.id,\n {name: newCustomerName}\n );\n\n console.log(updatedCustomer.name);\n } catch (error) {}\n };\n}\n```\n\n### Example: Update Dashboard data\n\nIf your app changes data in the Dashboard, use the\n[useRefreshDashboardData](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#useRefreshDashboardData)\nfunction to generate a callback that refreshes the data:\n\n```\nimport {useCallback} from 'react';\nimport {useRefreshDashboardData} from '@stripe/ui-extension-sdk/context';\n\nconst App = () => {\n // Get the callback used to refresh the dashboard data\n const refreshDashboardData = useRefreshDashboardData();\n\n // Stripe API call\n const updateCustomer = useCallback(async () => {\n try {\n await updateCurrentCustomer();\n\n // Call to refresh the data in the Dashboard\n refreshDashboardData();\n } catch (error) {}\n }, [refreshDashboardData]);\n}\n```\n\n## Use third-party APIs\n\nYour UI extension can call third-party APIs (your own API or any public API) to\nhave your app request or send data.\n\n- Use the `grant url` command to add the third-party API URL:\n\n```\nstripe apps grant url \"https://*.api.example.com/path/\" \"Send data to example\nservice...\"\n```\n\nConnect-src URL must meet the following requirements:\n\n- Use secure HTTPS protocol (example: `https://www.example.com/api/users/`).\n- Contain a path (example: `https://www.example.com/api/users/` URL is valid,\nnot `https://www.example.com/`). Adding a base path with a trailing slash covers\nall paths after it (example: `https://www.example.com/api/` enables calls to\n`https://www.example.com/api/users/abc123/address`).\n- Can’t be a call to a Stripe API.\n- If using a wildcard (`*`), it must be in the left-most DNS label (example:\n`https://*.example.com/api/users/`).\n\nStripe Apps adds the URL in the `connect-src` array of your project’s [app\nmanifest](https://docs.stripe.com/stripe-apps/reference/app-manifest):\n\n```\n\"ui_extension\": {\n \"views\": [],\n \"actions\": [],\n \"content_security_policy\": {\n \"connect-src\": [\n \"https://*.api.example.com/\",\n \"https://o0.ingest.example.io/api/\",\n ],\n\"purpose\": \"Send data to example service. The Example app sends data to the\nExample service to provide its functionality and sends anonymous error reports\nto our partner Example for debugging purposes\"\n }\n }\n```\n\nTo remove a connect-src URL, you can also use the Stripe CLI:\n\n```\nstripe apps revoke connect-src \"https://*.api.example.com/path/\"\n```\n- To preview your app in the browser, start your development server and follow\nthe CLI prompts:\n\n```\nstripe apps start\n```\n- Add the `fetch` call with the URL of your third-party API in your app.\n\nFor example, if you add the `https://www.example.com/api/users` connect-src URL\nto your [app\nmanifest](https://docs.stripe.com/stripe-apps/reference/app-manifest), you could\nuse this fetch call:\n\n```\nconst makeRequestToService = (endpoint, requestData) => {\n return fetch(`https://www.example.com/api/${endpoint}/`, {\n 'POST',\n headers: {\n 'Content-Type': 'application/json',\n },\n body: requestData,\n });\n};\n```\n- To use different [app\nmanifest](https://docs.stripe.com/stripe-apps/reference/app-manifest) values in\nlocal development and production, [load an extended manifest\nfile](https://docs.stripe.com/stripe-apps/reference/app-manifest#extended-manifest).\n- If the third-party API has a JavaScript client library, you can add the\ndependency to your app using the `npm add` command.\n\n## Debug the application\n\nWhile developing your app, you can use your browser’s dev tools console as a\ndebugging tool.\n\nTo isolate the messages related to your app:\n\n- Find your app ID in the [app\nmanifest](https://docs.stripe.com/stripe-apps/reference/app-manifest).\n- On the **Console** panel of your dev tools browser, enter `[Stripe App <your\napp ID>]` in the **Filter** box. It should look something like `[Stripe App\ncom.example.helloworld]`.\n\n## Write tests for your view\n\nWe recommend writing tests for your views. In addition to verifying that your\nview behaves as intended, unit tests also make it safer to make changes to code\nin the future.\n\nWhen you create your view, the test file ending in `.test.tsx` contains a test\nof the default view:\n\n```\nimport {render, getMockContextProps} from \"@stripe/ui-extension-sdk/testing\";\nimport {ContextView} from \"@stripe/ui-extension-sdk/ui\";\n\nimport App from \"./App\";\n\ndescribe(\"App\", () => {\n it(\"renders ContextView\", () => {\n const {wrapper} = render(<App {...getMockContextProps()} />);\n\n expect(wrapper.find(ContextView)).toContainText(\"save to reload this view\");\n });\n});\n```\n\nYou can run all your tests using the included [Jest](https://jestjs.io/) test\nrunner with the `npm run test` or `yarn test` command. If you’ve used popular\nReact testing tools like [Testing\nLibrary](https://testing-library.com/docs/react-testing-library/intro) and\n[Enzyme](https://enzymejs.github.io/enzyme), the test package included in\n`@stripe/ui-extension-sdk/testing` is most familiar.\n\nA typical test follows this pattern:\n\n- Render your view.\n- Make an assertion about the initial state, such as text existing.\n- Interact with the view.\n- Make an assertion about the new state, such as new text appearing.\n\nFor more methods and features of the test package, see [UI testing\nreference](https://docs.stripe.com/stripe-apps/ui-testing).\n\n[OptionalRemove a\nview](https://docs.stripe.com/stripe-apps/build-ui#remove-a-view)\n## See also\n\n- [UI components](https://docs.stripe.com/stripe-apps/components)\n- [Add an app settings page](https://docs.stripe.com/stripe-apps/app-settings)\n\n## Links\n\n- [UI Extensions\nSDK](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api)\n- [UI toolkit](https://docs.stripe.com/stripe-apps/design)\n- [learn how UI extensions\nwork](https://docs.stripe.com/stripe-apps/how-ui-extensions-work)\n- [available viewports](https://docs.stripe.com/stripe-apps/reference/viewports)\n- [app manifest](https://docs.stripe.com/stripe-apps/reference/app-manifest)\n- [installed version of your app in test\nmode](https://docs.stripe.com/stripe-apps/upload-install-app)\n- [Customer](https://docs.stripe.com/api/customers?lang=node)\n- [Stripe Node.js API client](https://docs.stripe.com/api?lang=node)\n-\n[useRefreshDashboardData](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#useRefreshDashboardData)\n- [https://*.api.example.com/path/](https://*.api.example.com/path/)\n- [https://*.api.example.com/](https://*.api.example.com/)\n- [https://o0.ingest.example.io/api/](https://o0.ingest.example.io/api/)\n-\n[https://www.example.com/api/${endpoint}/`,](https://www.example.com/api/${endpoint}/`,)\n- [load an extended manifest\nfile](https://docs.stripe.com/stripe-apps/reference/app-manifest#extended-manifest)\n- [Jest](https://jestjs.io/)\n- [Testing\nLibrary](https://testing-library.com/docs/react-testing-library/intro)\n- [Enzyme](https://enzymejs.github.io/enzyme)\n- [UI testing reference](https://docs.stripe.com/stripe-apps/ui-testing)\n- [UI components](https://docs.stripe.com/stripe-apps/components)\n- [Add an app settings page](https://docs.stripe.com/stripe-apps/app-settings)",
  "metadata": {
    "title": "Build a UI | Stripe Documentation",
    "description": "Build, test, and edit a custom UI that extends the functionality of the Stripe Dashboard.",
    "sourceURL": "https://docs.stripe.com/stripe-apps/build-ui"
  }
}