{
  "content": "# Android basic integrationDeprecated\n\n## Accept cards with the Android SDK's prebuilt UI.\n\n#### Note\n\nWe created an improved [payments\nUI](https://docs.stripe.com/payments/accept-a-payment?platform=android) for\nmobile apps with support for additional payment methods. We recommend using it\nfor your integration instead of this one.\n\nIf you want to migrate but are unable to, please [let us\nknow](https://github.com/stripe/stripe-android/issues).\n\nUse this integration if you want a prebuilt UI that:\n\n- Accepts credit cards and other payment methods\n- Saves and displays cards for reuse\n- Can be [customized to fit your app’s look and\nfeel](https://docs.stripe.com/mobile/android/basic#customize-ui) using an\nAndroid theme\n- Launches full-screen activities to collect payment details, shipping address,\nand shipping method\n- Allows your customer to choose Google Pay as a payment method\n\n![PaymentMethodsActivity](https://b.stripecdn.com/docs-statics-srv/assets/android-payment-methods.1058cf4a3dcf9186e73a8ed12f31f070.png)\n\n[PaymentMethodsActivity](https://stripe.dev/stripe-android/payments-core/com.stripe.android.view/-payment-methods-activity/index.html)\n\n![AddPaymentMethodActivity](https://b.stripecdn.com/docs-statics-srv/assets/android-add-card.cb06f4cf8f5f8e012a21ec6a26ca7c20.png)\n\n[AddPaymentMethodActivity](https://stripe.dev/stripe-android/payments-core/com.stripe.android.view/-add-payment-method-activity/index.html)\n\n![PaymentFlowActivity](https://b.stripecdn.com/docs-statics-srv/assets/android-shipping-address.3e2b1fc09358f86bfb401fa7e0128c8d.png)\n\n[PaymentFlowActivity](https://stripe.dev/stripe-android/payments-core/com.stripe.android.view/-payment-flow-activity/index.html)\n\nThese activities [can also be used\nindividually](https://docs.stripe.com/mobile/android/basic#use-individual-activities).\nThis integration requires both server and client-side steps to implement.\n\n#### Note\n\nCheck out the example [Basic Integration\napp](https://github.com/stripe-samples/sample-store-android) and\n[backend](https://github.com/stripe/example-mobile-backend/blob/master/web.rb)\nfor a full implementation of this guide.\n\n[Set up\nStripeClient-sideServer-side](https://docs.stripe.com/mobile/android/basic#setup)\nFirst, you need a Stripe account. [Register\nnow](https://dashboard.stripe.com/register).\n\n### Server-side\n\nThis integration requires endpoints on your server that talk to the Stripe API.\nUse our official libraries for access to the Stripe API from your server:\n\n```\n# Available as a gem\nsudo gem install stripe\n```\n\n```\n# If you use bundler, you can add this line to your Gemfile\ngem 'stripe'\n```\n\n### Client-side\n\nThe [Stripe Android SDK](https://github.com/stripe/stripe-android) is open\nsource and [fully documented](https://stripe.dev/stripe-android/).\n\nTo install the SDK, add `stripe-android` to the `dependencies` block of your\n[app/build.gradle](https://developer.android.com/studio/build/dependencies)\nfile:\n\n```\nplugins {\n id(\"com.android.application\")\n}\n\nandroid { ... }\n\ndependencies {\n // ...\n\n // Stripe Android SDK\n implementation(\"com.stripe:stripe-android:21.6.0\")\n}\n```\n\n#### Note\n\nFor details on the latest SDK release and past versions, see the\n[Releases](https://github.com/stripe/stripe-android/releases) page on GitHub. To\nreceive notifications when a new release is published, [watch releases for the\nrepository](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/configuring-notifications#configuring-your-watch-settings-for-an-individual-repository).\n\nConfigure the SDK with your Stripe [publishable\nkey](https://dashboard.stripe.com/apikeys) so that it can make requests to the\nStripe API, such as in your `Application` subclass:\n\n```\nimport com.stripe.android.PaymentConfiguration\n\nclass MyApp : Application() {\n override fun onCreate() {\n super.onCreate()\n PaymentConfiguration.init(\n applicationContext,\n \"pk_test_TYooMQauvdEDq54NiTphI7jx\"\n )\n }\n}\n```\n\n#### Note\n\nUse your [test mode](https://docs.stripe.com/keys#obtain-api-keys) keys while\nyou test and develop, and your [live\nmode](https://docs.stripe.com/keys#test-live-modes) keys when you publish your\napp.\n\n[Set up an ephemeral\nkeyClient-sideServer-side](https://docs.stripe.com/mobile/android/basic#set-up-ephemeral-key)\nIn order for the SDK to save and retrieve credit cards for later use, create a\nsingle Stripe [Customer](https://docs.stripe.com/api/customers) object for each\nof your users. When you create a new user or account on your server, create a\ncorresponding Customer object at the same time, even if you don’t collect\npayment information from your users when they sign up. This ensures that your\napplication has a matching Customer for each user.\n\nFor security, the Customer API is not directly accessible from the client.\nInstead, your server provides the SDK with an ephemeral key—a short-lived API\nkey with restricted access to the Customer API. You can think of an ephemeral\nkey as a session, authorizing the SDK to retrieve and update a specific Customer\nobject s for the duration of the session.\n\n### Server-side\n\nTo provide an ephemeral key to the SDK, expose a new API endpoint on your\nbackend. This endpoint should create an ephemeral key for the current Stripe\ncustomer, and return the key’s unmodified response as JSON. When the SDK\nrequests an ephemeral key, it will specify the version of the Stripe API that it\nexpects the response to come from. Your endpoint must accept an `api_version`\nparameter, and use the specified API version when creating the ephemeral key.\nThis ensures that the SDK always receives the correct ephemeral key response\nfrom your backend. Consult our [Example\nBackend](https://github.com/stripe/example-mobile-backend/blob/9ac448f8b5d49175d26c7b77fd6bd3c88703e838/web.rb#L25-L40)\nto see this in practice.\n\n```\ncurl https://api.stripe.com/v1/ephemeral_keys \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"customer\"=\"{{CUSTOMER_ID}}\" \\\n -H \"Stripe-Version: {{API_VERSION}}\"\n```\n\n### Client-side\n\nAfter you’ve added an ephemeral key endpoint to your backend, you’ll need a way\nfor your Android app to communicate with this endpoint. In your app, make your\nAPI client class implement the\n[EphemeralKeyProvider](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-ephemeral-key-provider/index.html)\ninterface, which defines a single method,\n[createEphemeralKey()](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-ephemeral-key-provider/create-ephemeral-key.html).\nWhen implementing this method, pass the `apiVersion` parameter along to your\nephemeral keys endpoint. Refer to our [example\napp](https://github.com/stripe/stripe-android/blob/72eb77b0e5a4c785131c7b04e3d64a6b79dc6b33/example/src/main/java/com/stripe/example/service/ExampleEphemeralKeyProvider.kt)\nto see this in practice.\n\n```\npublic class ExampleEphemeralKeyProvider implements EphemeralKeyProvider {\n private final BackendApi backendApi =\n RetrofitFactory.instance.create(BackendApi.class);\n private final CompositeDisposable compositeDisposable =\n new CompositeDisposable();\n\n @Override\n public void createEphemeralKey(\n @NonNull @Size(min = 4) String apiVersion,\n @NonNull final EphemeralKeyUpdateListener keyUpdateListener) {\n final Map<String, String> apiParamMap = new HashMap<>();\n apiParamMap.put(\"api_version\", apiVersion);\n\n // Using RxJava2 for handling asynchronous responses\n compositeDisposable.add(backendApi.createEphemeralKey(apiParamMap)\n .subscribeOn(Schedulers.io())\n .observeOn(AndroidSchedulers.mainThread())\n .subscribe(\n response -> {\n try {\n final String rawKey = response.string();\n keyUpdateListener.onKeyUpdate(rawKey);\n } catch (IOException ignored) {\n }\n }));\n }\n}\n```\n\n[Set up a\nCustomerSessionClient-side](https://docs.stripe.com/mobile/android/basic#set-up-customer-session)\nAfter creating an `EphemeralKeyProvider`, initialize a\n[CustomerSession](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-customer-session/index.html).\nA `CustomerSession` talks to your backend to retrieve an ephemeral key for your\nCustomer with its `EphemeralKeyProvider`, and uses that key to manage retrieving\nand updating the Customer’s payment methods on your behalf.\n\nYou can also use `CustomerSession` with your own custom UI to\n[retrieve](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-customer-session/retrieve-current-customer.html)\nor\n[refresh](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-customer-session/update-current-customer.html)\nthe Customer, and\n[list](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-customer-session/get-payment-methods.html)\ntheir payment methods,\n[attach](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-customer-session/attach-payment-method.html)\na payment method, or\n[detach](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-customer-session/detach-payment-method.html)\na payment method.\n\n```\npublic class StoreActivity extends Activity {\n @Override\n protected void onCreate(@Nullable Bundle savedInstanceState) {\n super.onCreate(savedInstanceState);\n CustomerSession.initCustomerSession(\n this,\n new ExampleEphemeralKeyProvider()\n );\n }\n}\n```\n\nTo reduce load times, preload your customer’s information by initializing\n`CustomerSession` before they enter your payment flow.\n\nIf your current user logs out of the app, clear the current `CustomerSession`\nsingleton by calling `CustomerSession.endCustomerSession()`. When a new user\nlogs in, re-initialize the instance. On your backend, create and return a new\nephemeral key for the Customer object associated with the new user.\n\n[Set up a\nPaymentSessionClient-side](https://docs.stripe.com/mobile/android/basic#set-up-payment-session)\nThe core of this integration is the\n[PaymentSession](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-payment-session/index.html)\nclass. It uses `CustomerSession` to launch full-screen activities to collect and\nstore payment information, and can also be used to collect shipping info. Think\nof it as the data source for your checkout activity—it handles asynchronously\nretrieving the data you need, and notifies its `PaymentSessionListener` when\nyour UI should change.\n\nTo work with `PaymentSession`, you’ll need to:\n\n- Create a `PaymentSessionConfig` object\n- Implement a `PaymentSessionListener`\n\n### PaymentSessionConfig\n\nThe `PaymentSessionConfig` object is created using a\n[Builder](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-payment-session-config/-builder/index.html).\nAll of the `Builder`’s fields are optional. See the [API\nreference](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-payment-session-config/-builder/index.html)\nfor details on each method.\n\n```\npublic StoreActivity extends AppCompatActivity {\n\n @NonNull\n private PaymentSessionConfig createPaymentSessionConfig() {\n return PaymentSessionConfig.Builder()\n\n // hide the phone field on the shipping information form\n .setHiddenShippingInfoFields(\n ShippingInfoWidget.CustomizableShippingField.PHONE_FIELD\n )\n\n // make the address line 2 field optional\n .setOptionalShippingInfoFields(\nShippingInfoWidget.CustomizableShippingField.ADDRESS_LINE_TWO_FIELD\n )\n\n // specify an address to pre-populate the shipping information form\n .setPrepopulatedShippingInfo(ShippingInformation(\n new Address.Builder()\n .setLine1(\"123 Market St\")\n .setCity(\"San Francisco\")\n .setState(\"CA\")\n .setPostalCode(\"94107\")\n .setCountry(\"US\")\n .build(),\n \"Jenny Rosen\",\n \"4158675309\"\n ))\n\n // collect shipping information\n .setShippingInfoRequired(true)\n\n // collect shipping method\n .setShippingMethodsRequired(true)\n\n // specify the payment method types that the customer can use;\n // defaults to PaymentMethod.Type.Card\n .setPaymentMethodTypes(\n Arrays.asList(PaymentMethod.Type.Card)\n )\n\n // only allow US and Canada shipping addresses\n .setAllowedShippingCountryCodes(new HashSet<>(\n Arrays.asList(\"US\", \"CA\")\n ))\n\n // specify a layout to display under the payment collection form\n .setAddPaymentMethodFooter(R.layout.add_payment_method_footer)\n\n // specify the shipping information validation delegate\n.setShippingInformationValidator(new AppShippingInformationValidator())\n\n // specify the shipping methods factory delegate\n .setShippingMethodsFactory(new AppShippingMethodsFactory())\n\n // if `true`, will show \"Google Pay\" as an option on the\n // Payment Methods selection screen\n .setShouldShowGooglePay(true)\n\n .build();\n }\n\n private static class AppShippingInformationValidator\n extends PaymentSessionConfig.ShippingInformationValidator {\n\n @Override\n public boolean isValid(\n @NonNull ShippingInformation shippingInformation\n ) {\n final Address address = shippingInformation.getAddress();\n return address != null && Locale.US.country == address.getCountry();\n }\n\n @NonNull\n public String getErrorMessage(\n @NonNull ShippingInformation shippingInformation\n ) {\n return \"A US address is required\";\n }\n }\n\n private static class AppShippingMethodsFactory\n extends PaymentSessionConfig.ShippingMethodsFactory {\n\n @Override\n public List<ShippingMethod> create(\n @NonNull ShippingInformation shippingInformation\n ) {\n returns Arrays.asList(\n new ShippingMethod(\n \"UPS Ground\",\n \"ups-ground\",\n 0,\n \"USD\",\n \"Arrives in 3-5 days\"\n ),\n new ShippingMethod(\n \"FedEx\",\n \"fedex\",\n 599,\n \"USD\",\n \"Arrives tomorrow\"\n )\n );\n }\n }\n}\n```\n\n### PaymentSessionListener\n\nAfter creating the `PaymentSessionConfig`, you’ll need to implement\n`PaymentSessionListener`.\n\n```\npublic class MyPaymentSessionListener\n implements PaymentSession.PaymentSessionListener {\n // Called whenever the PaymentSession's data changes,\n// For example, when the user selects a new `PaymentMethod` or enters shipping\ninfo.\n @Override\n public void onPaymentSessionDataChanged(@NonNull PaymentSessionData data) {\n if (data.getUseGooglePay()) {\n // customer intends to pay with Google Pay\n } else {\n final PaymentMethod paymentMethod = data.getPaymentMethod();\n if (paymentMethod != null) {\n // Display information about the selected payment method\n }\n }\n\n // Update your UI here with other data\n if (data.isPaymentReadyToCharge()) {\n // Use the data to complete your charge - see below.\n }\n }\n\n @Override\n public void onCommunicatingStateChanged(boolean isCommunicating) {\n }\n\n @Override\n public void onError(int errorCode, @NotNull String errorMessage) {\n }\n}\n```\n\nThis method should also check for whether or not the payment data is complete,\naccording to the `PaymentSessionConfig` specified. If you receive an update for\nwhich `PaymentSessionData#isPaymentReadyToCharge()` returns true, you can\nimmediately send a message to your server to complete the charge.\n\n#### `void onCommunicatingStateChanged(boolean isCommunicating)`\n\nThis method is called whenever the network communication state has changed. We\nrecommend showing a spinner or infinite progress bar when it is set to `true`\n\n```\npublic class MyPaymentSessionListener\n implements PaymentSession.PaymentSessionListener {\n @Override\n public void onCommunicatingStateChanged(boolean isCommunicating) {\n if (isCommunicating) {\n // update UI to indicate that network communication is in progress\n } else {\n // update UI to indicate that network communication has completed\n }\n }\n}\n```\n\n#### `void onError(int errorCode, @Nullable String errorMessage)`\n\nThis method is called whenever an error occurs when connecting to the Stripe\nAPI. Make sure users can see the error messages, so display them in an alert\ndialog.\n\n### Initialize a PaymentSession\n\nHaving created your `PaymentSessionConfig` and `PaymentSessionListener`, you can\nnow\n[initialize](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-payment-session/init.html)\nthe `PaymentSession`. In the below example, we use anonymous classes to create\nour listener and config for simplicity.\n\n```\npublic class HostActivity extends Activity {\n private PaymentSession paymentSession;\n private Button startPaymentFlowButton;\n\n @Override\n protected void onCreate(@Nullable Bundle savedInstanceState) {\n super.onCreate(savedInstanceState);\n paymentSession = new PaymentSession(\n this,\n new PaymentSessionConfig.Builder()\n .setPrepopulatedShippingInfo(getDefaultShippingInfo())\n .build()\n );\n setupPaymentSession();\n }\n\n private void setupPaymentSession() {\n paymentSession.init(\n new PaymentSession.PaymentSessionListener() {\n @Override\n public void onCommunicatingStateChanged(\n boolean isCommunicating\n ) {\n // update UI, such as hiding or showing a progress bar\n }\n\n @Override\n public void onError(\n int errorCode,\n @Nullable String errorMessage\n ) {\n // handle error\n }\n\n @Override\n public void onPaymentSessionDataChanged(\n @NonNull PaymentSessionData data\n ) {\n final PaymentMethod paymentMethod = data.getPaymentMethod();\n // use paymentMethod\n }\n }\n );\n startPaymentFlowButton.setEnabled(true);\n }\n\n @Override\nprotected void onActivityResult(int requestCode, int resultCode, @Nullable\nIntent data) {\n super.onActivityResult(requestCode, resultCode, data);\n if (data != null) {\n paymentSession.handlePaymentData(requestCode, resultCode, data);\n }\n }\n\n @NonNull\n private ShippingInformation getDefaultShippingInfo() {\n // optionally specify default shipping address\n return new ShippingInformation();\n }\n}\n```\n\n[Collect the customer's payment and shipping\ndetailsClient-side](https://docs.stripe.com/mobile/android/basic#collect-details)\nOnce the `PaymentSession` has been initialized, you can use it to make the\nfollowing calls.\n\n#### `void presentPaymentMethodSelection()`\n\n![PaymentMethodsActivity](https://b.stripecdn.com/docs-statics-srv/assets/android-payment-methods.1058cf4a3dcf9186e73a8ed12f31f070.png)\n\n[PaymentMethodsActivity](https://stripe.dev/stripe-android/payments-core/com.stripe.android.view/-payment-methods-activity/index.html)\n\n![AddPaymentMethodActivity](https://b.stripecdn.com/docs-statics-srv/assets/android-add-card.cb06f4cf8f5f8e012a21ec6a26ca7c20.png)\n\n[AddPaymentMethodActivity](https://stripe.dev/stripe-android/payments-core/com.stripe.android.view/-add-payment-method-activity/index.html)\n\nThis method starts the `PaymentMethodsActivity` to allow the customer to choose\na saved payment method, using `CustomerSession` as its data source. If the **Add\nnew card** button is tapped, or there are no existing payment methods,\n`AddPaymentMethodActivity` is launched to add a credit card.\n\n#### `void presentShippingFlow()`\n\n![PaymentFlowActivity](https://b.stripecdn.com/docs-statics-srv/assets/android-shipping-address.3e2b1fc09358f86bfb401fa7e0128c8d.png)\n\n[PaymentFlowActivity](https://stripe.dev/stripe-android/payments-core/com.stripe.android.view/-payment-flow-activity/index.html)\n\nThis method presents the PaymentFlowActivity to allow the user to enter shipping\ninformation, if such information is required according to your\n`PaymentSessionConfig`.\n\n[Complete the\npaymentClient-sideServer-side](https://docs.stripe.com/mobile/android/basic#complete-the-payment)\nOnce `PaymentSession#isPaymentReadyToCharge()` returns `true`, submit the\npayment to Stripe using a [Payment\nIntent](https://docs.stripe.com/payments/payment-intents). Stripe uses this\npayment object to track and handle all the states of the payment—even when the\nbank requires customer intervention, like additional card authentication—until\nthe payment completes.\n\n### Server-side\n\nOn your server, make an endpoint that creates a `PaymentIntent` with an amount\nand currency and returns its [client\nsecret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret)\nto your client.\n\nAlways decide how much to charge on the server side, a trusted environment, as\nopposed to the client. This prevents malicious customers from being able to\nchoose their own prices.\n\n```\ncurl https://api.stripe.com/v1/payment_intents \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"amount\"=1099 \\\n -d \"currency\"=\"usd\"\n```\n\n### Client-side\n\n- Request a `PaymentIntent` from your server\n- Assemble a\n[ConfirmPaymentIntentParams](https://stripe.dev/stripe-android/payments-core/com.stripe.android.model/-confirm-payment-intent-params/index.html)\nobject with the `PaymentIntent` client secret from your server and the id of\n`PaymentSessionData#paymentMethod` obtained from\n`PaymentSessionListenerImpl#onPaymentSessionDataChanged()`.\n- Call the [Stripe\nconfirmPayment](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-stripe/confirm-payment.html)\nmethod to confirm the payment.\n\n```\npublic class CheckoutActivity extends Activity {\n private void confirmPayment(\n @NonNull String clientSecret,\n @NonNull String paymentMethodId\n ) {\n stripe.confirmPayment(\n this,\n ConfirmPaymentIntentParams.createWithPaymentMethodId(\n paymentMethodId,\n clientSecret\n )\n );\n }\n}\n```\n\nWhen the payment completes, `onSuccess` is called and the value of the returned\nPaymentIntent’s `status` is `Succeeded`. Any other value indicates the payment\nwas not successful. Inspect\n[lastPaymentError](https://stripe.dev/stripe-android/payments-core/com.stripe.android.model/-payment-intent/index.html#com.stripe.android.model/PaymentIntent/lastPaymentError/#/PointingToDeclaration/)\nto determine the cause. End the payment session by calling\n`PaymentSession#onCompleted()`.\n\n[Manage PaymentSession in a host\nActivityClient-side](https://docs.stripe.com/mobile/android/basic#manage)\nIn order to get updates for the `PaymentSessionData` object and to handle state\nduring Activity lifecycle, you’ll need to hook up your `PaymentSession` instance\nto a few key parts of your host Activity lifecycle. The first is in\n`onActivityResult()`\n\n```\npublic class HostActivity extends Activity {\n @Override\nprotected void onActivityResult(int requestCode, int resultCode, @Nullable\nIntent data) {\n super.onActivityResult(requestCode, resultCode, data);\n paymentSession.handlePaymentData(requestCode, resultCode, data);\n }\n}\n```\n\nThis is all you need to do to get updates from the various activities launched\nby `PaymentSession`. Any updates to the data are reported to the\n[PaymentSessionListener](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-payment-session/-payment-session-listener/index.html)\nargument to\n[PaymentSession#init()](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-payment-session/init.html).\n\n```\npublic class HostActivity extends Activity {\n private PaymentSession paymentSession;\n\n // Can also be re-initialized in onRestoreInstanceState\n @Override\n public void onCreate(@Nullable Bundle savedInstanceState) {\n super.onCreate(savedInstanceState);\n\n // other onCreate logic\n\n // Create the PaymentSession\n paymentSession = new PaymentSession(\n this,\n createPaymentSessionConfig()\n );\n\n // Attach your listener\n paymentSession.init(createPaymentSessionListener());\n }\n\n @NonNull\nprivate PaymentSession.PaymentSessionListener createPaymentSessionListener() {\n return new PaymentSession.PaymentSessionListener() {\n @Override\n public void onCommunicatingStateChanged(\n boolean isCommunicating\n ) {\n // update UI, such as hiding or showing a progress bar\n }\n\n @Override\n public void onError(\n int errorCode,\n @NotNull String errorMessage\n ) {\n // handle error\n }\n\n @Override\n public void onPaymentSessionDataChanged(\n @NotNull PaymentSessionData data\n ) {\n data.getPaymentMethod();\n }\n };\n }\n\n @NonNull\n private PaymentSessionConfig createPaymentSessionConfig() {\n return new PaymentSessionConfig.Builder()\n .build();\n }\n}\n```\n\n[Test the integration](https://docs.stripe.com/mobile/android/basic#test)\n​​Several test cards are available for you to use in a sandbox to make sure this\nintegration is ready. Use them with any CVC and an expiration date in the\nfuture.\n\nNumberDescription4242424242424242Succeeds and immediately processes the\npayment.4000002500003155Requires authentication. Stripe triggers a modal asking\nfor the customer to authenticate.4000000000009995Always fails with a decline\ncode of `insufficient_funds`.\nFor the full list of test cards see our guide on\n[testing](https://docs.stripe.com/testing).\n\n[OptionalHandle post-payment\nevents](https://docs.stripe.com/mobile/android/basic#fulfillment)[OptionalUse\nindividual\nactivitiesClient-side](https://docs.stripe.com/mobile/android/basic#use-individual-activities)[OptionalCustomize\nthe UIClient-side](https://docs.stripe.com/mobile/android/basic#customize-ui)\n## See also\n\n- [About Stripe payments](https://docs.stripe.com/payments/about)\n- [The Payment Intents API](https://docs.stripe.com/payments/payment-intents)\n- [Stripe Android SDK Reference](https://stripe.dev/stripe-android)\n\n## Links\n\n- [payments\nUI](https://docs.stripe.com/payments/accept-a-payment?platform=android)\n- [let us know](https://github.com/stripe/stripe-android/issues)\n-\n[PaymentMethodsActivity](https://stripe.dev/stripe-android/payments-core/com.stripe.android.view/-payment-methods-activity/index.html)\n-\n[AddPaymentMethodActivity](https://stripe.dev/stripe-android/payments-core/com.stripe.android.view/-add-payment-method-activity/index.html)\n-\n[PaymentFlowActivity](https://stripe.dev/stripe-android/payments-core/com.stripe.android.view/-payment-flow-activity/index.html)\n- [Basic Integration\napp](https://github.com/stripe-samples/sample-store-android)\n- [backend](https://github.com/stripe/example-mobile-backend/blob/master/web.rb)\n- [Register now](https://dashboard.stripe.com/register)\n- [Stripe Android SDK](https://github.com/stripe/stripe-android)\n- [fully documented](https://stripe.dev/stripe-android/)\n- [app/build.gradle](https://developer.android.com/studio/build/dependencies)\n- [Releases](https://github.com/stripe/stripe-android/releases)\n- [watch releases for the\nrepository](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/configuring-notifications#configuring-your-watch-settings-for-an-individual-repository)\n- [publishable key](https://dashboard.stripe.com/apikeys)\n- [test mode](https://docs.stripe.com/keys#obtain-api-keys)\n- [live mode](https://docs.stripe.com/keys#test-live-modes)\n- [Customer](https://docs.stripe.com/api/customers)\n- [Example\nBackend](https://github.com/stripe/example-mobile-backend/blob/9ac448f8b5d49175d26c7b77fd6bd3c88703e838/web.rb#L25-L40)\n-\n[EphemeralKeyProvider](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-ephemeral-key-provider/index.html)\n-\n[createEphemeralKey()](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-ephemeral-key-provider/create-ephemeral-key.html)\n- [example\napp](https://github.com/stripe/stripe-android/blob/72eb77b0e5a4c785131c7b04e3d64a6b79dc6b33/example/src/main/java/com/stripe/example/service/ExampleEphemeralKeyProvider.kt)\n-\n[CustomerSession](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-customer-session/index.html)\n-\n[retrieve](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-customer-session/retrieve-current-customer.html)\n-\n[refresh](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-customer-session/update-current-customer.html)\n-\n[list](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-customer-session/get-payment-methods.html)\n-\n[attach](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-customer-session/attach-payment-method.html)\n-\n[detach](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-customer-session/detach-payment-method.html)\n-\n[PaymentSession](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-payment-session/index.html)\n-\n[Builder](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-payment-session-config/-builder/index.html)\n-\n[initialize](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-payment-session/init.html)\n- [Payment Intent](https://docs.stripe.com/payments/payment-intents)\n- [client\nsecret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret)\n-\n[ConfirmPaymentIntentParams](https://stripe.dev/stripe-android/payments-core/com.stripe.android.model/-confirm-payment-intent-params/index.html)\n- [Stripe\nconfirmPayment](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-stripe/confirm-payment.html)\n-\n[lastPaymentError](https://stripe.dev/stripe-android/payments-core/com.stripe.android.model/-payment-intent/index.html#com.stripe.android.model/PaymentIntent/lastPaymentError/#/PointingToDeclaration/)\n-\n[PaymentSessionListener](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-payment-session/-payment-session-listener/index.html)\n- [testing](https://docs.stripe.com/testing)\n- [About Stripe payments](https://docs.stripe.com/payments/about)\n- [Stripe Android SDK Reference](https://stripe.dev/stripe-android)",
  "metadata": {
    "title": "Android basic integration | Stripe Documentation",
    "description": "Accept cards with the Android SDK's prebuilt UI.",
    "sourceURL": "https://docs.stripe.com/mobile/android/basic"
  }
}