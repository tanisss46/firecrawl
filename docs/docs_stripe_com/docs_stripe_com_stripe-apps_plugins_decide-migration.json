{
  "content": "# Migrate a plugin to Stripe Apps or Stripe Connect\n\n## Learn about your migration options and decide how to migrate your plugin.\n\nUse this guide to migrate your third-party integration that requires Stripe\nusers to authenticate with their secret API key (also known as a plugin) to\nStripe Apps or Stripe Connect.\n\nPreviously, Stripe allowed plugins to request the standard API keys of a user to\nintegrate with their products. Starting September 30, 2024, all plugin\ndevelopers must use secure authentication methods (OAuth 2.0, restricted API\nkeys, Stripe Connect) to protect users against fraud. All new and existing\nplugin developers must switch to one of these secure authorization methods\nsupported by Stripe.\n\nIf your integration already uses [Stripe\nApps](https://docs.stripe.com/stripe-apps) or [Stripe\nConnect](https://docs.stripe.com/connect/oauth-reference), this doesn’t apply to\nyou or your users.\n\n## Choose your migration path\n\nStripe offers multiple solutions for developers migrating plugins. Explore each\nsolution:\n\nIntegration typeSuitable forDesigned for[Stripe\nConnect](https://docs.stripe.com/stripe-apps/plugins/decide-migration#migrate-to-connect)Best\nfor integrations that are centralized platforms or marketplacesDesigned for\nintegrations onboarding new merchants, embedding payments, and managing money\nmovement[Stripe\nApps](https://docs.stripe.com/stripe-apps/plugins/decide-migration#migrate-to-apps)Best\nfor integrations that want to integrate Stripe in third-party tools and\nservicesDesigned for adding enhanced functionality for existing Stripe\nmerchants[Manual set up of restricted API keys and\nwebhooks](https://docs.stripe.com/stripe-apps/plugins/decide-migration#migrate-manual-api-keys)Only\navailable if your integration requires custom functionality that isn’t supported\nby Stripe Connect or Stripe AppsDesigned for users who each must manually create\nrestricted API keys and webhooks\n## Pre-migration decision checklist\n\nReview the following checklist to help you decide on the best migration path for\nyour integration and users:\n\n- If you need to onboard new businesses\nOnboarding new users who might not have existing Stripe accounts often requires\ncreating a Stripe account for the first time just to use your service. If yes,\nconsider Stripe Connect, as the onboarding flow allows users to create Stripe\naccounts directly during onboarding.\n- If you want to make your integration available to users of other platforms \nIf you make your integration available for other platforms, consider Stripe\nApps. You can install Stripe Apps on most Stripe accounts, regardless of their\nconnection to other platforms. This allows you to make your integration\navailable to a larger base.\n- If you have a centralized service for your plugin\nIf you have a centralized service where your users have their own accounts,\nconsider Stripe Connect or Stripe Apps, and use platform or OAuth 2.0\nauthentication. Using Stripe Connect or Stripe Apps ensures that your users\ndon’t need to copy and paste API keys, which significantly enhances overall\nsecurity and streamlines user onboarding.\n- If your users self-host their back ends for your integration\nIf customers self-host your integration, Stripe Apps using the restricted API\nkey authentication method is likely the best fit. It doesn’t require you to\nstore your secret key on untrusted servers, which is required for Stripe Connect\nor Stripe Apps with platform authentication.\n\nOAuth 2.0 is an option but requires significant additional work, including\nhosting a central back-end server where your users create accounts, store the\nURLs of their self-hosted back ends, and proxy OAuth tokens to those back ends.\n- If you want to receive webhook events on your own endpoints\nIf you receive webhook events on your own endpoints, consider Stripe Connect or\nStripe Apps, using the platform or OAuth 2.0 authentication methods to set up a\ncentral webhook configuration. Doing so allows you to receive webhook events for\nall of your connected account users.\n- If your users receive webhook endpoints at their own unique endpoints\nIf users receive webhook endpoints at their own unique endpoints, instruct them\non how to configure these endpoints manually, which is common with self-hosted\nback ends. If you have a special use case that requires managing custom webhook\nendpoints for your users through the `webhook_write` API permission, contact\n[Stripe Support](https://support.stripe.com/contact/email).\n- If your service uses the connected accounts of other platforms\nUsing the connected accounts of other platforms is uncommon—but in some cases,\nplugins are designed to use the transitive access of a platform’s secret API key\nto make API calls on behalf of the platform’s connected accounts. Currently, the\nonly supported option is to have your users manually create restricted API keys.\nWhen creating the key, the user must check the appropriate boxes to grant\npermissions on their connected accounts.\n- If your app requires access to any gated Stripe APIs or features\n\n## Migrating to Stripe Connect\n\nStripe Connect is a solution for centralized platforms. To use Connect, you need\nto host a web service to securely store your API key and manage connected\naccounts.\n\nUsing your platform API key requires that all API requests to Stripe originate\nfrom your servers, use your API key for authentication, and use the\n`Stripe-Account` header to indicate the connected account you’re acting on\nbehalf of. Instead of OAuth 2.0, use the `/v1/accounts`\nAPI](/connect/oauth-standard-accounts) to securely retrieve access tokens for\neach connected account. Your servers or your customers’ servers can then make\nAPI requests to Stripe using those tokens.\n\nStripe businesses can only be connected to one Connect platform at a time.\nConnect allows you to onboard new businesses directly to your platform, but\nbusinesses with existing Stripe accounts who want to use your platform need to\ncreate new accounts, which might cause extra work your users.\n\nTo learn more about migrating from a plugin to Connect, see [Build a multi-party\nintegration with Connect](https://docs.stripe.com/connect/how-connect-works).\n\n## Migrating to Stripe Apps\n\nStripe Apps is a platform for developers to create integrations that extend or\nenhance Stripe’s functionality for businesses and their users. These\nintegrations can directly customize Stripe’s behaviors or connect third-party\ntools and services to Stripe.\n\nStripe Apps also offers an authorization framework for securely accessing Stripe\non behalf of businesses. Additionally, Stripe Apps includes features such as [UI\nextensions](https://docs.stripe.com/stripe-apps/build-ui), which can improve the\nfunctionality and value of your plugin.\n\nStripe Apps offers three authentication methods to fit different use cases:\n\n- **Platform**: Designed for Stripe-native integrations that operate as a\ncentralized service, such as a SaaS platform. API requests require the\ndeveloper’s API key and the Stripe Account header.\n- **OAuth 2.0**: Uses the industry-standard OAuth 2.0 protocol for\nservice-to-service user authentication. This method is ideal for integrations\nalready using OAuth (previously known as [Connect\nExtensions](https://docs.stripe.com/stripe-apps/migrate-extension)), and\nprovides added benefits such as enhanced management, increased visibility,\nanalytics, and so on through the Stripe Apps platform.\n- **Restricted API keys (RAK)**: Automatically generates restricted API keys for\neach app a user installs. Each app gets a unique API key with only the\npermissions it needs. Users must still manually copy and paste this key into\nyour integration. While this method boosts security, it adds extra steps for\nuser onboarding.\n\n### Compare authentication types for Stripe Apps\n\nBefore you migrate your plugin to Stripe Apps, compare the three authentication\nmethods:\n\nAuthenticationBenefits Tradeoffs Platform default- Click to install for\nbusinesses.\n- Enhanced security versus collecting secret API keys for businesses.\n- Ability to centrally manage the configuration of webhooks to receive events\nfrom connected accounts. Minimal data storage requirements. Doesn’t require\nmerchants to have an account with your service (optional).\n- Only need to keep track of one API key.\n- Access to gated features needs to be granted only once for your account.\n- Must have a centralized back end to store your API key and make API calls.\n- Not suitable for self-hosted plugins.\n- Requires code changes if your plugin uses secret API keys or OAuth 2.0 today.\nOAuth 2.0 recommended- Industry standard.\n- Enhanced security versus collecting the secret API keys from businesses.\n- Streamlined installation and onboarding flow for businesses.\n- Centrally managed configuration of webhooks to receive events from connected\naccounts.\n- Few or no code changes if using OAuth today.\n- Support for self-hosted plugins with additional developer effort.\n- Access to gated features needs to be granted only once for your account.\n- Requires a centralized back end to begin the OAuth flow and receive OAuth\ntokens at the end.\n- You must keep track of accounts as part of your service.\n- You must store OAuth access and refresh tokens for each account.\n- Requires code changes if your plugin uses secret API keys today.\nRAK- Replacement for existing secret API keys.\n- Enhanced security versus collecting the secret API keys from businesses.\n- Use with self-hosted back ends.\n- Doesn’t require businesses to have an account with your service (optional).\n- You must manually onboard businesses to use your integration (copy and paste\nkeys).\n- No support for centrally managing webhook endpoints to receive events from\naccounts that installed your app.\n- Users must configure their own webhooks, if needed.\n- Access to gated features requires each account that installs your app to be\ngranted access separately.\n\nWe recommend platform or OAuth 2.0 authentication because they offer better\nsecurity and a streamlined onboarding process for your users.\n\nFor step-by-step instructions on migrating plugins to Stripe Apps, see:\n\n- [Migrate a plugin to an OAuth\napp](https://docs.stripe.com/stripe-apps/plugins/oauth)\n- [Migrate a plugin to a RAK\napp](https://docs.stripe.com/stripe-apps/plugins/rak)\n\n## Migrating to manual setup of restricted API keys and webhooks\n\nIf neither Stripe Connect nor Stripe Apps meets your needs, users can manually\nset up their integration with your service.\n\nTo migrate and comply with Stripe’s security requirements, you must:\n\n- **Document the setup**: Provide instructions for businesses to configure a\nrestricted API key that only has the needed permissions.\n- **Validate API Keys**: Make sure businesses give you restricted API keys that\nstart with the prefix with `rk_`, not `sk_`.\n- (Optional) **Document the webhook setup**: Guide businesses on setting up\nwebhook endpoints to send data to the correct address.\n\n#### Note\n\nThis authentication method introduces manual onboarding steps for businesses and\nlacks the benefits of Stripe Connect and Stripe Apps.\n\n## See also\n\n- [Migrate a plugin to an OAuth\napp](https://docs.stripe.com/stripe-apps/plugins/oauth)\n- [Migrate a plugin to a RAK\napp](https://docs.stripe.com/stripe-apps/plugins/rak)\n- [Sample apps](https://docs.stripe.com/stripe-apps/sample-apps)\n\n## Links\n\n- [Stripe Apps](https://docs.stripe.com/stripe-apps)\n- [Stripe Connect](https://docs.stripe.com/connect/oauth-reference)\n- [Stripe\nConnect](https://docs.stripe.com/stripe-apps/plugins/decide-migration#migrate-to-connect)\n- [Stripe\nApps](https://docs.stripe.com/stripe-apps/plugins/decide-migration#migrate-to-apps)\n- [Manual set up of restricted API keys and\nwebhooks](https://docs.stripe.com/stripe-apps/plugins/decide-migration#migrate-manual-api-keys)\n- [Stripe Support](https://support.stripe.com/contact/email)\n- [Build a multi-party integration with\nConnect](https://docs.stripe.com/connect/how-connect-works)\n- [UI extensions](https://docs.stripe.com/stripe-apps/build-ui)\n- [Connect Extensions](https://docs.stripe.com/stripe-apps/migrate-extension)\n- [Migrate a plugin to an OAuth\napp](https://docs.stripe.com/stripe-apps/plugins/oauth)\n- [Migrate a plugin to a RAK\napp](https://docs.stripe.com/stripe-apps/plugins/rak)\n- [Sample apps](https://docs.stripe.com/stripe-apps/sample-apps)",
  "metadata": {
    "title": "Migrate a plugin to Stripe Apps or Stripe Connect | Stripe Documentation",
    "description": "Decide if you want to migrate your existing plugin to an authentication path using Stripe Apps or Stripe Connect.",
    "sourceURL": "https://docs.stripe.com/stripe-apps/plugins/decide-migration"
  }
}