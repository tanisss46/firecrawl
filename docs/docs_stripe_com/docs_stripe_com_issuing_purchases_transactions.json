{
  "content": "# Issuing transactions\n\n## Learn how to use Issuing to handle transactions.\n\nAfter an\n[authorization](https://docs.stripe.com/issuing/purchases/authorizations) is\napproved and is captured, the `status` on the authorization is set to `closed`\nand a [Transaction](https://docs.stripe.com/api#issuing_transaction_object)\nobject is created. This normally happens within 24 hours; however hotels,\nairlines, and car rental companies are able to capture up to 31 days after\nauthorization.\n\nWhen an authorization is captured, two things happen.\n\n- The `status` on the authorization is set to `closed`, releasing the purchase\namount held by that authorization. A [balance\ntransaction](https://docs.stripe.com/reports/balance-transaction-types) of type\n`issuing_authorization_release` is created to represent this.\n- A new transaction object of type `capture` is created. The purchase amount is\ndeducted from the [balance you’re using for\nIssuing](https://docs.stripe.com/issuing/funding/balance).\nhide sample argumentsIDiauth_123statusclosedamount10\nUSDtransactionsipi_123balance_transactionstxn_123, txn_456hide sample\nargumentsIDipi_123typecaptureamount-10\nUSDauthorization`iauth_123`balance_transactiontxn_789hide sample\nargumentsIDtxn_123typeissuing_authorization_holdamount-10 USDhide sample\nargumentsIDtxn_456typeissuing_authorization_releaseamount10 USDhide sample\nargumentsIDtxn_789typeissuing_transactionamount-10 USD\n[Spending controls](https://docs.stripe.com/issuing/controls/spending-controls),\n[real time authorization\ncontrols](https://docs.stripe.com/issuing/controls/real-time-authorizations),\nand card status (whether a card is active or not) don’t apply for capture. They\ncan be used to determine whether authorizations are approved, but captures for\napproved authorizations always succeed.\n\n## Handling other transactions\n\nIn addition to regular transactions, there are a few other cases that you should\nbe ready to handle.\n\nRefundsPartial captureOver captureMulti captureForce capture\nRefunds are transactions with `type` of `refund`.\n\nWhen we create a transaction representing a refund or credit, we try to link it\nto the original payment authorization. Refunds aren’t necessarily tied to the\noriginal payment transaction or authorization, so linking them is an inexact\nscience. As a result, we might link to an unrelated authorization or be unable\nto link to an authorization at all (for example, if the card is credited rather\nthan refunded). In these cases, the `authorization` field of the transaction is\nset to `null`, and the transaction won’t be linked to the authorization. We\nprocess all refunds and credits the same way, regardless of their linkage to a\npayment authorization.\n\n```\n{\n \"id\": \"ipi_1GTG10EEsyYlpYZ9VJn2xV3B\",\n \"object\": \"issuing.transaction\",\n \"amount\": 100,\n \"authorization\": \"iauth_1GBZQyEEsyYlpYZ9255L8GQC\",\n \"balance_transaction\": null,\n \"card\": \"ic_1GBZQJEEsyYlpYZ99v6rq38S\",\n \"cardholder\": null,\n \"created\": 1585783834,\n \"currency\": \"usd\",\n \"livemode\": false,\n \"merchant_amount\": 100,\n \"merchant_currency\": \"usd\",\n \"merchant_data\": {\n \"category\": \"taxicabs_limousines\",\n \"city\": \"San Francisco\",\n \"country\": \"US\",\n \"name\": \"Rocket Rides\",\n \"network_id\": \"1234567890\",\n \"postal_code\": \"94111\",\n \"state\": \"CA\",\n \"url\": null\n },\n \"metadata\": {},\n \"type\": \"refund\",\n}\n```\n\n### Testing\n\nTo simulate the creation of a refund transaction, you can use the [Transaction\nRefund API](https://docs.stripe.com/api/issuing/transactions/test_mode_refund)\nin the Issuing test helpers.\n\n```\ncurl -X POST\nhttps://api.stripe.com/v1/test_helpers/issuing/transactions/{{TRANSACTION_ID}}/refund\n\\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\"\n```\n\nTo create a refund transaction that doesn’t link to an authorization, use the\n[Create Unlinked Refund\nAPI](https://docs.stripe.com/api/issuing/transactions/test_mode_create_unlinked_refund)\nin the Issuing test helpers.\n\n```\ncurl\nhttps://api.stripe.com/v1/test_helpers/issuing/transactions/create_unlinked_refund\n\\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d card={{CARD_ID}} \\\n -d amount=1000\n```\n\n## Links\n\n- [authorization](https://docs.stripe.com/issuing/purchases/authorizations)\n- [Transaction](https://docs.stripe.com/api#issuing_transaction_object)\n- [balance\ntransaction](https://docs.stripe.com/reports/balance-transaction-types)\n- [balance you’re using for\nIssuing](https://docs.stripe.com/issuing/funding/balance)\n- [Authorization](https://docs.stripe.com/api/authorizations/object)\n- [Transaction](https://docs.stripe.com/api/transactions/object)\n- [Balance Transaction](https://docs.stripe.com/api/balance_transactions/object)\n- [Spending\ncontrols](https://docs.stripe.com/issuing/controls/spending-controls)\n- [real time authorization\ncontrols](https://docs.stripe.com/issuing/controls/real-time-authorizations)\n- [Transaction Refund\nAPI](https://docs.stripe.com/api/issuing/transactions/test_mode_refund)\n- [Create Unlinked Refund\nAPI](https://docs.stripe.com/api/issuing/transactions/test_mode_create_unlinked_refund)",
  "metadata": {
    "title": "Issuing transactions | Stripe Documentation",
    "description": "Learn how to use Issuing to handle transactions.",
    "sourceURL": "https://docs.stripe.com/issuing/purchases/transactions"
  }
}