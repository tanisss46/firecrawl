{
  "content": "# Rules reference\n\n## Learn about the structure of rules and the order in which Radar processes them.\n\nBefore creating a rule, you need to understand how they’re processed and what\npayment attributes you can use to set evaluation criteria. The Stripe\nmachine-learning fraud systems can block many fraudulent payments for you, but\nyou can also set up rules that are unique to your business using the [supported\nattributes](https://docs.stripe.com/radar/rules/reference#supported-attributes).\n\n## Rule processing and ordering\n\n[Radar](https://docs.stripe.com/radar) evaluates each payment against the rules\nyou create according to their action type, using the following prioritization:\n\n- **Request 3DS**: Rules that when used with the [Payment Intents\nAPI](https://docs.stripe.com/payments/payment-intents) or\n[Checkout](https://docs.stripe.com/payments/checkout), *request* the issuer to\ndo [3D Secure authentication](https://docs.stripe.com/payments/3d-secure) if\nsupported. Radar evaluates these before any block, review, or allow rules.\n- **Allow**: Rules that *allow* a payment to be processed. Payments that fall\nunder allow rules aren’t evaluated against any block or review rules.\n- **Block**: Rules that *block* a payment and reject it. Blocked payments aren’t\nevaluated against any review rules.\n- **Review**: Rules that allow payments to be processed but then place them in\n*review*.\n\nRules of the same action type aren’t ordered.\n\nIf a payment matches the criteria for a rule, Radar takes the appropriate action\nand discontinues evaluation. For example, if a payment matches an allow rule,\nit’s processed normally, without evaluating any subsequent block or review\nrules, even if the payment would also meet their criteria. An example set of\nrules might be as follows:\n\n- **Allow** payments less than `$10`\n- **Allow** payments made within the US and with a risk level of `normal`\n- **Block** payments where the risk level is `high`\n- **Block** payments `greater than $1,000`\n- **Review** payments made with a card issued `outside the US`\n\nUsing the rules above:\n\n- All payments less than 10 USD are processed, regardless of their risk level or\nissuing location. Since the first rule allows the payment, no further rules are\nevaluated.\n- A 1,500 USD payment made within the US with a normal risk level processes\nnormally because it meets the criteria of the second rule, so isn’t evaluated\nagainst the rule to block payments over 1,000 USD.\n- A high risk payment over 1,000 USD is blocked because it doesn’t meet the\ncriteria of either allow rule, then triggers both block rules, regardless of the\norder of evaluation.\n\n## Rule structure\n\nThe rule structure has two components—the *action* to take and the *condition*\nto evaluate:\n\n`{action} if {condition}`\n\nTogether they represent the *predicate*. In practice, a rule to block all\npayments over 1,000 USD appears as:\n\n`Block if :amount_in_usd: > 1000.00`\n\n- The *action* is `Block`\n- The *condition* is `:amount_in_usd: > 1000.00`\n\n### Actions\n\nA rule performs one of the four actions described in this section when a payment\nmeets its criteria. The order of the following action types represents the\npriority Radar follows when evaluating each rule.\n\n#### Request 3D Secure\n\nWhen used with the Payment Intents API, this rule determines if Stripe requests\nthe issuer to attempt [3D Secure\nauthentication](https://docs.stripe.com/payments/3d-secure). Requesting 3DS\nalone doesn’t block all possible [3D Secure\noutcomes](https://docs.stripe.com/radar/rules#request-3d-secure). Whether or not\nthere are matches on this rule, we evaluate rules for allow, block, and review\nafterward.\n\n#### Allow\n\nThis rule determines when to allow a payment that meets certain criteria,\nregardless of any of your other matching rules. When a payment matches the\ncriteria in an allow rule, it’s not subject to further Radar rules evaluation.\nStripe processes the payment normally, but the card issuer might still decline\nit.\n\n#### Block\n\nBlock rules advise Stripe to always block a payment. If a payment matches the\ncriteria in a block rule, Stripe rejects it and it’s not subject to further\nrules evaluation.\n\n#### Review\n\nYou might want to allow certain types of payments but also have the option to\nexamine them more closely. With review rules, you can [place payments in\nreview](https://docs.stripe.com/radar/reviews). This is especially useful for\npayments that don’t fit common patterns, such as larger payments or payments\nfrom a country that you don’t often ship to. Stripe still processes these\npayments and charges the customer, but you have an additional opportunity to\nreview the order and check for signs of fraud.\n\nWhen a particular rule is triggered, Radar takes the prescribed action and\ndiscontinues any further rule evaluation.\n\n### Conditions\n\nIf a payment matches a rule’s condition, the corresponding action is taken. A\nbasic condition is, itself, made up of three parts:\n\n`[attribute] [operator] [value]`\n\n- **Attribute**: The attribute of a payment (for example, the *amount* or *type\nof card*)\n- **Operator**: The arithmetic that compares the attribute to the value (for\nexample, *greater than* or *not equal to*)\n- **Value**: The criteria you want to use (for example, `100.00` or `debit`)\n\nCombining both the action and condition together, the structure of a rule is:\n\n`{action} if {[attribute] [operator] [value]}`\n\nFour types of conditions exist, depending on the attribute type:\n\n- `[string_attribute] [operator] [string_value]`\n- `[country_attribute] [operator] [country_value]`\n- `[numeric_attribute] [operator] [numeric_value]`\n- `[boolean_attribute]`\n\nYou can also use attributes as a corresponding value within a condition. For\nexample, you can create a rule to block payments where the issuing country of\nthe card doesn’t match the country where the payment took place:\n\n`Block if :card_country: != :ip_country:`\n\nFor a list of all possible conditions, refer to the [supported\nattributes](https://docs.stripe.com/radar/rules/reference#supported-attributes).\n\n#### String attributes\n\nThese contain any combination of characters. String attributes and values most\ncommonly represent a piece of text, such as a card’s brand (for example, `visa`,\n`amex`) or risk level (for example, `elevated`). You can use these in rules to\nallow payments only from a particular country, or block payments made with\nprepaid cards.\n\n#### Metadata attributes\n\nThese attributes are derived from the [metadata you’ve attached to your\npayments](https://docs.stripe.com/payments/charges-api#storing-information-in-metadata).\nMetadata attributes can operate as either strings or numbers. When used as\nstrings, metadata attributes are *case-sensitive*.\n\nYou can use these attributes when creating Stripe Radar rules, enabling you to\nwrite rules against any custom business attributes you have passed to Stripe in\nthe metadata field attached to your payments.\n\nMetadata attributes are written in the following structure:\n\n`::[metadata attribute name]:: [operator] [metadata_value]`\n\nFor example, suppose we have payments with the following key-value data stored\nin the metadata field:\n\nMetadata NameMetadata ValueCustomer Age22Item ID5A381DCategory IDgroceries\nYou can write a rule to place payments that match the following criteria into\nreview.\n\n`Review if ::Customer Age:: < 30`\n\nYou can also write rules using both metadata attributes and other [supported\nattributes](https://docs.stripe.com/radar/rules/reference#supported-attributes)\nmentioned in this document. For example, you can write a rule that only places a\npayment in review if the `Item ID` matches `5A381D` and the payment amount\nexceeds 1,000 USD.\n\n`Review if ::Item ID:: = '5A381D' and :amount_in_usd: > 1000`\n\nMetadata attributes also support the `IN` operator to match against multiple\nvalues. For example, you can write a rule that places a payment in review if the\n`Category ID` is one of groceries, electronics, or clothing.\n\n` Review if ::Category ID:: IN ('groceries', 'electronics', 'clothing')`\n\nYou can use the `INCLUDES` operator with rules for metadata attributes and other\nstring attributes to match substrings. For example, you can write a rule that\nplaces a payment in review if the `Item ID` includes the string `A381`. This\nmatches A381, 5A381D, A381D, 5A381, and so on.\n\n`Review if ::Item ID:: INCLUDES 'A381'`\n\n#### Caution\n\nMetadata attributes are case-sensitive when used as strings. Make sure that\nmetadata values you specify in rules are exactly the same as the ones attached\nto your payments.\n\n**Metadata on Customer and Destination Objects**\n\nYou can also access metadata on customer and destination objects (if those are\nused for a given payment). These attributes use the following structure:\n\n`::[customer|destination]:[metadata attribute name]:: [operator]\n[metadata_value]`\n\nFor example, suppose you had a customer with the following metadata:\n\nMetadata NameMetadata ValueTrustedtrue\nYou could write a rule that always allows payments if the customer’s `Trusted`\nmetadata field is `true`.\n\n`Allow if ::customer:Trusted:: = 'true'`\n\nOr if you had a destination with the following metadata:\n\nMetadata NameMetadata ValueCategorynew\nYou could write a rule that places a payment in review if the destination’s\n`Category` metadata field is `new`.\n\n`Review if ::destination:Category:: = 'new'`\n\n#### Country attributes\n\nThese use [two-letter country\ncodes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) to represent a country,\nsuch as `US` for United States, `GB` for Great Britain, or `AR` for Argentina.\nCountry attributes operate the same as string attributes, the only difference\nbeing that the value must be a country code.\n\n#### State attributes\n\nThese use [ISO codes](https://en.wikipedia.org/wiki/ISO_3166-2) to represent the\nstate or principal subdivision of a country, such as `CA` to represent\nCalifornia of the [United States](https://en.wikipedia.org/wiki/ISO_3166-2:US),\n`ENG` to represent England which is part of [Great\nBritain](https://en.wikipedia.org/wiki/ISO_3166-2:GB), or `L` to represent La\nPampa which is part of [Argentina](https://en.wikipedia.org/wiki/ISO_3166-2:AR).\nWe omit the two-letter country code from the state ISO code, so if you want to\nblock transactions from California, compare the state attribute to `CA`.\n\n`Block if :ip_state: = 'CA'`\n\nState attributes operate the same as string attributes, the only difference\nbeing that the value must be an ISO code.\n\n#### Numeric attributes\n\nAs these contain only numbers, they support more operators than string\nattributes and values. A payment’s *amount* is one example of a numeric\nattribute. You can create a rule to perform an action if the amount is higher,\nlower, equal, or not equal to the amount you specify.\n\nFor numeric attributes that are counts over time windows, the count excludes the\npayment that you’re currently processing. For example,\n`total_charges_per_customer_hourly` represents the number of previous charge\nattempts from a given customer in the preceding hour. So, for the first charge\nattempt in a given hour for a customer, `total_charges_per_customer_hourly` has\na value of `0`. For a second charge attempt within the same hour, it has a value\nof `1`, and so on.\n\nTime-since-first-seen attributes also don’t take into account the payment you’re\ncurrently processing. For example, a payment without an email has a missing\nvalue for `seconds_since_email_first_seen`. So do payments with emails never\nseen before on your account (since we don’t include the payment currently being\nprocessed, this is effectively the same behavior as the first example). See\nbelow for more details about [missing\nvalues](https://docs.stripe.com/radar/rules/reference#missing-attributes). The\n`seconds_since_email_first_seen` field is only non-null after a new payment with\na given email is processed.\n\n#### Bounded numeric attributes\n\nBounded numeric attributes are similar to the numeric attributes described\nabove. For example, they exclude the payment that you’re currently processing.\nThe difference is that the available values for bounded numeric attributes are\ncapped (or *bounded*) at a specific value.\n\nAs an example, take `authorized_charges_per_email_hourly` which represents the\nnumber of previous charges that were authorized for the email in the past hour\non your account. For the sake of the example, let’s say it has a bound of `5`.\nFor the first charge attempt in the past hour with the email\n`jenny.rosen@example.com` the counter has a value of `0`. Subsequent charge\nattempts in the same hour see higher counter values. After authorizing the 6th\ncharge within the hour from `jenny.rosen@example.com`, the counter stops\nincrementing and stays at `5` despite actually having `6` charge attempts in the\npast hour.\n\nIf an attempt to increment the counter above the cap occurs, we exclude older\nvalues from consideration and replace them with newer values. For example,\nconsider a counter with a cap of `3` that’s been filled up with 3 charges. One\nway to visualize the counter is by maintaining a list of timestamps representing\narrival times of charges: `[10, 20, 30]` for instance. When a charge arrives at\ntime `50`, the counter now looks like `[20, 30, 50]`.\n\n#### Boolean attributes\n\nA Boolean attribute represents whether a particular attribute is true. Unlike\nstring and numeric attributes, Boolean attributes have no operators or values.\nYou can use a Boolean attribute to block payments that have been made with a\ndisposable email address, or place payments in review that were made with an\nanonymous IP address.\n\n#### Post-authorization attributes\n\nA post-authorization attribute (for example, `:cvc_check:`,\n`:address_zip_check:`, or `:address_line1_check:`) requires Stripe to exchange\ndata with card issuers as part of the authorization process. The card issuer\nverifies this data against the information they have on file for the cardholder\nand checks for a match. Rules that use post-authorization attributes execute\nafter rules that don’t use post-authorization attributes. (This won’t affect\nwhether a charge is blocked or not, but might impact which rule blocks the\ncharge.)\n\nIf you use a post-authorization attribute in a rule, your customer’s statement\nmight temporarily show an authorization even if the charge is ultimately\nblocked—the authorization generally disappears after a few days.\n\nAddress ([AVS](https://docs.stripe.com/disputes/prevention/verification)) and\n[CVC](https://docs.stripe.com/disputes/prevention/verification) attributes have\nfive possible values:\n\nAttribute valueExplanation`pass`The data provided is correct.`fail`The data\nprovided is incorrect.`unavailable`The customer’s card issuer won’t check the\ndata provided. Not all card issuers or countries support address\nverification.`unchecked`The data was provided but the customer’s card issuer\nhasn’t checked the data provided yet.`not_provided`The data wasn’t provided to\nStripe.\nSome example rules:\n\n- `Block if :address_line1_check: = 'fail'`\n- `Block if :cvc_check: = 'fail'`\n- `Block if :address_zip_check: in ('fail', 'not_provided')`\n\nRequiring a strict `pass` on rules can be overly restrictive. For example,\n[wallets](https://docs.stripe.com/payments/payment-methods) usually don’t\nprovide a CVC because they store tokenized card information. Therefore\n[CVC](https://docs.stripe.com/disputes/prevention/verification) checks, like\n[3D-Secure](https://docs.stripe.com/payments/3d-secure) checks, aren’t available\nfor payment methods such as Apple Pay. Stripe recommends using Radar’s [Built-in\nrules](https://docs.stripe.com/radar/rules#built-in-rules), which consider these\nedge cases.\n\n#### Supported attributes\n\nRefer to the list of all [supported\nattributes](https://docs.stripe.com/radar/rules/supported-attributes) for a\ncomplete list of attributes you can apply to your rule definitions.\n\n#### Converted amounts\n\nWhen using `amount_in_xyz`, Stripe automatically determines the converted amount\nof any payment when checking if the amount matches your chosen criteria. For\nexample, if you create a rule using `amount_in_usd` to block all payments\ngreater than 1,000 USD, Stripe blocks a payment of a lower nominal amount in a\ndifferent currency (for example, 900 GBP) if its equivalent converted value\nexceeds 1,000 USD.\n\n#### “Takes into account payments from 2020 onwards” in practice\n\nThe descriptions of some rule attributes include the phrase “takes into account\npayments from 2020 onwards”. This means that the rule treats a card that last\ntransacted with your business in 2019 the same as a card that’s new to your\nbusiness. Consider what this means in the context of your business and rules as\nit could result in counterintuitive behavior. For example, if you create a rule\nto block high-value payments from new cards, you might end up blocking a good\ncustomer who hasn’t made a purchase since 2019.\n\n#### “This attribute only includes live mode Customer objects that interacted with your account in the past <week, year>. This data updates at most every 72 hours.” in practice\n\nThe descriptions of some rule attributes include the sentences “This attribute\nonly includes live mode Customer objects that interacted with your account in\nthe past <week, year>. This data updates at most every 72 hours.” This means\nthat live mode Customer objects that were created, charged, or updated on your\naccount in the past week or year are included in these counts. However, the\ncount doesn’t update immediately and might take up to 72 hours to propagate\nthrough the system, though often times these counters update sooner than 72\nhours.\n\n### Operators\n\nA condition’s operator denotes the comparison between the payment’s attribute\nand the value you provide. Different operators are available, depending on the\ntype of attribute being used.\n\nOperatorStringMetadataCountryStateNumericDescriptionExample=✔︎✔︎✔︎✔︎✔︎Equal\nto`:card_country: = 'us'`!=✔︎✔︎✔︎✔︎✔︎Not equal to`:card_funding: !=\n'prepaid'`<✔︎Less than`:amount_in_gbp: < 10.00`>✔︎Greater than`:amount_in_usd: >\n500.00`<=︎✔︎Less than or equal to`:amount_in_eur: <= 100.00`>=✔︎Greater than or\nequal to`:amount_in_cad: >= 10.00`IN✔✔︎✔✔︎✔︎Is in the group`:card_country: IN\n('gb', 'ie')`INCLUDES✔✔︎✔✔Contains the string`:ip_address: INCLUDES\n'192.168'`LIKE✔✔︎✔✔Matches the given pattern. Use the wildcard character `%` to\nmatch zero or any number of letters, digits, or symbols.`:email: LIKE\n'fraud%@stripe.com'`\n### Lists\n\nYou can reference a group of values in your rules through\n[lists](https://docs.stripe.com/radar/lists). All list aliases referenced in\nrules must start with `@`. To construct a rule referencing a list, follow the\nstructure:\n\n`{action} [attribute] in [list]`\n\nFor example, say you have a list of card countries you’d like to block. You\ncould write a rule using several `OR` clauses:\n\n`Block if :card_country: = 'CA' OR :card_country: = 'DE' OR :card_country: =\n'AE'`\n\nYou could also write a rule using an inline list:\n\n`Block if :card_country: IN ('CA', 'DE', 'AE')`\n\nYou could also create a list of card countries you want to block, named\n`card_countries_to_block`. You can then\n[add](https://docs.stripe.com/radar/lists#custom-lists) the countries of your\nchoice to the list and reference that list in a rule:\n\n`Block if :card_country: in @card_countries_to_block`\n\nReferencing a list in a rule allows you to edit a large number of items in one\nplace instead of maintaining many individual rules.\n\n#### EU Businesses\n\nEU businesses: Be aware of the Geo-blocking Regulation and its prohibitions on\nblocking payments from customers based in EU member states. [Learn more about\nthis\nregulation](https://support.stripe.com/questions/eu-geo-blocking-regulation-changes).\n\n### Missing attributes\n\nTypical rule conditions refer to attributes set on every payment, such as\n`:card_country:` (which is set on every card-based charge) or a metadata\nattribute you always send with your payment requests. In some scenarios an\nattribute might be missing, for example:\n\n- You have different checkout flows on your site, and some of them don’t collect\ncustomers’ email addresses\n- You’ve only recently started using Stripe.js, and so `:ip_country:` is\navailable on new payments, but not available on historical payments (which we\nsearch when previewing rules)\n- For some of your payments, a bug in your integration fails to set an expected\nmetadata key\n\n#### How rule conditions evaluate missing attributes\n\nConsider the rule `Block if :email_domain: = 'definitelyfraud.com'`. If you\ndidn’t collect the customer’s email address, the `:email_domain:` attribute\ndoesn’t exist, so the rule condition doesn’t match the payment.\n\nNow consider the rule `Review if :email_domain: != 'definitelysafe.com'`. If the\n`:email_domain:` attribute is missing, this rule *also* doesn’t match the\npayment. It might seem like a match because no value isn’t\n`'definitelysafe.com'`. However, we interpret `!= 'definitelysafe.com'` to mean\n“the attribute has some value other than `'definitelysafe.com'`,” which a\nmissing attribute doesn’t satisfy. Missing attribute information is also carried\nforward when using the `NOT` operator, so the rule `Review if NOT\n(:email_domain: = 'definitelysafe.com')` similarly doesn’t match the payment if\nthe `:email_domain:` attribute is missing.\n\nMore generally: any comparison (for example, `=`, `!=`, `>`, `<`) of a missing\nfeature against another static value or feature (missing or present) always\nreturns false. Usage of the `NOT` operator with any comparison containing a\nmissing feature always returns false.\n\n#### Explicit handling with the `is_missing` function\n\nIf you want to explicitly check for the existence of an attribute or metadata\nattribute, use the `is_missing` function. Provide this function with the\nattribute or metadata key that might be missing.\n\nFor example, you could write a rule to match all payments where you don’t have\naccess to a customer’s email address:\n\n- `Review if is_missing(:email_domain:)`\n\nOr you might write a rule to match all payments that have a certain metadata\nattribute set:\n\n- `Review if !(is_missing(::foo::))`\n\nYou can also use the `is_missing` function in `OR` or `AND` conjunctions:\n\n- `Review if is_missing(:email_domain:) OR :email_domain: IN ('yopmail.net',\n'yandex.ru')`\n\n### Complex conditions\n\nYou can build complex conditions by joining together basic conditions using the\noperators **AND**, **OR**, and **NOT**. You can also use their symbolic\nequivalents: **&&**, **||**, and **!** respectively.\n\nSimilar to programming languages such as C, Python, and SQL, Stripe supports\nstandard operator *precedence* (order of operations). For instance, the complex\ncondition:\n\n`{condition_X} OR NOT {condition_Y} AND {condition_Z}`\n\nis interpreted as:\n\n`{condition_X} OR ((NOT {condition_Y}) AND {condition_Z})`\n\nSub-conditional grouping within complex conditions is also supported using\nparentheses. For instance, you can amend the prior example to explicitly change\nthe evaluation order of sub-predicates:\n\n`({condition_X} OR (NOT {condition_Y})) AND {condition_Z}`\n\n`{condition_X} OR NOT ({condition_Y} AND {condition_Z})`\n\nBy using parentheses in different locations, each of these complex conditions\nlead to different results.\n\n### Valid conditions\n\nThe following conditions are examples of correct use of attributes and a\nsupported operator:\n\n- `:card_brand: = 'amex'`\n- `:card_country: != 'US'`\n- `:amount_in_usd: >= 1000.00`\n- `:is_anonymous_ip:`\n\n### Invalid conditions\n\nWhen creating a rule, Radar provides feedback if you attempt to use an invalid\ncondition. For reference, the following are examples of invalid conditions,\nwhere the value for an attribute or the operator used isn’t supported:\n\n- `:risk_level: < 'highest'` (string values can only make use of = or !=\noperators)\n- `:ip_country: = 'Canada'` (country values must be expressed in two-letter\nshort code)\n- `:amount_in_usd: >= 'one thousand dollars'` (numeric values must be expressed\nin numbers)\n- `:is_anonymous_ip: = 'true'` (Boolean attributes are not used with operators\nor values)\n\n### Velocity rules\n\nMany [supported\nattributes](https://docs.stripe.com/radar/rules/supported-attributes) include\ninvariants for different time scales (for example, the `daily` in\n`total_charges_per_email_daily`). These are called velocity rules.\n\nStripe calculates attributes using bucket increments. The increment length\nvaries based on the attribute interval. This means the velocity for any\nattribute might include data that occurred within the interval plus one bucket.\nFor example, an hourly attribute interval might be 3900 seconds (one hour and\nfive minutes) of the current transaction because the interval uses five minute\nbuckets.\n\nThe attributes are defined as:\n\n- `hourly` is up to 3900 seconds (5 minute buckets)\n- `daily` is up to 90000 seconds (1 hour buckets)\n- `weekly` is up to 608400 seconds (1 hour buckets)\n- `yearly` is up to 31622400 seconds (1 day buckets)\n- `all_time` includes 5 years of data with velocity up to 31622400 seconds (1\nday buckets)\n\nA common use case for these attributes is to reduce [card\ntesting](https://docs.stripe.com/disputes/prevention/card-testing#prevent-card-testing)\nor enumeration attack scenarios, as explained in the [Radar 101\nguide](https://stripe.com/guides/radar-rules-101#rules-that-help-prevent-card-testing-or-card-cashing).\n\n## See also\n\n- [3DS Rule Examples](https://docs.stripe.com/radar/rules#request-3d-secure)\n- [Continuous Fraud Management\nGuide](https://stripe.com/guides/improve-fraud-management-with-radar-for-fraud-teams-and-stripe-data)\n- [Query Disputes and Fraud\nData](https://docs.stripe.com/stripe-data/query-disputes-and-fraud-data)\n- [Radar 101 Guide](https://stripe.com/guides/radar-rules-101)\n- [Rules Overview](https://docs.stripe.com/radar/rules)\n- [Supported\nAttributes](https://docs.stripe.com/radar/rules/supported-attributes)\n\n## Links\n\n- [Connect](https://docs.stripe.com/connect)\n- [Using Radar with Connect](https://docs.stripe.com/connect/radar)\n- [Radar](https://docs.stripe.com/radar)\n- [Payment Intents API](https://docs.stripe.com/payments/payment-intents)\n- [Checkout](https://docs.stripe.com/payments/checkout)\n- [3D Secure authentication](https://docs.stripe.com/payments/3d-secure)\n- [3D Secure outcomes](https://docs.stripe.com/radar/rules#request-3d-secure)\n- [place payments in review](https://docs.stripe.com/radar/reviews)\n- [metadata you’ve attached to your\npayments](https://docs.stripe.com/payments/charges-api#storing-information-in-metadata)\n- [two-letter country codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\n- [ISO codes](https://en.wikipedia.org/wiki/ISO_3166-2)\n- [United States](https://en.wikipedia.org/wiki/ISO_3166-2:US)\n- [Great Britain](https://en.wikipedia.org/wiki/ISO_3166-2:GB)\n- [Argentina](https://en.wikipedia.org/wiki/ISO_3166-2:AR)\n- [AVS](https://docs.stripe.com/disputes/prevention/verification)\n- [wallets](https://docs.stripe.com/payments/payment-methods)\n- [Built-in rules](https://docs.stripe.com/radar/rules#built-in-rules)\n- [supported\nattributes](https://docs.stripe.com/radar/rules/supported-attributes)\n- [lists](https://docs.stripe.com/radar/lists)\n- [add](https://docs.stripe.com/radar/lists#custom-lists)\n- [Learn more about this\nregulation](https://support.stripe.com/questions/eu-geo-blocking-regulation-changes)\n- [card\ntesting](https://docs.stripe.com/disputes/prevention/card-testing#prevent-card-testing)\n- [Radar 101\nguide](https://stripe.com/guides/radar-rules-101#rules-that-help-prevent-card-testing-or-card-cashing)\n- [Continuous Fraud Management\nGuide](https://stripe.com/guides/improve-fraud-management-with-radar-for-fraud-teams-and-stripe-data)\n- [Query Disputes and Fraud\nData](https://docs.stripe.com/stripe-data/query-disputes-and-fraud-data)\n- [Radar 101 Guide](https://stripe.com/guides/radar-rules-101)\n- [Rules Overview](https://docs.stripe.com/radar/rules)",
  "metadata": {
    "title": "Rules reference | Stripe Documentation",
    "description": "Learn about the structure of rules and the order in which Radar processes them.",
    "sourceURL": "https://docs.stripe.com/radar/rules/reference"
  }
}