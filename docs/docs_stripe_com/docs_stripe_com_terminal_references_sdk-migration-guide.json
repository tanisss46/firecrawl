{
  "content": "# Terminal SDK migration guide\n\n## Learn how to migrate to the latest version of the Stripe Terminal SDK.\n\nThe Stripe Terminal iOS and Android SDKs have been updated with a number of\nbreaking changes in APIs and behavior, some of which require you to update your\nintegration with the Stripe Terminal SDK. To improve consistency between our\nSDKs and to simplify your application logic and integration, we regularly make\nchanges in major version updates that might affect the way your integration\nworks or behaves. This guide explains the latest changes to help you upgrade\nyour integration.\n\n#### Note\n\nBuilding a new Stripe Terminal integration? Visit our [Design an\nintegration](https://docs.stripe.com/terminal/designing-integration) page to\nlearn how to get started.\n\n## Migrate to version 4.0.0\n\nHere are some things you need to know about the 4.0.0 Stripe Terminal iOS and\nAndroid SDKs:\n\n- [Save cards after payment\nglobally](https://docs.stripe.com/terminal/features/saving-cards/save-after-payment)-\nUsers can now save cards after payment outside of the US by updating the\ncustomer consent collection process for saving card details on point-of-sale\ndevices.\n- Support for [Mail order and telephone\norder](https://docs.stripe.com/terminal/features/mail-telephone-orders/overview)\n(MOTO) payments on smart readers Preview- This feature is in preview. To request\naccess, email\n[stripe-terminal-betas@stripe.com](mailto:stripe-terminal-betas@stripe.com).\n- Updates to minimum supported iOS platform version\n- Enables [reader auto-reconnect on unexpected\ndisconnects](https://docs.stripe.com/terminal/payments/connect-reader?terminal-sdk-platform=ios&reader-type=tap-to-pay#automatically-attempt-reconnection)\nby default for mobile and Tap to Pay readers, enhancing reader resiliency\n- Consolidates reader connection functionality and disconnect callbacks for all\nreader types\niOSAndroid\nIf your application currently uses an Terminal iOS SDK version prior to 4.0.0,\nthere are a few changes you need to make to upgrade and accept card present\npayments globally. For a detailed list of the changes from version 3.9.1 to\n4.0.0, please reference the [SDK\nchangelog](https://github.com/stripe/stripe-terminal-ios/blob/master/CHANGELOG.md).\n\n## Update your minimum supported version to iOS 14 or higher\n\nWe regularly update the minimum supported version of our SDKs to streamline our\ndeveloper support efforts.\n\nExisting 3.X versions of the Terminal iOS SDK will continue to support devices\nrunning **iOS 13** and higher.\n\n## Update saving cards after PaymentIntents integration\n\nIf you [save a payment method after a successful in-person\nPaymentIntent](https://docs.stripe.com/terminal/features/saving-cards/save-after-payment),\nyou need to make the following updates to your integration:\n\n- When creating Terminal PaymentIntents, pass the\n[setup_future_usage](https://stripe.dev/stripe-terminal-ios/docs/4.0.0/Classes/SCPPaymentIntent.html#/c:objc(cs)SCPPaymentIntent(py)setupFutureUsage)\nparameter, which informs Stripe that you want to make future payments with the\nsame card.\n- You also need to pass\n[allow_redisplay](https://stripe.dev/stripe-terminal-ios/docs/Classes/SCPCollectConfiguration.html#/c:objc(cs)SCPCollectConfiguration(py)allowRedisplay)\nas `always` or `limited` in `SCPCollectConfiguration`. Pass `always` if you want\nthe customer’s saved card to be presented to them in all future checkout flows,\nand `limited` if it can only be used in the context of the initially scoped use,\nsuch as a subscription.\n\nLearn more about [saving cards after a\npayment](https://docs.stripe.com/terminal/features/saving-cards/save-after-payment).\n\n## Update saving cards without payment with SetupIntents integration\n\nTo ensure a consistent integration shape between SetupIntents and\nPaymentIntents, as well as in-person and online transactions, in `SCPTerminal`’s\n`collectSetupIntentPaymentMethod`, we removed the `customerConsentCollected`\nparameter that was previously required on all SetupIntent transactions, and\nreplaced it with the `allowRedisplay` parameter.\n\nLearn more about [saving directly without\ncharging](https://docs.stripe.com/terminal/features/saving-cards/save-cards-directly).\n\n## Update your discoverReaders usage\n\n- We added a new enum value, `discovering`, to\n[SCPConnectionStatus](https://stripe.dev/stripe-terminal-ios/docs/Enums/SCPConnectionStatus.html)\nto represent when reader discovery is running. Make sure your integration can\nhandle this new state and provide relevant information to your customers.\n- We improved the handling of multiple simultaneous reader discover operations.\nPreviously, calling\n[discoverReaders](https://stripe.dev/stripe-terminal-ios/docs/Classes/SCPTerminal.html#/c:objc(cs)SCPTerminal(im)discoverReaders:delegate:completion:)\nmultiple times would queue the operations. Now, when a new\n[discoverReaders](https://stripe.dev/stripe-terminal-ios/docs/Classes/SCPTerminal.html#/c:objc(cs)SCPTerminal(im)discoverReaders:delegate:completion:)\nis called while an existing one is already in progress, the SDK cancels the\nongoing operation and returns a\n[SCPErrorCanceledDueToIntegrationError](https://stripe.dev/stripe-terminal-ios/docs/Errors.html#/c:@SCPErrorNewDiscoveryRequested)\nerror. The new discoverReaders operation then starts immediately.\n- Discovering smart and Tap to Pay readers now calls the `discoverReaders`\ncompletion block when the operation ends. This change reflects the reality that\nreader discovery for these reader types isn’t a long-running operation.\n- We fixed a bug that strongly held a reference to the\n[SCPDiscoveryDelegate](https://stripe.dev/stripe-terminal-ios/docs/Protocols/SCPDiscoveryDelegate.html)\nin the SDK. Make sure your application is holding a strong reference to your\ndelegate to receive the discovery events.\n\n## Update your reader connection usage\n\n- To ensure a consistent integration pattern across reader discovery and\nconnection, we consolidated all previous reader connection methods\n(`connectBluetoothReader`, `connectInternetReader`, `connectLocalMobileReader`)\ninto\n[connectReader](https://stripe.dev/stripe-terminal-ios/docs/Classes/SCPTerminal.html#/c:objc(cs)SCPTerminal(im)connectReader:delegate:connectionConfig:completion:).\nThe exact connection type is still determined by the passed in connection\nconfiguration.\n- For mobile readers and Tap to Pay readers, the `ReaderDelegate` parameter has\nbeen removed from the `connectReader` method and instead moved into the\n`connectionConfig`, replacing `SCPReconnectionDelegate`. Consistent with other\nreader types, smart readers `InternetConnectionConfiguration` now also expects\nan `InternetReaderDelegate` to be passed in, which will alert your integration\nof events, including when a reader disconnects.\nReader TypeConnection ConfigurationReader DelegateMobile\nReaderSCPBluetoothConnectionConfiguration[SCPMobileReaderDelegate](https://stripe.dev/stripe-terminal-ios/docs/4.0.0/Protocols/SCPMobileReaderDelegate.html)Smart\nReaderSCPInternetConnectionConfiguration[SCPInternetReaderDelegate](https://stripe.dev/stripe-terminal-ios/docs/4.0.0/Reader.html#/c:objc(pl)SCPInternetReaderDelegate)Tap\nto\nPaySCPTapToPayConnectionConfiguration[SCPTapToPayReaderDelegate](https://stripe.dev/stripe-terminal-ios/docs/4.0.0/Protocols/SCPTapToPayReaderDelegate.html)\n### Before\n\n```\n// Call `connectBluetoothReader` with the selected reader and a connection\nconfig\n// to register to a location as set by your app.\nlet connectionConfig: BluetoothConnectionConfiguration\ndo {\nconnectionConfig = try BluetoothConnectionConfigurationBuilder(locationId:\n\"{{LOCATION_ID}}\").build()\n} catch {\n // Handle the error building the connection configuration\n return\n}\nTerminal.shared.connectBluetoothReader(selectedReader, delegate: readerDelegate,\nconnectionConfig: connectionConfig) { reader, error in\n if let reader = reader {\n print(\"Successfully connected to reader: \\(reader)\")\n } else if let error = error {\n print(\"connectBluetoothReader failed: \\(error)\")\n }\n}\n```\n\n### After\n\n```\n// Call `connectReader` with the selected reader and a connection config\n// to register to a location as set by your app.\nlet connectionConfig: BluetoothConnectionConfiguration\ndo {\nconnectionConfig = try BluetoothConnectionConfigurationBuilder(delegate:\nyourMobileReaderDelegate, locationId: \"{{LOCATION_ID}}\")\n .build()\n} catch {\n // Handle the error building the connection configuration\n return\n}\nTerminal.shared.connectReader(selectedReader, connectionConfig:\nconnectionConfig) { reader, error in\n if let reader = reader {\n print(\"Successfully connected to reader: \\(reader)\")\n } else if let error = error {\n print(\"connectReader failed: \\(error)\")\n }\n}\n```\n\nFor more details, refer our documentation about [connecting to a\nreader](https://docs.stripe.com/terminal/payments/connect-reader?terminal-sdk-platform=ios&reader-type=bluetooth#connect-reader).\n\n## Auto reconnection is now enabled by default for mobile and Tap to Pay readers\n\n- To increase the resiliency of your Terminal integration with mobile and Tap to\nPay readers, we enabled [auto\nreconnection](https://docs.stripe.com/terminal/payments/connect-reader?terminal-sdk-platform=ios&reader-type=bluetooth#handle-disconnects)\nby default when a reader unexpectedly disconnects.\n- We recommend displaying notifications in your app to inform the users about\nthe reader status throughout the reconnection process. To handle reader\nreconnection methods, we removed the `SCPReconnectionDelegate`. Its\nresponsibilities have been integrated into the respective ReaderDelegates. Use\n`MobileReaderDelegate` for mobile readers, and `TapToPayReaderDelegate` for Tap\nto Pay readers to handle reconnection events.\n- If you implemented your own reader reconnection logic and want to maintain\nthis behavior, you can turn off auto reconnection by setting\n[setAutoReconnectOnUnexpectedDisconnect](https://stripe.dev/stripe-terminal-ios/docs/Classes/SCPBluetoothConnectionConfigurationBuilder.html#/c:objc(cs)SCPBluetoothConnectionConfigurationBuilder(im)setAutoReconnectOnUnexpectedDisconnect:)\nto `false`.\n\n### Before\n\n```\nimport StripeTerminal\n\nextension ReaderViewController: ReconnectionDelegate {\n // MARK: ReconnectionDelegate\nfunc terminal(_ terminal: Terminal, didStartReaderReconnect cancelable:\nCancelable) {\n // 1. Notified at the start of a reconnection attempt\n // Use cancelable to stop reconnection at any time\n }\n\n func terminalDidSucceedReaderReconnect(_ terminal: Terminal) {\n // 2. Notified when reader reconnection succeeds\n // App is now connected\n }\n func terminalDidFailReaderReconnect(_ terminal: Terminal) {\n // 3. Notified when reader reconnection fails\n // App is now disconnected\n }\n}\n```\n\n### After\n\n```\nimport StripeTerminal\n\nextension ReaderViewController: MobileReaderDelegate {\n // MARK: MobileReaderDelegate\n\nfunc reader(_ reader: Reader, didStartReconnect cancelable: Cancelable,\ndisconnectReason: DisconnectReason) {\n // 1. Notified at the start of a reconnection attempt\n // Use cancelable to stop reconnection at any time\n }\n\n func readerDidSucceedReconnect(_ reader: Reader) {\n // 2. Notified when reader reconnection succeeds\n // App is now connected\n }\n func readerDidFailReconnect(_ reader: Reader) {\n // 3. Notified when reader reconnection fails\n // App is now disconnected\n }\n}\n```\n\nFor more details and code snippets, refer to our documentation about\n[automatically attempting to\nreconnect](https://docs.stripe.com/terminal/payments/connect-reader?terminal-sdk-platform=ios&reader-type=tap-to-pay#automatically-attempt-reconnection).\n\n## Update your reader disconnect handling\n\n- To be informed when a reader disconnects, we consolidated the reader\ndisconnect callbacks for all reader types by removing\n`terminal:didReportUnexpectedReaderDisconnect:` from the `SCPTerminalDelegate`.\nUse `reader:didDisconnect:` as part of the ReaderDelegates to be notified when a\nreader disconnects. For mobile readers, the\n[SCPDisconnectReason](https://stripe.dev/stripe-terminal-ios/docs/Enums/SCPDisconnectReason.html)\ncan help identify the reason for the disconnection.\n\nWith auto-reconnection enabled, both\n[-readerDidFailReconnect:](https://stripe.dev/stripe-terminal-ios/docs/4.0.0/Protocols/SCPReaderDelegate.html#/c:objc(pl)SCPReaderDelegate(im)readerDidFailReconnect:)\nand\n[reader:didDisconnect:](https://stripe.dev/stripe-terminal-ios/docs/4.0.0/Protocols/SCPReaderDelegate.html#/c:objc(pl)SCPReaderDelegate(im)reader:didDisconnect:)\nmethods are called if the SDK fails to reconnect to the reader and it becomes\ndisconnected.\n\n### Before\n\n```\nimport StripeTerminal\n\nclass ReaderViewController: UIViewController, TerminalDelegate {\n override func viewDidLoad() {\n super.viewDidLoad()\n Terminal.shared.delegate = self\n }\n\n // ...\n // MARK: TerminalDelegate\nfunc terminal(_ terminal: Terminal, didReportUnexpectedReaderDisconnect reader:\nReader) {\n// Consider displaying a UI to notify the user and start rediscovering readers\n }\n}\n```\n\n### After\n\n```\nimport StripeTerminal\n\nclass ReaderViewController: UIViewController, MobileReaderDelegate {\n override func viewDidLoad() {\n super.viewDidLoad()\n // Set the reader delegate when connecting to a reader\n }\n\n // ...\n\n func reader(_ reader: Reader, didDisconnect reason: DisconnectReason) {\n// Consider displaying a UI to notify the user and start rediscovering readers\n }\n}\n```\n\nFor more details, refer to our documentation about [handling disconnects\nmanually](https://docs.stripe.com/terminal/payments/connect-reader?terminal-sdk-platform=ios&reader-type=tap-to-pay#handle-the-disconnect-manually).\n\n## Update your payment acceptance integration\n\n- You can now cancel `confirmPaymentIntent` using the returned `Cancelable`\nobject. This is useful for QR code payments, which have an asynchronous\nconfirmation process. Similarly, `confirmSetupIntent` and `confirmRefund` are\nnow cancelable as well.\n- We improved type safety and consistency between the mobile SDKs by updating\nthe way `paymentMethodTypes` are specified in `SCPPaymentIntentParameters` and\n`SCPSetupIntentParameters`. Previously, this parameter was represented as an\narray of strings (for example, [“card_present”]). It now uses enum values from\n`SCPPaymentMethodType`.\n- To improve the cancelation flow for PaymentIntents and SetupIntents, calling\n`Terminal::cancelPaymentIntent` or `Terminal::cancelSetupIntent` now also\ncancels any ongoing payment processing, you no longer need to cancel payment\noperations such as `.collectPaymentMethod` separately before canceling the\nPaymentIntent.\n- `SCPSetupIntent.stripeId` is now nullable to be consistent with\n`SCPPaymentIntent.stripeId`. Although the `stripeId` value will continue to\nexist, make sure your code safely handles the case where\n`SCPSetupIntent.stripeId` might be `null` to avoid compiler errors.\n\n## Update usage for renaming and deprecation\n\n-\n[BluetoothReaderDelegate](https://stripe.dev/stripe-terminal-ios/3.9.0/Protocols/SCPBluetoothReaderDelegate.html)\nhas been renamed to\n[MobileReaderDelegate](https://stripe.dev/stripe-terminal-ios/Protocols/SCPMobileReaderDelegate.html).\n- In `SCPReaderSoftwareUpdate,` we renamed `SCPUpdateTimeEstimate` to\n`SCPUpdateDurationEstimate` and `estimatedUpdateTime` to `durationEstimate` to\nbetter represent their intent.\n- In `SCPOfflineDetails`, which represents payment details available when a\npayment is created or confirmed while offline, we renamed the time that the\noffline payment happened from `collectedAt` to `storedAt`, aligning with the\nnaming conventions in the Terminal Android SDK.\n- We renamed “local mobile” and “apple built in” to “Tap To Pay” in all SDK\nfunction names and error codes.\n\n## Links\n\n- [Design an\nintegration](https://docs.stripe.com/terminal/designing-integration)\n- [Save cards after payment\nglobally](https://docs.stripe.com/terminal/features/saving-cards/save-after-payment)\n- [Mail order and telephone\norder](https://docs.stripe.com/terminal/features/mail-telephone-orders/overview)\n- [reader auto-reconnect on unexpected\ndisconnects](https://docs.stripe.com/terminal/payments/connect-reader?terminal-sdk-platform=ios&reader-type=tap-to-pay#automatically-attempt-reconnection)\n- [SDK\nchangelog](https://github.com/stripe/stripe-terminal-ios/blob/master/CHANGELOG.md)\n-\n[setup_future_usage](https://stripe.dev/stripe-terminal-ios/docs/4.0.0/Classes/SCPPaymentIntent.html#/c:objc(cs)SCPPaymentIntent(py)setupFutureUsage)\n-\n[allow_redisplay](https://stripe.dev/stripe-terminal-ios/docs/Classes/SCPCollectConfiguration.html#/c:objc(cs)SCPCollectConfiguration(py)allowRedisplay)\n- [saving directly without\ncharging](https://docs.stripe.com/terminal/features/saving-cards/save-cards-directly)\n-\n[SCPConnectionStatus](https://stripe.dev/stripe-terminal-ios/docs/Enums/SCPConnectionStatus.html)\n-\n[discoverReaders](https://stripe.dev/stripe-terminal-ios/docs/Classes/SCPTerminal.html#/c:objc(cs)SCPTerminal(im)discoverReaders:delegate:completion:)\n-\n[SCPErrorCanceledDueToIntegrationError](https://stripe.dev/stripe-terminal-ios/docs/Errors.html#/c:@SCPErrorNewDiscoveryRequested)\n-\n[SCPDiscoveryDelegate](https://stripe.dev/stripe-terminal-ios/docs/Protocols/SCPDiscoveryDelegate.html)\n-\n[connectReader](https://stripe.dev/stripe-terminal-ios/docs/Classes/SCPTerminal.html#/c:objc(cs)SCPTerminal(im)connectReader:delegate:connectionConfig:completion:)\n-\n[SCPMobileReaderDelegate](https://stripe.dev/stripe-terminal-ios/docs/4.0.0/Protocols/SCPMobileReaderDelegate.html)\n-\n[SCPInternetReaderDelegate](https://stripe.dev/stripe-terminal-ios/docs/4.0.0/Reader.html#/c:objc(pl)SCPInternetReaderDelegate)\n-\n[SCPTapToPayReaderDelegate](https://stripe.dev/stripe-terminal-ios/docs/4.0.0/Protocols/SCPTapToPayReaderDelegate.html)\n- [connecting to a\nreader](https://docs.stripe.com/terminal/payments/connect-reader?terminal-sdk-platform=ios&reader-type=bluetooth#connect-reader)\n- [auto\nreconnection](https://docs.stripe.com/terminal/payments/connect-reader?terminal-sdk-platform=ios&reader-type=bluetooth#handle-disconnects)\n-\n[setAutoReconnectOnUnexpectedDisconnect](https://stripe.dev/stripe-terminal-ios/docs/Classes/SCPBluetoothConnectionConfigurationBuilder.html#/c:objc(cs)SCPBluetoothConnectionConfigurationBuilder(im)setAutoReconnectOnUnexpectedDisconnect:)\n-\n[SCPDisconnectReason](https://stripe.dev/stripe-terminal-ios/docs/Enums/SCPDisconnectReason.html)\n-\n[-readerDidFailReconnect:](https://stripe.dev/stripe-terminal-ios/docs/4.0.0/Protocols/SCPReaderDelegate.html#/c:objc(pl)SCPReaderDelegate(im)readerDidFailReconnect:)\n-\n[reader:didDisconnect:](https://stripe.dev/stripe-terminal-ios/docs/4.0.0/Protocols/SCPReaderDelegate.html#/c:objc(pl)SCPReaderDelegate(im)reader:didDisconnect:)\n- [handling disconnects\nmanually](https://docs.stripe.com/terminal/payments/connect-reader?terminal-sdk-platform=ios&reader-type=tap-to-pay#handle-the-disconnect-manually)\n-\n[BluetoothReaderDelegate](https://stripe.dev/stripe-terminal-ios/3.9.0/Protocols/SCPBluetoothReaderDelegate.html)\n-\n[MobileReaderDelegate](https://stripe.dev/stripe-terminal-ios/Protocols/SCPMobileReaderDelegate.html)",
  "metadata": {
    "title": "Terminal SDK migration guide | Stripe Documentation",
    "description": "Learn how to migrate to the latest version of the Stripe Terminal SDK.",
    "sourceURL": "https://docs.stripe.com/terminal/references/sdk-migration-guide"
  }
}