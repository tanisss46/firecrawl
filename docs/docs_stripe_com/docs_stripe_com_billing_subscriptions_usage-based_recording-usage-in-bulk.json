{
  "content": "# Record usage for billing using Amazon S3\n\n## Learn how to record usage events in bulk using an Amazon S3 storage bucket.\n\nYou must record usage in Stripe to bill your customers the correct amounts each\nbilling period. To record usage, you can send meter usage events to Stripe from\nyour Amazon S3 storage bucket. Stripe parses, validates, and transforms the\nusage data into meter events.\n\nAfter the events upload successfully, you can see them on your subscription\ninvoice.\n\n## Before you begin\n\nMake sure you have the following:\n\n- Admin account access to the [Stripe\nDashboard](https://dashboard.stripe.com/dashboard)\n- AWS account access to the [AWS Management\nConsole](https://console.aws.amazon.com/) and your S3 bucket\n[Upload meter usage\nevents](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage-in-bulk#upload-meter-usage-events)\nYou can upload your meter usage events as a CSV, JSON, or JSON Lines file.\n\n#### Need support for a different file format?\n\nIf you want to upload files with a different structure or in a custom format,\n[contact us](mailto:user-data-acquisition-platform@stripe.com).\n\n### File format and fields\n\nMake sure your file follows the sample file format:\n\nCSVJSONJSON Lines\n\n![Example of the CSV file\nformat](https://b.stripecdn.com/docs-statics-srv/assets/udap_ubb_csv_format.e5c12ef6a48b407ae9c0cf6c3b873aeb.png)\n\nCSV file format\n\nFollow the [Meter Event](https://docs.stripe.com/api/billing/meter-event/object)\nschema when including the following fields in your file:\n\nFieldDescription`identifier`A unique identifier for the event. If you don’t\nprovide one, Stripe can generate the unique identifier. We recommend using a\nglobally unique identifier.`timestamp`The time that the event occurred, measured\nin seconds since the Unix epoch.`event_name`The name of the meter event.\n`payload_columns`\n\nThe set of columns that contain key names for customer and numerical usage\nvalues:\n\n- `payload_stripe_customer_id`: The [Customer\nID](https://docs.stripe.com/api/customers/object#customer_object-id) that the\nevent gets created against.\n- `payload_value`: The numerical usage value of the meter event. By default, the\ncolumn name is `payload_value`. If you specified a different field name when\ncreating the meter event, you must update the column name to match the key\nvalue. For example, if you specify tokens in the `value_settings`, update the\ncolumn name to `payload_tokens`.\n[Prepare your files in Amazon\nS3](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage-in-bulk#prepare-files)\nYou can validate your connection configuration using well-formatted data in your\nS3 bucket. The configuration process shows the available files, and runs an\ninitial sync when configuring the connection.\n\n- Navigate to your [Amazon S3 console](https://s3.console.aws.amazon.com/).\n- Make sure to store your files in a designated S3 bucket that’s organized\naccording to your import preferences. If needed, follow the [AWS\nguidelines](https://docs.aws.amazon.com/AmazonS3/latest/userguide/creating-bucket.html)\nto create an S3 bucket.\n\nFor successful retrieval, Stripe requires that file names adhere to [S3 object\nnaming\nconventions](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html)\nand files are 1 GB maximum.\n- Remember the bucket name and region because you need them for future steps.\n- Keep your [AWS Management Console](https://console.aws.amazon.com/) open to\nconfigure an IAM role later.\n[Configure the Amazon S3 Connector to import\nfiles](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage-in-bulk#dashboard-ui)\nFirst, use the Stripe Dashboard to add the Amazon S3 Connector.\n\n- In the Stripe Dashboard, on the **Data management** >\n[Connectors](https://dashboard.stripe.com/data-management/connectors) tab, click\n**Add connector**.\n- In the **Choose connector** dialog, select **Amazon S3**.\n- In the **Requirements** dialog, enter a unique name for **Connector name**,\nthen click **Next**.\n- Complete the steps in the **Permissions** dialog.\n\nNext, configure the appropriate permissions for the Amazon S3 Connector.\n\n- In the AWS Management Console, navigate to the [IAM\nconsole](https://console.aws.amazon.com/iam/).\n- Create a custom trust policy:- In the navigation pane, click **Policies** >\n**Create policy**.\n- Select **JSON**, and replace the existing policy text by copying and pasting\nthe code block provided in the Stripe Dashboard.\n- In the `Resource` section of the **Policy editor** code block, replace\n`USER_TARGET_BUCKET` with your intended bucket name.\n- Click **Next**.\n- Under **Policy details**, add a policy name. Optionally add any tags.\n- Click **Create policy**.\n- Create a role:- In the navigation pane, click **Roles** > **Create role**.\n- Select **Custom trust policy**, and copy and paste the code block provided in\nthe Stripe Dashboard.\n- Click **Next**.\n- Locate and select the newly created permission policy to enable it, then click\n**Next**.\n- and paste the provided role name, then click **Create role** to create a\nrole name.\n\nThen, make sure to establish a connection between Stripe and your Amazon S3\nbucket.\n\n- In the AWS Management Console, do the following:- Provide your [AWS account\nID](https://docs.aws.amazon.com/accounts/latest/reference/manage-acct-identifiers.html#FindAccountId).\n- Provide the Bucket Name and Region.\n- If you use folders to organize your files in your Amazon S3 bucket, specify a\nfolder within the above bucket. We only fetch data from the specified folder,\nnot the entire bucket.\n- After you set up a new connector, the file preview validates that your\ncredentials connect Stripe with the expected Amazon S3 bucket and folder. Stripe\nfetches all data modified in the last 90 days. This occurs every 5 minutes for\nobjects with a `LastModified` date later than the last sync.\n- Preview the files available in the connected Amazon S3 bucket:- File names\nmust be under 255 characters and include the appropriate extension, such as\n`.csv`, `.json`, or `.jsonl`.\n- Initial and recurring imports have an expected file format:- JSON files have\n**Billing Meter Event Transaction Template - JSON**.\n- JSON Lines files have **Billing Meter Event Transaction Template - JSONLINE**.\n- CSV files have **Billing Meter Event Transaction Template - CSV**.\n- To create an active data connection and initiate the data import, click\n**Done**.\n\nAfter you upload a file to the Amazon S3 Connector, the usage events update\nwithin 5 minutes. This might take longer if your bucket contains a lot of\nunprocessed files.\n\nYou can check the status and details of processed files on the [Import\nset](https://dashboard.stripe.com/data-management/import-set) tab in the Stripe\nDashboard.\n\n## Rate limits\n\nYou can upload any number of files and records to your Amazon S3 bucket. Upload\na file every 10 seconds or when the current file reaches one million records,\nwhichever comes first. After upload, you can add events in a new file.\n\nAvoid creating empty files, such as:\n\n- CSV files that contain only the header row\n- JSON files that contain only [] (empty square brackets)\n- JSON Lines files that contain only {} (empty curly brackets)\n\nAlthough Amazon S3 accepts non-zero byte files, they increase the object and\nfile count, which might cause delays in the polling of files.\n\nAmazon S3 polls a maximum of 50 files or up to 10 GB of data, and processes your\nuploaded data at a rate of 10,000 events per second. If you upload large files\nor a high volume of files, Stripe polls and processes the data to maintain this\nthroughput rate.\n\nFor example, if you upload 100 files that each contain 100,000 records daily, it\ncan take approximately 17 minutes to process the entire dataset (10 million\nevents).\n\n## Report and handle errors\n\nStripe polls the files that you upload to the Amazon S3 bucket and then\nprocesses these files asynchronously. If we detect errors during processing,\nStripe notifies you using [events](https://dashboard.stripe.com/events).\n\n### Format issues\n\nInvalid file or record format errors occur when the contents in the uploaded\nfile contain formatting or data issues.\n\nYou can subscribe to these events using a [webhook\nendpoint](https://dashboard.stripe.com/webhooks). Based on the event type, you\ncan implement your own logic to handle these errors.\n\nEventDescriptionPayload type`data_management.import_set.failed`Stripe creates a\n[data_management.import_set.failed](https://docs.stripe.com/api/events/types#event_types-data_management.import_set.failed)\nevent when processing fails for an entire file. For example, if you omit a\nmandatory column, such as `event_name`. You can find the reason for failure in\nthe `failed_reason` parameter of the event, and fix it before\nre-uploading.`Snapshot`\n`data_management.import_set.succeeded`\n\nStripe creates a\n[data_management.import_set.succeeded](https://docs.stripe.com/api/events/types#event_types-data_management.import_set.succeeded)\nevent when individual records fail in a partially processed file. For example,\nif you omit a value for a mandatory field, such as `stripe_customer_id` or\n`event_name`.\n\nYou can find details of the failed records in the `status` parameter of the\nevent. A `succeeded_with_errors` status indicates that at least one record\nfailed because of invalid formatting. The `result.errors` gives the number of\nrecords that failed and the `file_id` of the file containing the failed records.\n\nUse the [Files](https://docs.stripe.com/file-upload#download-file-contents) API\nto download a complete list of the failed records and detailed error\ndescriptions.\n\n`Snapshot`\n\n### Data issues\n\nFiles with correct formatting can fail processing because of invalid data within\nthe file, such as incorrect values for the `event_name` or `stripe_customer_id`.\n\nFor detailed information about these failures, you can subscribe to the\nfollowing events using a [webhook\nendpoint](https://dashboard.stripe.com/webhooks).\n\nEventDescriptionPayload type`v1.billing.meter.error_report_triggered`This event\noccurs when a meter has invalid usage\nevents.`thin``v1.billing.meter.no_meter_found`This event occurs when usage\nevents have missing or invalid meter IDs.`thin`\n#### Warning\n\nTo create an event destination that subscribes to thin events, enable Workbench\nin your [Developer settings](https://dashboard.stripe.com/settings/developers).\n\n### Example payloads\n\nExample error report eventExample error event for an incorrect meter\nThe following is an example payload for a\n`v1.billing.meter.error_report_triggered` event.\n\n```\n{\n \"id\": \"evt_test_65R2GpwDsnmpzihMjdT16R2GDhI4SQdXJGRbvn7JA8mPEm\",\n \"object\": \"v2.core.event\",\n \"created\": \"2024-08-28T20:54:12.051Z\",\n \"data\": {\n \"developer_message_summary\": \"There is 1 invalid event\",\n \"reason\": {\n \"error_count\": 1,\n \"error_types\": [\n {\n```\n\nSee all 35 lines\n### Error codes\n\nThe `reason.error_types.code` provides the error categorization that triggered\nthe error. Possible error codes include:\n\n- `meter_event_customer_not_found`\n- `meter_event_no_customer_defined`\n- `meter_event_dimension_count_too_high`\n- `archived_meter`\n- `timestamp_too_far_in_past`\n- `timestamp_in_future`\n- `meter_event_value_not_found`\n- `meter_event_invalid_value`\n- `no_meter` (supported only for the `v1.billing.meter.no_meter_found` event\ntype)\n\n### Listen to events\n\nYou can listen to events by setting up an [event\ndestination](https://docs.stripe.com/event-destinations).\n\n- On the [Event destinations](https://dashboard.stripe.com/webhooks) tab in\nWorkbench, click **Create new destination**. Alternatively, use this\n[template](https://dashboard.stripe.com/webhooks/create?payload_style=thin&events=v1.billing.meter.error_report_triggered%2Cv1.billing.meter.no_meter_found)\nto configure a new destination in Workbench with the two event types\npre-selected.\n- Click **Show advanced options**, then select the **Thin** payload style.\n- Select `v1.billing.meter.error_report_triggered` and\n`v1.billing.meter.no_meter_found` from the list of events.\n- Create a handler to process the event.\n\n```\nimport os\nfrom stripe import StripeClient\nfrom stripe.events import V1BillingMeterErrorReportTriggeredEvent\n\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\napi_key = os.environ.get('STRIPE_API_KEY')\nwebhook_secret = os.environ.get('WEBHOOK_SECRET')\n\n```\n\nSee all 35 lines\n- Test your handler by configuring a [local\nlistener](https://docs.stripe.com/cli/listen) with the [Stripe\nCLI](https://docs.stripe.com/stripe-cli) to send events to your local machine\nfor testing before deploying the handler to production. Use the\n`--forward-thin-to` flag to specify which URL to forward the `thin` events to\nand the `--thin-events` flag to specify which thin events to forward to your\napplication. You can forward all thin events with an asterisk (`*`), or a subset\nof thin events.\n\n```\n$ stripe listen --forward-thin-to localhost:4242/webhooks --thin-events \"*\"\n\n```\n- Trigger test events to your handler. Use the [trigger\nfunction](https://docs.stripe.com/cli/trigger) to run the following commands,\nwhich simulates the respective events in your account for testing.\n\n```\n$ stripe trigger v1.billing.meter.error_report_triggered --api-key\n<your-secret-key>\n$ stripe trigger v1.billing.meter.no_meter_found --api-key <your-secret-key>\n\n```\n- If you process events with a webhook endpoint, [verify the webhook\nsignatures](https://docs.stripe.com/webhooks#verify-official-libraries) to\nsecure your endpoint and validate all requests are from Stripe.\n- Correct the invalid events and save them to a new file. Then, upload the file\nto your Amazon S3 bucket for processing.\n\n## Links\n\n- [Stripe Dashboard](https://dashboard.stripe.com/dashboard)\n- [AWS Management Console](https://console.aws.amazon.com/)\n- [Meter Event](https://docs.stripe.com/api/billing/meter-event/object)\n- [Customer ID](https://docs.stripe.com/api/customers/object#customer_object-id)\n- [Amazon S3 console](https://s3.console.aws.amazon.com/)\n- [AWS\nguidelines](https://docs.aws.amazon.com/AmazonS3/latest/userguide/creating-bucket.html)\n- [S3 object naming\nconventions](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html)\n- [AWS Management Console](https://console.aws.amazon.com)\n- [Connectors](https://dashboard.stripe.com/data-management/connectors)\n- [IAM console](https://console.aws.amazon.com/iam/)\n- [AWS account\nID](https://docs.aws.amazon.com/accounts/latest/reference/manage-acct-identifiers.html#FindAccountId)\n- [Import set](https://dashboard.stripe.com/data-management/import-set)\n- [Contact sales](https://stripe.com/contact/sales)\n- [events](https://dashboard.stripe.com/events)\n- [webhook endpoint](https://dashboard.stripe.com/webhooks)\n-\n[data_management.import_set.failed](https://docs.stripe.com/api/events/types#event_types-data_management.import_set.failed)\n-\n[data_management.import_set.succeeded](https://docs.stripe.com/api/events/types#event_types-data_management.import_set.succeeded)\n- [Files](https://docs.stripe.com/file-upload#download-file-contents)\n- [Developer settings](https://dashboard.stripe.com/settings/developers)\n- [event destination](https://docs.stripe.com/event-destinations)\n-\n[template](https://dashboard.stripe.com/webhooks/create?payload_style=thin&events=v1.billing.meter.error_report_triggered%2Cv1.billing.meter.no_meter_found)\n- [local listener](https://docs.stripe.com/cli/listen)\n- [Stripe CLI](https://docs.stripe.com/stripe-cli)\n- [trigger function](https://docs.stripe.com/cli/trigger)\n- [verify the webhook\nsignatures](https://docs.stripe.com/webhooks#verify-official-libraries)",
  "metadata": {
    "title": "Record usage for billing using Amazon S3 | Stripe Documentation",
    "description": "Learn how to record usage events in bulk using an Amazon S3 storage bucket.",
    "sourceURL": "https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage-in-bulk"
  }
}