{
  "content": "# Record usage for billingLegacy\n\n## Learn how to record and report usage for your customers.\n\n#### Note\n\nWe’ve updated the way usage-based billing works. See the [updated usage-based\nbilling docs](https://docs.stripe.com/billing/subscriptions/usage-based).\n\nLearn how to\n[migrate](https://docs.stripe.com/billing/subscriptions/usage-based-legacy/migration-guide).\n\nThroughout each billing period, you need to report usage to Stripe so that\ncustomers are billed the correct amounts. You can maintain your own system for\nrecording customer usage and provide usage information for subscriptions to\nStripe.\n\nYou can share usage information with Stripe by creating [usage\nrecords](https://docs.stripe.com/api#usage_record_create) with a subscription\nitem, quantity used, and a timestamp. How often you report usage is up to you.\nFor example, you can run the code on an interval (for example, every 24 hours)\nfor each active metered subscription. At the end of the billing period, Stripe\nautomatically calculates the total price and\n[invoices](https://docs.stripe.com/billing/invoices/subscription) for all usage\nduring the billing period.\n\n```\ncurl\nhttps://api.stripe.com/v1/subscription_items/{{SUBSCRIPTION_ITEM_ID}}/usage_records\n\\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -X POST \\\n -d quantity=100 \\\n -d timestamp=1741539399 \\\n -d action=increment\n```\n\n## Best practices for recording usage\n\n- You need to write some of your own business logic before creating the usage\nrecord. Pull a record of a customer from your database and extract the\ncustomer’s Stripe subscription item ID and usage for the day. If you aren’t\nstoring subscription item IDs, retrieve the subscription and check for\n[subscription\nitems](https://docs.stripe.com/api/subscriptions/object#subscription_object-items).\n- Use [idempotency keys](https://docs.stripe.com/api/idempotent_requests) to\nensure usage isn’t reported more than once in case of latency or other issues.\n- The `timestamp` has to be within the current billing period, otherwise the\ncall fails.\n- The default value for the `action` parameter is `increment`. This value\nassumes that the price is configured with `aggregate_usage=sum` and that you\nwrite usage as it occurs, passing it to Stripe with the current `timestamp`.\n- A `set` value for the `action` parameter supports the case where you aggregate\nusage yourself, and configure the price with\n`aggregate_usage=last_during_period` or `aggregate_usage=last_ever`.\n- The usage reporting endpoint is rate-limited, and the Stripe API has a rate\nlimit of 100 calls per second per account. We can increase this to 200 calls per\nsecond per account, on request. If you have a service that you expect to exceed\nthis limit, consider “bundling” your product into amounts. For example, if you\ncharge per 1000 requests, consider basing your product on “per 1000\ntransactions” and send 1 usage record per 1000.\n\n### Clock drift\n\nReporting usage outside of the current billing period results in an error. To\naccount for clock drift between your server and Stripe’s systems, we provide a\nshort grace period in the default aggregation mode (`aggregate_usage` = `sum`).\nFor all other aggregation modes, the `timestamp` must be within the current\nperiod.\n\nDuring the first few minutes of each billing period, you can report usage that\noccurred within the last few minutes of the previous period. If the invoice for\nthe previous period isn’t finalized, we add that usage to it. Otherwise, we bill\nthat usage in the current period. After the grace period, you can’t report usage\nfrom the previous billing period.\n\nDon’t rely on the grace period for reporting usage outside of a billing period.\nIt’s intended only to account for possible clock drift, and we don’t guarantee\nit.\n\n## Retrieve current usage\n\nTo retrieve total usage for the current period, you can [retrieve the upcoming\ninvoice](https://docs.stripe.com/api#upcoming_invoice) for the subscription. The\nusage is reflected as the `quantity` of the [invoice\nitem](https://docs.stripe.com/api#invoiceitems) for a `subscription_item`. The\ntotal usage value may not be the most up-to-date quantity because slight\nprocessing delays can occur.\n\n```\ncurl -G https://api.stripe.com/v1/invoices/upcoming \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d subscription={{SUBSCRIPTION_ID}}\n```\n\n## Links\n\n- [updated usage-based billing\ndocs](https://docs.stripe.com/billing/subscriptions/usage-based)\n-\n[migrate](https://docs.stripe.com/billing/subscriptions/usage-based-legacy/migration-guide)\n- [usage records](https://docs.stripe.com/api#usage_record_create)\n- [invoices](https://docs.stripe.com/billing/invoices/subscription)\n- [subscription\nitems](https://docs.stripe.com/api/subscriptions/object#subscription_object-items)\n- [idempotency keys](https://docs.stripe.com/api/idempotent_requests)\n- [retrieve the upcoming invoice](https://docs.stripe.com/api#upcoming_invoice)\n- [invoice item](https://docs.stripe.com/api#invoiceitems)",
  "metadata": {
    "title": "Record usage for billing | Stripe Documentation",
    "description": "Learn how to record and report usage for your customers.",
    "sourceURL": "https://docs.stripe.com/billing/subscriptions/usage-based-legacy/recording-usage"
  }
}