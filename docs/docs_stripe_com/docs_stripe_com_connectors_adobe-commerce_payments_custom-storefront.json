{
  "content": "# Build a custom storefront\n\n## Learn how to build a custom storefront that supports Stripe payment features.\n\nAdobe Commerce can operate as a headless commerce platform that’s decoupled from\nits storefront. You can use the REST API or GraphQL API to build custom\nstorefronts, such as progressive web apps (PWA), mobile apps, or frontends based\non React, Vue, or other frameworks.\n\nThe Stripe module extends the REST API and GraphQL API by:\n\n- Setting payment method tokens during order placement\n- Performing 3D Secure customer authentication\n- Managing customers’ saved payment methods\n\nThe Stripe module uses the REST API on the checkout page. You can find examples\nof how to use the API in the Stripe module directory under the\n`resources/examples/` subdirectory. This guide uses the GraphQL API to build a\ncustom storefront.\n\n[Retrieve initialization\nparameters](https://docs.stripe.com/connectors/adobe-commerce/payments/custom-storefront#retrieve-initialization-parameters)\nTo initialize Stripe.js and the payment form on the front end, you need the\nStripe [publishable API key](https://docs.stripe.com/keys#obtain-api-keys) that\nyou configured in the admin area. You can retrieve the key and other\ninitialization parameters using the following GraphQL mutation:\n\n```\nquery {\ngetStripeConfiguration {\n\tapiKey\n\t\tlocale\n\t\tappInfo\n\t\toptions {\n\t\t\tbetas\n\t\t\tapiVersion\n\t\t}\n\telementsOptions\n\t}\n}\n\n```\n\n[Tokenize a payment method during the checkout\nflow](https://docs.stripe.com/connectors/adobe-commerce/payments/custom-storefront#tokenize-payment-method)\nYou can use the\n[PaymentElement](https://docs.stripe.com/payments/payment-element) to collect a\npayment method from the customer during checkout. After the customer provides\ntheir payment method details and clicks **Place Order**, you can tokenize the\npayment method and use it to place the order. Calling `createPaymentMethod`\n[generates a payment method\ntoken](https://docs.stripe.com/payments/finalize-payments-on-the-server-legacy?type=payment#create-pm)\nfrom the details provided in the `PaymentElement`.\n\n```\nvar stripe = Stripe(API_PUBLISHABLE_KEY);\n\nvar options = {\n mode: 'payment',\n amount: 1099,\n currency: 'eur'\n};\n\nvar elements = stripe.elements(options);\nvar paymentElement = elements.create('payment');\npaymentElement.mount('#payment-element');\n\nvar placeOrder = function()\n{\n elements.submit().then(function()\n {\n stripe.createPaymentMethod({\n elements: elements,\n params: {\n billing_details: {\n name: 'Jenny Rosen'\n }\n }\n }).then(function(result)\n {\n if (result && result.paymentMethod)\n {\n // Success\n }\n });\n });\n}\n\n```\n\n[Pass the tokenized payment\nmethod](https://docs.stripe.com/connectors/adobe-commerce/payments/custom-storefront#pass-tokenized-payment-method)\nAfter you obtain a payment method token, you must call `setPaymentMethodOnCart`\nto [set the payment\nmethod](https://developer.adobe.com/commerce/webapi/graphql/tutorials/checkout/set-payment-method/#set-payment-method-on-cart)\non the order.\n\n```\nmutation {\n setPaymentMethodOnCart(input: {\n cart_id: \"CART_ID\"\n payment_method: {\n code: \"stripe_payments\"\n stripe_payments: {\n payment_method: \"PAYMENT_METHOD_ID\"\n save_payment_method: true\n }\n }\n }) {\n cart {\n selected_payment_method {\n code\n }\n }\n }\n}\n\n```\n\nUse the following parameters for `setPaymentMethodOnCart`:\n\nParameterTypeDescription`payment_method`StringUse this parameter to pass the\ntokenized payment method ID. You can also pass saved payment method tokens when\na customer chooses a saved payment method during\ncheckout.`save_payment_method`BooleanSpecify whether or not to save the payment\nmethod.`cvc_token`StringIf CVC is enabled for saved cards, use this parameter to\npass the CVC token and perform verification.[Place the\norder](https://docs.stripe.com/connectors/adobe-commerce/payments/custom-storefront#place-order)\nAfter you set the payment method token, you can use the Adobe Commerce\n`placeOrder` mutation to place an order:\n\n```\nmutation {\n placeOrder(input: {cart_id: \"CART_ID\"}) {\n order {\n order_number\n client_secret\n }\n }\n}\n\n```\n\nThe example above requests a `client_secret`, which isn’t a default `placeOrder`\nmutation parameter. The Stripe module adds this parameter for you to use after\nthe order is placed to finalize details specific to the selected payment method.\nYou can finalize payment with the `stripe.handleNextAction(client_secret)`\nmethod. Options include performing an inline 3D Secure authentication for cards,\ndisplaying a printable voucher for certain payment methods, or redirecting the\ncustomer externally for authentication.\n\n## Order placement flow\n\nPayment methods of type `card` or `link` that require 3D Secure (3DS) customer\nauthentication go through the following process:\n\n- The order is placed in `Pending Payment` status.\n- The client secret is passed to the front end to perform the authentication.\n- After successful authentication, payment is collected client-side, and the\ncustomer is redirected to the order success page.\n- A `charge.succeeded` webhook event arrives at your website on the server side.\n- The module handles the event and changes the order status from `Payment\nPending` to `processing`.\n\nThat procedure is the default for GraphQL, but not for the REST API. With the\nREST API, if customer authentication is required, the order placement fails with\nan `Authentication Required: client_secret` error. You must authenticate the\npayment using the `client_secret`, and the order placement must be attempted\nagain following successful authentication. This approach’s advantage is that\ninventory isn’t held until the payment is successful. To employ this procedure\nwith GraphQL, edit the module’s `etc/config.xml` file by adding `card` and\n`link` under the `<graphql_api>` node:\n\n```\n<manual_authentication>\n <rest_api>card,link</rest_api>\n <graphql_api>card,link</graphql_api>\n</manual_authentication>\n\n```\n\n## Retrieve saved payment methods\n\nYou can use `listStripePaymentMethods` to retrieve a list of saved payment\nmethods for a customer in an active checkout session.\n\n```\nmutation {\n listStripePaymentMethods {\n id\n created\n type\n fingerprint\n label\n icon\n cvc\n brand\n exp_month\n exp_year\n }\n}\n\n```\n\n## Save a payment method\n\nYou can use `addStripePaymentMethod` to save payment methods to a customer’s\naccount. The `payment_method` parameter is the tokenized payment method ID. The\ntokenization process is similar to the tokenization process during the checkout\nflow.\n\n```\nmutation {\n addStripePaymentMethod(\n input: {\n payment_method: \"PAYMENT_METHOD_ID\"\n }\n ) {\n id\n created\n type\n fingerprint\n label\n icon\n cvc\n brand\n exp_month\n exp_year\n }\n}\n\n```\n\n## Delete a saved payment method\n\nYou can use `deleteStripePaymentMethod` to allow customers to delete saved\npayment methods from their account.\n\nFor most use cases, we recommend passing a payment method fingerprint, which\ndeletes all payment methods that match the fingerprint. The\n`listStripePaymentMethods` mutation automatically removes duplicates before\nreturning recently added payment methods that match a specific fingerprint. But\nif you only delete a payment method by ID, the results of\n`listStripePaymentMethods` might include an older saved payment method with the\nsame fingerprint.\n\n```\nmutation {\n deleteStripePaymentMethod(\n input: {\n payment_method: \"paste a payment method ID here\"\n fingerprint: null\n }\n )\n}\n\n```\n\n## See also\n\n- [SetupIntents API](https://docs.stripe.com/payments/setup-intents)\n- [Use the Adobe Commerce admin\npanel](https://docs.stripe.com/connectors/adobe-commerce/payments/admin)\n-\n[Troubleshooting](https://docs.stripe.com/connectors/adobe-commerce/payments/troubleshooting)\n\n## Links\n\n- [publishable API key](https://docs.stripe.com/keys#obtain-api-keys)\n- [PaymentElement](https://docs.stripe.com/payments/payment-element)\n- [generates a payment method\ntoken](https://docs.stripe.com/payments/finalize-payments-on-the-server-legacy?type=payment#create-pm)\n- [set the payment\nmethod](https://developer.adobe.com/commerce/webapi/graphql/tutorials/checkout/set-payment-method/#set-payment-method-on-cart)\n- [SetupIntents API](https://docs.stripe.com/payments/setup-intents)\n- [Use the Adobe Commerce admin\npanel](https://docs.stripe.com/connectors/adobe-commerce/payments/admin)\n-\n[Troubleshooting](https://docs.stripe.com/connectors/adobe-commerce/payments/troubleshooting)",
  "metadata": {
    "title": "Build a custom storefront | Stripe Documentation",
    "description": "Learn how to build a custom storefront that supports Stripe payment features.",
    "sourceURL": "https://docs.stripe.com/connectors/adobe-commerce/payments/custom-storefront"
  }
}