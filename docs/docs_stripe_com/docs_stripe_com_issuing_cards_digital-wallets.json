{
  "content": "# Use digital wallets with Issuing\n\n## Learn how to use Issuing to add cards to digital wallets.\n\nIssuing allows users to add cards to digital wallets like Apple Pay and Google\nPay. Stripe supports the addition of cards through two methods:\n\n- **Manual Provisioning:** cardholders enter their card details into a phone’s\nwallet application to add it to their digital wallets.\n- **Push Provisioning:** mobile applications allow users to add cards to their\ndigital wallets straight from the app.\n\nWhen a card is added to a digital wallet, a tokenized representation of that\ncard is created. Network tokens are managed separately from cards. For more\ninformation about network tokens and how they work, see [Token\nManagement](https://docs.stripe.com/issuing/controls/token-management).\n\n## Manual Provisioning\n\nCardholders can add Stripe Issuing [virtual\ncards](https://docs.stripe.com/issuing/cards/virtual) and [physical\ncards](https://docs.stripe.com/issuing/cards/physical) to their Apple Pay,\nGoogle Pay, and Samsung Pay wallets through manual provisioning.\n\nTo do so, cardholders open the wallet app on their phone and enter their card\ndetails. Stripe then sends a 6-digit verification code to the `phone_number` or\n`email` of the cardholder associated with the card.\n\nA *card not supported* error displays if neither field is set on the cardholder\nwhen the card was provisioned.\n\nNo code is required to implement manual provisioning, but the process to set it\nup can vary depending on the digital wallet provider and the country you’re\nbased in:\n\n### US\n\nApple Pay wallets require approval from Apple. Check your [digital wallets\nsettings](https://dashboard.stripe.com/settings/issuing/digital-wallets) to view\nthe status of Apple Pay in your account. You might need to submit an application\nbefore using Apple Pay.\n\nGoogle Pay and Samsung Pay have no additional required steps.\n\n### EU/UK\n\nDigital wallet integrations require additional approval from the Stripe\npartnership team. Get in touch with your account representative or [contact\nStripe](https://stripe.com/contact/sales) for more information.\n\nApple Pay wallets require additional approval. Check your [digital wallets\nsettings](https://dashboard.stripe.com/settings/issuing/digital-wallets) to view\nthe status of Apple Pay in your account. You might need to submit an application\nbefore using Apple Pay.\n\n## Push Provisioning\n\nWith push provisioning, cardholders can add their Stripe Issuing cards to their\ndigital wallets using your app, by pressing an “add to wallet” button like the\nones shown below.\n\nUsers must first complete manual provisioning steps in order to enable push\nprovisioning in the US. In addition to manual provisioning approval, push\nprovisioning requires you to integrate with the Stripe SDK.\n\nThis requires both approval processes through Stripe and code integration with\nthe Stripe SDK for each platform you wish to support push provisioning on.\nPlatform approvals cascade down to all of their connected accounts.\n\nSamsung Pay push provisioning isn’t supported with our SDKs.\n\niOSAndroidReact Native\n\n![A white UI button that says Add to G Pay. The G has Google's colors of red,\nyellow, green, and\nblue.](https://b.stripecdn.com/docs-statics-srv/assets/add_to_google_pay.749ba35cf98e7dc87dac0108ea7f688a.png)\n\n[Request\nAccess](https://docs.stripe.com/issuing/cards/digital-wallets#request-access)\nStripe provides an SDK wrapper around a private Google library for push\nprovisioning. To distribute your app on the Google Pay Store with push\nprovisioning you need to:\n\n- [Request access to Google\nPay](https://developers.google.com/pay/issuers/requesting-access?api=true).\nAfter you complete the form, expect approval within a few hours to a day.\n- After receiving approval, download Google’s [TapAndPay private\nSDK](https://developers.google.com/pay/issuers/apis/push-provisioning/android/releases).\nThe most recently tested version of the TapAndPay SDK is version 18.\n- [Request access to the push provisioning\nAPI](https://support.google.com/faqs/contact/pp_api_allowlist) for your app. You\nmust provide your [application\nID](https://developer.android.com/studio/build/application-id) to be added to\nGoogle’s allowlist. Details on this process are available in Google’s\n[documentation](https://developers.google.com/pay/issuers/apis/push-provisioning/android/allowlist).\nAfter the process is complete, Google grants push provisioning entitlements.\n- After Google has granted push provisioning entitlements, [contact\nStripe](mailto:support-issuing@stripe.com) with your application name and\napplication ID to complete this step.\n[Update your\nappClient-side](https://docs.stripe.com/issuing/cards/digital-wallets#update-your-app)-\nImport Google’s [private\nSDK](https://developers.google.com/pay/issuers/apis/push-provisioning/android/setup).\n- Import Stripe’s SDK.\n\n```\ndependencies {\n [... your dependencies]\n implementation 'com.stripe:stripe-android-issuing-push-provisioning:1.2.2'\n}\n```\n\nFor more context, see the code snippets and references to the sample app at each\nstep. For this step, see how the [sample\napp](https://github.com/stripe-samples/push-provisioning-samples/blob/main/client/android/app/build.gradle.kts#L111-L118)\nimports these SDKs.\n\n- Prepare your backend to create ephemeral keys for your cards. [See section\nbelow](https://docs.stripe.com/issuing/cards/digital-wallets#backend-changes).\n- Create an `EphemeralKeyProvider` that extends\n`PushProvisioningEphemeralKeyProvider`. As the ephemeral key provider will be\npassed to another activity, it also needs to implement `Parcelable` (see\n[Parcelable](https://developer.android.com/reference/android/os/Parcelable)).\nFor more context, see how the [sample\napp](https://github.com/stripe-samples/push-provisioning-samples/blob/main/client/android/app/src/main/java/com/stripe/android/pushprovisioning/network/BackendPushProvisioningEphemeralKeyProvider.kt#L20-L43)\ndefines its `EphemeralKeyProvider`.\n- Implement the **Add to Google Pay** button [according to Google’s\nspecifications](https://developers.google.com/pay/issuers/apis/push-provisioning/android/branding-guidelines).\nThe [sample\napp](https://github.com/stripe-samples/push-provisioning-samples/blob/main/client/android/app/src/main/res/layout/card_picker_item.xml#L19-L25)\nprovides an example of the button adhering to branding guidelines.\n\n#### Caution\n\nAs\n[recommended](https://developers.google.com/pay/issuers/apis/push-provisioning/android/faq#implementation_questions)\nby Google, don’t require your users to install the Google Pay app, or check its\nexistence programmatically. The app is only a frontend and you don’t need it for\nGoogle Pay to work. Users can manage their cards from within their Google\nsettings in the “Settings” app.\n\n#### Caution\n\nGoogle requires that the **Add to Google Pay** button only displays when a card\ndoesn’t already exist on the user’s device, and that users with cards pending\nverification complete the final guided activation process. Use Google’s [list of\ncheckpoints](https://developers.google.com/pay/issuers/apis/push-provisioning/android/test-cases)\nto help you verify that your implementation is correct.\n\nTo check the status of your users’ cards, use\n[listTokens()](https://developers.google.com/pay/issuers/apis/push-provisioning/android/reading-wallet#listtokens)\nto retrieve a list of all of your cards already present on the device. Compare\nthe value of `getFpanLastFour()` on each returned object to Stripe’s\n[last4](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-last4))\nproperty of the [Issued Card\nobject](https://docs.stripe.com/api/issuing/cards/object) for the card you want\nto add. Discard all non-matching objects from the response list.\n\n- If the resulting list is empty, it means that the card you intend to add isn’t\npresent on the device yet. You can proceed with displaying the button as\ndescribed below.\n- If the resulting list contains a `TokenInfo` object, check its\n[TokenState](https://developers.google.com/pay/issuers/apis/push-provisioning/android/enumerated-values#token_status)\nby invoking `getTokenState()`.- If the status is\n`TOKEN_STATE_NEEDS_IDENTITY_VERIFICATION`, your user has already attempted to\nmanually add the given card to their device. Display the **Add to Google Pay**\nbutton, but help them to recover from this situation by wiring the\n`onActivityResult` listener to the `tokenize()` method as [outlined in Google’s\ndocumentation](https://developers.google.com/pay/issuers/apis/push-provisioning/android/wallet-operations#resolving_yellow_path).\n- If the status is anything else, the card is already present on the device.\n**Do not display a Google Pay button.**\n\nMake sure to provide your application ID to Stripe before starting internal\ntesting. Setup can take more than a week, and the consequences of an incomplete\nsetup include receiving inconsistent responses to these two methods. The result\nof `listTokens()` **only contains cards added after** Stripe completes the\nsetup.\n\n- When a user taps the button, launch Stripe’s `PushProvisioningActivity` using\nthe `PushProvisioningActivityStarter`.\n\n```\nnew PushProvisioningActivityStarter(\nthis, // The Activity or Fragment you are initiating the push provisioning from\n new PushProvisioningActivityStarter.Args(\n \"Stripe Card\", // The name that will appear on the push provisioning UI\n ephemeralKeyProvider, // Your instance of EphemeralKeyProvider\n false // If you want to enable logs or not\n)).startForResult();\n```\n\nFor more context, see how the [sample\napp](https://github.com/stripe-samples/push-provisioning-samples/blob/main/client/android/app/src/main/java/com/stripe/android/pushprovisioning/MainActivity.kt#L119-L124)\nlaunches `PushProvisioningActivity`.\n\nThis prepares the push provisioning and launches the UI to add the card to the\nwallet. Implement the callback in your `onActivityResult`.\n\n```\nprotected void onActivityResult(int requestCode, int resultCode, @Nullable\nIntent data) {\n if (requestCode == PushProvisioningActivityStarter.REQUEST_CODE) {\n if (resultCode == PushProvisioningActivity.RESULT_OK) {\nPushProvisioningActivityStarter.Result success =\nPushProvisioningActivityStarter.Result.fromIntent(data);\n } else if (resultCode == PushProvisioningActivity.RESULT_ERROR) {\nPushProvisioningActivityStarter.Error error =\nPushProvisioningActivityStarter.Error.fromIntent(data);\n }\n }\n}\n```\n\nFor more context, see how the [sample\napp](https://github.com/stripe-samples/push-provisioning-samples/blob/main/client/android/app/src/main/java/com/stripe/android/pushprovisioning/MainActivity.kt#L132-L167)\nimplements `onActivityResult`.\n\nIf the provisioning was successful, you’ll receive a\n`PushProvisioningActivityStarter.Result` containing a `cardTokenId` which is\nGoogle’s ID for the card in the active wallet. You can use the rest of the\nwallet functions with this ID.\n\nIf the provisioning encountered an error, a\n`PushProvisioningActivityStarter.Error` will be returned with a `code` and a\n`message`. The `message` is a developer-friendly text explaining the error. The\n`code` can have the following values:\n\nEnumMeaningUSER_CANCELEDThe user canceled the provisioning.CARD_CANCELEDThe card\nhas been canceled or is lost or stolen and cannot be\nprovisioned.EPHEMERAL_KEY_ERRORThere was an error retrieving the ephemeral\nkey.TAP_AND_PAY_UNAVAILABLEThe TapAndPay library can’t be used, most likely\nbecause the app isn’t added to an allowlist.NO_STABLE_HARDWARE_IDThis can happen\nin the development emulator. The app can’t retrieve the stable hardware\nID.NO_ACTIVE_WALLET_FOUNDNo active wallet available. Note that emulators\ngenerally don’t have Google Pay.PUSH_PROVISIONING_ENCRYPTED_PAYLOAD_ERRORThere\nwas an error contacting Stripe’s servers to get the encrypted payload for push\nprovisioning.UNKNOWN_ERRORAn unexpected error occurred. The `message` will have\nadditional information.[Update your\nbackendServer-side](https://docs.stripe.com/issuing/cards/digital-wallets#update-your-backend)\nThe push provisioning implementation exposes methods that expect you to\ncommunicate with your own backend to create a Stripe Ephemeral Key and return a\nJSON of it to your app. This key is a short-lived API credential that you can\nuse to retrieve the encrypted card details for a single instance of a card\nobject.\n\nTo make sure that the object returned by the Stripe API is compatible with the\nversion of the iOS or Android SDK you’re using, the Stripe SDK lets you know\nwhat API version it prefers. You must explicitly pass this API version to our\nAPI when creating the key.\n\n```\ncurl https://api.stripe.com/v1/ephemeral_keys \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"issuing_card\"=\"{{ISSUING_CARD_ID}}\" \\\n -H \"Stripe-Version: {{API_VERSION}}\"\n```\n\n```\n{\n \"id\": \"ephkey_1G4V6eEEs6YsaMZ2P1diLWdj\",\n \"object\": \"ephemeral_key\",\n \"associated_objects\": [\n {\n \"id\": \"ic_1GWQp6EESaYspYZ9uSEZOcq9\",\n \"type\": \"issuing.card\"\n }\n ],\n \"created\": 1586556828,\n \"expires\": 1586560428,\n \"livemode\": false,\n\"secret\":\n\"ek_test_YWNjdF8xRmdlTjZFRHelWWxwWVo5LEtLWFk0amJ2N0JOa0htU1JzEZkd2RpYkpJdnM_00z2ftxCGG\"\n}\n```\n\nFor more context, see how the [sample\nbackend](https://github.com/stripe-samples/push-provisioning-samples/blob/main/server/ruby/README.md)\ncreates a [Stripe Ephemeral\nKey](https://github.com/stripe-samples/push-provisioning-samples/blob/main/server/ruby/server.rb#L68-L88).\n\n[Testing](https://docs.stripe.com/issuing/cards/digital-wallets#testapp)\nAll testing must be done in live mode, with live Issuing cards, and on physical\ndevices.\n\nTo build the sample app, follow the steps in the\n[readme](https://github.com/stripe-samples/push-provisioning-samples/blob/main/client/android/README.md).\nYou don’t need to build the app to follow the instructions above.\n\n## Links\n\n- [Token Management](https://docs.stripe.com/issuing/controls/token-management)\n- [virtual cards](https://docs.stripe.com/issuing/cards/virtual)\n- [physical cards](https://docs.stripe.com/issuing/cards/physical)\n- [digital wallets\nsettings](https://dashboard.stripe.com/settings/issuing/digital-wallets)\n- [contact Stripe](https://stripe.com/contact/sales)\n- [Request access to Google\nPay](https://developers.google.com/pay/issuers/requesting-access?api=true)\n- [TapAndPay private\nSDK](https://developers.google.com/pay/issuers/apis/push-provisioning/android/releases)\n- [Request access to the push provisioning\nAPI](https://support.google.com/faqs/contact/pp_api_allowlist)\n- [application ID](https://developer.android.com/studio/build/application-id)\n-\n[documentation](https://developers.google.com/pay/issuers/apis/push-provisioning/android/allowlist)\n- [private\nSDK](https://developers.google.com/pay/issuers/apis/push-provisioning/android/setup)\n- [sample\napp](https://github.com/stripe-samples/push-provisioning-samples/blob/main/client/android/app/build.gradle.kts#L111-L118)\n- [Parcelable](https://developer.android.com/reference/android/os/Parcelable)\n- [sample\napp](https://github.com/stripe-samples/push-provisioning-samples/blob/main/client/android/app/src/main/java/com/stripe/android/pushprovisioning/network/BackendPushProvisioningEphemeralKeyProvider.kt#L20-L43)\n- [according to Google’s\nspecifications](https://developers.google.com/pay/issuers/apis/push-provisioning/android/branding-guidelines)\n- [sample\napp](https://github.com/stripe-samples/push-provisioning-samples/blob/main/client/android/app/src/main/res/layout/card_picker_item.xml#L19-L25)\n-\n[recommended](https://developers.google.com/pay/issuers/apis/push-provisioning/android/faq#implementation_questions)\n- [list of\ncheckpoints](https://developers.google.com/pay/issuers/apis/push-provisioning/android/test-cases)\n-\n[listTokens()](https://developers.google.com/pay/issuers/apis/push-provisioning/android/reading-wallet#listtokens)\n-\n[last4](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-last4)\n- [Issued Card object](https://docs.stripe.com/api/issuing/cards/object)\n-\n[TokenState](https://developers.google.com/pay/issuers/apis/push-provisioning/android/enumerated-values#token_status)\n- [outlined in Google’s\ndocumentation](https://developers.google.com/pay/issuers/apis/push-provisioning/android/wallet-operations#resolving_yellow_path)\n- [sample\napp](https://github.com/stripe-samples/push-provisioning-samples/blob/main/client/android/app/src/main/java/com/stripe/android/pushprovisioning/MainActivity.kt#L119-L124)\n- [sample\napp](https://github.com/stripe-samples/push-provisioning-samples/blob/main/client/android/app/src/main/java/com/stripe/android/pushprovisioning/MainActivity.kt#L132-L167)\n- [sample\nbackend](https://github.com/stripe-samples/push-provisioning-samples/blob/main/server/ruby/README.md)\n- [Stripe Ephemeral\nKey](https://github.com/stripe-samples/push-provisioning-samples/blob/main/server/ruby/server.rb#L68-L88)\n-\n[readme](https://github.com/stripe-samples/push-provisioning-samples/blob/main/client/android/README.md)",
  "metadata": {
    "title": "Use digital wallets with Issuing | Stripe Documentation",
    "description": "Learn how to use Issuing to add cards to digital wallets.",
    "sourceURL": "https://docs.stripe.com/issuing/cards/digital-wallets"
  }
}