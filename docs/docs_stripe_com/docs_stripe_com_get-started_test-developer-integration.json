{
  "content": "# Build and test new features\n\n## Build and test new features using the Stripe developer tools.\n\nUse the Stripe developer tools to integrate new features without interrupting\nyour business operations or compromising customer data. This guide helps you:\n\n- Test changes without affecting your live system using\n[Sandboxes](https://docs.stripe.com/sandboxes).\n- Build and manage your integration with\n[Workbench](https://docs.stripe.com/workbench).\n- Listen to key activities in your Stripe account to automate business processes\nwith [event destinations](https://docs.stripe.com/event-destinations).\n\nImagine you’re a developer at Kavholm, a furniture company ready to introduce a\n[new payment\nmethod](https://docs.stripe.com/payments/payment-methods/integration-options).\nThis payment method aims to position Kavholm as a market leader and improve\ncustomer satisfaction.\n\n## Test with Sandboxes\n\nAs you prepare to launch Kavholm’s new payment method, [set up a\nsandbox](https://docs.stripe.com/sandboxes/dashboard/manage#create-a-sandbox)\nfor thorough testing and monitoring. This isolated environment lets you test\nfeatures with Stripe functionality without affecting your live system. You can\ncreate multiple sandboxes without affecting other users on your account,\nallowing you to manage isolated environments for development and continuous\nintegration tests. Additionally, you can:\n\n- **Simulate payment scenarios**: Experiment with payment processes related to\nthe new payment method without making actual transactions. Any settings you\nconfigure in your sandbox remain isolated to the testing environment and don’t\nimpact your live account.\n- **Choose a sandbox configuration**: Set up a pre-configured sandbox that\nmirrors some settings of your live account for realistic testing, or select a\nblank configuration to explore new settings. Learn more about [sandbox\nsettings](https://docs.stripe.com/sandboxes/dashboard/sandbox-settings).\n\n### Develop in a sandbox\n\nTo develop in a sandbox, consider using these features among other available\noptions that might benefit your use case:\n\n- **Team-based sandboxes**: Assign dedicated sandboxes for development teams to\nfocus on specific areas of the payment method integration without interference.\n- **Test APIs and webhooks**: Verify integration logic by testing API calls and\nwebhook responses related to payment method events, such as\n`payment_intent.succeeded`.\n\n### Collaborate with external partners\n\nTo collaborate with external partners, such as vendors, assign them the [sandbox\nuser\nrole](https://docs.stripe.com/sandboxes/dashboard/manage-access#manage-access)\nto provide controlled access for testing, ensuring that live data security isn’t\ncompromised. This role is ideal for external partners and vendors, such as\ndevelopment agencies.\n\n### Debugging and validation\n\nTo debug and validate your integration, use the following features:\n\n- **Troubleshoot and fix bugs**: Debug payment method workflow issues by testing\nAPI calls or integration logic changes in the sandbox.\n- **API key management**: Configure API keys for secure requests in the sandbox,\navoiding key-related errors.\n\n### Dedicated sandboxes\n\nBy organizing dedicated sandboxes for each testing scenario, you can simulate\nreal-world conditions, monitor functionality, and debug integration issues\nwithout risking live operations.\n\nFor example, you can test all of the payment method functionality before it goes\nlive, monitor integration performance continuously, and implement changes that\nyou’ve vetted in an equivalent testing environment.\n\nTo get started, create a sandbox by navigating to the account picker menu in the\nStripe Dashboard and selecting the **Create** button. Each sandbox must have a\nname and can copy settings from the live account to mirror actual conditions.\n\nWith dedicated sandboxes, you can test new features, such as the new payment\nmethod, through various stages such as development, integration testing, and\nuser acceptance testing (UAT). This ensures that each stage receives thorough\nchecks without impacting the production environment.\n\n## Build and manage your integration with Workbench\n\nYou can debug and manage your Stripe integration from your browser using\nWorkbench directly in the\n[Dashboard](https://docs.stripe.com/workbench#get-started).\n\nUse the following views to manage the payment method feature:\n\n- **Overview**:\n\n- Make sure the new payment method uses the latest and most secure API version.\n- Monitor API requests for payment method fee calculations to confirm they\nfunction as expected.\n- Identify integration errors related to the payment method.\n- **Errors**:\n\n- Identify and categorize errors in payment method calculations or payment\nprocessing.\n- Track error frequency to understand impact and urgency.\n- **Inspector**:\n\n- Analyze API object configurations and troubleshoot issues in real-time.\n- **Logs**:\n\n- Filter API requests to make sure interactions align with expectations.\n- **Events**:\n\n- Filter events to verify logistical triggers.\n- Review event payloads to confirm correct back-end processing.\n- **Webhooks**:\n\n- Set up webhook endpoints or other destination types, such as Amazon\nEventBridge, for real-time updates on payment method status and payment\nconfirmations.\n- **Shell and API Explorer**:\n\n- Simulate API requests and manage them using a command-line interface.\n\n## Listen to real-time updates with event destinations\n\nAt Kavholm, use event destinations to make sure all payment method features\nfunction as intended without affecting your live systems. Use event destinations\nto track real-time activities in your Stripe account, and to respond to critical\nevents such as payment confirmations or subscription updates. You can:\n\n- Send events to AWS through [Amazon\nEventBridge](https://docs.stripe.com/event-destinations/eventbridge) or to an\n[HTTPS endpoint through webhooks](https://docs.stripe.com/webhooks).\n- Access real-time data using [thin or snapshot\nevents](https://docs.stripe.com/event-destinations#events-overview).\n\n### Testing\n\nTo simulate real-world conditions and evaluate the payment method’s performance\nbefore it goes live:\n\n- Test the payment method feature in a sandbox by simulating Stripe-generated\nevents.\n- Set up test webhooks to observe event processing without impacting live\ncustomers.\n\n### React to real-time updates\n\nTo track key events and maintain oversight of the payment method feature’s\nongoing functionality:\n\n- Configure event destinations to [aggregate and alert you on\nevents](https://docs.stripe.com/event-destinations#event-permissions) such as\n`payment_intent.succeeded`. Event destinations support receiving alerts at a\nwebhook endpoint or Amazon EventBridge.\n- View payment event history to troubleshoot payment method processes and [track\nevent deliveries](https://docs.stripe.com/event-destinations#event-retention).\nUse logs for debugging, especially when your focus is on event logs rather than\nAPI request logs.\n\n### Debugging\n\nTo identify and resolve issues through real-time event analysis and ensure\nuninterrupted service for Kavholm’s customers:\n\n- Quickly identify billing or payment method issues to alert your customers with\nspecific event notifications.\n- Use [thin events for real-time\nanalysis](https://docs.stripe.com/event-destinations#prevent-application-errors)\nof payment method processing.\n\nWith event destinations, Kavholm tests, monitors, and debugs its new payment\nmethod while minimizing disruptions.\n\n## See also\n\n- [Sandboxes](https://docs.stripe.com/sandboxes)\n- [Event Destinations](https://docs.stripe.com/event-destinations)\n- [Workbench](https://docs.stripe.com/workbench)\n- [Workbench use cases](https://docs.stripe.com/workbench/guides)\n\n## Links\n\n- [Sandboxes](https://docs.stripe.com/sandboxes)\n- [Workbench](https://docs.stripe.com/workbench)\n- [event destinations](https://docs.stripe.com/event-destinations)\n- [new payment\nmethod](https://docs.stripe.com/payments/payment-methods/integration-options)\n- [set up a\nsandbox](https://docs.stripe.com/sandboxes/dashboard/manage#create-a-sandbox)\n- [sandbox\nsettings](https://docs.stripe.com/sandboxes/dashboard/sandbox-settings)\n- [sandbox user\nrole](https://docs.stripe.com/sandboxes/dashboard/manage-access#manage-access)\n- [Dashboard](https://docs.stripe.com/workbench#get-started)\n- [Amazon EventBridge](https://docs.stripe.com/event-destinations/eventbridge)\n- [HTTPS endpoint through webhooks](https://docs.stripe.com/webhooks)\n- [thin or snapshot\nevents](https://docs.stripe.com/event-destinations#events-overview)\n- [aggregate and alert you on\nevents](https://docs.stripe.com/event-destinations#event-permissions)\n- [track event\ndeliveries](https://docs.stripe.com/event-destinations#event-retention)\n- [thin events for real-time\nanalysis](https://docs.stripe.com/event-destinations#prevent-application-errors)\n- [Workbench use cases](https://docs.stripe.com/workbench/guides)",
  "metadata": {
    "title": "Build and test new features | Stripe Documentation",
    "description": "Build and test new features using the Stripe developer tools.",
    "sourceURL": "https://docs.stripe.com/get-started/test-developer-integration"
  }
}