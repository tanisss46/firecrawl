{
  "content": "# Set up future payments\n\n## Learn how to save payment details in a Checkout session and charge your customers later.\n\nStripe-hosted pageEmbedded formEmbedded componentsPublic preview\nTo collect customer payment details that you can reuse later, use Checkout’s\nsetup mode. Setup mode uses the [Setup Intents\nAPI](https://docs.stripe.com/api/setup_intents) to create [Payment\nMethods](https://docs.stripe.com/api/payment_methods).\n\n[Set up\nStripeServer-side](https://docs.stripe.com/payments/checkout/save-and-reuse?payment-ui=embedded-form#set-up-stripe)\nFirst, you need a Stripe account. [Register\nnow](https://dashboard.stripe.com/register).\n\nUse our official libraries to access the Stripe API from your application:\n\n```\n# Available as a gem\nsudo gem install stripe\n```\n\n```\n# If you use bundler, you can add this line to your Gemfile\ngem 'stripe'\n```\n\n[Create a Checkout\nSessionServer-side](https://docs.stripe.com/payments/checkout/save-and-reuse?payment-ui=embedded-form#create-checkout-session)\nFrom your server, create a [Checkout\nSession](https://docs.stripe.com/api/checkout/sessions) and set the\n[ui_mode](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-ui_mode)\nto `embedded`. To create a setup mode Checkout Session, set the\n[mode](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-mode)\nto `setup`.\n\nTo return customers to a custom page that you host on your website, specify that\npage’s URL in the\n[return_url](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-return_url)\nparameter. Include the `{CHECKOUT_SESSION_ID}` template variable in the URL to\nretrieve the session’s status on the return page. Checkout automatically\nsubstitutes the variable with the Checkout Session ID before redirecting.\n\nRead more about [configuring the return\npage](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=embedded-form#return-page)\nand other options for [customizing redirect\nbehavior](https://docs.stripe.com/payments/checkout/custom-success-page?payment-ui=embedded-form).\n\nYou can optionally specify the [customer\nparameter](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-customer)\nto automatically attach the created payment method to an existing customer.\n\nAfter you create the Checkout Session, use the `client_secret` returned in the\nresponse to [mount\nCheckout](https://docs.stripe.com/payments/checkout/save-and-reuse?payment-ui=embedded-form#mount-checkout).\n\n```\n# This example sets up an endpoint using the Sinatra framework.\n# To learn more about Sinatra, watch this video: https://youtu.be/8aA9Enb8NVc.\nrequire 'json'\nrequire 'sinatra'\nrequire 'stripe'\n\n# Set your secret key. Remember to switch to your live secret key in production.\n# See your keys here: https://dashboard.stripe.com/apikeys\nStripe.api_key = 'sk_test_BQokikJOvBiI2HlWgH4olfQ2'\n\npost '/create-checkout-session' do\n session = Stripe::Checkout::Session.create({\n currency: 'usd',\n mode: 'setup',\n ui_mode: 'embedded',\n return_url: 'https://example.com/return?session_id={CHECKOUT_SESSION_ID}'\n })\n\n {clientSecret: session.client_secret}.to_json\nend\n```\n\n### Payment methods\n\nBy default, Stripe enables cards and other common payment methods. You can turn\nindividual payment methods on or off in the [Stripe\nDashboard](https://dashboard.stripe.com/settings/payment_methods). In Checkout,\nStripe evaluates the currency and any restrictions, then dynamically presents\nthe supported payment methods to the customer.\n\nTo see how your payment methods appear to customers, enter a transaction ID or\nset an order amount and currency in the Dashboard.\n\nYou can enable Apple Pay and Google Pay in your [payment methods\nsettings](https://dashboard.stripe.com/settings/payment_methods). By default,\nApple Pay is enabled and Google Pay is disabled. However, in some cases Stripe\nfilters them out even when they’re enabled. We filter Google Pay if you [enable\nautomatic tax](https://docs.stripe.com/tax/checkout) without collecting a\nshipping address.\n\nCheckout’s Stripe-hosted pages don’t need integration changes to enable Apple\nPay or Google Pay. Stripe handles these payments the same way as other card\npayments.\n\n[Mount\nCheckoutClient-side](https://docs.stripe.com/payments/checkout/save-and-reuse?payment-ui=embedded-form#mount-checkout)HTML\n+ JSReact\nCheckout is available as part of [Stripe.js](https://docs.stripe.com/js).\nInclude the Stripe.js script on your page by adding it to the head of your HTML\nfile. Next, create an empty DOM node (container) to use for mounting.\n\n```\n<head>\n <script src=\"https://js.stripe.com/v3/\"></script>\n</head>\n<body>\n <div id=\"checkout\">\n <!-- Checkout will insert the payment form here -->\n </div>\n</body>\n```\n\nInitialize Stripe.js with your publishable API key.\n\nCreate an asynchronous `fetchClientSecret` function that makes a request to your\nserver to create the Checkout Session and retrieve the client secret. Pass this\nfunction into `options` when you create the Checkout instance:\n\n```\n// Initialize Stripe.js\nconst stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\ninitialize();\n\n// Fetch Checkout Session and retrieve the client secret\nasync function initialize() {\n const fetchClientSecret = async () => {\n const response = await fetch(\"/create-checkout-session\", {\n method: \"POST\",\n });\n const { clientSecret } = await response.json();\n return clientSecret;\n };\n\n // Initialize Checkout\n const checkout = await stripe.initEmbeddedCheckout({\n fetchClientSecret,\n });\n\n // Mount Checkout\n checkout.mount('#checkout');\n}\n```\n\nCheckout renders in an iframe that securely sends payment information to Stripe\nover an HTTPS connection.\n\n#### Common mistake\n\nAvoid placing Checkout within another iframe because some payment methods\nrequire redirecting to another page for payment confirmation.\n\n### Customize appearance\n\nCustomize Checkout to match the design of your site by setting the background\ncolor, button color, border radius, and fonts in your account’s [branding\nsettings](https://dashboard.stripe.com/settings/branding).\n\nBy default, Checkout renders with no external padding or margin. We recommend\nusing a container element such as a div to apply your desired margin (for\nexample, 16px on all sides).\n\n[Retrieve the Checkout\nSessionServer-side](https://docs.stripe.com/payments/checkout/save-and-reuse?payment-ui=embedded-form#retrieve-checkout-session)\nAfter a customer successfully completes their Checkout Session, you need to\nretrieve the Session object. There are two ways to do this:\n\n- **Asynchronously**: Handle `checkout.session.completed`\n[webhooks](https://docs.stripe.com/webhooks), which contain a Session object.\nLearn more about [setting up webhooks](https://docs.stripe.com/webhooks).\n- **Synchronously**: Obtain the Session ID from the `return_url` when a user\nredirects back to your site. Use the Session ID to\n[retrieve](https://docs.stripe.com/api/checkout/sessions/retrieve) the Session\nobject.\n\n```\ncurl\nhttps://api.stripe.com/v1/checkout/sessions/cs_test_MlZAaTXUMHjWZ7DcXjusJnDU4MxPalbtL5eYrmS2GKxqscDtpJq8QM0k\n\\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\"\n```\n\nThe right choice depends on your tolerance for dropoff, as customers may not\nalways reach the `return_url` after a successful payment. It’s possible for them\nclose their browser tab before the redirect occurs. Handling webhooks prevents\nyour integration from being susceptible to this form of dropoff.\n\nAfter you have retrieved the Session object, get the value of the `setup_intent`\nkey, which is the ID for the SetupIntent created during the Checkout Session. A\n[SetupIntent](https://docs.stripe.com/payments/setup-intents) is an object used\nto set up the customer’s bank account information for future payments.\n\nExample `checkout.session.completed` payload:\n\n```\n{\n \"id\": \"evt_1Ep24XHssDVaQm2PpwS19Yt0\",\n \"object\": \"event\",\n \"api_version\": \"2019-03-14\",\n \"created\": 1561420781,\n \"data\": {\n \"object\": {\n \"id\": \"cs_test_MlZAaTXUMHjWZ7DcXjusJnDU4MxPalbtL5eYrmS2GKxqscDtpJq8QM0k\",\n \"object\": \"checkout.session\",\n \"billing_address_collection\": null,\n \"client_reference_id\": null,\n \"customer\": \"\",\n \"customer_email\": null,\n \"display_items\": [],\n \"mode\": \"setup\",\n \"setup_intent\": \"seti_1EzVO3HssDVaQm2PJjXHmLlM\",\n \"submit_type\": null,\n \"subscription\": null,\n \"success_url\": \"https://example.com/success\"\n }\n },\n \"livemode\": false,\n \"pending_webhooks\": 1,\n \"request\": {\n \"id\": null,\n \"idempotency_key\": null\n },\n \"type\": \"checkout.session.completed\"\n}\n```\n\nNote the `setup_intent` ID for the next step.\n\n[Retrieve the\nSetupIntentServer-side](https://docs.stripe.com/payments/checkout/save-and-reuse?payment-ui=embedded-form#retrieve-setup-intent)\nUsing the SetupIntent ID,\n[retrieve](https://docs.stripe.com/api/setup_intents/retrieve) the SetupIntent\nobject. The returned object contains a `payment_method` ID that you can attach\nto a customer in the next step.\n\n```\ncurl https://api.stripe.com/v1/setup_intents/seti_1EzVO3HssDVaQm2PJjXHmLlM \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\"\n```\n\n#### Note\n\nIf you’re requesting this information synchronously from the Stripe API (as\nopposed to handling webhooks), you can combine the previous step with this step\nby [expanding](https://docs.stripe.com/api/expanding_objects) the SetupIntent\nobject in the request to the /v1/checkout/session endpoint. Doing this prevents\nyou from having to make two network requests to access the newly created\nPaymentMethod ID.\n\n[Charge the payment method\nlaterServer-side](https://docs.stripe.com/payments/checkout/save-and-reuse?payment-ui=embedded-form#charge-saved-payment-method)\nIf you didn’t create the Checkout Session with an existing customer, use the ID\nof the PaymentMethod to\n[attach](https://docs.stripe.com/api/payment_methods/attach) the\n[PaymentMethod](https://docs.stripe.com/api/payment_methods) to a\n[Customer](https://docs.stripe.com/api/customers). After you attach the\nPaymentMethod to a customer, you can make an off-session payment using a\n[PaymentIntent](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method):\n\n- Set [customer](https://docs.stripe.com/api#create_payment_intent-customer) to\nthe ID of the Customer and\n[payment_method](https://docs.stripe.com/api#create_payment_intent-payment_method)\nto the ID of the PaymentMethod.\n- Set\n[off_session](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-off_session)\nto `true` to indicate that the customer isn’t in your checkout flow during a\npayment attempt and can’t fulfill an authentication request made by a partner,\nsuch as a card issuer, bank, or other payment institution. If, during your\ncheckout flow, a partner requests authentication, Stripe requests exemptions\nusing customer information from a previous on-session transaction. If the\nconditions for exemption aren’t met, the PaymentIntent might throw an error.\n- Set the value of the PaymentIntent’s\n[confirm](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-confirm)\nproperty to `true`, which causes confirmation to occur immediately when you\ncreate the PaymentIntent.\n\n```\ncurl https://api.stripe.com/v1/payment_intents \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d amount=1099 \\\n -d currency=usd \\\n -d customer={{CUSTOMER_ID}} \\\n -d payment_method={{PAYMENT_METHOD_ID}} \\\n -d off_session=true \\\n -d confirm=true\n```\n\nWhen a payment attempt fails, the request also fails with a 402 HTTP status code\nand the status of the PaymentIntent is\n[requires_payment_method](https://docs.stripe.com/upgrades#2019-02-11). Notify\nyour customer to return to your application (for example, by sending an email or\nin-app notification) and direct your customer to a new Checkout Session to\nselect another payment method.\n\n```\ncurl https://api.stripe.com/v1/checkout/sessions \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d customer={{CUSTOMER_ID}} \\\n -d \"line_items[0][price_data][currency]\"=usd \\\n -d \"line_items[0][price_data][product_data][name]\"=T-shirt \\\n -d \"line_items[0][price_data][unit_amount]\"=1099 \\\n -d \"line_items[0][quantity]\"=1 \\\n -d mode=payment \\\n -d ui_mode=embedded \\\n--data-urlencode\nreturn_url=\"https://example.com/return?session_id={CHECKOUT_SESSION_ID}\"\n```\n\n## Links\n\n- [Setup Intents API](https://docs.stripe.com/api/setup_intents)\n- [Payment Methods](https://docs.stripe.com/api/payment_methods)\n- [Register now](https://dashboard.stripe.com/register)\n- [Checkout Session](https://docs.stripe.com/api/checkout/sessions)\n-\n[ui_mode](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-ui_mode)\n-\n[mode](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-mode)\n-\n[return_url](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-return_url)\n- [configuring the return\npage](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=embedded-form#return-page)\n- [customizing redirect\nbehavior](https://docs.stripe.com/payments/checkout/custom-success-page?payment-ui=embedded-form)\n- [customer\nparameter](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-customer)\n- [https://youtu.be/8aA9Enb8NVc.](https://youtu.be/8aA9Enb8NVc)\n- [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys)\n-\n[https://example.com/return?session_id={CHECKOUT_SESSION_ID}](https://example.com/return?session_id={CHECKOUT_SESSION_ID})\n- [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods)\n- [enable automatic tax](https://docs.stripe.com/tax/checkout)\n- [Stripe.js](https://docs.stripe.com/js)\n- [https://js.stripe.com/v3/](https://js.stripe.com/v3/)\n- [branding settings](https://dashboard.stripe.com/settings/branding)\n- [webhooks](https://docs.stripe.com/webhooks)\n- [retrieve](https://docs.stripe.com/api/checkout/sessions/retrieve)\n- [SetupIntent](https://docs.stripe.com/payments/setup-intents)\n- [https://example.com/success](https://example.com/success)\n- [retrieve](https://docs.stripe.com/api/setup_intents/retrieve)\n- [expanding](https://docs.stripe.com/api/expanding_objects)\n- [attach](https://docs.stripe.com/api/payment_methods/attach)\n- [Customer](https://docs.stripe.com/api/customers)\n-\n[PaymentIntent](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method)\n- [customer](https://docs.stripe.com/api#create_payment_intent-customer)\n-\n[payment_method](https://docs.stripe.com/api#create_payment_intent-payment_method)\n-\n[off_session](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-off_session)\n-\n[confirm](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-confirm)\n- [requires_payment_method](https://docs.stripe.com/upgrades#2019-02-11)",
  "metadata": {
    "title": "Set up future payments | Stripe Documentation",
    "description": "Learn how to save payment details in a Checkout session and charge your customers later.",
    "sourceURL": "https://docs.stripe.com/payments/checkout/save-and-reuse?payment-ui=embedded-form"
  }
}