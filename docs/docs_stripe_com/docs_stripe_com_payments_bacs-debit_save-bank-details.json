{
  "content": "# Save Bacs Direct Debit bank details\n\n## Learn how to use Checkout to save payment method details for future Bacs Direct Debit payments.\n\nUse [Stripe Checkout](https://docs.stripe.com/payments/checkout) to collect Bacs\nDirect Debit payment details in advance, with the final amount or payment date\ndetermined later. This is useful for:\n\n- Saving payment methods to a wallet to streamline future purchases.\n- Collecting surcharges after fulfilling a service.\n- [Starting a free trial for a\nsubscription](https://docs.stripe.com/billing/subscriptions/trials).\n[Set up\nStripeServer-side](https://docs.stripe.com/payments/bacs-debit/save-bank-details#set-up-stripe)\nFirst, you need a Stripe account. [Register\nnow](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n```\n# Available as a gem\nsudo gem install stripe\n```\n\n```\n# If you use bundler, you can add this line to your Gemfile\ngem 'stripe'\n```\n\n[Create a\nCustomerServer-side](https://docs.stripe.com/payments/bacs-debit/save-bank-details#create-customer)\nTo reuse a Bacs Direct Debit payment method for future payments, you must attach\nit to a [Customer](https://docs.stripe.com/api/customers). Create a Customer\nobject when someone creates an account with you and associate the ID of the\nCustomer object with your own internal representation of a customer so you can\nuse the stored payment method details later. If you have an existing Customer\nobject, skip this step.\n\n```\ncurl -X POST https://api.stripe.com/v1/customers \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\"\n```\n\n[Create a Checkout\nSessionClient-sideServer-side](https://docs.stripe.com/payments/bacs-debit/save-bank-details#create-checkout-session)\nBefore you can accept Direct Debit payments, your customer must provide their\nbank account information and give permission to debit their account (also known\nas a\n[mandate](https://docs.stripe.com/payments/payment-methods/bacs-debit#mandates))\nthrough Stripe Checkout.\n\nAdd a checkout button to your website that calls a server-side endpoint to\ncreate a Checkout Session.\n\n```\n<html>\n <head>\n <title>Checkout</title>\n </head>\n <body>\n <form action=\"/create-checkout-session\" method=\"POST\">\n <button type=\"submit\">Checkout</button>\n </form>\n </body>\n</html>\n```\n\nCreate a Checkout Session in `setup` mode to collect the required information.\nAfter creating the Checkout Session, redirect your customer to the\n[URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url)\nreturned in the response.\n\n```\ncurl https://api.stripe.com/v1/checkout/sessions \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"payment_method_types[]\"=\"bacs_debit\" \\\n -d mode=setup \\\n -d customer={{CUSTOMER_ID}} \\\n-d success_url=\"https://example.com/success?session_id={CHECKOUT_SESSION_ID}\" \\\n -d cancel_url=\"https://example.com/cancel\"\n```\n\nWhen your customer provides their payment method details, they’re redirected to\nthe `success_url`, a page on your website that informs them that their payment\nmethod was saved successfully. Make the Session ID available on your success\npage by including the `{CHECKOUT_SESSION_ID}` template variable in the\n`success_url` as in the above example.\n\nWhen your customer clicks on your logo in a Checkout Session without providing\ntheir payment method details, Checkout redirects them back to your website by\nnavigating to the `cancel_url`. This is usually the page on your website that\nthe customer viewed prior to redirecting to Stripe Checkout.\n\n#### Caution\n\nDon’t rely on the redirect to the `success_url` alone for detecting payment\ninitiation, as:\n\n- Malicious users could directly access the `success_url` without paying and\ngain access to your goods or services.\n- Customers may not always reach the `success_url` after a successful\npayment—they might close their browser tab before the redirect occurs.\n\n#### Note\n\nThe Bacs Direct Debit rules require that customers are sent an email\nnotification when payment details are collected. By default, these emails are\nsent automatically by Stripe. You can also opt to [send your own Bacs\nnotifications](https://docs.stripe.com/payments/payment-methods/bacs-debit#debit-notifications).\n\n[Retrieve the payment\nmethodServer-side](https://docs.stripe.com/payments/bacs-debit/save-bank-details#retrieve-payment-method)\nAfter a customer submits their payment details, retrieve the\n[PaymentMethod](https://docs.stripe.com/payments/payment-methods) object. A\n[PaymentMethod](https://docs.stripe.com/api/payment_methods) stores the\ncustomer’s bank account information for future payments. You can retrieve the\nPaymentMethod synchronously using the `success_url` or asynchronously using\n[webhooks](https://docs.stripe.com/webhooks).\n\nThe decision to retrieve the PaymentMethod synchronously or asynchronously\ndepends on your tolerance for dropoff, as customers might not always reach the\n`success_url` after a successful payment (for example, it’s possible for them to\nclose their browser tab before the redirect occurs). Using webhooks prevents\nyour integration from experiencing this form of dropoff.\n\nWebhooksSuccess URL\nHandle `checkout.session.completed` webhooks, which contain a Session object. To\nlearn more, see [setting up webhooks](https://docs.stripe.com/webhooks). The\nfollowing example is a `checkout.session.completed` response.\n\n```\n{\n \"id\": \"evt_1Ep24XHssDVaQm2PpwS19Yt0\",\n \"object\": \"event\",\n \"api_version\": \"2019-03-14\",\n \"created\": 1561420781,\n \"data\": {\n \"object\": {\n \"id\": \"cs_test_MlZAaTXUMHjWZ7DcXjusJnDU4MxPalbtL5eYrmS2GKxqscDtpJq8QM0k\",\n \"object\": \"checkout.session\",\n \"billing_address_collection\": null,\n \"cancel_url\": \"https://example.com/cancel\",\n \"client_reference_id\": null,\n \"customer\": null,\n \"customer_email\": null,\n \"display_items\": [],\n \"mode\": \"setup\",\n \"setup_intent\": \"seti_1EzVO3HssDVaQm2PJjXHmLlM\",\n \"submit_type\": null,\n \"subscription\": null,\n \"success_url\": \"https://example.com/success\"\n }\n },\n \"livemode\": false,\n \"pending_webhooks\": 1,\n \"request\": {\n \"id\": null,\n \"idempotency_key\": null\n },\n \"type\": \"checkout.session.completed\"\n}\n```\n\nNote the value of the `setup_intent` key, which is the ID for the SetupIntent\ncreated with the Checkout Session. A\n[SetupIntent](https://docs.stripe.com/payments/setup-intents) is an object used\nto set up the customer’s bank account information for future payments.\n[Retrieve](https://docs.stripe.com/api/setup_intents/retrieve) the SetupIntent\nobject with the ID.\n\n```\ncurl https://api.stripe.com/v1/setup_intents/seti_1EzVO3HssDVaQm2PJjXHmLlM \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\"\n```\n\n[Handle post-setup\neventsServer-side](https://docs.stripe.com/payments/bacs-debit/save-bank-details#handle-post-setup-events)\nOnce the Checkout Session completes, payment details are submitted to the bank\nas a mandate.\n\nThe mandate can change at any time after you’ve collected it. This might be the\nresult of the customer instructing their bank to amend the mandate or because of\na change in the bank itself (for example, the customer changes to a different\none). Stripe sends the following events when the mandate changes:\n\nEvent nameDescription Can accept payments?`mandate.updated`Occurs whenever a\nmandate is rejected, canceled, or reactivated by the Bacs network. Check\n[mandate.status](https://docs.stripe.com/api/mandates/object#mandate_object-status)\nto determine if the mandate can continue to be used.Yes, if the new status is\n`active``payment_method.automatically_updated`Occurs when a customer’s bank\naccount details change.Yes\nThese events are available in the\n[Dashboard](https://dashboard.stripe.com/events), but you can set up a\n[webhook](https://docs.stripe.com/webhooks) to handle these programatically.\n\n[Test the\nintegration](https://docs.stripe.com/payments/bacs-debit/save-bank-details#testing)\nThere are several test bank account numbers you can use in [test\nmode](https://docs.stripe.com/keys#test-live-modes) to make sure this\nintegration is ready.\n\nSort code Account numberDescription10880000012345The payment succeeds and the\nPaymentIntent transitions from `processing` to `succeeded`.10880090012345The\npayment succeeds after three minutes and the PaymentIntent transitions from\n`processing` to `succeeded`.10880033333335The payment is accepted but then\nimmediately fails with a `debit_not_authorized` failure code and the\nPaymentIntent transitions from `processing` to `requires_payment_method`. The\nMandate becomes `inactive` and the PaymentMethod can not be used\nagain.10880093333335The payment fails after three minutes with a\n`debit_not_authorized` failure code and the PaymentIntent transitions from\n`processing` to `requires_payment_method`. The Mandate becomes `inactive` and\nthe PaymentMethod can not be used again.10880022222227The payment fails with an\n`insufficient_funds` failure code and the PaymentIntent transitions from\n`processing` to `requires_payment_method`. The Mandate remains `active` and the\nPaymentMethod can be used again.10880092222227The payment fails after three\nminutes with an `insufficient_funds` failure code and the PaymentIntent\ntransitions from `processing` to `requires_payment_method`. The Mandate remains\n`active` and the PaymentMethod can be used again.10880055555559The payment\nsucceeds after three minutes and the PaymentIntent transitions from `processing`\nto `succeeded`, but a dispute is immediately created.10880000033333Payment\nMethod creation succeeds, but the Mandate is refused by the customer’s bank and\nimmediately transitions to inactive.10880000044444The request to set up Bacs\nDirect Debit fails immediately due to an invalid account number and the customer\nis prompted to update their information before submitting. Payment details are\nnot collected.10880034343434The payment fails with a\n`charge_exceeds_source_limit` failure code due to the payment amount causing the\naccount to exceed its weekly payment volume limit.10880012121212The payment\nfails with a `charge_exceeds_weekly_limit` failure code due to the payment\namount exceeding the account’s transaction volume limit.\nYou can test using any of the account numbers provided above. However, because\nBacs Direct Debit payments take several days to process, use the test account\nnumbers that operate on a three-minute delay to better simulate the behavior of\nlive payments.\n\n#### Note\n\nBy default, Stripe automatically sends\n[emails](https://docs.stripe.com/payments/payment-methods/bacs-debit#debit-notifications)\nto the customer when payment details are initially collected and each time a\ndebit will be made on their account. These notifications aren’t sent in\ntestmode.\n\n[Use the payment method for future\npaymentsServer-side](https://docs.stripe.com/payments/bacs-debit/save-bank-details#charge-later)\nAfter you set up a [PaymentMethod](https://docs.stripe.com/api/payment_methods),\nyou can accept future Bacs Direct Debit payments by creating and confirming a\n[PaymentIntent](https://docs.stripe.com/payments/payment-intents).\n\n```\ncurl https://api.stripe.com/v1/payment_intents \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"payment_method_types[]\"=\"bacs_debit\" \\\n -d payment_method={{PAYMENT_METHOD_ID}} \\\n -d customer={{CUSTOMER_ID}} \\\n -d confirm=true \\\n -d amount=100 \\\n -d currency=gbp\n```\n\n## Links\n\n- [Stripe Checkout](https://docs.stripe.com/payments/checkout)\n- [Starting a free trial for a\nsubscription](https://docs.stripe.com/billing/subscriptions/trials)\n- [Register now](https://dashboard.stripe.com/register)\n- [Customer](https://docs.stripe.com/api/customers)\n- [contact](https://stripe.com/contact/sales)\n-\n[mandate](https://docs.stripe.com/payments/payment-methods/bacs-debit#mandates)\n-\n[URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url)\n-\n[https://example.com/success?session_id={CHECKOUT_SESSION_ID}](https://example.com/success?session_id={CHECKOUT_SESSION_ID})\n- [https://example.com/cancel](https://example.com/cancel)\n- [send your own Bacs\nnotifications](https://docs.stripe.com/payments/payment-methods/bacs-debit#debit-notifications)\n- [PaymentMethod](https://docs.stripe.com/payments/payment-methods)\n- [PaymentMethod](https://docs.stripe.com/api/payment_methods)\n- [webhooks](https://docs.stripe.com/webhooks)\n- [https://example.com/success](https://example.com/success)\n- [SetupIntent](https://docs.stripe.com/payments/setup-intents)\n- [Retrieve](https://docs.stripe.com/api/setup_intents/retrieve)\n-\n[mandate.status](https://docs.stripe.com/api/mandates/object#mandate_object-status)\n- [Dashboard](https://dashboard.stripe.com/events)\n- [test mode](https://docs.stripe.com/keys#test-live-modes)\n- [PaymentIntent](https://docs.stripe.com/payments/payment-intents)",
  "metadata": {
    "title": "Save Bacs Direct Debit bank details | Stripe Documentation",
    "description": "Learn how to use Checkout to save payment method details for future Bacs Direct Debit payments.",
    "sourceURL": "https://docs.stripe.com/payments/bacs-debit/save-bank-details"
  }
}