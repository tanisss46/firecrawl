{
  "content": "# Record usage for billing with the API\n\n## Learn how to record usage using the Stripe API.\n\nYou must record usage in Stripe in order to bill your customers the correct\namounts each billing period. To record usage, first [configure your\nmeter](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage#configure-meter),\nand then send meter events that include the event name configured on the meter,\ncustomer ID, numerical value, and a timestamp (optional).\n\nYou can decide how often you record usage in Stripe, for example as it occurs or\nin batches. Stripe processes meter events asynchronously, so aggregated usage in\nmeter event summaries and on upcoming invoices might not immediately reflect\nrecently received meter events.\n\n## Create meter events\n\nCreate a [Meter Event](https://docs.stripe.com/api/billing/meter-event/create)\nusing the API.\n\n```\ncurl https://api.stripe.com/v1/billing/meter_events \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d event_name=alpaca_ai_tokens \\\n -d \"payload[value]\"=25 \\\n -d \"payload[stripe_customer_id]\"={{CUSTOMER_ID}}\n```\n\n### Idempotency\n\nUse [idempotency keys](https://docs.stripe.com/api/idempotent_requests) to\nprevent reporting usage for each event more than one time because of latency or\nother issues. Every meter event corresponds to an\n[identifier](https://docs.stripe.com/api/billing/meter-event/create#create_billing_meter_event-identifier)\nthat you can specify in your request. If you don’t specify an identifier, we\nauto-generate one for you.\n\n### Event timestamps\n\nMake sure the timestamp is within the past 35 calendar days and isn’t more than\n5 minutes in the future. The 5-minute window is for clock drift between your\nserver and Stripe systems.\n\n### Usage values\n\nThe numerical usage value in the payload only accepts whole number values. If\nthe overall cycle usage is negative, Stripe reports the invoice line item usage\nquantity as 0.\n\n### Rate limits\n\nThe [Meter Event](https://docs.stripe.com/api/billing/meter-event/create)\nendpoint allows 1000 calls per second in live mode, and one concurrent call per\ncustomer per meter. If your service might exceed this limit, you can “bundle”\nyour product into amounts. For example, if you charge per 1000 requests, you can\nbundle your product into “per 1000 transactions” and then send 1 usage record\nevery 1000 times.\n\nIn test mode and sandbox mode, calls to the `meter event` and `meter event\nstream` endpoint count toward the [basic\nlimit](https://docs.stripe.com/rate-limits#rate-limiter).\n\n#### Note\n\nIf you’re a Connect platform making requests on behalf of a connected account\nusing the `Stripe-Account` header, you’re subject to [regular Stripe rate\nlimits](https://docs.stripe.com/rate-limits), which is 100 operations per\nsecond.\n\nYou can monitor for `429` status codes and implement a retry mechanism with an\nexponential back-off schedule to manage request volume.\n\n### High-throughput ingestion with higher rate limits API v2\n\nWith the [API v2](https://docs.stripe.com/api-v2-overview), you can send up to\n10,000 events per second to Stripe using meter event streams. This works in live\nmode only.\n\nThis endpoint uses stateless authentication sessions. First, create a [Meter\nEvent\nSession](https://docs.stripe.com/api/v2/billing/meter-event-stream/session/create)\nto receive an authentication token. Authentication tokens are only valid for 15\nminutes, so you must create a new meter event session when your token expires.\n\nNext, use the returned authentication token to create your high-throughput meter\nevents with the [Meter Event\nStream](https://docs.stripe.com/api/v2/billing/meter-event-stream/create).\n\n#### Note\n\nBecause of the large volume of API requests, we don’t include meter event stream\nrequests in the [Workbench Logs\ntab](https://docs.stripe.com/workbench#request-logs).\n\nYou can monitor for `429` status codes and implement a retry mechanism with an\nexponential backoff schedule to manage request volume.\n\n```\nrequire 'stripe'\nrequire 'date'\n\nclass MeterEventManager\n attr_accessor :api_key\n attr_accessor :meter_event_session\n\n def initialize(api_key)\n @api_key = api_key\n @meter_event_session = nil\n```\n\nSee all 47 lines\n## Handle meter event errors\n\nStripe asynchronously processes meter events. If we find an error, we create one\nof the following [Events](https://docs.stripe.com/api/events):\n\nEventDescriptionPayload type`v1.billing.meter.error_report_triggered`This event\noccurs when a meter has invalid usage\nevents.`thin``v1.billing.meter.no_meter_found`This event occurs when usage\nevents have missing or invalid meter IDs.`thin`\n#### Warning\n\nTo create an event destination that subscribes to thin events, enable Workbench\nin your [Developer settings](https://dashboard.stripe.com/settings/developers).\n\n### Example payloads\n\nExample error report eventExample error event for an incorrect meter\nThe following is an example payload for a\n`v1.billing.meter.error_report_triggered` event.\n\n```\n{\n \"id\": \"evt_test_65R2GpwDsnmpzihMjdT16R2GDhI4SQdXJGRbvn7JA8mPEm\",\n \"object\": \"v2.core.event\",\n \"created\": \"2024-08-28T20:54:12.051Z\",\n \"data\": {\n \"developer_message_summary\": \"There is 1 invalid event\",\n \"reason\": {\n \"error_count\": 1,\n \"error_types\": [\n {\n```\n\nSee all 35 lines\n### Error codes\n\nThe `reason.error_types.code` provides the error categorization that triggered\nthe error. Possible error codes include:\n\n- `meter_event_customer_not_found`\n- `meter_event_no_customer_defined`\n- `meter_event_dimension_count_too_high`\n- `archived_meter`\n- `timestamp_too_far_in_past`\n- `timestamp_in_future`\n- `meter_event_value_not_found`\n- `meter_event_invalid_value`\n- `no_meter` (supported only for the `v1.billing.meter.no_meter_found` event\ntype)\n\n### Listen to events\n\nYou can listen to events by setting up a [webhook endpoint or another type of\nevent destination](https://docs.stripe.com/event-destinations).\n\n- On the [Webhooks](https://dashboard.stripe.com/webhooks) tab in Workbench,\nclick **Create new destination**. Alternatively, use this\n[template](https://dashboard.stripe.com/webhooks/create?payload_style=thin&events=v1.billing.meter.error_report_triggered%2Cv1.billing.meter.no_meter_found)\nto configure a new destination in Workbench with the two event types\npre-selected.\n- Click **Show advanced options**, then select the **Thin** payload style.\n- Select `v1.billing.meter.error_report_triggered` and\n`v1.billing.meter.no_meter_found` from the list of events.\n- Create a handler to process the event.\n\n```\nimport os\nfrom stripe import StripeClient\nfrom stripe.events import V1BillingMeterErrorReportTriggeredEvent\n\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\napi_key = os.environ.get('STRIPE_API_KEY')\nwebhook_secret = os.environ.get('WEBHOOK_SECRET')\n\n```\n\nSee all 35 lines\n- Test your handler by configuring a [local\nlistener](https://docs.stripe.com/cli/listen) with the [Stripe\nCLI](https://docs.stripe.com/stripe-cli) to send events to your local machine\nfor testing before deploying the handler to production. Use the\n`--forward-thin-to` flag to specify which URL to forward the `thin` events to\nand the `--thin-events` flag to specify which thin events to forward. You can\nforward all thin events with an asterisk (`*`), or a subset of thin events to\nyour application.\n\n```\n$ stripe listen --forward-thin-to localhost:4242/webhooks --thin-events \"*\"\n\n```\n- Trigger test events to your handler. Use the [trigger\nfunction](https://docs.stripe.com/cli/trigger) to run the following commands,\nwhich simulates the respective events in your account for testing.\n\n```\n$ stripe trigger v1.billing.meter.error_report_triggered --api-key\n<your-secret-key>\n$ stripe trigger v1.billing.meter.no_meter_found --api-key <your-secret-key>\n\n```\n- If you process events with a webhook endpoint, [verify the webhook\nsignatures](https://docs.stripe.com/webhooks#verify-official-libraries) to\nsecure your endpoint and validate all requests are from Stripe.\n- Correct and resend invalid events for re-processing.\n\n## Links\n\n- [configure your\nmeter](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage#configure-meter)\n- [Meter Event](https://docs.stripe.com/api/billing/meter-event/create)\n- [idempotency keys](https://docs.stripe.com/api/idempotent_requests)\n-\n[identifier](https://docs.stripe.com/api/billing/meter-event/create#create_billing_meter_event-identifier)\n- [basic limit](https://docs.stripe.com/rate-limits#rate-limiter)\n- [regular Stripe rate limits](https://docs.stripe.com/rate-limits)\n- [API v2](https://docs.stripe.com/api-v2-overview)\n- [Contact sales](https://stripe.com/contact/sales)\n- [Meter Event\nSession](https://docs.stripe.com/api/v2/billing/meter-event-stream/session/create)\n- [Meter Event\nStream](https://docs.stripe.com/api/v2/billing/meter-event-stream/create)\n- [Workbench Logs tab](https://docs.stripe.com/workbench#request-logs)\n- [Events](https://docs.stripe.com/api/events)\n- [Developer settings](https://dashboard.stripe.com/settings/developers)\n- [webhook endpoint or another type of event\ndestination](https://docs.stripe.com/event-destinations)\n- [Webhooks](https://dashboard.stripe.com/webhooks)\n-\n[template](https://dashboard.stripe.com/webhooks/create?payload_style=thin&events=v1.billing.meter.error_report_triggered%2Cv1.billing.meter.no_meter_found)\n- [local listener](https://docs.stripe.com/cli/listen)\n- [Stripe CLI](https://docs.stripe.com/stripe-cli)\n- [trigger function](https://docs.stripe.com/cli/trigger)\n- [verify the webhook\nsignatures](https://docs.stripe.com/webhooks#verify-official-libraries)",
  "metadata": {
    "title": "Record usage for billing with the API | Stripe Documentation",
    "description": "Learn how to record usage using the Stripe API.",
    "sourceURL": "https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage-api"
  }
}