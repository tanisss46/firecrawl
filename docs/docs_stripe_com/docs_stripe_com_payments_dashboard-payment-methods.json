{
  "content": "# Migrate payment methods to the Dashboard\n\n## Turn on different Checkout payment methods through the Dashboard.\n\nStripe-hosted pageEmbedded formEmbedded componentsPublic preview\nBy changing your integration to pull your payment method preferences from the\nDashboard, Stripe displays all compatible payment methods to your customers when\nchecking out depending on the chosen currency or any payment method restrictions\nlike maximum transaction amounts. Stripe also presents the most relevant payment\nmethods for each customer based on their location and currency used.\n\nThe checkout page prioritizes showing payment methods known to increase\nconversion for your customer’s location while lower priority payment methods are\nhidden beneath an overflow menu. Your customers see multiple payment methods at\ncheckout that are popular for their location and currency, but they still have\nthe option to choose a different payment method from the overflow menu.\n\n[Update your\nintegration](https://docs.stripe.com/payments/dashboard-payment-methods#update)\nFor existing Stripe Checkout integrations that specify `payment_method_types`,\nyou must remove this parameter to migrate payment methods preferences to the\nDashboard. After you remove the parameter from your integration, some payment\nmethods turn on automatically including cards and wallets. The `currency`\nparameter restricts the payment methods the customer sees in the Checkout\nSession.\n\n#### Warning\n\nUpgrading your integration initially turns off any non-default payment methods\nfor your integration, like bank redirects. If you added payment methods to your\nCheckout integration, you must go to the payment methods settings page in the\nDashboard to turn them back on.\n\n```\nStripe::Checkout::Session.create({\n line_items: [\n {\n price_data: {\n currency: 'eur',\n product_data: {name: 'T-shirt'},\n unit_amount: 2000,\n },\n quantity: 1,\n },\n ],\n mode: 'payment',\n# Remove the payment_method_types parameter to manage payment methods in the\nDashboard\n payment_method_types: ['card'],\n return_url: 'https://example.com/return',\n ui_mode: 'embedded',\n})\n```\n\n[View available payment methods in the\nDashboard](https://docs.stripe.com/payments/dashboard-payment-methods#view-dash)\nView your [payment methods\nsettings](https://dashboard.stripe.com/settings/payment_methods) to see the\npayment methods that you currently accept. This list includes the payment\nmethods turned on by default, like cards. These payment methods cost the same or\nless than cards and settle immediately.\n\n### Payment methods\n\nBy default, Stripe enables cards and other common payment methods. You can turn\nindividual payment methods on or off in the [Stripe\nDashboard](https://dashboard.stripe.com/settings/payment_methods). In Checkout,\nStripe evaluates the currency and any restrictions, then dynamically presents\nthe supported payment methods to the customer.\n\nTo see how your payment methods appear to customers, enter a transaction ID or\nset an order amount and currency in the Dashboard.\n\nYou can enable Apple Pay and Google Pay in your [payment methods\nsettings](https://dashboard.stripe.com/settings/payment_methods). By default,\nApple Pay is enabled and Google Pay is disabled. However, in some cases Stripe\nfilters them out even when they’re enabled. We filter Google Pay if you [enable\nautomatic tax](https://docs.stripe.com/tax/checkout) without collecting a\nshipping address.\n\nCheckout’s Stripe-hosted pages don’t need integration changes to enable Apple\nPay or Google Pay. Stripe handles these payments the same way as other card\npayments.\n\n[Add or remove payment methods to your\nintegration](https://docs.stripe.com/payments/dashboard-payment-methods#add-remove)\nOn the payment methods settings Dashboard page, you can view the available\npayment methods and turn on new payment methods for your integration.\n\nYou can enable some payment methods just by selecting **Turn on**. However, some\npayment methods require additional steps to turn them on. For those cases,\nyou’ll see a button that says **Set up** or **Review terms**.\n\nTo learn more about which payment methods are right for your business, see our\n[payment methods guide](https://stripe.com/payments/payment-methods-guide).\n\n[(Recommended) Handle delayed notification payment\nmethods](https://docs.stripe.com/payments/dashboard-payment-methods#delayed-notifications)\nDepending on the type of payment method you integrate, there can be a 2-14 day\ndelay in payment confirmation. If you set up\n[webhooks](https://docs.stripe.com/webhooks) to [automatically\nfulfill](https://docs.stripe.com/checkout/fulfillment#create-payment-event-handler)\norders with your Checkout integration, when you add your first delayed\nnotification payment methods, you might need to update your code.\n\n#### Caution\n\nThis step is only required if you plan to use any of the following payment\nmethods: [Bacs Direct\nDebit](https://docs.stripe.com/payments/bacs-debit/accept-a-payment), [Bank\ntransfers](https://docs.stripe.com/payments/bank-transfers/accept-a-payment),\n[Boleto](https://docs.stripe.com/payments/boleto/accept-a-payment), [Canadian\npre-authorized\ndebits](https://docs.stripe.com/payments/acss-debit/accept-a-payment),\n[Konbini](https://docs.stripe.com/payments/konbini/accept-a-payment),\n[OXXO](https://docs.stripe.com/payments/oxxo/accept-a-payment), [Pay by\nBank](https://docs.stripe.com/payments/pay-by-bank/accept-a-payment), [SEPA\nDirect Debit](https://docs.stripe.com/payments/sepa-debit/accept-a-payment),\n[SOFORT](https://docs.stripe.com/payments/sofort/accept-a-payment), or [ACH\nDirect\nDebit](https://docs.stripe.com/payments/ach-direct-debit/accept-a-payment).\n\nWhen receiving payments with a delayed notification payment method, funds aren’t\nimmediately available. It can take multiple days for funds to process so you\nshould delay order fulfillment until the funds are available in your account.\nAfter the payment succeeds, the underlying\n[PaymentIntent](https://docs.stripe.com/payments/payment-intents) status changes\nfrom `processing` to `succeeded`.\n\nYou’ll need to handle the following Checkout events:\n\nEvent NameDescriptionNext\nsteps[checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed)The\ncustomer has successfully authorized the debit payment by submitting the\nCheckout form.Wait for the payment to succeed or\nfail.[checkout.session.async_payment_succeeded](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_succeeded)The\ncustomer’s payment succeeded.Fulfill the purchased goods or\nservices.[checkout.session.async_payment_failed](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_failed)The\npayment was declined, or failed for some other reason.Contact the customer via\nemail and request that they place a new order.\nThese events all include the [Checkout\nSession](https://docs.stripe.com/api/checkout/sessions) object.\n\nUpdate your event handler to fulfill the order:\n\n```\n# Set your secret key. Remember to switch to your live secret key in production.\n# See your keys here: https://dashboard.stripe.com/apikeys\nStripe.api_key = 'sk_test_BQokikJOvBiI2HlWgH4olfQ2'\n\n# You can find your endpoint's secret in the output of the `stripe listen`\n# command you ran earlier\nendpoint_secret = 'whsec_...'\n\npost '/webhook' do\n event = nil\n\n # Verify webhook signature and extract the event\n # See https://stripe.com/docs/webhooks#verify-events for more information.\n begin\n sig_header = request.env['HTTP_STRIPE_SIGNATURE']\n payload = request.body.read\nevent = Stripe::Webhook.construct_event(payload, sig_header, endpoint_secret)\n rescue JSON::ParserError => e\n # Invalid payload\n return status 400\n rescue Stripe::SignatureVerificationError => e\n # Invalid signature\n return status 400\n end\n\n case event['type']\n if event['type'] == 'checkout.session.completed'\n checkout_session = event['data']['object']\n\n fulfill_order(checkout_session)\n end\n when 'checkout.session.completed'\n checkout_session = event['data']['object']\n\n # Save an order in your database, marked as 'awaiting payment'\n create_order(checkout_session)\n\n # Check if the order is already paid (for example, from a card payment)\n #\n # A delayed notification payment will have an `unpaid` status, as\n # you're still waiting for funds to be transferred from the customer's\n # account.\n if checkout_session.payment_status == 'paid'\n fulfill_order(checkout_session)\n end\n when 'checkout.session.async_payment_succeeded'\n checkout_session = event['data']['object']\n\n # Fulfill the purchase...\n fulfill_order(checkout_session)\n when 'checkout.session.async_payment_failed'\n session = event['data']['object']\n\n # Send an email to the customer asking them to retry their order\n email_customer_about_failed_payment(checkout_session)\n end\n\n status 200\nend\n\ndef fulfill_order(checkout_session)\n # TODO: fill in with your own logic\n puts \"Fulfilling order for #{checkout_session.inspect}\"\nend\n\ndef create_order(checkout_session)\n # TODO: fill in with your own logic\n puts \"Creating order for #{checkout_session.inspect}\"\nend\n\ndef email_customer_about_failed_payment(checkout_session)\n # TODO: fill in with your own logic\nputs \"Emailing customer about payment failure for: #{checkout_session.inspect}\"\nend\n```\n\n### Testing\n\nEnsure that `stripe listen` is still running. Go through Checkout as a test\nuser, like you did in the prior steps. Your event handler should receive a\n`checkout.session.completed` event, and you should have successfully handled it.\n\nNow that you’ve completed these steps, you’re ready to go live in production\nwhenever you decide to do so.\n\n[Test your\nintegration](https://docs.stripe.com/payments/dashboard-payment-methods#test-your-integration)CardsWalletsBank\nredirectsBank debitsVouchersCard numberScenarioHow to test4242424242424242The\ncard payment succeeds and doesn’t require authentication.Fill out the credit\ncard form using the credit card number with any expiration, CVC, and postal\ncode.4000002500003155The card payment requires\n[authentication](https://docs.stripe.com/strong-customer-authentication).Fill\nout the credit card form using the credit card number with any expiration, CVC,\nand postal code.4000000000009995The card is declined with a decline code like\n`insufficient_funds`.Fill out the credit card form using the credit card number\nwith any expiration, CVC, and postal code.6205500000000000004The UnionPay card\nhas a variable length of 13-19 digits.Fill out the credit card form using the\ncredit card number with any expiration, CVC, and postal code.\nSee [Testing](https://docs.stripe.com/testing) for additional information to\ntest your integration.\n\n## Links\n\n- [https://example.com/return](https://example.com/return)\n- [payment methods\nsettings](https://dashboard.stripe.com/settings/payment_methods)\n- [enable automatic tax](https://docs.stripe.com/tax/checkout)\n- [payment methods guide](https://stripe.com/payments/payment-methods-guide)\n- [webhooks](https://docs.stripe.com/webhooks)\n- [automatically\nfulfill](https://docs.stripe.com/checkout/fulfillment#create-payment-event-handler)\n- [Bacs Direct\nDebit](https://docs.stripe.com/payments/bacs-debit/accept-a-payment)\n- [Bank\ntransfers](https://docs.stripe.com/payments/bank-transfers/accept-a-payment)\n- [Boleto](https://docs.stripe.com/payments/boleto/accept-a-payment)\n- [Canadian pre-authorized\ndebits](https://docs.stripe.com/payments/acss-debit/accept-a-payment)\n- [Konbini](https://docs.stripe.com/payments/konbini/accept-a-payment)\n- [OXXO](https://docs.stripe.com/payments/oxxo/accept-a-payment)\n- [Pay by Bank](https://docs.stripe.com/payments/pay-by-bank/accept-a-payment)\n- [SEPA Direct\nDebit](https://docs.stripe.com/payments/sepa-debit/accept-a-payment)\n- [SOFORT](https://docs.stripe.com/payments/sofort/accept-a-payment)\n- [ACH Direct\nDebit](https://docs.stripe.com/payments/ach-direct-debit/accept-a-payment)\n- [PaymentIntent](https://docs.stripe.com/payments/payment-intents)\n-\n[checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed)\n-\n[checkout.session.async_payment_succeeded](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_succeeded)\n-\n[checkout.session.async_payment_failed](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_failed)\n- [Checkout Session](https://docs.stripe.com/api/checkout/sessions)\n- [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys)\n-\n[https://stripe.com/docs/webhooks#verify-events](https://stripe.com/docs/webhooks#verify-events)\n- [authentication](https://docs.stripe.com/strong-customer-authentication)\n- [Testing](https://docs.stripe.com/testing)",
  "metadata": {
    "title": "Migrate payment methods to the Dashboard | Stripe Documentation",
    "description": "Turn on different Checkout payment methods through the Dashboard.",
    "sourceURL": "https://docs.stripe.com/payments/dashboard-payment-methods"
  }
}