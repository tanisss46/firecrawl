{
  "content": "# Accept a payment using Stripe Elements and the Charges APICharges API\n\n## Accept online payments from US and Canadian customers.\n\n#### Legacy API\n\nThe content of this section refers to a Legacy feature. Use the [Payment Intents\nAPI](https://docs.stripe.com/payments/accept-a-payment) instead.\n\nThe Charges API doesn’t support the following features, many of which are\nrequired for credit card compliance:\n\n- Merchants in India\n- [Bank requests for card\nauthentication](https://docs.stripe.com/payments/cards/overview)\n- [Strong Customer\nAuthentication](https://docs.stripe.com/strong-customer-authentication)\nWebiOSAndroid\nUse Stripe Elements, our prebuilt UI components, to create a payment form that\nlets you securely collect a customer’s card details without handling the\nsensitive data. The card details are then converted to a representative\n[Token](https://docs.stripe.com/api#tokens) that you can safely send to your\nservers. Your server can use that token to create a charge.\n\n[Set up\nStripe](https://docs.stripe.com/payments/accept-a-payment-charges#web-setup)\nFirst, you need a Stripe account. [Register\nnow](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n```\n# Available as a gem\nsudo gem install stripe\n```\n\n```\n# If you use bundler, you can add this line to your Gemfile\ngem 'stripe'\n```\n\n[Create your payment\nformClient-side](https://docs.stripe.com/payments/accept-a-payment-charges#web-create-payment-form)\nTo securely collect card details from your customers, Stripe Elements creates UI\ncomponents for you that are hosted by Stripe. They’re then placed into your\npayment form, rather than you creating them directly.\n\n### Set up Stripe Elements\n\nHTML + JSReact\nTo have Elements available in your webpage, add this script tag in the `head` of\nyour HTML page:\n\n```\n<script src=\"https://js.stripe.com/v3/\"></script>\n```\n\nThat script should always be loaded directly from **https://js.stripe.com**.\n\nCreate an instance of Elements with the following JavaScript on your payment\npage:\n\n```\n// Set your publishable key: remember to change this to your live publishable\nkey in production\n// See your keys here: https://dashboard.stripe.com/apikeys\nconst stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\nconst elements = stripe.elements();\n```\n\nOnce Elements is loaded, you can create an empty DOM container with a unique ID\nwithin your payment form wherever you want Elements to add its input field. We\nrecommend placing that container within a `<label>` or next to a `<label>` with\na `for` attribute that matches the unique `id` of the Element container. By\ndoing so, the Element automatically gains focus when the customer clicks on the\ncorresponding label.\n\nFor example:\n\n```\n<form action=\"/charge\" method=\"post\" id=\"payment-form\">\n <div class=\"form-row\">\n <label for=\"card-element\">\n Credit or debit card\n </label>\n <div id=\"card-element\">\n <!-- A Stripe Element will be inserted here. -->\n </div>\n\n <!-- Used to display Element errors. -->\n <div id=\"card-errors\" role=\"alert\"></div>\n </div>\n\n <button>Submit Payment</button>\n</form>\n```\n\nWhen the form above has loaded, [create an\ninstance](https://docs.stripe.com/js#elements-create) of a `card` Element and\nmount it to the Element container created above:\n\n```\n// Custom styling can be passed to options when creating an Element.\nconst style = {\n base: {\n // Add your base input styles here. For example:\n fontSize: '16px',\n color: '#32325d',\n },\n};\n\n// Create an instance of the card Element.\nconst card = elements.create('card', {style});\n\n// Add an instance of the card Element into the `card-element` <div>.\ncard.mount('#card-element');\n```\n\nThe `card` Element simplifies the form and minimizes the number of required\nfields by inserting a single, flexible input field that securely collects all\nnecessary card details.\n\nOtherwise, combine `cardNumber`, `cardExpiry`, and `cardCvc` Elements for a\nflexible, multi-input card form.\n\n#### Note\n\nAlways collect a postal code to increase card acceptance rates and reduce fraud.\n\nThe [single line Card\nElement](https://docs.stripe.com/js/element/other_element?type=card)\nautomatically collects and sends the customer’s postal code to Stripe. If you\nbuild your payment form with split Elements ([Card\nNumber](https://docs.stripe.com/js/element/other_element?type=cardNumber),\n[Expiry](https://docs.stripe.com/js/element/other_element?type=cardExpiry),\n[CVC](https://docs.stripe.com/js/element/other_element?type=cardCvc)), add a\nseparate input field for the customer’s postal code.\n\nRefer to our [Stripe.js reference](https://docs.stripe.com/js#elements_create)\ndocumentation for a full list of supported Element types.\n\n[Create a\ntokenClient-side](https://docs.stripe.com/payments/accept-a-payment-charges#web-create-token)HTML\n+ JSReact\nAdd an event listener for when your customer submits their card information and\nuse `stripe.createToken(card)` to tokenize that information:\n\n```\n// Create a token or display an error when the form is submitted.\nconst form = document.getElementById('payment-form');\nform.addEventListener('submit', async (event) => {\n event.preventDefault();\n\n const {token, error} = await stripe.createToken(card);\n\n if (error) {\n // Inform the customer that there was an error.\n const errorElement = document.getElementById('card-errors');\n errorElement.textContent = error.message;\n } else {\n // Send the token to your server.\n stripeTokenHandler(token);\n }\n});\n```\n\n[createToken](https://docs.stripe.com/js/tokens/create_token?type=cardElement)\nalso accepts an optional second parameter containing additional card information\ncollected from the customer, which is not used in this example. The function\nreturns a `Promise` which resolves with a `result` object. This object has\neither:\n\n- `result.token`: a [Token](https://docs.stripe.com/api#tokens) was created\nsuccessfully.\n- `result.error`: there was an error. This includes client-side validation\nerrors. Refer to the [API reference](https://docs.stripe.com/api#errors) for all\npossible errors.\n\nIf the object contains a `result.token`, send it to your server. Otherwise, show\nthe customer an error.\n\n[Submit the token to your\nserverClient-side](https://docs.stripe.com/payments/accept-a-payment-charges#web-submit-payment)\nSend the token to your server along with any additional information that has\nbeen collected:\n\nHTML + JSReact\n```\nconst stripeTokenHandler = (token) => {\n // Insert the token ID into the form so it gets submitted to the server\n const form = document.getElementById('payment-form');\n const hiddenInput = document.createElement('input');\n hiddenInput.setAttribute('type', 'hidden');\n hiddenInput.setAttribute('name', 'stripeToken');\n hiddenInput.setAttribute('value', token.id);\n form.appendChild(hiddenInput);\n\n // Submit the form\n form.submit();\n}\n```\n\n[Create a charge with the\ntokenServer-side](https://docs.stripe.com/payments/accept-a-payment-charges#web-create-charge)\nAfter the client posts the token to your server, you can use it to create a\ncharge. On your server, grab the Stripe token in the POST parameters submitted\nby your form. From there, it’s one API call to charge the card:\n\n```\ncurl https://api.stripe.com/v1/charges \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"amount\"=999 \\\n -d \"currency\"=\"usd\" \\\n -d \"description\"=\"Example charge\" \\\n -d \"source\"=\"tok_visa\"\n```\n\nThe response from creating a charge will either be a\n[charge](https://docs.stripe.com/api/charges/object) or an\n[error](https://docs.stripe.com/api/errors) with an [error\ncode](https://docs.stripe.com/error-codes). If the response succeeds, fulfill\nthe customer’s order and show them a success page. Otherwise, show them an error\npage.\n\n## Test your integration\n\nIf you can reliably enter a test card in your HTML form, submit it to the\nserver, and see that your server created the charge, then your integration is\nfinished.\n\nCongratulations! You completed a basic payments integration with the Charges\nAPI. This API doesn’t support scaling businesses or customers outside of the US\nand Canada. For more robust and global payments, learn to accept a payment with\nthe [Payment Intents API](https://docs.stripe.com/payments/accept-a-payment).\n\n## See also\n\nYou can learn more about Elements and how to save cards with the Charges API.\n\n- [Learn about Stripe Elements](https://docs.stripe.com/payments/elements)\n- [Saving cards with the Charges API](https://docs.stripe.com/saving-cards)\n\n## Links\n\n- [Payment Intents API](https://docs.stripe.com/payments/accept-a-payment)\n- [Bank requests for card\nauthentication](https://docs.stripe.com/payments/cards/overview)\n- [Strong Customer\nAuthentication](https://docs.stripe.com/strong-customer-authentication)\n- [Token](https://docs.stripe.com/api#tokens)\n- [Register now](https://dashboard.stripe.com/register)\n- [https://js.stripe.com/v3/](https://js.stripe.com/v3/)\n- [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys)\n- [create an instance](https://docs.stripe.com/js#elements-create)\n- [single line Card\nElement](https://docs.stripe.com/js/element/other_element?type=card)\n- [Card\nNumber](https://docs.stripe.com/js/element/other_element?type=cardNumber)\n- [Expiry](https://docs.stripe.com/js/element/other_element?type=cardExpiry)\n- [CVC](https://docs.stripe.com/js/element/other_element?type=cardCvc)\n- [Stripe.js reference](https://docs.stripe.com/js#elements_create)\n- [createToken](https://docs.stripe.com/js/tokens/create_token?type=cardElement)\n- [API reference](https://docs.stripe.com/api#errors)\n- [charge](https://docs.stripe.com/api/charges/object)\n- [error](https://docs.stripe.com/api/errors)\n- [error code](https://docs.stripe.com/error-codes)\n- [Learn about Stripe Elements](https://docs.stripe.com/payments/elements)\n- [Saving cards with the Charges API](https://docs.stripe.com/saving-cards)",
  "metadata": {
    "title": "Accept a payment using Stripe Elements and the Charges API | Stripe Documentation",
    "description": "Accept online payments from US and Canadian customers.",
    "sourceURL": "https://docs.stripe.com/payments/accept-a-payment-charges"
  }
}