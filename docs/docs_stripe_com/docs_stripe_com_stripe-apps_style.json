{
  "content": "# Style your app\n\n## Learn how to style UI components in your app.\n\nYou can style a Stripe App using design tokens that we provide. This helps you\nmatch the Dashboard visually, provide consistency, and maintain a high quality\nbar.\n\n- The `Box` and `Inline` components support [custom\nstyles](https://docs.stripe.com/stripe-apps/style#custom-styles).\n- Other components have [preset\nstyles](https://docs.stripe.com/stripe-apps/style#preset-styles) which you can\nsometimes adjust.\n\n## Custom styles\n\nThe [Box](https://docs.stripe.com/stripe-apps/components/box) and\n[Inline](https://docs.stripe.com/stripe-apps/components/inline) components\nsupport custom styles. `Box` and `Inline` are styleable containers like HTML\n`div` and `span`. To style them, use their `css` prop. They use CSS syntax, with\na few differences from vanilla CSS.\n\nLoading example...\n```\n<Box\n css={{\n padding: 'xxlarge',\n color: 'secondary',\n backgroundColor: 'container',\n borderRadius: 'small',\n }}\n>\n This is a box.\n</Box>\n```\n\nUnlike in vanilla CSS, you can’t choose arbitrary font faces and styles. Use the\n`font` and `fontWeight` properties. For more information, see\n[Typography](https://docs.stripe.com/stripe-apps/style#typograpphy).\n\nLoading example...\n```\n<Inline css={{font: 'body', color: 'primary', fontWeight: 'semibold'}}>\n This text is emphasized\n</Inline>\n```\n\nLayout also works differently than it does in vanilla CSS. Instead, Stripe Apps\nuse the same layout system Stripe uses internally. For more information, see\n[Layout](https://docs.stripe.com/stripe-apps/style#layout).\n\n```\n<Box\n css={{\n stack: 'x',\n gap: 'medium',\n }}\n>\n <Box css={{width: '1/4', padding: 'medium', keyline: 'neutral'}} />\n <Box css={{width: '3/4', padding: 'medium', keyline: 'neutral'}} />\n</Box>\n```\n\nAll styling tokens are exposed through TypeScript, which means you’ll get a\ndropdown in your editor to autocomplete from the available values.\n\n## Color\n\nSet colors in your custom styles by using the following values.\n\n### Backgrounds\n\nTo set the background color of a\n[Box](https://docs.stripe.com/stripe-apps/components/box) or\n[Inline](https://docs.stripe.com/stripe-apps/components/inline) component, use\nthe CSS `backgroundColor` property:\n\n```\n<Box css={{ backgroundColor: 'container' }}>\n Box with a darker background.\n</Box>\n```\n\nUse the following tokens as values for `backgroundColor`:\n\nExampleTokenUsage`surface`Used for the background of apps`container`Used for\ncards and sections within an app\n### Borders\n\nTo add a border to a [Box](https://docs.stripe.com/stripe-apps/components/box)\nor [Inline](https://docs.stripe.com/stripe-apps/components/inline) component,\nuse the CSS `keyline` property:\n\n```\n<Box css={{ keyline: 'neutral' }}>\n Box with a neutral border.\n</Box>\n```\n\nUse the following tokens as values for `keyline`:\n\nExampleTokenUsage`neutral`The default color for all borders and\ndividers`critical`Used for content which is critically urgent to the user\n### Text & icons\n\nTo set a color for all text or icons in a\n[Box](https://docs.stripe.com/stripe-apps/components/box) or\n[Inline](https://docs.stripe.com/stripe-apps/components/inline) component, use\nthe CSS `color` property:\n\n```\n<Box css={{ color: 'success' }}>\n Box with green text.\n</Box>\n```\n\nFor an icon that contrasts with the other children of its container, use `fill`.\nOtherwise, icons match the text around them.\n\n```\n<Box css={{ color: 'primary' }}>\n <Icon css={{ fill: 'success' }}/>\n Box with normal text and a green icon.\n</Box>\n```\n\nUse the following tokens as values for `color` and `fill`:\n\nExampleTokenUsage`primary`The default color for text and icons`secondary`Used to\nfor text and icons which are less prominent`disabled`Used for elements which are\ndisabled`info`Used for content that is neutral and informational`success`Used\nfor content which indicates the success of some action`attention`Used for\ncontent which is should grab the user’s attention`critical`Used for content\nwhich is critically urgent to the user. Should be used sparingly.\n## Typography\n\nTo change the style of text in a\n[Box](https://docs.stripe.com/stripe-apps/components/box) or\n[Inline](https://docs.stripe.com/stripe-apps/components/inline) component, use\nthe custom `font` property:\n\n```\n<Inline css={{font: 'heading'}}>Heading</Inline>\n```\n\nThe following styles are available:\n\nTokenUsageExampleheadingUsed for labeling a section of your appThe quick brown\nfox jumps over the lazy dog.subheadingUsed for labeling content within a section\nof your appThe quick brown fox jumps over the lazy dog.bodyPrimary body text of\nthe appThe quick brown fox jumps over the lazy dog.captionUsed for text that\nshould be less prominent than body textThe quick brown fox jumps over the lazy\ndog.\n### Text overflow and wrapping\n\nTo change how overflow text is handled in a\n[Box](https://docs.stripe.com/stripe-apps/components/box) component, use the\n`textOverflow`, `overflow`, `whiteSpace`, and `overflowWrap` properties:\n\n```\n<Box css={{textOverflow: 'ellipsis', overflow: 'hidden', overflowWrap:\n'normal'}}>\n Box where long text is cut off with an ellipsis\n</Box>\n```\n\nCSSUsageExample{textOverflow: 'ellipsis', overflow: 'hidden', overflowWrap:\n'normal'}Used for adding an ellipsis (...) to text that overflows the available\nspaceSupercalifragilisticexpialidociousSupercalifragilisticexpialidociousSupercalifragilisticexpialidocious{overflowWrap:\n'break-word'}Used for breaking up long\nwordsSupercalifragilisticexpialidociousSupercalifragilisticexpialidocious{whiteSpace:\n'nowrap'}Used to prevent lines from wrappingThis text is too long for the\ncontainer.\nFor for more overflow and text wrapping scenarios, see [Wrapping and Breaking\nText](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Text/Wrapping_Text).\n\n### Text transformation\n\nYou can transform text in a\n[Box](https://docs.stripe.com/stripe-apps/components/box) or\n[Inline](https://docs.stripe.com/stripe-apps/components/inline) component using\nthe `textTransform` property:\n\n```\n<Box css={{textTransform: 'uppercase'}}>\n Box where all text appears uppercase\n</Box>\n```\n\nHere are some common values that can be used for the `textTransform` property:\n\nTokenUsageBeforeAftercapitalizeUsed to convert the first letter of each word to\nuppercaseLorem ipsum dolor sit ametLorem ipsum dolor sit ametuppercaseUsed to\nconvert all letters to uppercaseLorem ipsum dolor sit ametLorem ipsum dolor sit\nametlowercaseUsed to convert all letters to lowercaseLorem ipsum dolor sit\nametLorem ipsum dolor sit ametnoneUsed to prevent the case of letters from being\nchangedloREM iPSUm DOLor SIt AMetloREM iPSUm DOLor SIt AMet\nSee\n[text-transform](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform)\nfor the full list.\n\n### Text alignment\n\nYou can change the alignment of text in a\n[Box](https://docs.stripe.com/stripe-apps/components/box) component using the\n`textAlign` property:\n\n```\n<Box css={{textAlign: 'center'}}>\n Box where text is centered\n</Box>\n```\n\nUse the following token values for `textAlign`:\n\nTokenUsageExampleleftUsed to algin text to the leftThis text is left\nalignedrightUsed to align text to the rightThis text is right alignedstartUsed\nalign text to the start directionThis text is start alignedendUsed to align text\nto the end directionThis text is end alignedcenterUsed to center textThis text\nis centeredjustifyUsed to justify textThis is some text that is justified\n## Layout\n\nThe Stripe Apps layout styling API allows you to write styles that can take\nadvantage of our design tokens and includes other improvements over vanilla CSS.\nUse these tokens in a [Box](https://docs.stripe.com/stripe-apps/components/box)\ncomponent to control layout for its children. Other containers, like\n[List](https://docs.stripe.com/stripe-apps/components/list), handle layout\nautomatically.\n\nWe conceptualize layouts as “stacks.”\n\n### Horizontal stacks\n\nTo stack elements horizontally and match widths:\n\n```\n<Box\n css={{\n stack: 'x',\n gap: 'medium',\n alignX: 'stretch', // This is the default and can be omitted\n }}\n>\n```\n\nTo stack elements horizontally with fractional widths:\n\n```\n<Box\n css={{\n stack: 'x',\n gap: 'medium',\n }}\n>\n <Box css={{width: '1/4', padding: 'medium', keyline: 'neutral'}} />\n <Box css={{width: '3/4', padding: 'medium', keyline: 'neutral'}} />\n</Box>\n```\n\nTo stack elements horizontally with a fractional width for one element and the\nrest of the elements stretched:\n\n```\n<Box\n css={{\n stack: 'x',\n gap: 'medium',\n }}\n>\n <Box css={{padding: 'medium', keyline: 'neutral'}} />\n <Box css={{width: '1/4', padding: 'medium', keyline: 'neutral'}} />\n <Box css={{padding: 'medium', keyline: 'neutral'}} />\n</Box>\n```\n\nTo align elements to the start with a gap:\n\n```\n<Box\n css={{\n stack: 'x',\n gap: 'medium',\n alignX: 'start',\n }}\n>\n```\n\nTo distribute elements:\n\n```\n<Box\n css={{\n stack: 'x',\n distribute: 'space-between',\n }}\n>\n```\n\nTo align elements to the end with a gap:\n\n```\n<Box\n css={{\n stack: 'x',\n gap: 'medium',\n alignX: 'end',\n }}\n>\n```\n\nTo vertically align elements to the bottom:\n\n```\n<Box\n css={{\n stack: 'x',\n gap: 'medium',\n alignX: 'start',\n alignY: 'bottom',\n }}\n>\n```\n\nTo include dividers between elements:\n\n```\n<Box\n css={{\n stack: 'x',\n gap: 'small',\n alignX: 'start',\n }}\n>\n <Box css={{padding: 'medium', keyline: 'neutral'}} />\n <Divider />\n <Box css={{padding: 'medium', keyline: 'neutral'}} />\n <Divider />\n <Box css={{padding: 'medium', keyline: 'neutral'}} />\n</Box>\n```\n\nTo wrap items into rows:\n\n```\n<Box\n css={{\n stack: 'x',\n gap: 'medium',\n wrap: 'wrap',\n alignX: 'start',\n }}\n>\n```\n\nTo have a different horizontal and vertical gap:\n\n```\n<Box\n css={{\n stack: 'x',\n gapX: 'small',\n gapY: 'large',\n wrap: 'wrap',\n alignX: 'start',\n }}\n>\n```\n\nTo center elements horizontally while wrapping:\n\n```\n<Box\n css={{\n stack: 'x',\n gap: 'medium',\n wrap: 'wrap',\n alignX: 'center',\n }}\n>\n```\n\nTo center elements vertically while wrapping:\n\n```\n<Box\n css={{\n stack: 'x',\n gap: 'medium',\n wrap: 'wrap',\n alignX: 'start',\n alignY: 'center',\n }}\n>\n```\n\n### Vertical stacks\n\nTo stack elements vertically and match widths:\n\n```\n<Box\n css={{\n stack: 'y',\n gap: 'medium',\n }}\n>\n```\n\nTo stack elements vertically while centering horizontally:\n\n```\n<Box\n css={{\n stack: 'y',\n gap: 'medium',\n alignX: 'center',\n }}\n>\n <Box css={{width: '1/4', padding: 'medium', keyline: 'neutral'}} />\n <Box css={{width: '2/3', padding: 'medium', keyline: 'neutral'}} />\n <Box css={{width: '1/3', padding: 'medium', keyline: 'neutral'}} />\n</Box>\n```\n\n### Layered stacks\n\nTo display elements atop one another:\n\n```\n<Box\n css={{\n stack: 'z',\n alignX: 'center',\n alignY: 'center',\n }}\n>\n <Box css={{padding: 'xxlarge', keyline: 'neutral'}} />\n <Box css={{padding: 'large', keyline: 'neutral'}} />\n <Box css={{padding: 'small', keyline: 'neutral'}} />\n</Box>\n```\n\n### Layout properties\n\nPropertyValues`alignX``'start' | 'center' | 'end' | 'stretch'``alignY``'top' |\n'center' | 'baseline' | 'bottom' | 'stretch'``distribute``'space-between' |\n'packed'``gap`See\n[Spacing](https://docs.stripe.com/stripe-apps/style#spacing)`overflowX |\noverflowY``'visible' | 'hidden' | 'scroll' | 'auto'``stack``'x' | 'y' |\n'z'``wrap``'wrap'`\n## Spacing\n\nYou can specify margins, padding, and layout gaps using the values listed below.\n\n```\n<Box css={{margin: 'small'}} />\n```\n\nTokenValue`0`0px`xxsmall`2px`xsmall`4px`small`8px`medium`16px`large`24px`xlarge`32px`xxlarge`48px\n## Sizing\n\nYou can specify width and height using fractions or content-based sizing tokens.\n\n```\n<Box css={{width: '1/2'}} />\n```\n\n### Fractional sizing\n\nThe available fractions include halves, thirds, quarters, fifths, sixths and,\ntwelfths. The `fill` token enables a component to match the size of its\ncontainer.\n\nTokenValue`0`0px`1/2`50%`1/3`, `2/3`33.333333%, 66.666667%`1/4`, `2/4`,\n`3/4`,25%, 50%, 75%`1/5`, `2/5`, `3/5`, `4/5`20%, 40%, 60%, 80%`1/6`, `2/6`,\n`3/6`, `4/6`, `5/6`16.666667%, 33.333333%, 50%, 66.666667%, 83.333333%`1/12`,\n`2/12`, `3/12`, `4/12`, `5/12`, `6/12`, `7/12`, `8/12`, `9/12`, `10/12`,\n`11/12`8.333333%, 16.666667%, 25%, 33.333333%, 41.666667%, 50%, 58.333333%,\n66.666667%, 75%, 83.333333%, 91.666667%`fill`100\n### Content-based sizing\n\nYou can size a `Box` relative to the content within it.\n\nTokenUsage`min`Content inside the component takes all wrapping opportunities,\nbecoming as small as the longest contents.`max`Represents the maximum possible\nwidth of the content. When applied to text, the text won’t wrap, even if it\ncauses the text to extend outside the bounds of its container.`fit`Fills the\navailable space, but only up to the maximum size of the content.\n## Preset styles\n\nComponents other than `Box` and `Inline` have preset styles, which helps\nmaintain consistency. You can sometimes control or override the presets in a\nspecific way.\n\n### Automatic styling\n\nSome components style themselves automatically. For example,\n[Chips](https://docs.stripe.com/stripe-apps/components/chip) automatically\nchange their appearance depending on what callbacks they implement. This helps\nthe user understand their behavior. To avoid confusion, you can’t override these\ndetails.\n\nLoading example...\n```\n<Box\n css={{\n backgroundColor: 'surface',\n padding: 'medium',\n borderRadius: 'medium',\n }}\n>\n <ChipList>\n <Chip\n label=\"Currency\"\n value=\"USD\"\n onDropdown={() => {\n console.log('Dropdown function triggered');\n }}\n onClose={() => {\n console.log('Close function triggered');\n }}\n />\n <Chip\n label=\"Status\"\n value=\"Succeeded\"\n onDropdown={() => {\n console.log('Dropdown function triggered');\n }}\n onClose={() => {\n console.log('Close function triggered');\n }}\n />\n <Chip\n label=\"Amount\"\n onAddSuggestion={() => {\n console.log('Add Amount suggestion');\n }}\n />\n <Chip\n label=\"Date\"\n onAddSuggestion={() => {\n console.log('Add Date suggestion');\n }}\n />\n </ChipList>\n</Box>\n```\n\n### Several presets\n\nSome components, like\n[Buttons](https://docs.stripe.com/stripe-apps/components/button), have a few\nstyles you can select using a prop. See the documentation for each component for\ndetails.\n\nLoading example...\n```\n<Button type=\"primary\">Primary</Button>\n<Button>Secondary</Button>\n<Button type=\"destructive\">Destructive</Button>\n```\n\n### Limited CSS\n\nSome components support specific CSS properties. For example,\n[Icons](https://docs.stripe.com/stripe-apps/components/icon) support color using\nthe `fill` property. See the documentation for each component for details.\n\nLoading example...\n```\n<Icon name=\"cancelCircle\" css={{fill: 'critical'}} />\n```\n\n## See also\n\n- [Extension SDK API\nreference](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api)\n- [Stripe Apps UI Components](https://docs.stripe.com/stripe-apps/components)\n- [Build a UI](https://docs.stripe.com/stripe-apps/build-ui)\n\n## Links\n\n- [Box](https://docs.stripe.com/stripe-apps/components/box)\n- [Inline](https://docs.stripe.com/stripe-apps/components/inline)\n- [Wrapping and Breaking\nText](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Text/Wrapping_Text)\n-\n[text-transform](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform)\n- [List](https://docs.stripe.com/stripe-apps/components/list)\n- [Chips](https://docs.stripe.com/stripe-apps/components/chip)\n- [Buttons](https://docs.stripe.com/stripe-apps/components/button)\n- [Icons](https://docs.stripe.com/stripe-apps/components/icon)\n- [Extension SDK API\nreference](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api)\n- [Stripe Apps UI Components](https://docs.stripe.com/stripe-apps/components)\n- [Build a UI](https://docs.stripe.com/stripe-apps/build-ui)",
  "metadata": {
    "title": "Style your app | Stripe Documentation",
    "description": "Learn how to style UI components in your app.",
    "sourceURL": "https://docs.stripe.com/stripe-apps/style"
  }
}