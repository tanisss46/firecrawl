{
  "content": "# Create destination charges\n\n## Create charges on your platform account, collect fees, and immediately transfer the remaining funds to your connected accounts.\n\nCreate *destination charges* when customers transact with your platform for\nproducts or services provided by your connected accounts and you immediately\ntransfer funds to your connected accounts. With this charge type:\n\n- You create a charge on your platform’s account.\n- You determine whether some or all of those funds are transferred to the\nconnected account.\n- Your account balance is debited for the cost of the Stripe fees, refunds, and\nchargebacks.\n\nThis charge type is most optimal for marketplaces such as Airbnb, a home rental\nmarketplace or Lyft, a ridesharing app.\n\nDestination charges are only supported if both your platform and the connected\naccount are in the same country. For cross-border support, you must specify the\n[settlement\nmerchant](https://docs.stripe.com/connect/destination-charges#settlement-merchant)\nto the connected account using the\n[on_behalf_of](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-on_behalf_of)\nparameter on the Payment Intent or other valid [cross-border\ntransfers](https://docs.stripe.com/connect/account-capabilities#transfers-cross-border)\nscenarios.\n\n#### Note\n\nWe recommend using destination charges for connected accounts that have access\nto the Express Dashboard or no dashboard access.\n\nWebiOSAndroidReact NativeStripe-hosted pageEmbedded formCustom flow\nRedirect to a Stripe-hosted payment page using [Stripe\nCheckout](https://docs.stripe.com/payments/checkout). See how this integration\n[compares to Stripe’s other integration\ntypes](https://docs.stripe.com/payments/online-payments#compare-features-and-availability).\n\n### Integration effort\n\nLow code\n### Integration type\n\nRedirect to Stripe-hosted payment page\n\n### UI customization\n\nLimited customization\n[Try it out](https://checkout.stripe.dev/)\n\nFirst, [register](https://dashboard.stripe.com/register) for a Stripe account.\n\nUse our official libraries to access the Stripe API from your application:\n\n```\n# Available as a gem\nsudo gem install stripe\n```\n\n```\n# If you use bundler, you can add this line to your Gemfile\ngem 'stripe'\n```\n\n[Create a Checkout\nSessionClient-sideServer-side](https://docs.stripe.com/connect/destination-charges#create-checkout-session)\nA [Checkout Session](https://docs.stripe.com/api/checkout/sessions) controls\nwhat your customer sees in the payment form such as line items, the order amount\nand currency, and acceptable payment methods. Add a checkout button to your\nwebsite that calls a server-side endpoint to create a Checkout Session.\n\n```\n<html>\n <head>\n <title>Checkout</title>\n </head>\n <body>\n <form action=\"/create-checkout-session\" method=\"POST\">\n <button type=\"submit\">Checkout</button>\n </form>\n </body>\n</html>\n```\n\nDestinationOn behalf of\nOn your server, create a Checkout Session and redirect your customer to the\n[URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url)\nreturned in the response.\n\n```\ncurl https://api.stripe.com/v1/checkout/sessions \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d \"line_items[0][price_data][currency]\"=usd \\\n -d \"line_items[0][price_data][product_data][name]\"=T-shirt \\\n -d \"line_items[0][price_data][unit_amount]\"=1000 \\\n -d \"line_items[0][quantity]\"=1 \\\n -d \"payment_intent_data[application_fee_amount]\"=123 \\\n-d \"payment_intent_data[transfer_data][destination]\"={{CONNECTED_ACCOUNT_ID}} \\\n -d mode=payment \\\n--data-urlencode\nsuccess_url=\"https://example.com/success?session_id={CHECKOUT_SESSION_ID}\"\n```\n\n- `payment_intent_data[transfer_data][destination]` - This parameter indicates\nthat this is a destination charge. A destination charge means the charge is\nprocessed on the platform and then the funds are immediately and automatically\ntransferred to the connected account’s pending balance.\n- `line_items` - This parameter represents the items the customer is purchasing.\nThe items are displayed in the embedded payment form.\n- `success_url` - Stripe redirects the customer to the success URL after they\ncomplete a payment and replaces the `{CHECKOUT_SESSION_ID}` string with the\nCheckout Session ID. Use this to retrieve the Checkout Session and inspect the\nstatus to decide what to show your customer. You can also append your own query\nparameters, which persist through the redirect process. See [customize redirect\nbehavior with a Stripe-hosted\npage](https://docs.stripe.com/payments/checkout/custom-success-page) for more\ninformation.\n- `payment_intent_data[application_fee_amount]` - This parameter specifies the\namount your platform plans to take from the transaction. The full charge amount\nis immediately transferred from the platform to the connected account that’s\nspecified by `transfer_data[destination]` after the charge is captured. The\n`application_fee_amount` is then transferred back to the platform, and the\nStripe fee is deducted from the platform’s amount.\nCustomerPlatformConnected account\n$10 Charge\n\n$10 Transfer\n\n$10 Payment\n\n($1.23) Application fee\n\n$8.77 net\n\n$1.23 Application fee\n\n($0.59) Stripe fees\n\nStripe\n$0.64 net\n\nWhen processing destination charges, Checkout uses the brand settings of your\nplatform account. See [customize\nbranding](https://docs.stripe.com/connect/destination-charges#branding) for more\ninformation.\n\n[Handle post-payment\neventsServer-side](https://docs.stripe.com/connect/destination-charges#handle-post-payment-events)\nStripe sends a\n[checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed)\nevent when the payment completes. [Use a webhook to receive these\nevents](https://docs.stripe.com/webhooks/quickstart) and run actions, like\nsending an order confirmation email to your customer, logging the sale in a\ndatabase, or starting a shipping workflow.\n\nListen for these events rather than waiting on a callback from the client. On\nthe client, the customer could close the browser window or quit the app before\nthe callback executes. Some payment methods also take 2-14 days for payment\nconfirmation. Setting up your integration to listen for asynchronous events\nenables you to accept multiple [payment\nmethods](https://stripe.com/payments/payment-methods-guide) with a single\nintegration.\n\nStripe recommends handling all of the following events when collecting payments\nwith Checkout:\n\nEventDescriptionNext\nsteps[checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed)The\ncustomer has successfully authorized the payment by submitting the Checkout\nform.Wait for the payment to succeed or\nfail.[checkout.session.async_payment_succeeded](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_succeeded)The\ncustomer’s payment succeeded.Fulfill the purchased goods or\nservices.[checkout.session.async_payment_failed](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_failed)The\npayment was declined, or failed for some other reason.Contact the customer\nthrough email and request that they place a new order.\nThese events all include the [Checkout\nSession](https://docs.stripe.com/api/checkout/sessions) object. After the\npayment succeeds, the underlying\n[PaymentIntent](https://docs.stripe.com/payments/payment-intents)\n[status](https://docs.stripe.com/payments/paymentintents/lifecycle) changes from\n`processing` to `succeeded` or a failure status.\n\n[Test the\nintegration](https://docs.stripe.com/connect/destination-charges#test-the-integration)CardsWalletsBank\nredirectsBank debitsVouchersCard numberScenarioHow to test4242424242424242The\ncard payment succeeds and doesn’t require authentication.Fill out the credit\ncard form using the credit card number with any expiration, CVC, and postal\ncode.4000002500003155The card payment requires\n[authentication](https://docs.stripe.com/strong-customer-authentication).Fill\nout the credit card form using the credit card number with any expiration, CVC,\nand postal code.4000000000009995The card is declined with a decline code like\n`insufficient_funds`.Fill out the credit card form using the credit card number\nwith any expiration, CVC, and postal code.6205500000000000004The UnionPay card\nhas a variable length of 13-19 digits.Fill out the credit card form using the\ncredit card number with any expiration, CVC, and postal code.\nSee [Testing](https://docs.stripe.com/testing) for additional information to\ntest your integration.\n\n[OptionalEnable additional payment\nmethods](https://docs.stripe.com/connect/destination-charges#enable-payment-methods)\n## Collect fees\n\nYou can collect fees with either an\n[application_fee_amount](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-payment_intent_data-application_fee_amount)\nor\n[transfer_data[amount]](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-payment_intent_data-transfer_data-amount).\n\napplication_fee_amounttransfer_data[amount]\nWhen creating charges with an `application_fee_amount`, the full charge amount\nis immediately transferred from the platform to the `transfer_data[destination]`\naccount after the charge is captured. The `application_fee_amount` (capped at\nthe full amount of the charge) is then transferred back to the platform.\n\n```\ncurl https://api.stripe.com/v1/checkout/sessions \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d \"line_items[0][price_data][currency]\"=usd \\\n -d \"line_items[0][price_data][product_data][name]\"=T-shirt \\\n -d \"line_items[0][price_data][unit_amount]\"=1000 \\\n -d \"line_items[0][quantity]\"=1 \\\n -d \"payment_intent_data[application_fee_amount]\"=123 \\\n-d \"payment_intent_data[transfer_data][destination]\"={{CONNECTED_ACCOUNT_ID}} \\\n -d mode=payment \\\n --data-urlencode success_url=\"https://example.com/success\"\n```\n\nAfter the application fee is collected, an [Application\nFee](https://docs.stripe.com/api/application_fees/object) object is created. You\ncan view a list of application fees in the\n[Dashboard](https://dashboard.stripe.com/connect/application_fees), with the\n[application fees](https://docs.stripe.com/api/application_fees/list), or in\n[Sigma](https://docs.stripe.com/stripe-data/access-data-in-dashboard). You can\nalso use the `amount` property on the application fee object for itemized fee\nreporting.\n\nWhen using an `application_fee_amount`, know that:\n\n- The `application_fee_amount` is capped at the total transaction amount.\n- The `application_fee_amount` is always computed in the same currency as the\ntransaction.\n- The application fee settles in the same currency as the connected account’s\nsettlement currency. For cross-border destination charges, this might [differ\nfrom your platform’s settlement\ncurrency](https://docs.stripe.com/connect/currencies#application-fees-for-destination-charges-and-converting-balances).\n- Your platform pays the Stripe fee after the `application_fee_amount` is\ntransferred to your account.\n- No additional Stripe fees are applied to the amount.\n- Your platform can use built-in application fee reporting to reconcile [fees\ncollected](https://dashboard.stripe.com/connect/application_fees).\n- In Stripe-hosted dashboards or components such as the [Payment details\ncomponent](https://docs.stripe.com/connect/supported-embedded-components/payment-details),\nyour connected account can view both the total amount and the application fee\namount.\n\n### Flow of funds\n\nWith the above code, the full charge amount (10.00 USD) is added to the\nconnected account’s pending balance. The `application_fee_amount` (1.23 USD) is\nsubtracted from the charge amount and is transferred to your platform. Stripe\nfees (0.59 USD) are subtracted from your platform account’s balance. The\napplication fee amount minus the Stripe fees (1.23 USD - 0.59 USD = 0.64 USD)\nremains in your platform account’s balance.\n\n![Flow of funds for destination\ncharges](https://b.stripecdn.com/docs-statics-srv/assets/destination_charge_app_fee.c9ef81298155b38f986df02d0efa9167.png)\n\nThe `application_fee_amount` becomes available on the platform account’s normal\ntransfer schedule, just like funds from regular Stripe charges.\n\n## Customize branding\n\nYour platform uses the [branding\nsettings](https://dashboard.stripe.com/account/branding) in the Dashboard to\ncustomize branding on the payments page. For destination charges, Checkout uses\nthe branding settings of the platform account. For destination charges with\n`on_behalf_of`, Checkout uses the branding settings of the connected account.\n\nPlatforms can configure the branding settings of connected accounts using the\n[Update\nAccount](https://docs.stripe.com/api/accounts/update#update_account-settings-branding)\nAPI:\n\n- `icon` - Displayed next to the business name in the header of the Checkout\npage.\n- `logo`- Used in place of the icon and business name in the header of the\nCheckout page.\n- `primary_color` - Used as the background color on the Checkout page.\n- `secondary_color` - Used as the button color on the Checkout page.\n\n```\ncurl https://api.stripe.com/v1/accounts/{{CONNECTED_ACCOUNT_ID}} \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d \"settings[branding][icon]\"={{FILE_ID}} \\\n -d \"settings[branding][logo]\"={{FILE_ID}} \\\n --data-urlencode \"settings[branding][primary_color]\"=\"#663399\" \\\n --data-urlencode \"settings[branding][secondary_color]\"=\"#4BB543\"\n```\n\n## Specify the settlement merchant\n\nThe settlement merchant is dependent on the\n[capabilities](https://docs.stripe.com/connect/account-capabilities) set on an\naccount and how a charge is created. The settlement merchant determines whose\ninformation is used to make the charge. This includes the statement descriptor\n(either the platform’s or the connected account’s) that’s displayed on the\ncustomer’s credit card or bank statement for that charge.\n\nSpecifying the settlement merchant allows you to be more explicit about who to\ncreate charges for. For example, some platforms prefer to be the settlement\nmerchant because the end customer interacts directly with their platform (such\nas on-demand platforms). However, some platforms have connected accounts that\ninteract directly with end customers instead (such as a storefront on an\ne-commerce platform). In these scenarios, it might make more sense for the\nconnected account to be the settlement merchant.\n\nYou can set the `on_behalf_of` parameter to the ID of a connected account to\nmake that account the settlement merchant for the payment. When using\n`on_behalf_of`:\n\n- Charges settle in the connected account’s country and settlement currency.\n- The fee structure for the connected account’s country is used.\n- The connected account’s statement descriptor is displayed on the customer’s\ncredit card statement.\n- If the connected account is in a different country than the platform, the\nconnected account’s address and phone number are displayed on the customer’s\ncredit card statement.\n- The number of days that a [pending\nbalance](https://docs.stripe.com/connect/account-balances) is held before being\npaid out depends on the\n[delay_days](https://docs.stripe.com/api/accounts/create#create_account-settings-payouts-schedule-delay_days)\nsetting on the connected account.\n\nIf `on_behalf_of` is omitted, the platform is the business of record for the\npayment.\n\n#### Caution\n\nThe `on_behalf_of` parameter is supported only for connected accounts with a\npayments capability such as\n[card_payments](https://docs.stripe.com/connect/account-capabilities#card-payments).\nAccounts under the [recipient service\nagreement](https://docs.stripe.com/connect/service-agreement-types#recipient)\ncan’t request `card_payments` or other payments capabilities.\n\n## Issue refunds\n\nIf you are using the Payment Intents API, refunds should be issued against [the\nmost recent charge that is\ncreated](https://docs.stripe.com/payments/payment-intents/verifying-status#identifying-charges).\n\nCharges created on the platform account can be refunded using the platform\naccount’s secret key. When refunding a charge that has a\n`transfer_data[destination]`, by default the destination account keeps the funds\nthat were transferred to it, leaving the platform account to cover the negative\nbalance from the refund. To pull back the funds from the connected account to\ncover the refund, set the `reverse_transfer` parameter to `true` when creating\nthe refund:\n\n```\ncurl https://api.stripe.com/v1/refunds \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d charge=\"{CHARGE_ID}\" \\\n -d reverse_transfer=true \\\n```\n\nBy default, the entire charge is refunded, but you can create a partial refund\nby setting an `amount` value as a positive integer.\n\nIf the refund results in the entire charge being refunded, the entire transfer\nis reversed. Otherwise, a proportional amount of the transfer is reversed.\n\n### Refund application fees\n\nWhen refunding a charge with an application fee, by default the platform account\nkeeps the funds from the application fee. To push the application fee funds back\nto the connected account, set the\n[refund_application_fee](https://docs.stripe.com/api/refunds/create#create_refund-refund_application_fee)\nparameter to `true` when creating the refund:\n\n```\ncurl https://api.stripe.com/v1/refunds \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d charge=\"{CHARGE_ID}\" \\\n -d reverse_transfer=true \\\n -d refund_application_fee=true \\\n```\n\nNote that if you refund the application fee for a destination charge, you must\nalso reverse the transfer. If the refund results in the entire charge being\nrefunded, the entire application fee is refunded as well. Otherwise, a\nproportional amount of the application fee is refunded.\n\nAlternatively, you can provide a `refund_application_fee` value of **false** and\nrefund the application fee separately [through the\nAPI](https://docs.stripe.com/api#create_fee_refund).\n\n### Failed refunds\n\nIf a refund fails, or you [cancel\nit](https://docs.stripe.com/refunds#cancel-refund), the amount of the failed\nrefund returns to your platform account’s Stripe balance. Create a\n[Transfer](https://docs.stripe.com/connect/separate-charges-and-transfers#create-transfer)\nto move the funds to the connected account, as needed.\n\n## Handle disputes\n\nFor destination charges, with or without `on_behalf_of`, Stripe debits dispute\namounts and fees from your platform account.\n\nWe recommend setting up [a webhook](https://docs.stripe.com/webhooks) to listen\nto [dispute created\nevents](https://docs.stripe.com/api/events/types#event_types-charge.dispute.created).\nWhen that happens, you can attempt to recover funds from the connected account\nby reversing the transfer through the\n[Dashboard](https://dashboard.stripe.com/test/transfers) or by [creating a\ntransfer reversal](https://docs.stripe.com/api/transfer_reversals/create).\n\nIf the connected account has a negative balance, Stripe attempts to [debit its\nexternal\naccount](https://docs.stripe.com/connect/account-balances#automatically-debit-connected-accounts)\nif `debit_negative_balances` is set to `true`.\n\nIf you challenge the dispute and win, you can transfer the funds that you\npreviously reversed back to the connected account. If your platform has an\ninsufficient balance, the transfer fails. Prevent insufficient balance errors by\n[adding funds to your Stripe\nbalance](https://docs.stripe.com/get-started/account/add-funds).\n\n#### Common mistake\n\nRetransferring a previous reversal is subject to [cross-border transfer\nrestrictions](https://docs.stripe.com/connect/account-capabilities#transfers-cross-border),\nmeaning you might have no means to repay your connected account. Instead, wait\nto recover disputed cross-border payment transfers for destination charges with\n`on_behalf_of` until after a dispute is lost.\n\n## See also\n\n- [Working with multiple currencies](https://docs.stripe.com/connect/currencies)\n- [Statement descriptors with\nConnect](https://docs.stripe.com/connect/statement-descriptors)\n\n## Links\n\n-\n[on_behalf_of](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-on_behalf_of)\n- [cross-border\ntransfers](https://docs.stripe.com/connect/account-capabilities#transfers-cross-border)\n- [Stripe Checkout](https://docs.stripe.com/payments/checkout)\n- [compares to Stripe’s other integration\ntypes](https://docs.stripe.com/payments/online-payments#compare-features-and-availability)\n- [register](https://dashboard.stripe.com/register)\n- [Checkout Session](https://docs.stripe.com/api/checkout/sessions)\n-\n[URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url)\n-\n[https://example.com/success?session_id={CHECKOUT_SESSION_ID}](https://example.com/success?session_id={CHECKOUT_SESSION_ID})\n- [customize redirect behavior with a Stripe-hosted\npage](https://docs.stripe.com/payments/checkout/custom-success-page)\n-\n[checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed)\n- [Use a webhook to receive these\nevents](https://docs.stripe.com/webhooks/quickstart)\n- [payment methods](https://stripe.com/payments/payment-methods-guide)\n-\n[checkout.session.async_payment_succeeded](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_succeeded)\n-\n[checkout.session.async_payment_failed](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_failed)\n- [PaymentIntent](https://docs.stripe.com/payments/payment-intents)\n- [status](https://docs.stripe.com/payments/paymentintents/lifecycle)\n- [authentication](https://docs.stripe.com/strong-customer-authentication)\n- [Testing](https://docs.stripe.com/testing)\n-\n[application_fee_amount](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-payment_intent_data-application_fee_amount)\n-\n[transfer_data[amount]](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-payment_intent_data-transfer_data-amount)\n- [https://example.com/success](https://example.com/success)\n- [Application Fee](https://docs.stripe.com/api/application_fees/object)\n- [Dashboard](https://dashboard.stripe.com/connect/application_fees)\n- [application fees](https://docs.stripe.com/api/application_fees/list)\n- [Sigma](https://docs.stripe.com/stripe-data/access-data-in-dashboard)\n- [differ from your platform’s settlement\ncurrency](https://docs.stripe.com/connect/currencies#application-fees-for-destination-charges-and-converting-balances)\n- [Payment details\ncomponent](https://docs.stripe.com/connect/supported-embedded-components/payment-details)\n- [branding settings](https://dashboard.stripe.com/account/branding)\n- [Update\nAccount](https://docs.stripe.com/api/accounts/update#update_account-settings-branding)\n- [capabilities](https://docs.stripe.com/connect/account-capabilities)\n- [pending balance](https://docs.stripe.com/connect/account-balances)\n-\n[delay_days](https://docs.stripe.com/api/accounts/create#create_account-settings-payouts-schedule-delay_days)\n-\n[card_payments](https://docs.stripe.com/connect/account-capabilities#card-payments)\n- [recipient service\nagreement](https://docs.stripe.com/connect/service-agreement-types#recipient)\n- [the most recent charge that is\ncreated](https://docs.stripe.com/payments/payment-intents/verifying-status#identifying-charges)\n-\n[refund_application_fee](https://docs.stripe.com/api/refunds/create#create_refund-refund_application_fee)\n- [through the API](https://docs.stripe.com/api#create_fee_refund)\n- [cancel it](https://docs.stripe.com/refunds#cancel-refund)\n-\n[Transfer](https://docs.stripe.com/connect/separate-charges-and-transfers#create-transfer)\n- [a webhook](https://docs.stripe.com/webhooks)\n- [dispute created\nevents](https://docs.stripe.com/api/events/types#event_types-charge.dispute.created)\n- [Dashboard](https://dashboard.stripe.com/test/transfers)\n- [creating a transfer\nreversal](https://docs.stripe.com/api/transfer_reversals/create)\n- [debit its external\naccount](https://docs.stripe.com/connect/account-balances#automatically-debit-connected-accounts)\n- [adding funds to your Stripe\nbalance](https://docs.stripe.com/get-started/account/add-funds)\n- [Working with multiple currencies](https://docs.stripe.com/connect/currencies)\n- [Statement descriptors with\nConnect](https://docs.stripe.com/connect/statement-descriptors)",
  "metadata": {
    "title": "Create destination charges | Stripe Documentation",
    "description": "Create charges on your platform account, collect fees, and immediately transfer the remaining funds to your connected accounts.",
    "sourceURL": "https://docs.stripe.com/connect/destination-charges"
  }
}