{
  "content": "# Use Payment Element across multiple processors\n\n## Learn how to collect card details with Payment Element and use them with a third-party processor.\n\nUse [Payment Element](https://docs.stripe.com/payments/payment-element) to build\na custom payment flow that allows you to collect card details, create a\n[PaymentMethod](https://docs.stripe.com/api/payment_methods), and\n[forward](https://docs.stripe.com/api/forwarding/request) the payment method to\na third-party processor.\n\n#### Request access\n\nTo gain access to use Stripe’s forwarding service, contact [Stripe\nsupport](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fsupport.stripe.com%2Fcontact%2Femail%3Fquestion%3Dother%26topic%3Dpayment_apis%26subject%3DHow%2520can%2520I%2520access%2520the%2520Vault%2520and%2520Forward%2520API%3F%26body%3DWhat%2520endpoint%28s%29%2520would%2520you%2520like%2520to%2520forward%2520card%2520details%2520to%3F).\n\nClient\n\nServer\n\nStripe\n\nThird-party processor\n\nCreate a PaymentMethod\n\nProcess the payment on your server\n\nCall the Vault and Forward API with the provided payment method\n\nStripe forwards the request with card data\n\nThird-party processor returns a response\n\nStripe redacts identified PCI-sensitive data and relays the response\n\nHandle server response\n\nForward card details to a third-party processor[Create a\nPaymentMethodClient-side](https://docs.stripe.com/payments/forwarding-third-party-processors#create-payment-method)\nUse a Payment Element to collect payment details. If you’re not integrated with\nthe Payment Element, learn how to [get\nstarted](https://docs.stripe.com/payments/accept-a-payment). After the customer\nsubmits your payment form, call\n[stripe.createPaymentMethod](https://docs.stripe.com/js/payment_methods/create_payment_method)\nto create a [PaymentMethod](https://docs.stripe.com/api/payment_methods). Pass\nthe PaymentMethod ID to the ForwardingRequest endpoint on your server.\n\nHTML + JSReact\n```\n// Set your publishable key: remember to change this to your live publishable\nkey in production\n// See your keys here: https://dashboard.stripe.com/apikeys\nconst stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst options = {\n mode: 'payment',\n amount: 1099,\n currency: 'usd',\n paymentMethodCreation: 'manual',\n // Fully customizable with appearance API.\n appearance: {\n theme: 'stripe'\n }\n};\n\n// Set up Stripe.js and Elements to use in checkout form\nconst elements = stripe.elements(options);\n\nconst paymentElementOptions = {\nlayout: \"tabs\",\n};\n\n// Create and mount the Payment Element\nconst paymentElement = elements.create('payment', paymentElementOptions);\npaymentElement.mount('#payment-element');\n\nconst form = document.getElementById('payment-form');\nconst submitBtn = document.getElementById('submit');\n\nconst handleError = (error) => {\n const messageContainer = document.querySelector('#error-message');\n messageContainer.textContent = error.message;\n submitBtn.disabled = false;\n}\n\nform.addEventListener('submit', async (event) => {\n // We don't want to let default form submission happen here,\n // which would refresh the page.\n event.preventDefault();\n\n // Prevent multiple form submissions\n if (submitBtn.disabled) {\n return;\n }\n\n // Disable form submission while loading\n submitBtn.disabled = true;\n\n // Trigger form validation and wallet collection\n const { error: submitError } = await elements.submit();\n if (submitError) {\n handleError(submitError);\n return;\n }\n\n// Create the PaymentMethod using the details collected by the Payment Element\n const { error, paymentMethod } = await stripe.createPaymentMethod({\n elements,\n params: {\n billing_details: {\n name: 'John Doe',\n }\n }\n });\n\n if (error) {\n // This point is only reached if there's an immediate error when\n// creating the PaymentMethod. Show the error to your customer (for example,\npayment details incomplete)\n handleError(error);\n return;\n }\n\n // Call the ForwardingRequest endpoint on your server\n const res = await fetch(\"/create-forwarding-request\", {\n method: \"POST\",\n headers: { \"Content-Type\": \"application/json\" },\n body: JSON.stringify({\n paymentMethodId: paymentMethod.id,\n }),\n });\n const data = await res.json();\n\n // Handle the response or errors\n handleServerResponse(data);\n});\n```\n\n[Create a\nForwardingRequest](https://docs.stripe.com/payments/forwarding-third-party-processors#create-forwarding-request)\nContact Stripe support to\n[configure](https://docs.stripe.com/payments/vault-and-forward#configuring) your\ndestination endpoint and begin forwarding transactions. Send the card details to\nthis test endpoint before you connect your integration with your third-party\nprocessor.\n\n```\nconst stripe = require(\"stripe\")(\"sk_test_BQokikJOvBiI2HlWgH4olfQ2\");\nconst express = require('express');\nconst app = express();\n\napp.set('trust proxy', true);\napp.use(express.json());\napp.use(express.static(\".\"));\n\napp.post('/create-forwarding-request', async (req, res) => {\n try {\n const forwardedReq = await stripe.forwarding.requests.create(\n {\n payment_method: req.body.paymentMethodId,\n url: '{{DESTINATION_ENDPOINT}}',\n request: {\n headers: [{\n name: 'Destination-API-Key',\n value: '{{DESTINATION_API_KEY}}'\n },{\n name: 'Destination-Idempotency-Key',\n value: '{{DESTINATION_IDEMPOTENCY_KEY}}'\n }],\n body: JSON.stringify({\n \"amount\": {\n \"currency\": \"USD\",\n \"value\": 1099\n },\n \"reference\": \"Your order number\",\n \"card\": {\n \"number\": \"\",\n \"exp_month\": \"\",\n \"exp_year\": \"\",\n \"cvc\": \"\",\n \"name\": \"\",\n }\n })\n },\nreplacements: ['card_number', 'card_expiry', 'card_cvc', 'cardholder_name'],\n }\n );\n\n if (forwardedReq.response_details.status != 200) {\n // Return error based on third-party API response code\n } else {\n // Parse and handle the third-party API response\nconst forwardedResult = JSON.parse(forwardedReq.response_details.body);\n res.json({\n status: forwardedReq.response_details.status\n });\n }\n } catch (err) {\n res.json({\n error: err\n });\n }\n});\n\napp.listen(3000, () => {\n console.log('Running on port 3000');\n});\n```\n\n[Handle the\nResponseClient-side](https://docs.stripe.com/payments/forwarding-third-party-processors#handle-response)\nAfter you send the request, you must handle the response.\n\n```\nconst handleServerResponse = async (response) => {\n if (response.error) {\n // Show error on payment form\n } else if (response.status != 200) {\n // Show error based on response code\n } else {\n // Parse the response body to render your payment form\n }\n}\n```\n\n## Links\n\n- [Payment Element](https://docs.stripe.com/payments/payment-element)\n- [PaymentMethod](https://docs.stripe.com/api/payment_methods)\n- [forward](https://docs.stripe.com/api/forwarding/request)\n- [Stripe\nsupport](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fsupport.stripe.com%2Fcontact%2Femail%3Fquestion%3Dother%26topic%3Dpayment_apis%26subject%3DHow%2520can%2520I%2520access%2520the%2520Vault%2520and%2520Forward%2520API%3F%26body%3DWhat%2520endpoint%28s%29%2520would%2520you%2520like%2520to%2520forward%2520card%2520details%2520to%3F)\n- [get started](https://docs.stripe.com/payments/accept-a-payment)\n-\n[stripe.createPaymentMethod](https://docs.stripe.com/js/payment_methods/create_payment_method)\n- [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys)\n- [configure](https://docs.stripe.com/payments/vault-and-forward#configuring)",
  "metadata": {
    "title": "Use Payment Element across multiple processors | Stripe Documentation",
    "description": "Learn how to collect card details with Payment Element and use them with a third-party processor.",
    "sourceURL": "https://docs.stripe.com/payments/forwarding-third-party-processors"
  }
}