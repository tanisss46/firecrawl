{
  "content": "# Enable other businesses to accept payments directly\n\n## Facilitate direct payments between other businesses and their own customers.\n\nWebiOSAndroidReact Native\nThis guide covers letting your users accept payments, moving a portion of your\nusers’ earnings into your balance, and paying out the remainder to your users’\nbank accounts. To illustrate these concepts, we’ll use an example platform that\nlets businesses build their own online stores.\n\n## Prerequisites\n\n- [Register your platform](https://dashboard.stripe.com/connect/set-up).\n- Add business details to [activate your\naccount](https://dashboard.stripe.com/account/onboarding).\n- [Complete your platform\nprofile](https://dashboard.stripe.com/connect/settings/profile).\n- [Customize your brand\nsettings](https://dashboard.stripe.com/settings/connect/stripe-dashboard/branding).\nAdd a business name, icon, and brand color.\n[Set up\nStripeServer-side](https://docs.stripe.com/connect/enable-payment-acceptance-guide#setup)\nInstall Stripe’s official libraries so you can access the API from your\napplication:\n\n```\n# Available as a gem\nsudo gem install stripe\n```\n\n```\n# If you use bundler, you can add this line to your Gemfile\ngem 'stripe'\n```\n\n[Create a connected\naccount](https://docs.stripe.com/connect/enable-payment-acceptance-guide#create-account)\nWhen a user (seller or service provider) signs up on your platform, create a\nuser [Account](https://docs.stripe.com/api/accounts) (referred to as a\n*connected account*) so you can accept payments and move funds to their bank\naccount. Connected accounts represent your user in Stripe’s API and help\nfacilitate the collection of onboarding requirements so Stripe can verify the\nuser’s identity. In our store builder example, the connected account represents\nthe business setting up their Internet store.\n\n![Screenshot of Connect Onboarding\nform](https://b.stripecdn.com/docs-statics-srv/assets/Kavholm-Seamless-Standard.78b64d90c0bf87130c8b6ba1ef53df7f.png)\n\n### Create a connected account and prefill information\n\nUse the `/v1/accounts` API to\n[create](https://docs.stripe.com/api/accounts/create) a connected account. You\ncan create the connected account by using the [default connected account\nparameters](https://docs.stripe.com/connect/migrate-to-controller-properties),\nor by specifying the account type.\n\nWith default propertiesWith account type\n```\ncurl -X POST https://api.stripe.com/v1/accounts \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\"\n```\n\nIf you’ve already collected information for your connected accounts, you can\nprefill that information on the `Account` object. You can prefill any account\ninformation, including personal and business information, external account\ninformation, and so on.\n\nConnect Onboarding doesn’t ask for the prefilled information. However, it does\nask the account holder to confirm the prefilled information before accepting the\n[Connect service\nagreement](https://docs.stripe.com/connect/service-agreement-types).\n\nWhen testing your integration, prefill account information using [test\ndata](https://docs.stripe.com/connect/testing).\n\n### Create an account link\n\nYou can create an account link by calling the [Account\nLinks](https://docs.stripe.com/api/account_links) API with the following\nparameters:\n\n- `account`\n- `refresh_url`\n- `return_url`\n- `type` = `account_onboarding`\n\n```\ncurl https://api.stripe.com/v1/account_links \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d account={{CONNECTED_ACCOUNT_ID}} \\\n --data-urlencode refresh_url=\"https://example.com/reauth\" \\\n --data-urlencode return_url=\"https://example.com/return\" \\\n -d type=account_onboarding\n```\n\n### Redirect your user to the account link URL\n\nThe response to your [Account Links](https://docs.stripe.com/api/account_links)\nrequest includes a value for the key `url`. Redirect to this link to send your\nuser into the flow. Account Links are temporary and are single-use only because\nthey grant access to the connected account user’s personal information.\nAuthenticate the user in your application before redirecting them to this URL.\nIf you want to prefill information, you must do so before generating the account\nlink. After you create the account link, you won’t be able to read or write\ninformation for the account.\n\n#### Security tip\n\nDon’t email, text, or otherwise send account link URLs outside of your platform\napplication. Instead, provide them to the authenticated account holder within\nyour application.\n\n### Handle the user returning to your platform\n\nConnect Onboarding requires you to pass both a `return_url` and `refresh_url` to\nhandle all cases where the user is redirected to your platform. It’s important\nthat you implement these correctly to provide the best experience for your user.\n\n#### Note\n\nYou can use HTTP for your `return_url` and `refresh_url` while in test mode (for\nexample, to test with localhost), but live mode only accepts HTTPS. Be sure to\nswap testing URLs for HTTPS URLs before going live.\n\n#### return_url\n\nStripe issues a redirect to this URL when the user completes the Connect\nOnboarding flow. This doesn’t mean that all information has been collected or\nthat there are no outstanding requirements on the account. This only means the\nflow was entered and exited properly.\n\nNo state is passed through this URL. After a user is redirected to your\n`return_url`, check the state of the `details_submitted` parameter on their\naccount by doing either of the following:\n\n- Listening to `account.updated` webhooks\n- Calling the [Accounts](https://docs.stripe.com/api/accounts) API and\ninspecting the returned object\n\n#### refresh_url\n\nYour user is redirected to the `refresh_url` in these cases:\n\n- The link is expired (a few minutes went by since the link was created)\n- The user already visited the link (the user refreshed the page or clicked back\nor forward in the browser)\n- Your platform is no longer able to access the account\n- The account has been rejected\n\nYour `refresh_url` should trigger a method on your server to call [Account\nLinks](https://docs.stripe.com/api/account_links) again with the same\nparameters, and redirect the user to the Connect Onboarding flow to create a\nseamless experience.\n\n### Handle users that haven’t completed onboarding\n\nIf a user is redirected to your `return_url`, they might not have completed the\nonboarding process. Use the `/v1/accounts` endpoint to retrieve the user’s\naccount and check for `charges_enabled`. If the account isn’t fully onboarded,\nprovide UI prompts to allow the user to continue onboarding later. The user can\ncomplete their account activation through a new account link (generated by your\nintegration). To see if they’ve completed the onboarding process, check the\nstate of the `details_submitted` parameter on their account.\n\n[Enable payment\nmethods](https://docs.stripe.com/connect/enable-payment-acceptance-guide#enable-payment-methods)\nView your [payment methods\nsettings](https://dashboard.stripe.com/settings/connect/payment_methods) and\nenable the payment methods you want to support. Card payments are enabled by\ndefault but you can enable and disable payment methods as needed. This guide\nassumes Bancontact, credit cards, EPS, iDEAL, Przelewy24, SEPA Direct Debit, and\nSofort are enabled.\n\nBefore the payment form is displayed, Stripe evaluates the currency, payment\nmethod restrictions, and other parameters to determine the list of supported\npayment methods. Payment methods that increase conversion and that are most\nrelevant to the currency and customer’s location are prioritized. Lower priority\npayment methods are hidden in an overflow menu.\n\n#### Private preview\n\nThe **embedded payment method settings component** allows connected accounts to\nconfigure the payment methods they offer at checkout without the need to access\nthe Stripe Dashboard. [Request\naccess](https://docs.stripe.com/connect/supported-embedded-components/payment-method-settings#request-access)\nand learn how to [integrate with Payment Method\nConfigurations](https://docs.stripe.com/connect/supported-embedded-components/payment-method-settings#integration).\n\n[Accept a\npayment](https://docs.stripe.com/connect/enable-payment-acceptance-guide#accept-payment)\nEmbed [Stripe Checkout](https://stripe.com/payments/checkout) as a payment form\ndirectly on your website or redirect users to a Stripe-hosted page to accept\npayments. Checkout supports multiple payment methods and automatically shows the\nmost relevant ones to your customer You can also use the Payment Element, a\nprebuilt UI component that is embedded as an iframe in your payment form, to\naccept multiple payment methods with a single frontend integration.\n\nStripe-hosted pageEmbedded formCustom flow\n### Create a Checkout Session Client-side Server-side\n\nA Checkout Session controls what your customer sees in the embeddable payment\nform such as line items, the order amount and currency, and acceptable payment\nmethods. When performing direct charges, Checkout uses the connected account’s\nbranding settings. See the [Customize\nbranding](https://docs.stripe.com/connect/direct-charges?platform=web&ui=stripe-hosted#branding)\nsection for more information.\n\nUnlike destination charges and separate charges and transfers, users (connected\naccounts) are responsible for handling disputes on direct charges—it’s not the\nresponsibility of the platform.\n\nOn your server, make the following call to the Stripe API. After creating a\nCheckout Session, redirect your customer to the\n[URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url)\nreturned in the response.\n\n```\ncurl https://api.stripe.com/v1/checkout/sessions \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -H \"Stripe-Account: {{CONNECTED_ACCOUNT_ID}}\" \\\n -d mode=payment \\\n -d \"line_items[0][price]\"={{PRICE_ID}} \\\n -d \"line_items[0][quantity]\"=1 \\\n -d \"payment_intent_data[application_fee_amount]\"=123 \\\n --data-urlencode success_url=\"https://example.com/success\" \\\n --data-urlencode cancel_url=\"https://example.com/cancel\"\n```\n\n- `line_items` - This argument represents items that your customer is purchasing\nand that will show up in the hosted user interface.\n- `success_url` - This argument redirects a user after they complete a payment.\n- `cancel_url` - This argument redirects a user after they click cancel.\n- `Stripe-Account` - This header indicates a [direct\ncharge](https://docs.stripe.com/connect/direct-charges) for your connected\naccount. With direct charges, the connected account is responsible for Stripe\nfees, refunds, and chargebacks. The connected account’s branding is used in\nCheckout, which allows their customers to feel like they’re interacting directly\nwith the merchant instead of your platform.\n- (Optional) `payment_intent_data[application_fee_amount]` - This argument\nspecifies the amount your platform plans to take from the transaction. After the\npayment is processed on the connected account, the `application_fee_amount` is\ntransferred to the platform and the Stripe fee is deducted from the connected\naccount’s balance.\n\n![Account creation\nflow](https://b.stripecdn.com/docs-statics-srv/assets/direct_charges.a2a8b68037ac95fe22140d6dde9740d3.svg)\n\n### Handle post-payment events Server-side\n\nStripe sends a\n[checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed)\nevent when the payment completes. [Use a webhook to receive these\nevents](https://docs.stripe.com/webhooks/quickstart) and run actions, like\nsending an order confirmation email to your customer, logging the sale in a\ndatabase, or starting a shipping workflow.\n\nListen for these events rather than waiting on a callback from the client. On\nthe client, the customer could close the browser window or quit the app before\nthe callback executes. Some payment methods also take 2-14 days for payment\nconfirmation. Setting up your integration to listen for asynchronous events\nenables you to accept multiple [payment\nmethods](https://stripe.com/payments/payment-methods-guide) with a single\nintegration.\n\nIn addition to handling the `checkout.session.completed` event, we recommend\nhandling two other events when collecting payments with Checkout:\n\nEventDescriptionNext\nsteps[checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed)The\ncustomer has successfully authorized the payment by submitting the Checkout\nform.Wait for the payment to succeed or\nfail.[checkout.session.async_payment_succeeded](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_succeeded)The\ncustomer’s payment succeeded.Fulfill the purchased goods or\nservices.[checkout.session.async_payment_failed](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_failed)The\npayment was declined, or failed for some other reason.Contact the customer\nthrough email and request that they place a new order.\nThese events all include the [Checkout\nSession](https://docs.stripe.com/api/checkout/sessions) object. After the\npayment succeeds, the underlying\n[PaymentIntent](https://docs.stripe.com/payments/payment-intents) status changes\nfrom `processing` to `succeeded`.\n\n[Testing](https://docs.stripe.com/connect/enable-payment-acceptance-guide#testing)\nTest your account creation flow by [creating\naccounts](https://docs.stripe.com/connect/testing#creating-accounts) and [using\nOAuth](https://docs.stripe.com/connect/testing#using-oauth). Test your **Payment\nmethods** settings for your connected accounts by logging into one of your test\naccounts and navigating to the [Payment methods\nsettings](https://dashboard.stripe.com/settings/payment_methods). Test your\ncheckout flow with your test keys and a test account. You can use our [test\ncards](https://docs.stripe.com/testing) to test your payments flow and simulate\nvarious payment outcomes.\n\n## Payouts\n\nBy default, any charge that you create for a connected account accumulates in\nthe connected account’s [Stripe\nbalance](https://docs.stripe.com/connect/account-balances) and is paid out on a\ndaily rolling basis. Connected accounts can manage their own payout schedules in\nthe [Stripe Dashboard](https://dashboard.stripe.com/settings/payouts).\n\n## See also\n\n- [Manage connected accounts in the\nDashboard](https://docs.stripe.com/connect/dashboard)\n- [Issue refunds](https://docs.stripe.com/connect/direct-charges#issue-refunds)\n- [Customize statement\ndescriptors](https://docs.stripe.com/connect/statement-descriptors)\n- [Work with multiple currencies](https://docs.stripe.com/connect/currencies)\n\n## Links\n\n- [Register your platform](https://dashboard.stripe.com/connect/set-up)\n- [activate your account](https://dashboard.stripe.com/account/onboarding)\n- [Complete your platform\nprofile](https://dashboard.stripe.com/connect/settings/profile)\n- [Customize your brand\nsettings](https://dashboard.stripe.com/settings/connect/stripe-dashboard/branding)\n- [Account](https://docs.stripe.com/api/accounts)\n- [create](https://docs.stripe.com/api/accounts/create)\n- [default connected account\nparameters](https://docs.stripe.com/connect/migrate-to-controller-properties)\n- [Connect service\nagreement](https://docs.stripe.com/connect/service-agreement-types)\n- [test data](https://docs.stripe.com/connect/testing)\n- [Account Links](https://docs.stripe.com/api/account_links)\n- [https://example.com/reauth](https://example.com/reauth)\n- [https://example.com/return](https://example.com/return)\n- [payment methods\nsettings](https://dashboard.stripe.com/settings/connect/payment_methods)\n- [Request\naccess](https://docs.stripe.com/connect/supported-embedded-components/payment-method-settings#request-access)\n- [integrate with Payment Method\nConfigurations](https://docs.stripe.com/connect/supported-embedded-components/payment-method-settings#integration)\n- [Stripe Checkout](https://stripe.com/payments/checkout)\n- [Customize\nbranding](https://docs.stripe.com/connect/direct-charges?platform=web&ui=stripe-hosted#branding)\n-\n[URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url)\n- [https://example.com/success](https://example.com/success)\n- [https://example.com/cancel](https://example.com/cancel)\n- [direct charge](https://docs.stripe.com/connect/direct-charges)\n-\n[checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed)\n- [Use a webhook to receive these\nevents](https://docs.stripe.com/webhooks/quickstart)\n- [payment methods](https://stripe.com/payments/payment-methods-guide)\n-\n[checkout.session.async_payment_succeeded](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_succeeded)\n-\n[checkout.session.async_payment_failed](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_failed)\n- [Checkout Session](https://docs.stripe.com/api/checkout/sessions)\n- [PaymentIntent](https://docs.stripe.com/payments/payment-intents)\n- [creating accounts](https://docs.stripe.com/connect/testing#creating-accounts)\n- [using OAuth](https://docs.stripe.com/connect/testing#using-oauth)\n- [Payment methods\nsettings](https://dashboard.stripe.com/settings/payment_methods)\n- [test cards](https://docs.stripe.com/testing)\n- [Stripe balance](https://docs.stripe.com/connect/account-balances)\n- [Stripe Dashboard](https://dashboard.stripe.com/settings/payouts)\n- [Manage connected accounts in the\nDashboard](https://docs.stripe.com/connect/dashboard)\n- [Issue refunds](https://docs.stripe.com/connect/direct-charges#issue-refunds)\n- [Customize statement\ndescriptors](https://docs.stripe.com/connect/statement-descriptors)\n- [Work with multiple currencies](https://docs.stripe.com/connect/currencies)",
  "metadata": {
    "title": "Enable other businesses to accept payments directly | Stripe Documentation",
    "description": "Facilitate direct payments between other businesses and their own customers.",
    "sourceURL": "https://docs.stripe.com/connect/enable-payment-acceptance-guide"
  }
}