{
  "content": "# UI extension developer tools\n\n## Typecheck, lint, and test your code using bundled developer tools.\n\nWhen you [create an app](https://docs.stripe.com/stripe-apps/create-app) using\nthe Stripe CLI, the generated package includes development environment tooling\nwith best practices built in to help you build a UI extension. This document\ndetails the tools that we include and how to modify them (if desired) to suit\nyour app.\n\n## Type checking\n\nApps come with [Typescript](https://www.typescriptlang.org/) support, and all of\nthe supporting packages we ship have type definitions to aid development.\nTypescript warnings display in supported code editors automatically, but you can\nalso check your code using the command line:\n\n```\nyarn tsc\n```\n\nYour app’s root directory has a `tsconfig.json` file that extends our\nrecommended configuration in the `@stripe/ui-extension-tools` package. Most\ndevelopers won’t need to modify this file, but advanced users can add their own\nproperties or even remove the `extends` property and create their own Typescript\nconfiguration.\n\nTo enable image imports, we include a `ui-extensions.d.ts` type definition file\nthat references type definitions from the `@stripe/ui-extension-tools` package.\nWe don’t recommend removing this file because it’s a helpful indicator of what\nimage types our CLI can process.\n\n## Linting\n\nLinting (checking code for syntax and formatting errors) is an invaluable\ndeveloper tool, and apps come with an [ESLint](https://eslint.org/)\nconfiguration. We include best-practice linter rules and also Stripe-specfic\nrules to prevent common mistakes. Linting warnings display in supported code\neditors automatically, but you can also check your code using the command line:\n\n```\nyarn lint\n```\n\nThe ESLint configuration is in the `package.json` file in the `eslintConfig`\nproperty. It extends the configuration in the `@stripe/ui-extension-tools`\npackage. Most developers won’t need to modify this configuration, but advanced\nusers can add their own properties or even remove the `extends` property and\ncreate their own set of linting rules.\n\n## Testing\n\nApp developers can [write unit\ntests](https://docs.stripe.com/stripe-apps/ui-testing) for their React\ncomponents and utility functions using the bundled test harness built with\n[Jest](https://jestjs.io/). Run your tests on the command line:\n\n```\nyarn test\n```\n\nYour app’s root directory has a `jest.config.js` file that extends our\nrecommended configuration in the `@stripe/ui-extension-tools` package. Most\ndevelopers won’t need to modify this file, but advanced users can add their own\nproperties or even remove the import and create their own configuration.\n\n[OptionalUpdate older apps to use the ui-extension-tools\npackage](https://docs.stripe.com/stripe-apps/ui-extension-developer-tools#migrating-ui-extension-tools)\n## See also\n\n- [How UI extensions\nwork](https://docs.stripe.com/stripe-apps/how-ui-extensions-work)\n- [UI testing](https://docs.stripe.com/stripe-apps/ui-testing)\n\n## Links\n\n- [create an app](https://docs.stripe.com/stripe-apps/create-app)\n- [Typescript](https://www.typescriptlang.org)\n- [ESLint](https://eslint.org)\n- [write unit tests](https://docs.stripe.com/stripe-apps/ui-testing)\n- [Jest](https://jestjs.io)\n- [How UI extensions\nwork](https://docs.stripe.com/stripe-apps/how-ui-extensions-work)",
  "metadata": {
    "title": "UI extension developer tools | Stripe Documentation",
    "description": "Typecheck, lint, and test your code using bundled developer tools.",
    "sourceURL": "https://docs.stripe.com/stripe-apps/ui-extension-developer-tools"
  }
}