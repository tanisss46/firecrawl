{
  "content": "# The Payment Intents API\n\n## Learn how to use the Payment Intents API for Stripe payments.\n\nUse the [Payment Intents](https://docs.stripe.com/api/payment_intents) API to\nbuild an integration that can handle complex payment flows with a status that\nchanges over the [PaymentIntent’s\nlifecycle](https://docs.stripe.com/payments/paymentintents/lifecycle). It tracks\na payment from creation through checkout, and triggers additional authentication\nsteps when required.\n\nSome of the advantages of using the [Payment\nIntents](https://docs.stripe.com/api/payment_intents) API include:\n\n- Automatic authentication handling\n- No double charges\n- No [idempotency key](https://docs.stripe.com/api/idempotent_requests) issues\n- Support for [Strong Customer\nAuthentication](https://docs.stripe.com/strong-customer-authentication) (SCA)\nand similar regulatory changes\n\n## A complete set of APIs\n\nUse the [Payment Intents](https://docs.stripe.com/api/payment_intents) API\ntogether with the [Setup Intents](https://docs.stripe.com/api/setup_intents) and\n[Payment Methods](https://docs.stripe.com/api/payment_methods) APIs. These APIs\nhelp you handle dynamic payments (for example, additional authentication like\n[3D Secure](https://docs.stripe.com/payments/3d-secure)) and prepare you for\nexpansion to other countries while allowing you to support new regulations and\nregional payment methods.\n\nBuilding an integration with the Payment Intents API involves two actions:\ncreating and [confirming](https://docs.stripe.com/api/payment_intents/confirm) a\nPaymentIntent. Each PaymentIntent typically correlates with a single shopping\ncart or customer session in your application. The PaymentIntent encapsulates\ndetails about the transaction, such as the supported payment methods, the amount\nto collect, and the desired currency.\n\n## Creating a PaymentIntent\n\nTo get started, see the [accept a payment\nguide](https://docs.stripe.com/payments/accept-a-payment?ui=elements). It\ndescribes how to create a PaymentIntent on the server and pass its [client\nsecret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret)\nto the client instead of passing the entire PaymentIntent object.\n\nWhen you [create the\nPaymentIntent](https://docs.stripe.com/api/payment_intents/create), you can\nspecify options like the amount and currency:\n\n```\ncurl https://api.stripe.com/v1/payment_intents \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d amount=1099 \\\n -d currency=usd\n```\n\n### Best practices\n\n- We recommend creating a PaymentIntent as soon as you know the amount, such as\nwhen the customer begins the checkout process, to help track your [purchase\nfunnel](https://en.wikipedia.org/wiki/Purchase_funnel). If the amount changes,\nyou can [update](https://docs.stripe.com/api#update_payment_intent) its\n[amount](https://docs.stripe.com/api#payment_intent_object-amount). For example,\nif your customer backs out of the checkout process and adds new items to their\ncart, you may need to update the amount when they start the checkout process\nagain.\n- If the checkout process is interrupted and resumes later, attempt to reuse the\nsame PaymentIntent instead of creating a new one. Each PaymentIntent has a\nunique ID that you can use to\n[retrieve](https://docs.stripe.com/api#retrieve_payment_intent) it if you need\nit again. In the data model of your application, you can store the ID of the\nPaymentIntent on the customer’s shopping cart or session to facilitate\nretrieval. The benefit of reusing the PaymentIntent is that the [object\nstate](https://docs.stripe.com/payments/paymentintents/lifecycle) helps track\nany failed payment attempts for a given cart or session.\n- Remember to provide an [idempotency\nkey](https://docs.stripe.com/api/idempotent_requests) to prevent the creation of\nduplicate PaymentIntents for the same purchase. This key is typically based on\nthe ID that you associate with the cart or customer session in your application.\n\n## Passing the client secret to the client side\n\nThe PaymentIntent contains a [client\nsecret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret),\na key that’s unique to the individual PaymentIntent. On the client side of your\napplication, Stripe.js uses the client secret as a parameter when invoking\nfunctions (such as\n[stripe.confirmCardPayment](https://docs.stripe.com/js#stripe-confirm-card-payment)\nor\n[stripe.handleCardAction](https://docs.stripe.com/js#stripe-handle-card-action))\nto complete the payment.\n\n### Retrieve the client secret\n\nThe PaymentIntent includes a [client\nsecret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret)\nthat the client side uses to securely complete the payment process. You can use\ndifferent approaches to pass the client secret to the client side.\n\nSingle-page applicationServer-side rendering\nRetrieve the client secret from an endpoint on your server, using the browser’s\n`fetch` function. This approach is best if your client side is a single-page\napplication, particularly one built with a modern frontend framework like React.\nCreate the server endpoint that serves the client secret:\n\n```\nget '/secret' do\n intent = # ... Create or retrieve the PaymentIntent\n {client_secret: intent.client_secret}.to_json\nend\n```\n\nAnd then fetch the client secret with JavaScript on the client side:\n\n```\n(async () => {\n const response = await fetch('/secret');\n const {client_secret: clientSecret} = await response.json();\n // Render the form using the clientSecret\n})();\n```\n\n#### Caution\n\nYou can use the client secret to complete the payment process with the amount\nspecified on the PaymentIntent. Don’t log it, embed it in URLs, or expose it to\nanyone other than the customer. Make sure that you have\n[TLS](https://docs.stripe.com/security/guide#tls) on any page that includes the\nclient secret.\n\n## After the payment\n\nAfter the client confirms the payment, it is a best practice for your server to\n[monitor\nwebhooks](https://docs.stripe.com/payments/payment-intents/verifying-status#webhooks)\nto detect when the payment successfully completes or fails.\n\nA `PaymentIntent` might have more than one\n[Charge](https://docs.stripe.com/api/charges) object associated with it if there\nwere multiple payment attempts, for examples retries. For each charge you can\ninspect the\n[outcome](https://docs.stripe.com/api/charges/object#charge_object-outcome) and\n[details of the payment\nmethod](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details)\nused.\n\n## Optimizing payment methods for future payments\n\nThe\n[setup_future_usage](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-setup_future_usage)\nparameter saves payment methods to use again in the future. For cards, it also\noptimizes authorization rates in compliance with regional legislation and\nnetwork rules, such as\n[SCA](https://docs.stripe.com/strong-customer-authentication). To determine\nwhich value to use, consider how you want to use this payment method in the\nfuture.\n\nHow you intend to use the payment methodsetup_future_usage enum value to\nuseOn-session payments only`on_session`Off-session payments\nonly`off_session`Both on and off-session payments`off_session`\nYou can still accept off-session payments with a card set up for on-session\npayments, but the bank is more likely to reject the off-session payment and\nrequire authentication from the cardholder.\n\nThe following example shows how to create a PaymentIntent and specify\n`setup_future_usage`:\n\n```\ncurl https://api.stripe.com/v1/payment_intents \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d amount=1099 \\\n -d currency=usd \\\n -d setup_future_usage=off_session\n```\n\n#### Caution\n\nSetups for off-session payments are more likely to incur additional friction.\nUse on-session setup if you don’t intend to accept off-session payments with the\nsaved card.\n\n## Dynamic statement descriptor\n\nBy default, your Stripe account’s [statement\ndescriptor](https://docs.stripe.com/get-started/account/activate#public-business-information)\nappears on customer statements whenever you charge their card. To provide a\ndifferent description on a per-payment basis, include the `statement_descriptor`\nparameter.\n\n```\ncurl https://api.stripe.com/v1/payment_intents \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d amount=1099 \\\n -d currency=usd \\\n -d \"payment_method_types[]\"=card \\\n -d statement_descriptor=\"Custom descriptor\"\n```\n\nStatement descriptors are limited to 22 characters, can’t use the special\ncharacters `<`, `>`, `'`, `\"`, or `*`, and must not consist solely of numbers.\nWhen using dynamic statement descriptors, the dynamic text is appended to the\n[statement descriptor prefix](https://dashboard.stripe.com/settings/public) set\nin the Stripe Dashboard. An asterisk (`*`) and an empty space are also added to\nseparate the default statement descriptor from the dynamic portion. These 2\ncharacters count towards the 22 character limit.\n\n## Storing information in metadata\n\nStripe supports adding [metadata](https://docs.stripe.com/api#metadata) to the\nmost common requests you make, such as processing payments. Metadata isn’t shown\nto customers or factored into whether or not a payment is declined or blocked by\nour fraud prevention system.\n\nThrough metadata, you can associate information that’s meaningful to you with\nStripe activity.\n\nAny metadata you include is viewable in the Dashboard (for example, when looking\nat the page for an individual payment), and is also available in common reports.\nAs an example, you can attach the order ID for your store to the PaymentIntent\nfor that order. Doing so allows you to easily reconcile payments in Stripe to\norders in your system.\n\nIf you’re using [Radar for Fraud Teams](https://docs.stripe.com/radar), consider\npassing additional customer information and order information as metadata. Then\nyou can write [Radar rules using metadata\nattributes](https://docs.stripe.com/radar/rules/reference#metadata-attributes)\nand have more information available within the Dashboard, which can expedite\nyour review process.\n\nWhen a PaymentIntent creates a charge, the PaymentIntent copies its metadata to\nthe charge. Subsequent updates to the PaymentIntent’s metadata won’t modify the\nmetadata of charges previously created by the PaymentIntent.\n\n```\ncurl https://api.stripe.com/v1/payment_intents \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d amount=1099 \\\n -d currency=usd \\\n -d \"payment_method_types[]\"=card \\\n -d \"metadata[order_id]\"=6735\n```\n\n#### Caution\n\nDon’t store any sensitive information (personally identifiable information, card\ndetails, and so on) as metadata or in the `description` parameter of the\nPaymentIntent.\n\n## See also\n\n- [Accept a payment\nonline](https://docs.stripe.com/payments/accept-a-payment?platform=web)\n- [Accept a payment in an iOS\napp](https://docs.stripe.com/payments/accept-a-payment?platform=ios)\n- [Accept a payment in an Android\napp](https://docs.stripe.com/payments/accept-a-payment?platform=android)\n- [Set up future payments](https://docs.stripe.com/payments/save-and-reuse)\n\n## Links\n\n- [Payment Intents](https://docs.stripe.com/api/payment_intents)\n- [PaymentIntent’s\nlifecycle](https://docs.stripe.com/payments/paymentintents/lifecycle)\n- [idempotency key](https://docs.stripe.com/api/idempotent_requests)\n- [Strong Customer\nAuthentication](https://docs.stripe.com/strong-customer-authentication)\n- [Setup Intents](https://docs.stripe.com/api/setup_intents)\n- [Payment Methods](https://docs.stripe.com/api/payment_methods)\n- [3D Secure](https://docs.stripe.com/payments/3d-secure)\n- [confirming](https://docs.stripe.com/api/payment_intents/confirm)\n- [accept a payment\nguide](https://docs.stripe.com/payments/accept-a-payment?ui=elements)\n- [client\nsecret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret)\n- [create the PaymentIntent](https://docs.stripe.com/api/payment_intents/create)\n- [purchase funnel](https://en.wikipedia.org/wiki/Purchase_funnel)\n- [update](https://docs.stripe.com/api#update_payment_intent)\n- [amount](https://docs.stripe.com/api#payment_intent_object-amount)\n- [retrieve](https://docs.stripe.com/api#retrieve_payment_intent)\n-\n[stripe.confirmCardPayment](https://docs.stripe.com/js#stripe-confirm-card-payment)\n-\n[stripe.handleCardAction](https://docs.stripe.com/js#stripe-handle-card-action)\n- [TLS](https://docs.stripe.com/security/guide#tls)\n- [monitor\nwebhooks](https://docs.stripe.com/payments/payment-intents/verifying-status#webhooks)\n- [Charge](https://docs.stripe.com/api/charges)\n- [outcome](https://docs.stripe.com/api/charges/object#charge_object-outcome)\n- [details of the payment\nmethod](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details)\n-\n[setup_future_usage](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-setup_future_usage)\n- [statement\ndescriptor](https://docs.stripe.com/get-started/account/activate#public-business-information)\n- [statement descriptor prefix](https://dashboard.stripe.com/settings/public)\n- [metadata](https://docs.stripe.com/api#metadata)\n- [Radar for Fraud Teams](https://docs.stripe.com/radar)\n- [Radar rules using metadata\nattributes](https://docs.stripe.com/radar/rules/reference#metadata-attributes)\n- [Accept a payment\nonline](https://docs.stripe.com/payments/accept-a-payment?platform=web)\n- [Accept a payment in an iOS\napp](https://docs.stripe.com/payments/accept-a-payment?platform=ios)\n- [Accept a payment in an Android\napp](https://docs.stripe.com/payments/accept-a-payment?platform=android)\n- [Set up future payments](https://docs.stripe.com/payments/save-and-reuse)",
  "metadata": {
    "title": "The Payment Intents API | Stripe Documentation",
    "description": "Learn how to use the Payment Intents API for Stripe payments.",
    "sourceURL": "https://docs.stripe.com/payments/payment-intents"
  }
}