{
  "content": "# Terminal SDK V3 migration guide\n\n## Learn how to migrate to the 3.0.0 of the Stripe Terminal SDK.\n\nThe Stripe Terminal iOS and Android SDKs have been updated with a number of\nbreaking changes in APIs and behavior, some of which require that you update\nyour integration with the Stripe Terminal SDK. We regularly make changes in\nmajor version updates that may affect the way your integration works or behaves,\nto improve consistency between our SDKs and to simplify your application logic\nand integration. This guide walks you through the latest changes to help you\nupgrade your integration.\n\n#### Note\n\nBuilding a new Stripe Terminal integration? Visit our [Design an\nintegration](https://docs.stripe.com/terminal/designing-integration) page to\nlearn how to get started.\n\n## Migrate to version 3.0.0\n\nHere are some things you need to know about the 3.0.0 Stripe Terminal iOS and\nAndroid SDKs:\n\n- Support for processing offline payments Preview- The offline mode feature is\nin private preview. To request access, please email\n[stripe-terminal-betas@stripe.com](mailto:stripe-terminal-betas@stripe.com).\nAfter we enable the changes in the backend for your account, you must disconnect\nand reconnect to your reader using the SDK for the updated configuration to take\neffect.\n- Updates to minimum supported platform versions for iOS and Android\n- Removal of deprecated features and properties\niOSAndroid\nIf your application currently uses an Terminal iOS SDK version prior to 3.0.0,\nthere are a few changes you need to make to upgrade and accept card present\npayments globally. For a detailed list of the changes from version 2.23.1 to\n3.0.0, please reference the [SDK\nchangelog](https://github.com/stripe/stripe-terminal-ios/releases/tag/v3.0.0).\n\n## Update your minimum supported version to iOS 13 or higher\n\nWe regularly update the minimum supported version of our SDKs in order to focus\non providing the best experience for our developers.\n\nExisting 2.X versions of the Terminal iOS SDK will continue to support devices\nrunning **iOS 11** and higher.\n\n## Update your DiscoveryConfiguration usage to the specific DiscoveryConfiguration implementation\n\nIn order to support configuration for different discovery methods,\n[SCPDiscoveryConfiguration](https://stripe.dev/stripe-terminal-ios/docs/Protocols/SCPDiscoveryConfiguration.html)\nis now a protocol that is implemented by several different types. Instead of\nproviding a DiscoveryMethod, there are now individual classes to choose from in\norder to search for a specific type of reader:\n\nConfiguration\nClassUsage[SCPBluetoothScanDiscoveryConfiguration](https://stripe.dev/stripe-terminal-ios/docs/Classes/SCPBluetoothScanDiscoveryConfiguration.html)Bluetooth-capable\nreaders near this iOS\ndevice[SCPBluetoothProximityDiscoveryConfiguration](https://stripe.dev/stripe-terminal-ios/docs/Classes/SCPBluetoothProximityDiscoveryConfiguration.html)A\nsubset of Bluetooth-capable readers near this iOS\ndevice[SCPInternetDiscoveryConfiguration](https://stripe.dev/stripe-terminal-ios/docs/Classes/SCPInternetDiscoveryConfiguration.html)Internet-connected\nreaders registered to this\naccount[SCPLocalMobileDiscoveryConfiguration](https://stripe.dev/stripe-terminal-ios/docs/Classes/SCPLocalMobileDiscoveryConfiguration.html)[Tap\nto\nPay](https://docs.stripe.com/terminal/payments/setup-reader/tap-to-pay?platform=ios)\nusing this iOS device’s NFC reader\nCreate the discovery configuration appropriate for your desired discovery method\nusing the provided builder class and provide that to `discoverReaders`. The\nbuilder exposes setters for the properties that each configuration supports.\n\n## Update your discoverReaders and connectReader usage\n\n- Canceling `discoverReaders` now calls the completion block with an error with\ncode `SCPErrorCanceled`, just like all other cancelable methods.\n- `discoverReaders` is now completed successfully right when `connectReader` is\ncalled. If `connectReader` fails, your integration needs to make a new call to\n`discoverReaders` in order to resume discovering readers.\n- `discoverReaders` is no longer required to be running for `connectReader` to\nwork. You’re now able to call `connectReader` with a previously discovered\nreader instance or to retry connecting without restarting `discoverReaders`.\n\n## Update your ReconnectionDelegate implementation\n\n`SCPReconnectionDelegate` now provides the instance of the reader that is being\nreconnected to instead of the Terminal instance. If you implemented this\ndelegate before you need to replace `terminal` in the method names with\n`reader`.\n\n## Update Parameters and Configuration class usage to use Builders\n\nThe input classes like `SCPCollectConfiguration` and\n`SCPPaymentIntentParameters` are now immutable and have associated builders\nprovided to create them. All builders have a build method that validates the\ninputs and creates the class it builds.\n\n- In Swift, `build()` throws and should be checked for errors.\n- In Objective-C, you provide an `NSError **` out-parameter to receive the\nerror, if any.\n\n```\nlet paymentParams = try PaymentIntentParametersBuilder(amount: 100, currency:\n\"cad\")\n .setCaptureMethod(.automatic)\n .build()\n```\n\n## Remove any dependency on SCPErrorBusy\n\n`SCPErrorBusy` is removed. In SDK 3.0.0 and later, if you call a Terminal method\nwhile another is still in-progress the new calls now queue up. The commands are\nexecuted after all previous commands complete. If you were previously tracking\nstate to prevent `SCPErrorBusy`, or were queuing your own commands to work\naround `SCPErrorBusy`, you can now make use of the command queue to simplify\nyour code. If your application relied on `SCPErrorBusy` to know if a command is\nrunning, review your code to see if this could cause problems with queuing too\nmany commands.\n\n## Review support for Offline Payments\n\n`SCPPaymentIntent.stripeId` is null for offline payments. If your integration\nonly supports online payments, the `stripeId` will always be present and no\nchanges are needed beyond checks to satisfy the presence of the ID. See [Collect\ncard payments while\noffline](https://docs.stripe.com/terminal/features/operate-offline/collect-card-payments?terminal-sdk-platform=ios)\nfor more details on how to process payments offline.\n\n```\nTerminal.shared.createPaymentIntent(params) { intent, error in\n if let error = error {\n // Placeholder for handling exception\n }\n guard let intentId = intent.stripeId else {\n// PaymentIntent was created offline without an id. See intent.offlineDetails.\n // This is only expected when offline mode is enabled.\n }\n}\n```\n\n## Update your process calls to confirm\n\n`SCPTerminal.processPayment` is renamed to `SCPTerminal.confirmPaymentIntent`\nand `SCPTerminal.processRefund` is renamed to `SCPTerminal.confirmRefund`. The\nparameters for these methods haven’t changed but the error types have also been\nrenamed to `SCPConfirmPaymentIntentError` and `SCPConfirmRefundError`\nrespectively.\n\n## Update your readReusableCard usage to SetupIntents\n\n`SCPTerminal.readReusableCard` is removed. SetupIntents are the recommended path\nfor saving cards without charging. SetupIntents follow a similar pattern to\nPaymentIntents where you create, collect, and then confirm the SetupIntent in\nthe SDK. See [Save cards for online\npayments](https://docs.stripe.com/terminal/features/saving-cards/overview) for\nmore details.\n\n## Links\n\n- [Design an\nintegration](https://docs.stripe.com/terminal/designing-integration)\n- [SDK\nchangelog](https://github.com/stripe/stripe-terminal-ios/releases/tag/v3.0.0)\n-\n[SCPDiscoveryConfiguration](https://stripe.dev/stripe-terminal-ios/docs/Protocols/SCPDiscoveryConfiguration.html)\n-\n[SCPBluetoothScanDiscoveryConfiguration](https://stripe.dev/stripe-terminal-ios/docs/Classes/SCPBluetoothScanDiscoveryConfiguration.html)\n-\n[SCPBluetoothProximityDiscoveryConfiguration](https://stripe.dev/stripe-terminal-ios/docs/Classes/SCPBluetoothProximityDiscoveryConfiguration.html)\n-\n[SCPInternetDiscoveryConfiguration](https://stripe.dev/stripe-terminal-ios/docs/Classes/SCPInternetDiscoveryConfiguration.html)\n-\n[SCPLocalMobileDiscoveryConfiguration](https://stripe.dev/stripe-terminal-ios/docs/Classes/SCPLocalMobileDiscoveryConfiguration.html)\n- [Tap to\nPay](https://docs.stripe.com/terminal/payments/setup-reader/tap-to-pay?platform=ios)\n- [Collect card payments while\noffline](https://docs.stripe.com/terminal/features/operate-offline/collect-card-payments?terminal-sdk-platform=ios)\n- [Save cards for online\npayments](https://docs.stripe.com/terminal/features/saving-cards/overview)",
  "metadata": {
    "title": "Terminal SDK V3 migration guide | Stripe Documentation",
    "description": "Learn how to migrate to the 3.0.0 of the Stripe Terminal SDK.",
    "sourceURL": "https://docs.stripe.com/terminal/references/sdk-v3-migration-guide"
  }
}