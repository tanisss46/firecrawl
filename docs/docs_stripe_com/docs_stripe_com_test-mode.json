{
  "content": "# Test mode and use cases\n\n## Use test mode and our uses cases to test your integration.\n\nStripe’s test mode allows you to test your integration without making actual\ncharges or payments. Test mode is a testing environment that simulates creating\nreal objects without the risk of affecting real transactions or moving actual\nmoney. We recommend using our quality assurance (QA) testing use cases, and\nimporting our [Postman\ncollection](https://www.getpostman.com/collections/080102f58f29afa081d7) to aid\nyou in the testing process.\n\n## Test mode\n\nIn test mode, you can charge test credit cards as well as create test products\nand prices. You can also use test mode to simulate transactions to make sure\nthat your integration works correctly. This feature helps to identify any bugs\nor errors in your Stripe implementation before you go live with actual payments.\n\nAfter you create a Stripe account, you can find a set of [test API\nkeys](https://docs.stripe.com/keys#obtain-api-keys) in the [Stripe\nDashboard](https://dashboard.stripe.com/test/apikeys). You can use these API\nkeys to create and retrieve simulated data by making requests to the Stripe API.\nTo start accepting real payments, you need to [activate your\naccount](https://docs.stripe.com/get-started/account/activate), toggle off test\nmode, and use the live API keys in your integration. Stripe provides a number of\nresources for testing your integration.\n\n#### Impact on live mode\n\nIn the Dashboard, changing settings in test mode might also change them in live\nmode. Many Dashboard pages have a white notification box and disable live mode\nsettings while in test mode. In this case, any settings still enabled are safe\nto use. If there’s no white callout, assume any changes made in test mode affect\nlive mode settings (unless you see an orange test data banner).\n\n### Test mode versus live mode\n\nAll Stripe API requests occur in either test mode or live mode. API objects in\none mode aren’t accessible to the other. For instance, a test-mode [product\nobject](https://docs.stripe.com/api/products/object) can’t be part of a\nlive-mode payment.\n\nType When to useObjectsHow to useConsiderationssandboxesUse a sandbox, and its\nassociated test API keys, as you build your integration. In a sandbox, card\nnetworks and payment providers don’t process payments.API calls return simulated\nobjects. For example, you can retrieve and use test `account`, `payment`,\n`customer`, `charge`, `refund`, `transfer`, `balance`, and `subscription`\nobjects.Use [test credit cards and\naccounts](https://docs.stripe.com/testing#cards). You can’t accept real payment\nmethods or work with real accounts.[Identity](https://docs.stripe.com/identity)\ndoesn’t perform any verification checks. Also, Connect [account\nobjects](https://docs.stripe.com/api/accounts/object) don’t return sensitive\nfields.live modeUse live mode, and its associated live API keys, when you’re\nready to launch your integration and accept real money. In live mode, card\nnetworks and payment providers do process payments.API calls return real\nobjects. For example, you can retrieve and use real `account`, `payment`,\n`customer`, `charge`, `refund`, `transfer`, `balance`, and `subscription`\nobjects.Accept real credit cards and work with customer accounts. You can accept\nactual payment authorizations, charges, and captures for credit cards and\naccounts.Disputes have a more nuanced flow and a simpler [testing\nprocess](https://docs.stripe.com/testing#disputes). Also, some [payment\nmethods](https://docs.stripe.com/payments/payment-methods) have a more nuanced\nflow and require more steps.\nThe **Test mode** toggle in the Dashboard doesn’t affect your integration code.\nYour test and live mode API keys affect the behavior of your code.\n\n### Test card numbers\n\nStripe provides a set of [test card\nnumbers](https://docs.stripe.com/testing#cards) that you can use to simulate\nvarious payment scenarios. You can use these test card numbers to create\nsimulated payments in test mode without processing actual payments or charges.\n\nWhen you use test card numbers, you can enter any expiration date in the future\nand any three-digit CVC code to simulate a successful payment. If you want to\nsimulate a failed payment, you can use specific test card numbers and CVC codes\nprovided by Stripe.\n\nTest card numbers are only valid in test mode. Don’t use them for real payments.\n\n### Delete test data\n\nTo delete all of your test data from your Stripe account, complete the following\nsteps:\n\n- [Log in to the Dashboard](https://dashboard.stripe.com/) using your existing\nStripe account.\n- While in test mode, click **Developers** > **Overview**.\n- Under **Test data**, click **Review test data**. The dialog gives you a list\nof all of your existing test data objects.\n- Click **Delete test data** to initiate the deletion process. You can’t undo\nthe deletion of your test data.\n\nTest mode is temporarily unusable while the deletion process occurs.\n\n#### Note\n\nYou must manually delete [Meters](https://docs.stripe.com/api/billing/meter)\nbecause the object isn’t supported by the automated test data deletion process.\n\n### Test email\n\nBy default, Stripe doesn’t email customers in test mode. For example, paying an\ninvoice in test mode doesn’t send a receipt email to the customer. Invoices\nfinalized through the API in test mode also don’t send a receipt email to the\ncustomer.\n\nIf you want Stripe to email customers in test mode, you can do the following in\nthe Dashboard:\n\n- Create and manually send an invoice to a specific customer.\n- Manually send a receipt for a paid invoice.\n\nTo verify emails for invoices and receipts, set the email address for your\n[Team](https://dashboard.stripe.com/settings/team) on the `Customer` object or\n`receipt_email` attribute on the PaymentIntent.\n\n## Testing use cases\n\nThe following table contains quality assurance (QA) testing use cases:\n\nUse caseActionCharge success (capturing immediately)- No error.\n- The charge appears as **Succeeded** in the Dashboard under\n[Payments](https://dashboard.stripe.com/payments).\n- Stripe captures the charge.\nPaymentIntent authorization success ([capturing funds for\nlater](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method))\n```\n{\n ...\n \"capture_method\": \"manual\",\n ...\n \"status\": \"requires_capture\",\n ...\n}\n```\n\nPaymentIntent capture success (capturing immediately or [capturing funds for\nlater](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method))\n```\n{\n ...\n \"status\": \"succeeded\",\n ...\n }\n```\n\nCharge failThe charge appears as Failed in the Dashboard under\n[Payments](https://dashboard.stripe.com/payments).\n```\n{\n \"error\": {\n \"charge\": \"ch_\",\n \"code\": \"card_declined\",\n \"decline_code\": \"<<REASON HERE>>\",\n \"doc_url\": \"https://docs.stripe.com/error-codes#card-declined\",\n \"message\": \"Your card was declined.\",\n \"type\": \"card_error\"\n }\n}\n```\n\nRadar blockNo matter which version of Radar you use, it might block a charge due\nto [high risk](https://docs.stripe.com/radar/risk-evaluation#high-risk) or a\n[rule](https://docs.stripe.com/radar/rules). The response is the same as what\nyou get when a charge fails.Charge disputed- The charge appears as **Disputed**\nin the Dashboard under [Payments](https://dashboard.stripe.com/payments).\n- Stripe debits the charge amount plus the dispute fee from the balance, creates\na `Dispute` object along with its associated `charge.dispute.created` event.\n\n```\n{\n \"object\": {\n \"id\": \"du_\",\n \"object\": \"dispute\",\n \"charge_id\": \"ch_\",\n ...\n \"status\": \"needs_response\"\n }\n}\n```\n\nCharge inquiry opened\n\nInquiries are similar to disputes, with three key distinctions: no funds are\nwithdrawn unless we elevate an inquiry to a dispute, they remain refundable\nuntil disputed, and have a different set of statuses. In this case, Stripe fires\na `charge.dispute.created` event.\n\n```\n{\n \"object\": {\n \"id\": \"du_\",\n \"object\": \"dispute\",\n \"charge_id\": \"ch_\",\n ...\n \"is_charge_refundable\": true,\n ...\n \"status\": \"warning_needs_response\"\n }\n}\n```\n\nDispute won\n\n- When a customer wins a dispute, the funds of the original charge are restored\nto the account, less the dispute fee.\n- Stripe updates the existing `Dispute` object, and fires a\n`charge.dispute.closed` event.\n\n```\n{\n \"object\": {\n \"id\": \"du_\",\n \"object\": \"dispute\",\n \"charge_id\": \"ch_\",\n ...\n \"status\": \"won\"\n }\n}\n```\n\nDispute lost\n\nWhen a customer loses a dispute, Stripe updates the existing `Dispute` object,\nand fires a `charge.dispute.closed` event.\n\n```\n{\n \"object\": {\n \"id\": \"du_\",\n \"object\": \"dispute\",\n \"charge_id\": \"ch_\",\n ...\n \"status\": \"lost\"\n }\n}\n```\n\nInquiry won\n\nWhen you win an inquiry, your balance remains the same, as no funds were removed\nwhen you initially opened the inquiry. Stripe updates the existing `Dispute`\nobject, and fires a `charge.dispute.closed` event.\n\n```\n{\n \"object\": {\n \"id\": \"du_\",\n \"object\": \"dispute\",\n \"charge_id\": \"ch_\",\n ...\n \"status\": \"warning_closed\"\n }\n}\n```\n\nInquiry lost\n\n- When you lose an inquiry, it escalates to a dispute.\n- When it escalates to a dispute, its status changes with a\n`charge.dispute.updated` event, and funds are withdrawn in a\n`charge.dispute.funds_withdrawn` event:\n\n```\n{\n \"object\": {\n \"id\": \"du_\",\n \"object\": \"dispute\",\n \"charge_id\": \"ch_\",\n ...\n \"status\": \"needs_response\"\n }\n}\n```\n\nCharge refunded\n\nThe charge appears as **Refunded** in the Dashboard under\n[Payments](https://dashboard.stripe.com/payments).\n\n```\n{\n \"id\": \"re_\",\n \"object\": \"refund\",\n \"amount\": \"<<FULL AMOUNT>>\",\n \"charge\": \"ch_\",\n ...\n \"payment_intent\": \"pi_\", // if you're using PaymentIntents\n ...\n \"status\": \"succeeded\"\n}\n```\n\nCharge partially refunded\n\n- The charge appears as **Refunded** in the Dashboard under\n[Payments](https://dashboard.stripe.com/payments).\n- The refund amount is different from the charge amount, and you can still\ndispute partially-refunded charges.\n\n```\n{\n \"id\": \"re_\",\n \"object\": \"refund\",\n \"amount\": \"<<PARTIAL AMOUNT>>\",\n \"charge\": \"ch_\",\n ...\n \"payment_intent\": \"pi_\", // if you are using PaymentIntents\n ...\n \"status\": \"succeeded\"\n}\n```\n\nAccount balance goes negativeMake sure to test for a negative balance on Stripe\nand verify that your bank accounts can accept debits from us.Successful payoutIf\nyou enable webhooks for a [successful\npayout](https://docs.stripe.com/api/events/types#event_types-payout.paid)\n(recommended), test your handling of the event.Failed payoutIf you enable\nwebhooks for a [failed\npayout](https://docs.stripe.com/api/events/types#event_types-payout.failed)\n(recommended), test your handling of the event.\n## Stripe’s Postman collection\n\nPostman is a widely-used API development tool. To make integrating Stripe\neasier, we provide a [Payments-specific Postman\ncollection](https://www.getpostman.com/collections/080102f58f29afa081d7) with\nthe tools you need to test the server-side component of your integration.\n\n### Import the collection\n\nTo begin, you need to access the Postman app. You can use either the browser or\ndesktop version. After launching the app, import the collection.\n\nTo start this process on the web, press the **Import** button at the top-left\ncorner, followed by the **Link** option. Insert the [Payments\ncollection](https://www.getpostman.com/collections/080102f58f29afa081d7) link.\nIf you’re using the Postman desktop app, click **File > Import**. After\nsuccessfully importing, the collection appears under **Collections**.\n\n![The Import\ndialog](https://b.stripecdn.com/docs-statics-srv/assets/postman-import-modal.9cae305f4da63f7bd88cb89885c2e884.png)\n\nThe import dialog\n\n### Use the collection\n\nTo use the collection, navigate to the collection you just imported and click\n**Variables**. your testmode Stripe [secret\nkey](https://dashboard.stripe.com/test/apikeys) from the Stripe Dashboard, and\npaste it into the **Initial Value** field. After you complete this step, you’re\nready to begin making requests.\n\nOther variables are populated by scripts during the runtime of the collection.\nFor example, when creating a\n[customer](https://docs.stripe.com/api/customers/create),\n[price](https://docs.stripe.com/api/prices/create),\n[charge](https://docs.stripe.com/api/charges/object) or\n[PaymentIntent](https://docs.stripe.com/api/payment_intents/object), the system\nsaves that ID through a script in the collection, which is then accessible for\nlater requests, like issuing a refund.\n\n![The Variables Tab for the\nCollection](https://b.stripecdn.com/docs-statics-srv/assets/postman-variables-tab.791bd1b3fdb2d972387aa80b9e3555de.png)\n\nAdd a secret key to a Postman collection\n\n## See also\n\n- [Test your integration](https://docs.stripe.com/testing)\n- [Sandboxes](https://docs.stripe.com/sandboxes)\n\n## Links\n\n- [Postman\ncollection](https://www.getpostman.com/collections/080102f58f29afa081d7)\n- [test API keys](https://docs.stripe.com/keys#obtain-api-keys)\n- [Stripe Dashboard](https://dashboard.stripe.com/test/apikeys)\n- [activate your account](https://docs.stripe.com/get-started/account/activate)\n- [product object](https://docs.stripe.com/api/products/object)\n- [test credit cards and accounts](https://docs.stripe.com/testing#cards)\n- [Identity](https://docs.stripe.com/identity)\n- [account objects](https://docs.stripe.com/api/accounts/object)\n- [testing process](https://docs.stripe.com/testing#disputes)\n- [payment methods](https://docs.stripe.com/payments/payment-methods)\n- [Log in to the Dashboard](https://dashboard.stripe.com/)\n- [Meters](https://docs.stripe.com/api/billing/meter)\n- [Team](https://dashboard.stripe.com/settings/team)\n- [Payments](https://dashboard.stripe.com/payments)\n- [capturing funds for\nlater](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method)\n-\n[https://docs.stripe.com/error-codes#card-declined](https://docs.stripe.com/error-codes#card-declined)\n- [high risk](https://docs.stripe.com/radar/risk-evaluation#high-risk)\n- [rule](https://docs.stripe.com/radar/rules)\n- [successful\npayout](https://docs.stripe.com/api/events/types#event_types-payout.paid)\n- [failed\npayout](https://docs.stripe.com/api/events/types#event_types-payout.failed)\n- [customer](https://docs.stripe.com/api/customers/create)\n- [price](https://docs.stripe.com/api/prices/create)\n- [charge](https://docs.stripe.com/api/charges/object)\n- [PaymentIntent](https://docs.stripe.com/api/payment_intents/object)\n- [Test your integration](https://docs.stripe.com/testing)\n- [Sandboxes](https://docs.stripe.com/sandboxes)",
  "metadata": {
    "title": "Test mode and use cases | Stripe Documentation",
    "description": "Use test mode and our uses cases to test your integration.",
    "sourceURL": "https://docs.stripe.com/test-mode"
  }
}