{
  "content": "# Best practices for managing secret API keys\n\n## Learn how to manage secret API keys and handle key leaks.\n\nSecret API keys are a form of account credentials, like a username and password.\nIf bad actors obtain a secret key, they can use it to harm your business and\nother parties in the Stripe ecosystem.\n\nStripe users own the responsibility of keeping secret API keys safe. Here are\nsome best practices for how to do that, including by using Stripe-offered\nsecurity features.\n\n## Protecting against key leakage\n\n- **Use secure key management systems (KMS) to store secret keys.** When you\ncreate a secret live mode key from the Stripe Dashboard, it is only revealed\nonce. Immediately copy the key to a KMS, which is designed to handle sensitive\ninformation with encryption and access controls. Make sure you don’t leave a\ncopy of the key in the local file.\n- **Grant access only to those who need it.** Define a clear policy on which\nusers have permission to create, update or read keys. Limit the access only to\nthose who need it. Audit the access periodically to avoid excess privilege on\nkeys.\n- **Don’t share secret keys using insecure means.** Don’t share keys in emails,\nchat messages, or customer support messages. Stripe never asks you for your\nsecret API key.\n- **Don’t store keys in source code repositories (such as GitHub).** Bad actors\nmight scan public source repositories for leaked keys. Even if the source\nrepository is private, it could be shared with team members on their development\nenvironments.\n- **Don’t embed secret keys in applications.** Bad actors can exploit secret\nkeys by matching a certain string pattern in the application. Avoid embedding\nkeys in applications such as client tools, SDKs, and mobile apps.\n- **Exercise your ability to roll your API Keys.** Defining and exercising a\nprocess for rolling keys helps you understand where your keys are being used and\nprepares your organization in the event your API key is leaked. By having key\nrolling processes in place you’ll be prepared to respond to a key leak event\nwith a minimum of impact on your business.\n- **Audit API request logs to monitor suspicious activities.** We recommend that\nyou regularly audit or monitor API [request\nlogs](https://docs.stripe.com/development/dashboard/request-logs) to proactively\nidentify misused API keys. Make sure your developers aren’t using live mode keys\nwhen a [sandbox](https://docs.stripe.com/sandboxes) key is appropriate. Learn\nmore at [sandbox versus live\nmode](https://docs.stripe.com/keys#test-live-modes).\n- **Regular training and updating documentation.** Maintain up-to-date\ndocumentation about how to handle secret API keys within your organization and\nhost regular training sessions to make sure best practices are followed.\n\n## Adopt security features to protect your integration\n\n- **Use restricted API keys.** Restricted API keys can customize read or write\naccess to specific API resources. With restricted keys, especially when giving\naccess to third parties, you can allow only the minimum access to resources\nrequired and limit the risk of keys.\n- **Limit the IP addresses that can send API requests.** You can configure your\nAPI key so that only requests from designated IP addresses are allowed. We\nrecommended this if your service has stable egress IP ranges and a change\nmanagement process for updating the allowlist when those egress ranges change.\n\n## Handle leaked secret API keys\n\nIf you identified a secret key leak, such as if a key is accidentally published\nto GitHub， immediately roll the key from Stripe Dashboard and replace your\nintegration with the new key. If you detected abnormal behaviors without\nconfirming that the API key is leaked, we recommended that you roll the API keys\nproactively while investigating the root cause in parallel.\n\nIf Stripe detects that a live mode secret API key has been exposed, we will\nimmediately notify you and request that you roll the key. It’s crucial for\nbusinesses to act promptly to reduce potential damages and financial losses\ncaused by unauthorized use of the leaked key. Depending on the imposed risk and\nactivity on the account, we might decide to roll the key on your behalf. In this\ncase you will receive notifications about any action taken.\n\nStripe doesn’t guarantee that we will detect all leaked keys. You’re responsible\nfor following the best practices to prevent potential key leaks and ensure your\nintegration with Stripe is secure.\n\n## Links\n\n- [request logs](https://docs.stripe.com/development/dashboard/request-logs)\n- [sandbox](https://docs.stripe.com/sandboxes)\n- [sandbox versus live mode](https://docs.stripe.com/keys#test-live-modes)\n- [Use restricted API keys](https://docs.stripe.com/keys#limit-access)\n- [Limit the IP addresses that can send API\nrequests](https://docs.stripe.com/keys#ip-allowlist)",
  "metadata": {
    "title": "Best practices for managing secret API keys | Stripe Documentation",
    "description": "Learn how to manage secret API keys and handle key leaks.",
    "sourceURL": "https://docs.stripe.com/keys-best-practices"
  }
}