{
  "content": "# FocusView component for Stripe AppsDashboard only\n\n## Use FocusView to open a dedicated space for the end user to complete a specific task.\n\nSDK version8.x9.x\nA `FocusView` component can be opened from other `View` components and allows\nthe developer to open a dedicated space for the end user to complete a specific\ntask. Examples include:\n\n- Enter details to create a new entry in a database\n- Go through a wizard to decide on next steps\n- Confirm that the user wants to take the action they indicated\n\n!\n\nWhat FocusView looks like\n\n`FocusView` must be a child of `ContextView`. Don’t wrap the `FocusView` in a\nconditional, instead use the `shown` property to control its visible state. For\nmore information, see\n[ContextView](https://docs.stripe.com/stripe-apps/components/contextview).\n\nTo add the `FocusView` component to your app:\n\n```\nimport {FocusView} from '@stripe/ui-extension-sdk/ui';\n```\n\n### FocusView props\n\nPropertyType\n`children`\n\nRequired\n`React.ReactNode`\n\nThe contents of the component.\n\n`title`\n\nRequired\n`string`\n\nThe title of the `FocusView`. This will be displayed at the top of the drawer\nunder your app’s name.\n\n`confirmCloseMessages`\n\nOptional\n`ConfirmCloseMessages | undefined`\n\nIf provided, confirmCloseMessages will be displayed when the user closes the\n`FocusView`.\n\nRelated types:\n[ConfirmCloseMessages](https://docs.stripe.com/stripe-apps/components/focusview#confirmclosemessages).\n\n`footerContent`\n\nOptional\n`React.ReactNode`\n\nReact node adjacent to any actions in the footer.\n\n`primaryAction`\n\nOptional\n`React.ReactElement | undefined`\n\nA primary call to action (“Save” or “Continue”) `Button` placed in the footer.\n\n`secondaryAction`\n\nOptional\n`React.ReactElement | undefined`\n\nA secondary call to action (“Cancel”) `Button` placed in the footer.\n\n`setShown`\n\nOptional\n`((shown: boolean) => void) | undefined`\n\nAllows the `FocusView` to manage shown state if a user requests to close the\nwindow, or if it needs to stay open because of the close confirmation dialog.\n\n`shown`\n\nOptional\n`boolean | undefined`\n\nWhether the `FocusView` should be shown or not. This property is maintained by a\nparent view.\n\n`onClose`\n\nOptionalDeprecated\nUse `setShown` instead. If the user clicks out of the `FocusView` or presses the\nescape button, this informs the extension that the user has closed the view.\n\n`(() => void) | undefined`\n\n### ConfirmCloseMessages\n\nPropertyType\n`cancelAction`\n\nRequired\n`string`\n\n`description`\n\nRequired\n`string`\n\n`exitAction`\n\nRequired\n`string`\n\n`title`\n\nRequired\n`string`\n\n## Close Confirmation Dialog\n\nWhen passing `confirmCloseMessages`, in order for the close confirmation dialog\nto work properly in every close scenario, pass the `setShown` prop so the\n`FocusView` can manage its `shown` state. To control when the close confirmation\ndialog displays, you can use state to conditionally pass `confirmCloseMessages`\nto the `FocusView`, like in the following example:\n\n## Example\n\n```\nimport React from 'react';\nimport {\n Box,\n Button,\n ContextView,\n FocusView,\n Select,\n} from '@stripe/ui-extension-sdk/ui';\n\ntype Mood = 'Happy' | 'Sad';\n\nconst confirmCloseMessages = {\n title: 'Your mood will not be saved',\n description: 'Are you sure you want to exit?',\n cancelAction: 'Cancel',\n exitAction: 'Exit',\n};\n\nconst MoodView = () => {\n const [mood, setMood] = React.useState<Mood>('Happy');\n const [shown, setShown] = React.useState<boolean>(false);\n const [confirmClose, setConfirmClose] = React.useState<boolean>(false);\n\n const open = () => {\n setConfirmClose(true);\n setShown(true);\n };\n\n const closeWithoutConfirm = () => {\n setConfirmClose(false);\n setShown(false);\n };\n\n const closeWithConfirm = () => {\n setShown(false);\n };\n\n const updateMood = (newMood: Mood) => {\n setMood(newMood);\n closeWithoutConfirm();\n };\n\n return (\n <ContextView\n title=\"Mood picker\"\n description=\"This section communicates my extension's feelings\"\n >\n <FocusView\n title=\"Pick your mood\"\n shown={shown}\n setShown={setShown}\n confirmCloseMessages={confirmClose ? confirmCloseMessages : undefined}\n secondaryAction={<Button onPress={closeWithConfirm}>Cancel</Button>}\n >\n <Select onChange={(e) => updateMood(e.target.value as Mood)}>\n <option label=\"\">Select mood</option>\n <option label=\"Happy\">Happy</option>\n <option label=\"Sad\">Sad</option>\n </Select>\n </FocusView>\n <Box css={{stack: 'x', gap: 'medium'}}>\n <Box\n css={{\n font: 'subheading',\n color: mood === 'Happy' ? 'success' : 'info',\n }}\n >\n {mood}\n </Box>\n <Button onPress={open}>Change mood</Button>\n </Box>\n </ContextView>\n );\n};\n```\n\n## See also\n\n- [Design patterns to follow](https://docs.stripe.com/stripe-apps/patterns)\n- [Style your app](https://docs.stripe.com/stripe-apps/style)\n- [UI testing](https://docs.stripe.com/stripe-apps/ui-testing)\n\n## Links\n\n- [ContextView](https://docs.stripe.com/stripe-apps/components/contextview)\n- [Design patterns to follow](https://docs.stripe.com/stripe-apps/patterns)\n- [Style your app](https://docs.stripe.com/stripe-apps/style)\n- [UI testing](https://docs.stripe.com/stripe-apps/ui-testing)",
  "metadata": {
    "title": "FocusView component for Stripe Apps | Stripe Documentation",
    "description": "Use FocusView to open a dedicated space for the end user to complete a specific task.",
    "sourceURL": "https://docs.stripe.com/stripe-apps/components/focusview"
  }
}