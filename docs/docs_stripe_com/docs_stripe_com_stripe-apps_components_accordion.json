{
  "content": "# Accordion component for Stripe Apps\n\n## Use accordions to split long or complex content into collapsible chunks.\n\nSDK version8.x9.x\nTo add the `Accordion` component to your app:\n\n```\nimport {Accordion, AccordionItem} from '@stripe/ui-extension-sdk/ui';\n```\n\nAccordions help a user to quickly scan a collection, identify elements, and\naccess more details without leaving the context that they’re working in.\n\nThis is a preview of an `Accordion` component with three `AccordionItem`\ncomponents inside:\n\nLoading example...\n```\n<Box css={{backgroundColor: 'surface'}}>\n <Accordion>\n <AccordionItem title=\"Apples\">\n <Box css={{padding: 'xlarge'}}>Accordion contents</Box>\n </AccordionItem>\n <AccordionItem title=\"Bananas\">\n <Box css={{padding: 'xlarge'}}>Accordion contents</Box>\n </AccordionItem>\n <AccordionItem title=\"Peaches\" subtitle=\"A subtitle can be provided\">\n <Box css={{padding: 'xlarge'}}>Accordion contents</Box>\n </AccordionItem>\n </Accordion>\n</Box>\n```\n\n### Accordion props\n\nPropertyType\n`children`\n\nRequired\n`React.ReactNode`\n\nOne or more `AccordionItem` components.\n\n## AccordionItem\n\n`Accordion` components contain one or more `AccordionItem` components.\n\n### AccordionItem props\n\nPropertyType\n`children`\n\nRequired\n`React.ReactNode`\n\nThe contents of the component.\n\n`title`\n\nRequired\n`React.ReactNode`\n\nA title describing the `AccordionItem`.\n\n`actions`\n\nOptional\n`React.ReactNode`\n\nA component containing actions that a user can take on the `AccordionItem`. If\nthere are more than 2 actions, use an overflow menu to show the rest.\n\n`defaultOpen`\n\nOptional\n`boolean | undefined`\n\nWhether or not the `AccordionItem` should be open on the first render.\n\n`media`\n\nOptional\n`React.ReactNode`\n\nA component containing an optional `Img` or `Icon` to help identify the\n`AccordionItem`.\n\n`onChange`\n\nOptional\n`((isOpen: boolean) => void) | undefined`\n\nCallback when the open state has changed.\n\n`subtitle`\n\nOptional\n`React.ReactNode`\n\nAn optional subtitle with addition descriptive information.\n\n## Titles and subtitles\n\nLabel all `AccordionItem` components with a `title` that uniquely identifies the\nitem. You can also use an optional `subtitle` to provide a description or\nadditional relevant information.\n\nLoading example...\n```\n<Box css={{backgroundColor: 'surface'}}>\n <Accordion>\n <AccordionItem title=\"Apples\">\n <Box css={{padding: 'xlarge'}}>Accordion contents</Box>\n </AccordionItem>\n <AccordionItem title=\"Bananas\">\n <Box css={{padding: 'xlarge'}}>Accordion contents</Box>\n </AccordionItem>\n <AccordionItem title=\"Oranges\">\n <Box css={{padding: 'xlarge'}}>Accordion contents</Box>\n </AccordionItem>\n <AccordionItem title=\"Peaches\" subtitle=\"A subtitle can be provided\">\n <Box css={{padding: 'xlarge'}}>Accordion contents</Box>\n </AccordionItem>\n </Accordion>\n</Box>\n```\n\n## Media\n\nThe `AccordionItem` component can contain a media element to show a relevant\nicon or image that helps the user identify the item. Only include media when it\nhelps users identify items and when there’s a strong association between the\nmedia and the item itself.\n\nLoading example...\n```\n<Box css={{backgroundColor: 'surface'}}>\n <Accordion>\n <AccordionItem\n media={<Icon name=\"chat\" />}\n title=\"ACH credit transfer\"\n subtitle=\"ACH Credit Transfer enables US customers...\"\n >\n <Box css={{padding: 'xlarge'}}>Accordion AccordionContents</Box>\n </AccordionItem>\n <AccordionItem\n title=\"Cards\"\n subtitle=\"Accept Visa, Mastercard, American Express...\"\n >\n <Box css={{padding: 'xlarge'}}>Accordion AccordionContents</Box>\n </AccordionItem>\n <AccordionItem\n title=\"Apple Pay\"\n subtitle=\"Manage Apple Pay domains and certificates.\"\n >\n <Box css={{padding: 'xlarge'}}>Accordion AccordionContents</Box>\n </AccordionItem>\n </Accordion>\n</Box>\n```\n\n## Actions\n\nYou can represent actions that an item can have performed on it with buttons or\nlinks placed on the right-hand side of the accordion trigger.\n\nLoading example...\n```\nconst titles = [\n 'Example using a link',\n 'Example using a button',\n 'Multiple buttons are cool too',\n];\nconst actionExamples = [\n <Link key={0} onPress={() => null}>\n Edit\n </Link>,\n <Button key={1} onPress={() => null}>\n Configure\n </Button>,\n <ButtonGroup key={2}>\n <Button onPress={() => null}>Action 1</Button>\n <Button onPress={() => null}>Action 2</Button>\n </ButtonGroup>,\n];\n\nreturn (\n <Box css={{backgroundColor: 'surface'}}>\n <Accordion>\n {[0, 1, 2].map((i) => (\n <AccordionItem\n title={titles[i]}\n subtitle={i > 2 && 'An optional subtitle can be provided.'}\n actions={actionExamples[i]}\n key={i}\n >\n <Box css={{padding: 'xlarge'}}>Accordion AccordionContents</Box>\n </AccordionItem>\n ))}\n </Accordion>\n </Box>\n)\n```\n\n## Disabling items\n\nInstead of removing a user’s ability to interact with disabled accordion items,\ndisable the associated actions while still presenting as much information within\nthe item as possible to the user.\n\nLoading example...\n```\n<Box css={{backgroundColor: 'surface'}}>\n <Accordion>\n <AccordionItem\n title=\"Orangesss\"\n actions={\n <Button disabled onPress={() => null}>\n Edit\n </Button>\n }\n >\n <Box css={{padding: 'xlarge'}}>Accordion contents</Box>\n </AccordionItem>\n </Accordion>\n</Box>\n```\n\n## See also\n\n- [Design patterns to follow](https://docs.stripe.com/stripe-apps/patterns)\n- [Style your app](https://docs.stripe.com/stripe-apps/style)\n- [UI testing](https://docs.stripe.com/stripe-apps/ui-testing)\n\n## Links\n\n- [Design patterns to follow](https://docs.stripe.com/stripe-apps/patterns)\n- [Style your app](https://docs.stripe.com/stripe-apps/style)\n- [UI testing](https://docs.stripe.com/stripe-apps/ui-testing)",
  "metadata": {
    "title": "Accordion component for Stripe Apps | Stripe Documentation",
    "description": "Use accordions to split long or complex content into collapsible chunks.",
    "sourceURL": "https://docs.stripe.com/stripe-apps/components/accordion"
  }
}