{
  "content": "# Issuing real-time authorizations\n\n## Learn about real-time authorizations.\n\nUsing the synchronous webhook, you can approve or decline authorization requests\nin real time.\n\nYour webhook endpoint can be configured in your\n[settings](https://dashboard.stripe.com/account/issuing). When a card is used to\nmake a purchase, Stripe creates an `issuing_authorization.request` and sends it\nto your configured endpoint for your approval.\n\nGet started with our [interactive guide to real-time\nauthorizations](https://docs.stripe.com/issuing/controls/real-time-authorizations/quickstart).\n\n## Responding to authorization requests\n\nYou can respond to authorization requests by responding directly to the webhook\nevent.\n\n### Respond directly\n\nRespond to the `issuing_authorization.request` webhook event directly to either\napprove or decline an authorization after it’s received.\n\n#### Webhook response\n\nOur webhook accepts `JSON` responses with the following parameters:\n\n**Status code:** Return `200` to indicate success.\n\n**Header:**\n\nfield name required or optional description Stripe-VersionrequiredVersion in\n`YYYY-dd-mm` format.Content-TypeoptionalThe only content type accepted for\nAuthorization webhook responses is `application/json`.\n**Body:**\n\nfield name required or optional type description approvedrequiredBooleanSet\n`true` to approve an authorization and `false` to\ndecline.amountoptionalIntegerIf the authorization’s\n`pending_request.is_amount_controllable` property is `true`, you can provide\nthis value to control how much to hold for the authorization. It must be\npositive.metadataoptionalSet of [key-value\npairs](https://docs.stripe.com/api/metadata)This can be useful for storing\nadditional information about the object in a structured\nformat.send_fraud_challenges Public previewoptionalArray of stringsYou can send\na fraud challenge for this authorization only through SMS. Leave it blank if you\ndon’t want to send a challenge.\n```\n# Using Sinatra.\nrequire 'sinatra'\nrequire 'stripe'\n\nset :port, 4242\n\n# Set your secret key. Remember to switch to your live secret key in production.\n# See your keys here: https://dashboard.stripe.com/apikeys\nStripe.api_key = 'sk_test_BQokikJOvBiI2HlWgH4olfQ2'\n\n# Replace with a real secret. You can find your endpoint's secret in your webhook settings.\nwebhook_secret = 'whsec_...'\n\npost '/webhook' do\n payload = request.body.read\n sig_header = request.env['HTTP_STRIPE_SIGNATURE']\n\n event = nil\n\n # Verify webhook signature and extract the event.\n begin\n event = Stripe::Webhook.construct_event(\n payload, sig_header, webhook_secret\n )\n rescue JSON::ParserError => e\n # Invalid payload.\n status 400\n return\n rescue Stripe::SignatureVerificationError => e\n # Invalid signature.\n status 400\n return\n end\n\n if event['type'] == 'issuing_authorization.request'\n auth = event['data']['object']\n # ... custom business logic\n\n status 200\nheader 'Stripe-Version' => '2022-08-01', 'Content-Type' => 'application/json'\n data = { 'approved' => true }\n body data.to_json\n end\n # ...handle other cases\nend\n```\n\n### Make an API call Deprecated\n\nThis documentation is maintained for existing users. If you’re a new user,\nrespond directly to the webhook. If you’re an existing user, plan to migrate to\nthe direct webhook response. You can follow [our direct webhook migration\nguide](https://docs.stripe.com/issuing/controls/real-time-authorizations/direct-webhook-migration).\n\nMake an API call to either\n[approve](https://docs.stripe.com/api/issuing/authorizations/approve) or\n[decline](https://docs.stripe.com/api/issuing/authorizations/decline) the\nrequest and include the\n[Authorization](https://docs.stripe.com/api/issuing/authorizations/object) ID.\nIf you use this method, your webhook must approve or decline each authorization\nbefore responding to the incoming webhook request.\n\n```\n# Using Sinatra.\nrequire 'sinatra'\nrequire 'stripe'\n\nset :port, 4242\n\n# Set your secret key. Remember to switch to your live secret key in production.\n# See your keys here: https://dashboard.stripe.com/apikeys\nStripe.api_key = 'sk_test_BQokikJOvBiI2HlWgH4olfQ2'\n\n# Uncomment and replace with a real secret. You can find your endpoint's\n# secret in your webhook settings.\n# webhook_secret = 'whsec_...'\n\npost '/webhook' do\n payload = request.body.read\n sig_header = request.env['HTTP_STRIPE_SIGNATURE']\n\n event = nil\n\n # Verify webhook signature and extract the event.\n begin\n event = Stripe::Webhook.construct_event(\n payload, sig_header, webhook_secret\n )\n rescue JSON::ParserError => e\n # Invalid payload.\n status 400\n return\n rescue Stripe::SignatureVerificationError => e\n # Invalid signature.\n status 400\n return\n end\n\n if event['type'] == 'issuing_authorization.request'\n auth = event['data']['object']\n handle_authorization(auth)\n end\n\n status 200\nend\n\ndef handle_authorization(auth)\n # Authorize the transaction\n authorization = Stripe::Issuing::Authorization.approve(auth[\"id\"])\nend\n```\n\nWe recommend that you only use one of these two methods to respond to\nauthorization requests. For users migrating from one method to another, both\nmethods are supported during a migration. In the event both methods are used on\nthe same authorization, the API call takes precedence over the direct response.\nFor migrations, we recommend only using one method on a given request at a time.\n\nIf Stripe doesn’t receive your approve or decline response or request within 2\nseconds, the `Authorization` is automatically approved or declined based on your\n[timeout settings](https://dashboard.stripe.com/account/issuing).\n\n#### Note\n\nIf your Issuing balance has insufficient funds for the incoming authorization,\nthe authorization will be denied and your webhook endpoint will not receive the\n`issuing_authorization.request` event. To learn more about funding your Issuing\nbalance, [read here](https://docs.stripe.com/issuing/funding/balance).\n\n## Authorization requests\n\nWhen an authorization request is sent to your webhook, the `amount` requested is\nstored in `pending_request`.\n\n```\n{\n \"id\": \"iauth_1CmMk2IyNTgGDVfzFKlCm0gU\",\n \"object\": \"issuing_authorization\",\n \"approved\": false,\n \"amount\": 0,\n \"currency\": \"usd\",\n \"status\": \"pending\",\n ...\n \"pending_request\": {\n \"amount\": 400,\n \"currency\": \"usd\",\n \"merchant_amount\": 360,\n \"merchant_currency\": \"gbp\"\n }\n}\n```\n\nThe top-level `amount` in the request is set to 0 and `approved` is false. Once\nyou respond to the request, the top-level `amount` reflects the total amount\napproved or declined, the `approved` field is updated, and `pending_request` is\nset to null.\n\n### Testing webhooks locally\n\nTo test webhooks locally, you can use [Stripe\nCLI](https://docs.stripe.com/stripe-cli). Once you have it installed, you can\nforward events to your server:\n\n```\nstripe listen --forward-to localhost:4242/webhook\nReady! Your webhook signing secret is '{{WEBHOOK_SIGNING_SECRET}}' (^C to quit)\n```\n\nIn another terminal, you can then manually trigger\n`issuing_authorization.request` events from the CLI for more streamlined\ntesting.\n\n```\nstripe trigger issuing_authorization.request\n```\n\nLearn more about [setting up webhooks](https://docs.stripe.com/webhooks).\n\n## Autopilot Public preview\n\nAutopilot is a set of fallback options that allow you to continue making\nreal-time authorization decisions in the event your systems are down or don’t\nrespond to an authorization request within the allotted time window.\n\nFor users with their own dedicated Bank Identification Numbers (BIN), we also\noffer Autopilot in the event that Stripe can’t communicate with the network to\nprevent any continuity issues that might result.\n\nIn both cases, we make an authorization decision on your behalf based on a\npredefined set of rules. We create authorization objects for transmission, so\nthat reconciliation can take place for the Autopilot transactions. When an\nauthorization is approved or declined through Autopilot while you’re down, the\n`request_history.reason` field within the `issuing_authorization.created`\nwebhook changes to `webhook_timeout`. When an authorization is approved or\ndeclined through Autopilot while Stripe is down, the `request_history.reason`\nfield within the `issuing_authorization.created` webhook changes to\n`network_stip`.\n\nAccess to Autopilot is currently limited to US beta users. You must be an\nIssuing customer to join the beta. To request access to the beta, log in to your\nStripe account and refresh the page. [Contact\nStripe](https://stripe.com/contact/sales) for more information.\n\n## Fraud challenges Public preview\n\n[Fraud challenges](https://docs.stripe.com/issuing/controls/fraud-challenges)\nallow your cardholders to retry non-fraudulent transactions that would have\notherwise been blocked.\n\nTo manage the rules that dictate when a fraud challenge is sent, adjust your\nresponse to the `issuing_authorization.request` webhook. You can trigger fraud\nchallenges in scenarios where you detect spending that appears suspicious and\nwant additional verification (for example, a cardholder using their card out of\nthe country).\n\nTo do so, decline the `issuing_authorization.request` webhook and include the\n`send_fraud_challenges` field with the `[\"sms\"]` value.\n\nFraud challenges are currently limited to beta users. You must be an Issuing\ncustomer to join the beta. To request access to the beta, log in to your Stripe\naccount and refresh the page. [Contact Stripe](https://stripe.com/contact/sales)\nfor more information.\n\n## Enriched merchant data Private preview\n\nThe `enriched_merchant_data` hash on Issuing authorization webhooks passes more\ncomprehensive merchant data in events, such as:\n\n- Merchant categories\n- Location data\n- Third parties\n\nYou can use these details to build more robust authorization logic and\ndownstream user interfaces.\n\nCommon use case examples include:\n\n- Creating real time spend controls\n- Automating transaction categorization\n- Developing better fraud detection and prevention\n\n## Links\n\n- [settings](https://dashboard.stripe.com/account/issuing)\n- [interactive guide to real-time\nauthorizations](https://docs.stripe.com/issuing/controls/real-time-authorizations/quickstart)\n- [key-value pairs](https://docs.stripe.com/api/metadata)\n- [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys)\n- [our direct webhook migration\nguide](https://docs.stripe.com/issuing/controls/real-time-authorizations/direct-webhook-migration)\n- [approve](https://docs.stripe.com/api/issuing/authorizations/approve)\n- [decline](https://docs.stripe.com/api/issuing/authorizations/decline)\n- [Authorization](https://docs.stripe.com/api/issuing/authorizations/object)\n- [read here](https://docs.stripe.com/issuing/funding/balance)\n- [Stripe CLI](https://docs.stripe.com/stripe-cli)\n- [setting up webhooks](https://docs.stripe.com/webhooks)\n- [Contact Stripe](https://stripe.com/contact/sales)\n- [Fraud challenges](https://docs.stripe.com/issuing/controls/fraud-challenges)",
  "metadata": {
    "title": "Issuing real-time authorizations | Stripe Documentation",
    "description": "Learn about real-time authorizations.",
    "sourceURL": "https://docs.stripe.com/issuing/controls/real-time-authorizations"
  }
}