{
  "content": "# Add server-side logic\n\n## Validate and process user actions and data in your app using backend code.\n\nWith Stripe Apps, you can add server-side logic with a self-hosted backend. With\na self-hosted backend service, you can:\n\n- Integrate securely with third-party systems that require a server-side\nintegration.\n- Subscribe to [webhook](https://docs.stripe.com/webhooks) events from Stripe\nand synchronize Stripe with other systems.\n- Use long-lived app logic that executes when the user closes the browser.\n- Build apps that provide cron-job-like functionality to schedule specific\nactions.\n\n![App backend\nflowchart](https://b.stripecdn.com/docs-statics-srv/assets/app-backend.46a6d040d44872962a59728aaa65ee06.png)\n\nHow the self-hosted backend relates to the app\n\n## Authenticate users from your UI to your app’s back end\n\nTo authenticate a user from the Dashboard, the backend needs a signature with\nthe shared secret and the account and user ID of the current, signed-in\nDashboard user. If your user doesn’t have permission to call the API, Stripe\nreturns a [Permission\nerror](https://docs.stripe.com/error-handling?lang=node#permission-errors).\n\n## Before you begin\n\n- Make sure your backend service can send and receive HTTP requests. If you\nhaven’t built an API server before, consider trying the [interactive webhook\nendpoint builder](https://docs.stripe.com/webhooks/quickstart).\n- Create your shared secret by [uploading your\napp](https://docs.stripe.com/stripe-apps/upload-install-app):\n\n```\nstripe apps upload\n```\n\nDon’t worry if you haven’t finished developing the current version of your app,\nuploading won’t update your app in live mode.\n- Get your app’s secret to verify the signature in your backend:\n\na. Go to your Stripe app details page by selecting your app from\n[Apps](https://dashboard.stripe.com/apps).\n\nb. Under the application ID, click the overflow menu (), then click **Signing\nsecret** to open the signing secret dialog.\n\nc. Click the clipboard to copy your app’s secret from the signing secret dialog.\n\n### Send a signed request\n\n![Sending a signed\nrequest](https://b.stripecdn.com/docs-statics-srv/assets/authenticate-ui-extension.9e45231756741ade2e1a73f56585864c.png)\n\nTo send a signed request to the app’s backend:\n\n- Get the current signature using the\n[fetchStripeSignature](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#fetchStripeSignature)\nasynchronous function.\n- Add the signature to the `Stripe-Signature` header.\n- Include the `user_id` and `account_id` objects in the request.\n- On the app’s backend, verify that the request includes the signature, app\nsecret, `user_id`, and `account_id`.\n\nSee an [example of sending a signed request with additional\ndata](https://docs.stripe.com/stripe-apps/build-backend#send-a-signed-request-with-additional-data).\n\nAn example request from a Stripe app with the `Stripe-Signature` header:\n\n```\nimport {fetchStripeSignature} from '@stripe/ui-extension-sdk/utils';\n\nconst App = ({ userContext, environment }: ExtensionContextValue) => {\n const makeRequestToMyBackend = async (endpoint, requestData) => {\n // By default the signature is signed with user id and account id.\n const signaturePayload = {\n user_id: userContext?.id,\n account_id: userContext?.account.id,\n };\n return fetch(`https://example.com/${endpoint}/`, {\n method: 'POST',\n headers: {\n 'Stripe-Signature': await fetchStripeSignature(),\n 'Content-Type': 'application/json',\n },\n // Include the account ID and user ID in the body to verify on backend.\n body: JSON.stringify({\n ...requestData,\n ...signaturePayload,\n }),\n });\n };\n ...\n}\n```\n\nSample backend verifying the request:\n\nPlease be aware that the order and naming of the payload fields matters when\nperforming signature verification. The `user_id` precedes the `account_id` and\nthe resulting object is as follows: `{ user_id, account_id }`\n\n```\n// Set your secret key. Remember to switch to your live secret key in\nproduction.\n// See your keys here: https://dashboard.stripe.com/apikeys\nconst stripe = require('stripe')(process.env.STRIPE_API_KEY);\nconst express = require('express');\n\n// Find your app's secret in your app settings page in the Developers Dashboard.\nconst appSecret = 'absec_...';\n\n// This example uses Express.\nconst app = require('express')();\napp.use(express.json());\n\n// Match the raw body to content type application/json.\napp.post('/do_secret_stuff', (request, response) => {\n const sig = request.headers['stripe-signature'];\n // Retrieve user id and account id from the request body\n const payload = JSON.stringify({\n user_id: request.body['user_id'],\n account_id: request.body['account_id']\n });\n try {\n // Verify the payload and signature from the request with the app secret.\n stripe.webhooks.signature.verifyHeader(payload, sig, appSecret);\n } catch (error) {\n response.status(400).send(error.message);\n }\n // Handle the request by returning a response\n // to acknowledge receipt of the event.\n response.json({ success: true });\n});\n\napp.listen(3000, () => console.log('Running on port 3000'));\n```\n\n### Send a signed request with additional data\n\nYou can authenticate a user by sending a signed request with a payload\n(additional data). When you call the `fetchStripeSignature` function with an\nadditional payload request, you create a signature with `user_id`, `account_id`\nand the additional payload you passed into the function. By default, Stripe apps\nuse `user_id` and `account_id` to generate the signature string.\n\nAn example of generating a secret with additional payload:\n\n```\n// A valid payload object has keys of type string\n// and values of type string, number, or boolean.\nconst payload = {\n \"transaction_id\": 'ipi_1KRmFUFRwUQjTSJEjRnCCPyV',\n \"amount\": 100,\n \"livemode\": false,\n};\n\nfetch(`https://example.com/do_more_secret_stuff/`, {\n method: 'POST',\n headers: {\n 'Stripe-Signature': await fetchStripeSignature(payload),\n 'Content-Type': 'application/json',\n },\n // Append the account ID and user ID in the body to verify on backend.\n body: JSON.stringify({\n ...payload,\n user_id: 'usr_K6yd2CbXLO9A5G',\n account_id: 'acct_1JSkf6FRwUQjTSJE',\n }),\n});\n```\n\nSample backend verifying the signature generated with additional payload:\n\n```\n// Match the raw body to content type application/json.\napp.post('/do_more_secret_stuff', (request, response) => {\n try {\n // Verify the signature from the header and the request body that\n// contains the additional data, user ID, and account ID with the app secret.\n stripe.webhooks.signature.verifyHeader(request.body, sig, appSecret);\n } catch (error) {\n response.status(400).send(error.message);\n }\n // Handle the request by returning a response\n // to acknowledge receipt of the event.\n response.json({ success: true });\n});\n```\n\n### Verify user roles (optional)\n\nYou can verify the user roles assigned to a given `user_id` by including the\n`stripe_roles` key in the payload. Provide this with `userContext?.roles`, which\nreturns a list of\n[RoleDefinitions](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#roledefinition).\nIf any role in the payload isn’t assigned to the `user_id` provided,\n`fetchStripeSignature` returns an invalid request error (400).\n\n```\n// Provide this special key in the same way you'd\n// provide any other key to the additional payload.\nconst payload = {\n \"stripe_roles\": userContext?.roles,\n};\n\nfetch(`https://example.com/do_more_secret_stuff/`, {\n method: 'POST',\n headers: {\n 'Stripe-Signature': await fetchStripeSignature(payload),\n 'Content-Type': 'application/json',\n },\n // Append the account ID and user ID in the body to verify on backend.\n body: JSON.stringify({\n ...payload,\n user_id: 'usr_K6yd2CbXLO9A5G',\n account_id: 'acct_1JSkf6FRwUQjTSJE',\n }),\n});\n```\n\n### Expire and create secrets\n\nIf your secret is compromised, you can expire your current app’s secret\nimmediately for up to 24 hours to update the app’s secret on your backend.\nDuring this time, two secrets are active for the endpoint, the compromised\nsecret and the newly generated secret. Stripe generates one signature per secret\nuntil expiration.\n\nTo expire and create an app secret:\n\n- Go to your Stripe app details page by selecting your app from\n[Apps](https://dashboard.stripe.com/apps).\n- On the page header, click the overflow menu (), then click **Signing secret**\nto open the Signing secret dialog.\n- Click **Expire secret** from the signing secret dialog to open the Expire\nsecret dialog.\n- Select an expiration duration for your current’s app secret.\n- Click **Expire secret**.\n\n### Handle Cross-Origin Resource Sharing (CORS)\n\n[Cross-Origin Resource Sharing\n(CORS)](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) is an important\npart of helping keep apps secure from [cross-site scripting attacks\n(XSS)](https://developer.mozilla.org/en-US/docs/Glossary/Cross-site_scripting).\nBecause Stripe App UI extensions are, by necessity, cross-origin and sandboxed,\nyou must employ a specific approach to handling cross-origin request headers.\n\nFor your UI extension to retrieve data from your backend service, you must\nconfigure your backend service to do the following:\n\n- Allow requests using the [Options\nmethod](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/OPTIONS).\n- To allow requests from `null` origins, set the `Access-Control-Allow-Origin`\nto `*`.\n\n#### Note\n\nUI extensions have a null origin because they run in a sandbox for security\npurposes.\n\nMany backend frameworks have libraries and guidance to help you handle CORS.\nCheck the documentation for your framework for more specific guidance.\n\nTo authenticate that a request came from Stripe on behalf of a particular user\nor account, see [Authenticate users from your UI to your\nbackend](https://docs.stripe.com/stripe-apps/build-backend#authenticate-ui-to-backend).\n\n#### Caution\n\nOnly configure authenticated endpoints and any endpoints the UI extension\ncommunicates with to use `Access-Control-Allow-Origin: *`. Unauthenticated\nendpoints are vulnerable to\n[CSRF](https://developer.mozilla.org/en-US/docs/Glossary/CSRF) attacks if no\nother measures are in place.\n\n## Use Stripe APIs\n\nTo interact with Stripe, you can use and authenticate your requests to the\nStripe API.\n\n### Authenticating requests\n\nTo authenticate your requests, use your existing merchant account API key to\ninteract with Stripe and specify the user’s `stripeAccountId`.\n\nFor server-side API calls, you can make requests as connected accounts using the\nspecial header `Stripe-Account` with the Stripe account identifier (it starts\nwith the prefix `acct_`) of your platform user. Here’s an example that shows how\nto [Create a PaymentIntent](https://docs.stripe.com/api/payment_intents/create)\nwith your platform’s [API secret key](https://docs.stripe.com/keys) and your\nuser’s [Account](https://docs.stripe.com/api/accounts) identifier.\n\n```\ncurl https://api.stripe.com/v1/payment_intents \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -H \"Stripe-Account: {{CONNECTED_ACCOUNT_ID}}\" \\\n -d amount=1000 \\\n -d currency=usd \\\n -d \"payment_method_types[]\"=card\n```\n\nThe `Stripe-Account` header approach is implied in any API request that includes\nthe Stripe account ID in the URL. Here’s an example that shows how to [Retrieve\nan account](https://docs.stripe.com/api/accounts/retrieve) with your user’s\n[Account](https://docs.stripe.com/api/accounts) identifier in the URL.\n\n```\ncurl https://api.stripe.com/v1/accounts/{{CONNECTED_ACCOUNT_ID}} \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\"\n```\n\nIn addition, all of Stripe’s server-side libraries support this approach on a\nper-request basis, as shown in the following example:\n\n```\nStripe.api_key = \"{{PLATFORM_SECRET_KEY}}\"\nStripe::Customer.create(\n {email: 'person@example.edu'},\n {stripe_account: '{{CONNECTED_STRIPE_ACCOUNT_ID}}'}\n)\n\n# Fetching an account just needs the ID as a parameter\nStripe::Account.retrieve('{{CONNECTED_STRIPE_ACCOUNT_ID}}')\n```\n\n### Call your self-hosted backend from your UI extension\n\nWhen you make requests from your UI extension to your backend, [send a signature\nwith your\nrequest](https://docs.stripe.com/stripe-apps/build-backend#authenticate-ui-to-backend)\nto validate the legitimacy of the requests. From the UI extension, pass the\n`stripeAccountId` for the current user so that you can make backend requests on\nbehalf of that user.\n\n```\n// Set your secret key. Remember to switch to your live secret key in\nproduction.\n// See your keys here: https://dashboard.stripe.com/apikeys\nconst stripe = require('stripe')('sk_test_BQokikJOvBiI2HlWgH4olfQ2');\nconst express = require(\"express\");\nconst app = express();\n\napp.use(express.static(\"public\"));\napp.use(express.json());\n\napp.post(\"/api/data\", async (req, res) => {\n const { stripeAccountId } = req.body;\n\n const customer = await stripe.customers.create({\n description: 'My First Test Customer (created for API docs)',\n }, {\n stripeAccount: stripeAccountId,\n });\n\n res.send({\n data: []\n });\n});\n\napp.listen(3000, () => console.log(\"Node server listening on port 3000!\"));\n```\n\n## Call other APIs\n\nFrom your self-hosted backend, you can call any API—your own API or one built by\nanother developer or company.\n\nFor more information, learn how to [store secret credentials and tokens in your\napp](https://docs.stripe.com/stripe-apps/store-secrets).\n\nIf you need to pass user information from Stripe to another service, use the\n`stripeAccountId` passed from your UI extension.\n\n```\nconst express = require('express');\nconst fetch = require('isomorphic-fetch');\nconst app = express();\n\napp.use(express.static('public'));\napp.use(express.json());\n\napp.get('/api/time', async (req, res) => {\n fetch('http://worldclockapi.com/api/json/est/now')\n .then((response) => response.json())\n .then((data) => {\n res.send({\n data: data,\n });\n });\n});\n\napp.listen(3000, () => console.log('Node server listening on port 3000!'));\n```\n\nYou can also [call a third-party API from your UI\nextension](https://docs.stripe.com/stripe-apps/build-ui#use-third-party-apis).\n\n## Receive event notifications about your app\n\nListen for events (such as user installs or uninstalls) on your Stripe app using\nincoming [webhooks](https://docs.stripe.com/webhooks) so your integration can\nautomatically trigger reactions in your backend such as:\n\n- Creating user accounts\n- Updating permissions\n- Disabling a user’s account and removing data\n\n### Receive events\n\nYou can receive events from Stripe for an app that’s private to your account\nonly or an app that’s listed on the [App\nMarketplace](https://marketplace.stripe.com/):\n\nPublic listing on App MarketplacePrivate to your account\nTo receive events for an app that’s listed publicly on the [App\nMarketplace](https://marketplace.stripe.com/):\n\n- [Handle webhook events in your app’s\nbackend](https://docs.stripe.com/webhooks#webhook-endpoint-def).\n- [Register a webhook\nendpoint](https://docs.stripe.com/webhooks#webhooks-summary) in the Stripe\nDashboard, and select **Listen to events on Connected accounts** when\nregistering your webhook endpoint.\n- Add the `event_read` permission to your app:\n```\nstripe apps grant permission \"event_read\" \"Allows reading event data from users\nwho have installed the app\"\n```\n- For each event that your webhook endpoint is listening to, add the\ncorresponding permission:\n```\nstripe apps grant permission \"PERMISSION_NAME\" \"EXPLANATION\"\n```\n\nReplace:- `PERMISSION_NAME` with the [permission name for an\nevent](https://docs.stripe.com/stripe-apps/reference/permissions).\n- `EXPLANATION` with an explanation for enabling access. Users see this\nexplanation when they install your app. For example: “Allows reading event data\nfrom users who have installed the app.”\n\nWhen a merchant triggers an event, Stripe provides the following\n[Event](https://docs.stripe.com/api/events/object) object. This event includes\nthe `account` property specifying the account ID of the merchant who triggers\nthe event:\n\n```\n{\n \"id\": \"evt_\",\n \"livemode\": true,\n \"object\": \"event\",\n \"type\": \"account.application.authorized\",\n \"account\": \"acct_\",\n \"pending_webhooks\": 2,\n \"created\": 1349654313,\n \"data\": {...}\n}\n```\n\nUsing the `account` attribute, you can do the following:\n\n- Monitor how many merchants install and uninstall your app.\n- [Make API calls on behalf of users with Stripe\nConnect](https://docs.stripe.com/connect/authentication).\n\n### Events for Stripe Apps\n\nIn addition to the [types of events Stripe\nsupports](https://docs.stripe.com/api/events/types), Stripe Apps also supports\nthe following events:\n\nMerchant actionResulting webhook event sent to the app’s backendConnect or\ninstall your\napp[account.application.authorized](https://docs.stripe.com/api/events/types#event_types-account.application.authorized)Disconnect\nor uninstall your\napp[account.application.deauthorized](https://docs.stripe.com/api/events/types#event_types-account.application.deauthorized)\n## Event behavior depends on install mode\n\nYour users can install in either live mode, test mode, both modes, or a sandbox.\nSet webhooks according to the following guidelines:\n\n- If the app is installed in a sandbox, events are sent to the sandbox only.\n- If the app is installed in live mode only, live mode events are sent to the\nlive mode endpoint.\n- If the app is installed in test mode only, test mode events are sent to the\ntest mode endpoint.\n- If the app is installed in both modes, test mode events are sent to both the\ntest mode and live mode endpoints, and live mode events are sent to the live\nmode endpoint.\n\nConfigure the Connect `/webhook` for live and test modes, then use the following\nsnippet for both modes of the app. See the [webhooks\ndoc](https://docs.stripe.com/webhooks#example-endpoint) for a full endpoint\nexample.\n\n```\nrequire 'sinatra'\nrequire 'json'\n\npost '/webhook' do\n event = JSON.parse(request.body.read)\n\n if event['livemode']\n puts \"Handling live event: #{event}\"\n # Handle live events\n handle_live_event(event)\n else\n puts \"Handling test event: #{event}\"\n # Handle test events\n handle_test_event(event)\n end\n\n status 200\n body 'Event received'\nend\n```\n\n### Troubleshooting\n\nIf you don’t receive expected events, review your configuration for the\nfollowing common oversights:\n\n- Make sure live mode webhooks use live mode keys and test mode webhooks use\ntest mode keys.\n- For live mode events, make sure the installing account is activated.\n- Make sure that your app can handle both live mode & test mode events.\n- Triggering test events doesn’t replicate live event behavior unless explicitly\nset up in the app configuration.\n\n### Test webhooks locally\n\nYou can test webhooks locally for:\n\n- An app that’s only available to all users on your account and listens to\nevents on your own account\n- An app that’s available on the Stripe App Marketplace and listens to events on\naccounts that have installed your app\n\nTo test webhooks locally:\n\n- [Install the Stripe CLI](https://docs.stripe.com/stripe-cli).\n- Authenticate your account:\n\n```\nstripe login\n```\n- Open two terminal windows:\n\n- In one terminal window, [Set up event\nforwarding](https://docs.stripe.com/webhooks#local-listener):\n\nPrivate to your account onlyPublic listing on App Marketplace\n```\nstripe listen --forward-to localhost:{{PORT}}/webhook\n```\n- In the other terminal window, [Trigger events to test your webhooks\nintegration](https://docs.stripe.com/webhooks#trigger-test-events):\n\nPrivate to your account onlyPublic listing on App Marketplace\n```\nstripe trigger {{EVENT_NAME}}\n```\n\nFor more information, see our docs on [testing a webhook\nendpoint](https://docs.stripe.com/webhooks#local-listener).\n\n## See also\n\n- [Build a UI](https://docs.stripe.com/stripe-apps/build-ui)\n- [Upload and install your\napp](https://docs.stripe.com/stripe-apps/upload-install-app)\n- [Publish your app](https://docs.stripe.com/stripe-apps/publish-app)\n\n## Links\n\n- [webhook](https://docs.stripe.com/webhooks)\n- [Permission\nerror](https://docs.stripe.com/error-handling?lang=node#permission-errors)\n- [interactive webhook endpoint\nbuilder](https://docs.stripe.com/webhooks/quickstart)\n- [uploading your app](https://docs.stripe.com/stripe-apps/upload-install-app)\n- [Apps](https://dashboard.stripe.com/apps)\n-\n[fetchStripeSignature](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#fetchStripeSignature)\n- [example of sending a signed request with additional\ndata](https://docs.stripe.com/stripe-apps/build-backend#send-a-signed-request-with-additional-data)\n- [https://example.com/${endpoint}/`,](https://example.com/${endpoint}/`,)\n- [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys)\n-\n[https://example.com/do_more_secret_stuff/`,](https://example.com/do_more_secret_stuff/`,)\n-\n[RoleDefinitions](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#roledefinition)\n- [Cross-Origin Resource Sharing\n(CORS)](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)\n- [cross-site scripting attacks\n(XSS)](https://developer.mozilla.org/en-US/docs/Glossary/Cross-site_scripting)\n- [Options\nmethod](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/OPTIONS)\n- [Authenticate users from your UI to your\nbackend](https://docs.stripe.com/stripe-apps/build-backend#authenticate-ui-to-backend)\n- [CSRF](https://developer.mozilla.org/en-US/docs/Glossary/CSRF)\n- [Create a PaymentIntent](https://docs.stripe.com/api/payment_intents/create)\n- [API secret key](https://docs.stripe.com/keys)\n- [Account](https://docs.stripe.com/api/accounts)\n- [Retrieve an account](https://docs.stripe.com/api/accounts/retrieve)\n- [store secret credentials and tokens in your\napp](https://docs.stripe.com/stripe-apps/store-secrets)\n-\n[http://worldclockapi.com/api/json/est/now](http://worldclockapi.com/api/json/est/now)\n- [call a third-party API from your UI\nextension](https://docs.stripe.com/stripe-apps/build-ui#use-third-party-apis)\n- [App Marketplace](https://marketplace.stripe.com)\n- [Handle webhook events in your app’s\nbackend](https://docs.stripe.com/webhooks#webhook-endpoint-def)\n- [Register a webhook\nendpoint](https://docs.stripe.com/webhooks#webhooks-summary)\n- [permission name for an\nevent](https://docs.stripe.com/stripe-apps/reference/permissions)\n- [Event](https://docs.stripe.com/api/events/object)\n- [Make API calls on behalf of users with Stripe\nConnect](https://docs.stripe.com/connect/authentication)\n- [types of events Stripe supports](https://docs.stripe.com/api/events/types)\n-\n[account.application.authorized](https://docs.stripe.com/api/events/types#event_types-account.application.authorized)\n-\n[account.application.deauthorized](https://docs.stripe.com/api/events/types#event_types-account.application.deauthorized)\n- [webhooks doc](https://docs.stripe.com/webhooks#example-endpoint)\n- [Install the Stripe CLI](https://docs.stripe.com/stripe-cli)\n- [Set up event forwarding](https://docs.stripe.com/webhooks#local-listener)\n- [Trigger events to test your webhooks\nintegration](https://docs.stripe.com/webhooks#trigger-test-events)\n- [Build a UI](https://docs.stripe.com/stripe-apps/build-ui)\n- [Publish your app](https://docs.stripe.com/stripe-apps/publish-app)",
  "metadata": {
    "title": "Add server-side logic | Stripe Documentation",
    "description": "Validate and process user actions and data in your app using backend code.",
    "sourceURL": "https://docs.stripe.com/stripe-apps/build-backend"
  }
}