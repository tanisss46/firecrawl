{
  "content": "# Search\n\n## Look up objects in your Stripe data.\n\nSome top level API resources support retrieval with search API methods. You can\nuse the search APIs to retrieve your Stripe objects in a flexible manner. Using\nsearch is a faster alternative to\n[paginating](https://docs.stripe.com/api/pagination) through all resources. To\ncreate a search query, review the [Search query\nlanguage](https://docs.stripe.com/search#search-query-language) and reference\nthe query fields of the resource:\n\n- [Query fields for\nCharges](https://docs.stripe.com/search#query-fields-for-charges)\n- [Query fields for\nCustomers](https://docs.stripe.com/search#query-fields-for-customers)\n- [Query fields for\nInvoices](https://docs.stripe.com/search#query-fields-for-invoices)\n- [Query fields for\nPaymentIntents](https://docs.stripe.com/search#query-fields-for-paymentintents)\n- [Query fields for\nPrices](https://docs.stripe.com/search#query-fields-for-prices)\n- [Query fields for\nProducts](https://docs.stripe.com/search#query-fields-for-products)\n- [Query fields for\nSubscriptions](https://docs.stripe.com/search#query-fields-for-subscriptions)\n\n## Limitations\n\n### Minimum API version\n\nThe minimum supported API Version to use search is `2020-08-27`. Read our [API\nupgrades guide](https://docs.stripe.com/upgrades) to learn more about upgrades.\nTo use search without upgrading your account API version, you can override the\nAPI version on a single request by setting the `Stripe-Version` request header:\n\n```\n-H \"Stripe-Version: 2025-02-24.acacia\"\n```\n\nRead our [SDKs](https://docs.stripe.com/sdks#versioning) guide on how to\noverride an API version when using a library.\n\n### Data freshness\n\nDon’t use search for read-after-write flows (for example, searching immediately\nafter a charge is made) because the data won’t be immediately available to\nsearch. Under normal operating conditions, data is searchable in under 1 minute.\nPropagation of new or updated data could be delayed during an outage.\n\nFor read-after-write flows that require immediate data availability, use the\nvarious list APIs, such as [List\ninvoices](https://docs.stripe.com/api/invoices/list)). These APIs aren’t subject\nto the availability delays mentioned above.\n\n### Data mismatches\n\nIn some cases, the data you use to find search results might not match the\nresults that you receive. This can happen because the Search API filters using a\ncached version of the PaymentIntent `status`, but returns data based on the\nlatest version of the PaymentIntent.\n\nFor example, if you query the [Search Payment Intents\nAPI](https://docs.stripe.com/api/payment_intents/search) for PaymentIntents with\nthe status `requires_capture`, it might return some PaymentIntents with the\nstatus `succeeded`. This happens because the Search API finds cached\nPaymentIntents that have the older `requires_capture` status, but returns the\ncurrent `succeeded` status in the results.\n\n### Rate limits\n\nWe apply a [rate limit](https://docs.stripe.com/rate-limits) of up to 20 read\noperations per second which applies for all search endpoints in live mode and\ntest environments. Live mode and test environment limits are separate. Keeping\nthe rate limit in mind, for workloads where you need to run analytics on one or\nmore API resources,\n[Sigma](https://docs.stripe.com/stripe-data/access-data-in-dashboard) is much\nmore efficient. For workloads where you need to export a large portion of your\nAPI resource, our [Data\nPipeline](https://docs.stripe.com/stripe-data/access-data-in-warehouse) product\nis more efficient.\n\n### Regional availability\n\nSearch isn’t available to merchants in India.\n\n### Test clock objects omitted in list all results\n\nStripe list APIs (such as [List\ninvoices](https://docs.stripe.com/api/invoices/list)) omit results generated by\ntest clocks for list all requests. To see results generated by test clocks in\nthese cases, you must request results within a specific parent, such as\n`test_clock`, `customer`, or `subscription`.\n\nFor example, `GET /v1/invoices` won’t return test clock generated invoices, but\n`GET /v1/invoices/{customer_id}` returns all invoices for that customer,\nincluding those that are test clock generated.\n\nSimilarly, you can specify a test clock ID in this example to get all invoices\nrelated to that test clock, or you can specify a subscription ID to return all\ninvoices billed for that subscription, including test clock generated invoices.\n\n## Examples\n\nHere are some examples of what you can do with the [Search charges\nAPI](https://docs.stripe.com/api/charges/search) and [Search PaymentIntents\nAPI](https://docs.stripe.com/api/payment_intents/search):\n\n### Charges metadata search\n\nLook up charges matching a custom metadata value.\n\n```\ncurl -G https://api.stripe.com/v1/charges/search \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n --data-urlencode query=\"metadata['key']:'value'\"\n```\n\n### Charges last4 search\n\nLook up charges matching the last 4 digits of the card used for the payment.\n\n```\ncurl -G https://api.stripe.com/v1/charges/search \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n --data-urlencode query=\"payment_method_details.card.last4:4242\"\n```\n\n### Customers email search\n\nLook up customers matching an email.\n\n```\ncurl -G https://api.stripe.com/v1/customers/search \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n --data-urlencode query=\"email:'sally@rocketrides.io'\"\n```\n\n### Negation filter\n\nLook up PaymentIntents not in the USD currency.\n\n```\ncurl -G https://api.stripe.com/v1/payment_intents/search \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n --data-urlencode query=\"-currency:'usd'\"\n```\n\n### Numeric filter\n\nFilter invoice objects with a `total` greater than 1000.\n\n```\ncurl -G https://api.stripe.com/v1/invoices/search \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d query=\"total>1000\"\n```\n\n### Combining multiple filters\n\nLook up charges matching a combination of metadata and currency.\n\n```\ncurl -G https://api.stripe.com/v1/charges/search \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n --data-urlencode query=\"metadata['key']:'value' AND currency:'usd'\"\n```\n\n## Search query language\n\n### Query structure and terminology\n\nA query `clause` consists of a `field` followed by an `operator` followed by a\n`value`:\n\nclause`email:\"amy@rocketrides.io\"`field`email`operator`:`value`amy@rocketrides.io`\nYou can combine up to 10 query clauses in a search by either separating them\nwith a space, or using the `AND` or `OR` keywords (case insensitive). You can’t\ncombine `AND` and `OR` in the same query. Furthermore, there’s no option to use\nparentheses to give priority to certain logic operators. By default, the API\ncombines clauses with `AND` logic.\n\nThe example query `email:\"amy@rocketrides.io\" metadata[\"key\"]:\"value\"` matches\nrecords where both the email address is amy@rocketrides.io, and the metadata in\nthe record includes `key` with a value of `value`.\n\n### Creating a query which does not match a clause\n\nYou can negate query clauses using a `-` character. For example, the following\nsearch returns records that don’t match the email `amy@rocketrides.io`.\n\n`-email:\"amy@rocketrides.io\"`\n\n### Field types, substring matching, and numeric comparators\n\nEvery search field supports exact matching with a `:`. Certain fields such as\n`email` and `name` support substring matching. Certain other fields such as\n`amount` support numeric comparators like `>` and `<`.\n\nEach field includes a type that defines the operations you can use in the field.\nFor a full list of available fields, see [supported query fields for each\nresource](https://docs.stripe.com/search#supported-query-fields-for-each-resource).\n\nUsing an unsupported operator, such as specifying greater than (`>`) on a\nstring, returns an error.\n\ntypeoperatorstokenexact match (case insensitive)\nstring\n\nexact match, substring (case insensitive)\n\nAn exact match on a string type returns any record where that record contains\nall of the words from the query in the same order. For example the query\n`name:\"one two three\"` would match both a result with the name “one two three”\nand a result with the name “one two three four”.\n\nnumericexact match, greater than and less than\n### Quotes\n\nYou must use quotation marks around string values. Quotation marks are optional\nfor numeric values. For example:\n\n- `currency:\"usd\"` means quotes are required.\n- `payment_method_details.card.last4:1234` means quotes are optional.\n\nYou can escape quotes inside of quotes with a backslash (`\\`).\n\n`description:\"the story called \\\"The Sky and the Sea.\\\"\"`\n\n### Metadata\n\nYou can perform searches on [metadata](https://docs.stripe.com/api/metadata)\nthat you’ve added to objects that support it.\n\nUse the following format to construct a clause for a metadata search:\n`metadata[\"<field>\"]:\"<value>\"`.\n\nThe following clause demonstrates how to create a clause that queries for\nrecords with a donation ID of “asdf-jkl”: `metadata[\"donation-id\"]:\"asdf-jkl\"`.\n\nYou can query for the presence of a metadata key on an object. The following\nclause would match all records where `donation-id` is a metadata key.\n`-metadata[\"donation-id\"]:null`\n\n### Search Syntax\n\nThe following table lists the syntax that you can use to construct a query.\n\nSyntaxUsageDescriptionExamples`:``field:value`Exact match operator (case\ninsensitive)`currency:\"eur\"` returns records where the currency is exactly “EUR”\nin a case-insensitive comparison`AND`, `and``field:value1 AND field:value2`The\nquery returns only records that match both clauses (case\ninsensitive)`status:\"active\" AND amount:500``OR`, `or``field:value1 OR\nfield:value2`The query returns records that match either of the clauses (case\ninsensitive)`currency:\"usd\" OR currency:\"eur\"``-``-field:value`Returns records\nthat don’t match the clause`-currency:\"jpy\"` returns records that aren’t in\nJPY`NULL`, `null``field:null`A special token used for field presence (case\ninsensitive)`url:null` returns records where a URL field is empty`\\``\"\n\\\"\\\"\"`Escape quotes within quotes`description:\"the story called \\\"The Sky and\nthe Sea.\\\"\"``~``field~value`Substring match operator (substrings must be a\nminimum of 3 characters)`email~\"amy\"` returns matches for amy@rocketrides.io and\nxamy`>`, `<`, `=`- `field<value`\n- `field>value`\n- `field>=value`\n- `field<=value`\nGreater than/less than operators`amount>=\"10\"` brings up objects where the\namount is 10 or greater\n## Supported query fields for each resource\n\n### Query fields for Charges\n\nFieldusageType (token, string,\nnumeric)amount`amount>1000`numericbilling_details.address.postal_code`billing_details.address.postal_code:12345`tokencreated`created>1620310503`numericcurrency`currency:\"usd\"`tokencustomer`customer:\"cus_123\"`tokendisputed`disputed:\"true\"`tokenmetadata`metadata[\"key\"]:\"value\"`tokenpayment_method_details.{{SOURCE}}.last4`payment_method_details.card.last4:1234`tokenpayment_method_details.{{SOURCE}}.exp_month`payment_method_details.card_present.exp_month:12`tokenpayment_method_details.{{SOURCE}}.exp_year`payment_method_details.interac_present.exp_year:2022`tokenpayment_method_details.{{SOURCE}}.brand`payment_method_details.card.brand:\"visa\"`tokenpayment_method_details.{{SOURCE}}.fingerprint`payment_method_details.card.fingerprint:\"fp\"`tokenrefunded`refunded:\"true\"`tokenstatus`status:\"succeeded\"`token\nFor `SOURCE`, use `card`, `card_present`, or `interac_present`. Use `card` for\nonline charges, `interac_present` for Terminal card present charges for the\nInterac network, and `card_present` for other Terminal card present charges.\n\nThe `disputed` field accepts only the tokens “true” and “false”, indicating the\npresence of disputes.\n\n`refunded:\"true\"` filters for fully-refunded charges, `refunded:\"false\"` filters\nfor partially-refunded charges, and `refunded:null` filters for non-refunded\ncharges.\n\n### Query fields for Customers\n\nFieldusageType (token, string,\nnumeric)created`created>1620310503`numericemail`email~\"amyt\"`stringmetadata`metadata[\"key\"]:\"value\"`tokenname`name~\"amy\"`stringphone`phone:\"+19999999999\"`string\n### Query fields for Invoices\n\nFieldusageType (token, string,\nnumeric)created`created>1620310503`numericcurrency`currency:\"usd\"`tokencustomer`customer:\"cus_123\"`tokenlast_finalization_error_code`last_finalization_error_code:\"customer_tax_location_invalid\"`tokenlast_finalization_error_type`last_finalization_error_type:\"invalid_request_error\"`tokenmetadata`metadata[\"key\"]:\"value\"`tokennumber`number:\"MYSHOP-123\"`stringreceipt_number`receipt_number:\"RECEIPT-123\"`stringstatus`status:\"open\"`stringsubscription`subscription:\"SUBS-123\"`stringtotal`total>1000`numeric\n### Query fields for PaymentIntents\n\nFieldusageType (token, string,\nnumeric)amount`amount>1000`numericcreated`created>1620310503`numericcurrency`currency:\"usd\"`tokencustomer`customer:\"cus_123\"`tokenmetadata`metadata[\"key\"]:\"value\"`tokenstatus`status:\"succeeded\"`token\n### Query fields for Prices\n\nFieldusageType (token, string,\nnumeric)active`active:\"true\"`tokencurrency`currency:\"usd\"`tokenlookup_key`lookup_key:\"standard_monthly\"`stringmetadata`metadata[\"key\"]:\"value\"`tokenproduct`product:\"prod_123\"`stringtype`type:\"recurring\"`token\n### Query fields for Products\n\nFieldusageType (token, string,\nnumeric)active`active:\"true\"`tokendescription`description~\"t-shirts\"`stringmetadata`metadata[\"key\"]:\"value\"`tokenname`name~\"amy\"`stringshippable`shippable:\"true\"`tokenurl`url~\"/dinosaur_swag\"`string\n### Query fields for Subscriptions\n\nFieldusageType (token, string,\nnumeric)created`created>1620310503`numericmetadata`metadata[\"key\"]:\"value\"`tokenstatus`status:\"active\"`tokencanceled_at`canceled_at>1721521117`numeric\n\n## Links\n\n- [paginating](https://docs.stripe.com/api/pagination)\n- [Search query language](https://docs.stripe.com/search#search-query-language)\n- [Query fields for\nCharges](https://docs.stripe.com/search#query-fields-for-charges)\n- [Query fields for\nCustomers](https://docs.stripe.com/search#query-fields-for-customers)\n- [Query fields for\nInvoices](https://docs.stripe.com/search#query-fields-for-invoices)\n- [Query fields for\nPaymentIntents](https://docs.stripe.com/search#query-fields-for-paymentintents)\n- [Query fields for\nPrices](https://docs.stripe.com/search#query-fields-for-prices)\n- [Query fields for\nProducts](https://docs.stripe.com/search#query-fields-for-products)\n- [Query fields for\nSubscriptions](https://docs.stripe.com/search#query-fields-for-subscriptions)\n- [API upgrades guide](https://docs.stripe.com/upgrades)\n- [SDKs](https://docs.stripe.com/sdks#versioning)\n- [List invoices](https://docs.stripe.com/api/invoices/list)\n- [Search Payment Intents\nAPI](https://docs.stripe.com/api/payment_intents/search)\n- [rate limit](https://docs.stripe.com/rate-limits)\n- [Sigma](https://docs.stripe.com/stripe-data/access-data-in-dashboard)\n- [Data Pipeline](https://docs.stripe.com/stripe-data/access-data-in-warehouse)\n- [Search charges API](https://docs.stripe.com/api/charges/search)\n- [supported query fields for each\nresource](https://docs.stripe.com/search#supported-query-fields-for-each-resource)\n- [metadata](https://docs.stripe.com/api/metadata)",
  "metadata": {
    "title": "Search | Stripe Documentation",
    "description": "Look up objects in your Stripe data.",
    "sourceURL": "https://docs.stripe.com/search"
  }
}