{
  "content": "# Migrate Klarna from Sources\n\n## Migrate an integration from the Sources API to the Payment Intents API.\n\nKlarna is launching a new checkout process that requires the [Payment Methods\nAPI](https://docs.stripe.com/api/payment_methods) and the [Payment Intents\nAPI](https://docs.stripe.com/api/payment_intents). This guide outlines several\nrecommended paths to migrate from using the [Sources\nAPI](https://docs.stripe.com/api/sources), including a low-code option that uses\n[Stripe Checkout](https://docs.stripe.com/payments/checkout).\n\n#### Feature deprecated\n\nWe have deprecated Sources API support for Klarna, and we plan to remove it\nentirely in early 2024. If you’re still using the Sources API to process Klarna\npayments, migrate now to use PaymentMethods and PaymentIntents.\n\n![The start of the Klarna transaction flow on\nPaymentIntents](https://b.stripecdn.com/docs-statics-srv/assets/klarna_on_pi_image_1.506e683101b89d2a5c34b5d5d7bde362.png)\n\nInitiating the Klarna payment on PaymentIntents\n\n![The completion of the Klarna transaction flow on\nPaymentIntents](https://b.stripecdn.com/docs-statics-srv/assets/klarna_on_pi_image_2.8ab6e30014bbbf5e9afd33268bddea0b.png)\n\nCompleting the Klarna payment on PaymentIntents\n\n## Notable differences\n\n- **Klarna product selection**: You don’t need to specify the Klarna product\ntype in your integration. Instead, customers now choose a product on the Klarna\nredirect page. Don’t include a separate button on your checkout site for each\nsupported Klarna payment option. Only include a single Klarna button.\n- **Klarna SDK inline display isn’t supported**: Customers must now redirect to\nthe Klarna site from your payment page to authorize the payment. As a result,\nyou don’t need to load the Klarna SDK or render any inline components.\n- **Payment confirmation is synchronous in all markets**: Previously,\nconfirmation of a successful payment was asynchronous in some cases. Now, you\ncan detect whether the payment is successful immediately after your customer\nauthorizes it.\n\n#### Caution\n\nIf you currently use a plugin for your Stripe integration, the plugin developer\nmust migrate their plugin to use PaymentMethods and PaymentIntents. Reach out to\nthem to understand if there are any changes you need to make to your Stripe or\nplugin settings.\n\n## Migrate your payment flow\n\nTo migrate your Klarna integration for web payments, you need to update your\nserver and frontend to use the [PaymentIntents\nAPI](https://docs.stripe.com/api/payment_intents). There are three typical\nintegration options:\n\n- Redirect to [Stripe Checkout](https://docs.stripe.com/payments/checkout) for\nyour payment flow.\n- Use the Stripe [Payment\nElement](https://docs.stripe.com/payments/payment-element) on your own payment\npage.\n- Build your own form and use the Stripe JS SDK to complete the payment.\n\nUse [Stripe Checkout](https://docs.stripe.com/payments/checkout) or the [Payment\nElement](https://docs.stripe.com/payments/payment-element) to add and manage\nmost payment methods from the Stripe Dashboard without making code changes.\n\nBelow is a high level comparison of the old integration steps with the new\nintegrations:\n\nOld integrationStripe CheckoutPayment ElementOwn form\nLow complexity\n\nMedium complexity\n\nHigh complexity\n\nCreate a Source on the frontend or on the serverCreate a Checkout Session on the\nserverCreate a PaymentIntent on the serverCreate a PaymentIntent on the server\nLoad the Klarna widget with the Klarna SDK to authorize the payment\n\nOR\n\nRedirect to Klarna to authorize the payment\n\nNot needed\n\nPass the client secret to the frontend and use the Stripe JS SDK to render a\nPayment Element to complete the payment.\n\nPass the client secret to the frontend. Use your own form to collect additional\ndetails from your customer and use the Stripe JS SDK to redirect to Klarna\n\nConfirm the source is chargeable and charge the SourceNot neededNot neededNot\nneededConfirm the Charge succeeded asynchronously with the `charge.succeeded`\nwebhookConfirm the Checkout session succeeded with the\n`payment_intent.succeeded` webhookConfirm the PaymentIntent succeeded with the\n`payment_intent.succeeded` webhookConfirm the PaymentIntent succeeded with the\n`payment_intent.succeeded` webhook\n#### Caution\n\nA PaymentIntent is the object that represents a payment in the new integration,\nand it creates a Charge when you confirm the payment on the frontend. If you\npreviously stored references to the Charge in your databases, you can continue\nto do so by fetching the Charge ID from the PaymentIntent after the customer\ncompletes the payment. However, we also recommend that you store the\nPaymentIntent ID.\n\n## Option 1: Use a Checkout Session\n\n[Stripe Checkout](https://docs.stripe.com/payments/checkout) is a low-code\nhosted payment solution that can accept Klarna payments, as well as a variety of\nother payment methods supported by Stripe. If you currently have a payment page\nhosted on your site and instead want to use Stripe Checkout, do the following:\n\n- Make sure Klarna is [enabled in your\nDashboard](https://dashboard.stripe.com/settings/payment_methods).\n- [Create a Checkout Session on your\nserver](https://docs.stripe.com/payments/klarna/accept-a-payment?platform=web&ui=stripe-hosted#accept-a-payment).\nYou can either explicitly set `klarna` as one of the `payment_method_types`, or\nuse [dynamic payment\nmethods](https://docs.stripe.com/payments/dashboard-payment-methods).\n- If you sell physical goods, [enable shipping address\ncollection](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-shipping_address_collection)\nor include the shipping address in [the shipping_details\nhash](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-shipping_details).\n- Redirect to the Session URL when the customer is ready to pay.\n\n## Option 2: Use the Payment Element\n\n[Stripe Payment Element](https://docs.stripe.com/payments/payment-element) is a\nsingle embedded UI component for your payment page that supports Klarna as well\nas other payment methods. It provides many of the features of Stripe Checkout,\nbut displayed on your own payment page. To use the Payment Element, do the\nfollowing:\n\n- Make sure that Klarna is [enabled in your\nDashboard](https://dashboard.stripe.com/settings/payment_methods).\n- Create a PaymentIntent on your server\n\n```\ncurl https://api.stripe.com/v1/payment_intents \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d \"automatic_payment_methods[enabled]\"=true \\\n -d amount=1099 \\\n -d currency=eur\n```\n\nYou can explicitly enable Klarna by setting it as one of the\n[payment_method_types](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_types).\n\n- Pass the PaymentIntent client secret to the frontend and [initialize the\nStripe Elements UI\nlibrary](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=elements#web-collect-payment-details).\n- [Create a Payment\nElement](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=elements#add-the-payment-element-to-your-payment-page)\nand embed it on the page. This element automatically collects any additional\nfields needed for the payment method selected by the customer.\n- [Call confirmPayment on the Payment\nElement](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=elements#web-submit-payment)\nwhen the user submits their payment. Make sure that you pass a `return_url`.\n\n## Option 3: Build your own form\n\nYou can build your own form components and complete a Klarna payment by using\nthe Stripe JS SDK. Read more about the [full\nintegration](https://docs.stripe.com/payments/klarna/accept-a-payment?platform=web&ui=direct-api).\nTo integrate in this method, do the following:\n\n- Make sure that Klarna is [enabled in your\nDashboard](https://dashboard.stripe.com/settings/payment_methods).\n- [Create a\nPaymentIntent](https://docs.stripe.com/payments/klarna/accept-a-payment?platform=web&ui=direct-api#web-create-payment-intent)\non your server.\n\n```\ncurl https://api.stripe.com/v1/payment_intents \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d \"automatic_payment_methods[enabled]\"=true \\\n -d amount=1099 \\\n -d currency=eur\n```\n\nIf you don’t want to manage payment methods through the Dashboard, you can\nexplicity enable Klarna by setting it as one of the\n[payment_method_types](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_types).\n\n- Use a form to collect your customer’s email and billing country.\n- [Initialize Stripe.JS on your payment page and call\nconfirmKlarnaPayment](https://docs.stripe.com/payments/klarna/accept-a-payment?platform=web&ui=direct-api#web-submit-payment)\nwith the PaymentIntent’s client secret when the customer is ready to authorize\nthe payment. Make sure that their email and billing country are in the\n`billing_details[email]` and `billing_details[address][country]` fields.\n\n## Field mapping reference\n\nIf you use the Payment Element or your own form, you must remap the fields\npreviously on the Source to the PaymentIntent. The table below is a mapping of\nthe old fields to the new fields. If you sell physical goods, we recommend that\nyou pass shipping details. All other fields are optional, and Klarna collects\nnecessary additional information on their page.\n\nOld Source fieldNew PaymentIntent fieldNoteRequired fields\n`type``payment_method_types[]`This is an array on PaymentIntents. Set `klarna`\nas one of the elements of the array if you manually list payment\nmethods.`amount``amount``currency``currency``owner[email]``payment_method_data[billing_details][email]`Not\nrequired when using the Payment Element. It’s collected\nautomatically.`owner[address][country]``payment_method_data[billing_details][address][country]`Not\nrequired when using the Payment Element. It’s collected\nautomatically.Recommended if you sell physical goods\n`klarna[shipping_first_name]``shipping[name]`Provide both first and last name as\na single whitespace separated\nstring.`klarna[shipping_last_name]``shipping[name]`Provide both first and last\nname as a single whitespace separated\nstring.`order[shipping][address]``shipping[address]`See [API\nreference](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-shipping-address)\nfor\ncomponents.`order[shipping][carrier]``shipping[carrier]``order[shipping][tracking_number]``shipping[tracking_number]``order[shipping][phone]``shipping[phone]`Other\noptional fields\n`klarna[purchase_country]``payment_method_data[billing_details][address][country]``klarna[first_name]``payment_method_data[billing_details][name]`Optional.\nProvide both first and last name as a single whitespace separated\nstring.`klarna[last_name]``payment_method_data[billing_details][name]`Optional.\nProvide both first and last name as a single whitespace separated string.No\nlonger required `klarna[product]`Not applicable on PaymentIntents. Customers\nchoose the Klarna product when they authorize the payment on Klarna’s\nsite.`klarna[shipping_delay]`Not applicable. If you expect a shipping delay, use\n[separate auth and\ncapture](https://docs.stripe.com/payments/klarna/accept-a-payment?platform=web&ui=direct-api#manual-capture)\nto capture the payment only after the product has\nshipped.`source_orders[items]`No longer required.\n#### Caution\n\nIf you currently use the [klarna[attachment]\nparameter](https://docs.stripe.com/payments/klarna/accept-a-payment) or the\n`order[items]` parameter on the Source, then we will contact you with details\nabout these parameters.\n\n## After the purchase\n\nThe following changes are required for any integration points you have after a\npayment has completed.\n\n### Checking payment status\n\nPreviously, your integration should have checked both the status of the Source\nand the status of the Charge after each API call. You no longer need to check\ntwo statuses—you only need to check the status of the PaymentIntent or the\nCheckout Session after you confirm it on the frontend.\n\npayment_intent.statusMeaningNote`succeeded`The payment\nsucceeded.`requires_payment_method`The payment failed.`requires_action`The\ncustomer hasn’t completed authorizing the payment on Klarna’s site.If the\ncustomer does not complete the payment within 48 hours, then the PaymentIntent\ntransitions to requires_payment_method and you can retry the confirmation.\nAlways confirm the status of the PaymentIntent by fetching it on your server or\nlistening for the webhooks on your server. Don’t rely solely on the user\nreturning to the `return_url` that’s provided when you confirm the\nPaymentIntent. Read more about this\n[here](https://docs.stripe.com/payments/klarna/accept-a-payment?platform=web&ui=direct-api#web-fulfillment).\n\n### Refunds\n\nYou can continue to call the Refunds API with a Charge that the PaymentIntent\ncreates. The ID of the Charge is accessible on the `latest_charge` parameter.\nAlternatively, you can provide the PaymentIntent ID to the Refunds API instead\nof the Charge.\n\n## Error handling\n\nPreviously, you had to handle errors on the Sources were created. In\nPaymentIntents, you don’t need to check for errors on a Source, and instead need\nto check for errors on the PaymentIntent when it’s created and after the\ncustomer has authorized the payment. Most errors on the PaymentIntent are on\n[the type field](https://docs.stripe.com/api/errors#errors-type) returned in an\ninvalid request.\n\nOld error code when creating SourceNew error type when creating or confirming\nthe\nPaymentIntentNote`payment_method_not_available``invalid_request_error``processing_error``invalid_request_error``missing_sku_item_quantity`Not\napplicable. You don’t need to provide the items sold when creating the\nPaymentIntent.`country_currency_mismatch``invalid_request_error``country_not_supported``invalid_request_error``invalid_currency``invalid_request_error``invalid_email``invalid_request_error``invalid_phone`Not\napplicable. This field isn’t required and is collected by Klarna on their\npage.`invalid_address`Not applicable. This field isn’t required and is collected\nby Klarna on their page.\n## Webhooks\n\nIf you previously listened to Source events, you might need to update your\nintegration to listen to new event types. Below is a reference of the new event\ntypes to listen for.\n\nOld webhookNew webhook on CheckoutNew webhook on\nPaymentIntentsNote`source.chargeable`Not applicableNot\napplicable`source.failed`Not applicableNot applicable`source.canceled`Not\napplicableNot\napplicable`charge.succeeded``checkout.session.completed``payment_intent.succeeded`The\n`charge.succeeded` webhook is also sent, so you don’t have to update your\nintegration to listen to the new webhook.`charge.failed`Not applicable - The\ncustomer can re-attempt the payment on the same Checkout Session until it\n[expires](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-expires_at),\nat which point you’ll receive a `checkout.session.expired`\nevent`payment_intent.payment_failed`The `charge.failed` webhook is also sent, so\nyou don’t have to update your integration to listen to the new\nwebhook.`charge.dispute.created``charge.dispute.created``charge.dispute.created`\n\n## Links\n\n- [Payment Methods API](https://docs.stripe.com/api/payment_methods)\n- [Payment Intents API](https://docs.stripe.com/api/payment_intents)\n- [Sources API](https://docs.stripe.com/api/sources)\n- [Stripe Checkout](https://docs.stripe.com/payments/checkout)\n- [Payment Element](https://docs.stripe.com/payments/payment-element)\n- [enabled in your\nDashboard](https://dashboard.stripe.com/settings/payment_methods)\n- [Create a Checkout Session on your\nserver](https://docs.stripe.com/payments/klarna/accept-a-payment?platform=web&ui=stripe-hosted#accept-a-payment)\n- [dynamic payment\nmethods](https://docs.stripe.com/payments/dashboard-payment-methods)\n- [enable shipping address\ncollection](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-shipping_address_collection)\n- [the shipping_details\nhash](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-shipping_details)\n-\n[payment_method_types](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_types)\n- [initialize the Stripe Elements UI\nlibrary](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=elements#web-collect-payment-details)\n- [Create a Payment\nElement](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=elements#add-the-payment-element-to-your-payment-page)\n- [Call confirmPayment on the Payment\nElement](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=elements#web-submit-payment)\n- [full\nintegration](https://docs.stripe.com/payments/klarna/accept-a-payment?platform=web&ui=direct-api)\n- [Create a\nPaymentIntent](https://docs.stripe.com/payments/klarna/accept-a-payment?platform=web&ui=direct-api#web-create-payment-intent)\n- [Initialize Stripe.JS on your payment page and call\nconfirmKlarnaPayment](https://docs.stripe.com/payments/klarna/accept-a-payment?platform=web&ui=direct-api#web-submit-payment)\n- [API\nreference](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-shipping-address)\n- [separate auth and\ncapture](https://docs.stripe.com/payments/klarna/accept-a-payment?platform=web&ui=direct-api#manual-capture)\n- [klarna[attachment]\nparameter](https://docs.stripe.com/payments/klarna/accept-a-payment)\n-\n[here](https://docs.stripe.com/payments/klarna/accept-a-payment?platform=web&ui=direct-api#web-fulfillment)\n- [the type field](https://docs.stripe.com/api/errors#errors-type)\n-\n[expires](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-expires_at)",
  "metadata": {
    "title": "Migrate Klarna from Sources | Stripe Documentation",
    "description": "Migrate an integration from the Sources API to the Payment Intents API.",
    "sourceURL": "https://docs.stripe.com/payments/klarna/migrate"
  }
}