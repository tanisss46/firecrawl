{
  "content": "# DateField component for Stripe Apps\n\n## Use the DateField component to collect date information from users.\n\nSDK version8.x9.x\nTo add the `DateField` component to your app:\n\n```\nimport {DateField} from '@stripe/ui-extension-sdk/ui';\n```\n\nThe following shows a preview of a `DateField` component with a label and a\ndescription:\n\nLoading example...\n```\n<DateField label=\"Date of birth\" description=\"Enter your birthday\" />\n```\n\n### DateField props\n\nPropertyType\n`defaultValue`\n\nOptional\n`string | undefined`\n\nSpecifies the initial value that a user can change.\n\n`description`\n\nOptional\n`string | undefined`\n\nDescriptive text that will be rendered adjacent to the control’s label.\n\n`disabled`\n\nOptional\n`boolean | undefined`\n\nSets whether or not the element should be disabled. Prevents selection.\n\n`error`\n\nOptional\n`string | undefined`\n\nError text that will be rendered below the control.\n\n`hiddenElements`\n\nOptional\n`(\"label\" | \"description\" | \"error\")[] | undefined`\n\nVisually hides the specified elements. The hidden elements will still be present\nand visible to screen readers.\n\n`invalid`\n\nOptional\n`boolean | undefined`\n\nSets whether or not the element is in an invalid state. This is a display-only\nprop, and will not prevent form submission.\n\n`label`\n\nOptional\n`React.ReactNode`\n\nText that describes the control. Will be both visible and clickable.\n\n`onChange`\n\nOptional\n`((event: { target: { value: string; }; }) => void) | undefined`\n\nAn onChange-alike event that fires only when the change results in a valid date.\nIdentical behavior to `<input type=\"date\" />`.\n\n`size`\n\nOptional\n`(\"small\" | \"medium\" | \"large\") | undefined`\n\nThe size of the component.\n\n`value`\n\nOptional\n`string | undefined`\n\nControls the input’s text. When you pass this prop, you must also pass an\n`onChange` handler that updates the passed value.\n\n## Size\n\nA `DateField` at each size will match a `TextField` at that same size. However,\nyou can’t make a date input wider in the same way that you can `TextField`.\n\nLoading example...\n```\n<DateField\n label=\"Date of birth (small)\"\n description=\"Enter your birthday\"\n size=\"small\"\n/>\n<DateField\n label=\"Date of birth (medium)\"\n description=\"Enter your birthday\"\n size=\"medium\"\n/>\n<DateField\n label=\"Date of birth (large)\"\n description=\"Enter your birthday\"\n size=\"large\"\n/>\n```\n\n## Error\n\nYou can provide an error message to indicate a problem with the date.\n\nLoading example...\n```\n<DateField\n label=\"Date of birth\"\n description=\"Enter your birthday\"\n defaultValue=\"2099-02-31\"\n invalid\n error=\"Invalid birthday\"\n/>\n```\n\n## Disabled\n\nDisable a `DateField` if the user shouldn’t modify it.\n\nLoading example...\n```\n<DateField\n label=\"Date of birth\"\n description=\"Enter your birthday\"\n defaultValue=\"2011-09-01\"\n disabled\n/>\n```\n\n## Hide elements\n\nYou can visually hide elements of the `DateField` component, such as the label\nor description, while maintaining accessibility for screen readers.\n\nLoading example...\n```\n<DateField\n label=\"Date of birth\"\n description=\"Enter your birthday\"\n defaultValue=\"2011-09-01\"\n hiddenElements={['description', 'label']}\n/>\n```\n\n## Events\n\nThe `onChange` prop works similarly to a native `<input type=\"date\" />` HTML\nelement. It only returns a value when it’s a valid date. This means that the\n`onChange` handler won’t be called on every keystroke, and a `DateField` can’t\nbe a [controlled\ninput](https://reactjs.org/docs/forms.html#controlled-components).\n\nLoading example...\n```\n<DateField\n label=\"Date of birth\"\n description=\"Enter your birthday\"\n onChange={(e) => {\n console.log(e.target.value);\n }}\n/>\n```\n\nEvent props (beginning with `on`) besides `onChange` fire independently for each\nof the three sections of the `DateField` component: year, month, and day.\n\nLoading example...\n```\n<DateField\n label=\"Date of birth\"\n description=\"Enter your birthday\"\n onChange={(e) => {\n console.log('change', e);\n }}\n/>\n```\n\n## See also\n\n- [Design patterns to follow](https://docs.stripe.com/stripe-apps/patterns)\n- [Style your app](https://docs.stripe.com/stripe-apps/style)\n- [UI testing](https://docs.stripe.com/stripe-apps/ui-testing)\n\n## Links\n\n- [controlled input](https://reactjs.org/docs/forms.html#controlled-components)\n- [Design patterns to follow](https://docs.stripe.com/stripe-apps/patterns)\n- [Style your app](https://docs.stripe.com/stripe-apps/style)\n- [UI testing](https://docs.stripe.com/stripe-apps/ui-testing)",
  "metadata": {
    "title": "DateField component for Stripe Apps | Stripe Documentation",
    "description": "Use the DateField component to collect date information from users.",
    "sourceURL": "https://docs.stripe.com/stripe-apps/components/datefield"
  }
}