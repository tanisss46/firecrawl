{
  "content": "# Bacs Direct Debit payments\n\n## Learn to accept Bacs Direct Debit payments.\n\nStripe-hosted pageAdvanced integration\n#### Caution\n\nStripe automatically presents your customers payment method options by\nevaluating their currency, payment method restrictions, and other parameters. We\nrecommend that you configure your payment methods from the Stripe Dashboard\nusing the instructions in [Accept a\npayment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to\nyour customers with Checkout, use this guide. Otherwise, update your integration\nto [configure payment methods in the\nDashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nStripe users in the UK can use\n[Checkout](https://docs.stripe.com/payments/checkout) in payment mode to accept\nBacs Direct Debit payments.\n\nA [Checkout Session](https://docs.stripe.com/api/checkout/sessions) represents\nthe details of your customer’s intent to purchase. You create a Checkout Session\nwhen your customer wants to pay for something. After redirecting your customer\nto a Checkout Session, Stripe presents a payment form where your customer can\ncomplete their purchase. When your customer has completed a purchase, they’re\nredirected back to your site.\n\n[Set up\nStripeServer-side](https://docs.stripe.com/payments/bacs-debit/accept-a-payment#set-up-stripe)\nFirst, you need a Stripe account. [Register\nnow](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n```\n# Available as a gem\nsudo gem install stripe\n```\n\n```\n# If you use bundler, you can add this line to your Gemfile\ngem 'stripe'\n```\n\n[Create products and\nprices](https://docs.stripe.com/payments/bacs-debit/accept-a-payment#create-products-and-prices)\nTo use Checkout, you first need to create a\n[Product](https://docs.stripe.com/api/products) and a\n[Price](https://docs.stripe.com/api/prices). Different physical goods or levels\nof service should be represented by products. Each product’s pricing is\nrepresented by one or more prices.\n\nFor example, you can create a T-shirt *product* that has two *prices* for\ndifferent currencies, 20 GBP and 25 EUR. This allows you to change and add\nprices without needing to change the details of your underlying products. You\ncan either create a product and price [through the\nAPI](https://docs.stripe.com/api/prices) or in the\n[Dashboard](https://dashboard.stripe.com/products).\n\nIf you determine your price at checkout (for example, the customer sets a\ndonation amount) or you prefer not to create prices upfront, you can also create\n[ad-hoc\nprices](https://docs.stripe.com/payments/accept-a-payment?platform=web#redirect-customers)\nat Checkout Session creation using an existing product.\n\n#### Caution\n\nIf you have an existing Checkout integration that doesn’t use Prices, the\nCheckout API has changed since we introduced Prices. You can use this [migration\nguide](https://docs.stripe.com/payments/checkout/migrating-prices) to upgrade,\nor [keep your existing\nintegration](https://support.stripe.com/questions/prices-api-and-existing-checkout-integrations).\n\nDashboardAPI\n#### Note\n\nProducts created in a sandbox can be copied to live mode so that you don’t need\nto re-create them. In the Product detail view in the Dashboard, click ** to\nlive mode** in the upper right corner. You can only do this once for each\nproduct created in a sandbox. Subsequent updates to the test product are not\nreflected for the live product.\n\nMake sure you’re in a sandbox, and define the items you want to sell. To create\na new product and price:\n\n- Navigate to the [Products](https://dashboard.stripe.com/test/products) section\nin the Dashboard\n- Click **Add product**\n- Select **One time** when setting the price\n\nThe product name, description, and image that you supply are displayed to\ncustomers in Checkout.\n\n[Create a Checkout\nSessionClient-sideServer-side](https://docs.stripe.com/payments/bacs-debit/accept-a-payment#create-session)\nAdd a checkout button to your website that calls a server-side endpoint to\ncreate a Checkout Session.\n\n```\n<html>\n <head>\n <title>Checkout</title>\n </head>\n <body>\n <form action=\"/create-checkout-session\" method=\"POST\">\n <button type=\"submit\">Checkout</button>\n </form>\n </body>\n</html>\n```\n\nCreate a Checkout Session with\n[line_items](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items).\nLine items represent a list of items the customer is purchasing.\n\nWhen your customer successfully completes their payment, they are redirected to\nthe `success_url`, a page on your website that informs the customer that their\npayment details have been successfully collected and their payment is being\nprocessed.\n\nWhen your customer clicks on your logo in a Checkout Session without completing\na payment, Checkout redirects them back to your website by navigating to the\n`cancel_url`. Typically, this is the page on your website that the customer\nviewed prior to redirecting to Checkout.\n\nCheckout can accept a payment and save the payment method for future use.\nPayment methods saved this way can be used for future payments using a\n[PaymentIntent](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method).\nAfter creating the Checkout Session, redirect your customer to the\n[URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url)\nreturned in the response.\n\n```\ncurl https://api.stripe.com/v1/checkout/sessions \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"payment_method_types[]\"=\"bacs_debit\" \\\n -d \"line_items[][price]\"=\"{{PRICE_ID}}\" \\\n -d \"line_items[][quantity]\"=1 \\\n -d \"mode\"=\"payment\" \\\n -d \"customer\"=\"{{CUSTOMER_ID}}\" \\\n -d \"payment_intent_data[setup_future_usage]\"=\"off_session\" \\\n-d \"success_url\"=\"https://example.com/success?session_id={CHECKOUT_SESSION_ID}\"\n\\\n -d \"cancel_url\"=\"https://example.com/cancel\"\n```\n\n#### Note\n\nThe Bacs Direct Debit rules require that customers receive [debit notification\nemails](https://docs.stripe.com/payments/payment-methods/bacs-debit#debit-notifications)\nwhen payment details are initially collected and when their account is debitted.\nStripe sends these emails for you by default.\n\nCreating a Checkout Session returns a [Session\nID](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-id).\nMake the Session ID available on your success page by including the\n`{CHECKOUT_SESSION_ID}` template variable in the `success_url` as in the above\nexample.\n\n#### Caution\n\nDon’t rely on the redirect to the `success_url` alone for detecting payment\ninitiation, as:\n\n- Malicious users could directly access the `success_url` without paying and\ngain access to your goods or services.\n- Customers may not always reach the `success_url` after a successful\npayment—they might close their browser tab before the redirect occurs.\n[Handle post-payment\neventsServer-side](https://docs.stripe.com/payments/bacs-debit/accept-a-payment#async)\nWhen your customer completes a payment, Stripe redirects them to the URL that\nyou specified in the `success_url` parameter. Typically, this is a page on your\nwebsite that informs your customer that their payment was successful.\n\nHowever, Bacs Direct Debit is a delayed notification payment method, which means\nthat funds are not immediately available. A Bacs Direct Debit payment typically\ntakes 3 business days to make the funds available. Because of this, you’ll want\nto delay order fulfillment until the funds are available. Once the payment\nsucceeds, the underlying\n[PaymentIntent](https://docs.stripe.com/payments/payment-intents) status changes\nfrom `processing` to `succeeded`.\n\nThe following Checkout events are sent when the payment status changes:\n\nEvent NameDescriptionNext\nsteps[checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed)The\ncustomer has successfully authorized the debit payment by submitting the\nCheckout form.Wait for the payment to succeed or\nfail.[checkout.session.async_payment_succeeded](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_succeeded)The\ncustomer’s payment succeeded.Fulfill the goods or services that the customer\npurchased.[checkout.session.async_payment_failed](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_failed)The\ncustomer’s payment was declined, or failed for some other reason.Contact the\ncustomer via email and request that they place a new order.\nYour [webhook](https://docs.stripe.com/webhooks) code will need to handle all 3\nof these Checkout events.\n\nEach Checkout webhook payload includes the [Checkout Session\nobject](https://docs.stripe.com/api/checkout/sessions), which contains\ninformation about the [Customer](https://docs.stripe.com/api/customers) and\n[PaymentIntent](https://docs.stripe.com/payments/payment-intents).\n\nThe `checkout.session.completed` webhook is sent to your server before your\ncustomer is redirected. Your webhook acknowledgement (any `2xx` status code)\ntriggers the customer’s redirect to the `success_url`. If Stripe doesn’t receive\nsuccessful acknowledgement within 10 seconds of a successful payment, your\ncustomer is automatically redirected to the `success_url` page.\n\nOn your `success_url` page, show a success message to your customer, and let\nthem know that fulfillment of the order takes a few days as the Bacs Direct\nDebit payment method isn’t instant.\n\nWhen accepting instant payments (such as credit cards) in addition to delayed\nnotification payments, update your webhook endpoint to handle both kinds of\npayments when receiving a `checkout.session.completed` event.\n\n```\n# Set your secret key. Remember to switch to your live secret key in production.\n# See your keys here: https://dashboard.stripe.com/apikeys\nStripe.api_key = 'sk_test_BQokikJOvBiI2HlWgH4olfQ2'\n\n# You can find your endpoint's secret in your webhook settings\nendpoint_secret = 'whsec_...'\n\n# Using Sinatra\npost '/webhook' do\n payload = request.body.read\n event = nil\n\n # Verify webhook signature and extract the event\n # See https://stripe.com/docs/webhooks#verify-events for more information.\n sig_header = request.env['HTTP_STRIPE_SIGNATURE']\n begin\n event = Stripe::Webhook.construct_event(\n payload, sig_header, endpoint_secret\n )\n rescue JSON::ParserError => e\n # Invalid payload\n status 400\n return\n rescue Stripe::SignatureVerificationError => e\n # Invalid signature\n status 400\n return\n end\n\n case event['type']\n when 'checkout.session.completed'\n session = event['data']['object']\n\n # Check if the order is paid (for example, from a card payment)\n payment_intent = Stripe::PaymentIntent.retrieve(session.payment_intent)\n # A delayed notification payment will have the status 'processing'\n order_paid = payment_intent.status == \"succeeded\"\n\n # Save an order in your database, marked as 'awaiting payment'\n create_order(session)\n\n if order_paid\n fulfill_order(session)\n end\n when 'checkout.session.async_payment_succeeded'\n session = event['data']['object']\n\n # Fulfill the purchase...\n fulfill_order(session)\n when 'checkout.session.async_payment_failed'\n session = event['data']['object']\n\n # Send an email to the customer asking them to retry their order\n email_customer_about_failed_payment(session)\n end\n\n status 200\nend\n```\n\nYou can get information about the customer and payment by retrieving the\nCustomer or PaymentIntent objects referenced by the `customer`, `payment_intent`\nproperties in the webhook payload.\n\n### Testing webhooks locally\n\nTo test webhooks locally, you can use [Stripe\nCLI](https://docs.stripe.com/stripe-cli). Once you have it installed, you can\nforward events to your server:\n\n```\nstripe listen --forward-to localhost:4242/webhook\nReady! Your webhook signing secret is '{{WEBHOOK_SIGNING_SECRET}}' (^C to quit)\n```\n\nLearn more about [setting up webhooks](https://docs.stripe.com/webhooks).\n\n[Test the\nintegration](https://docs.stripe.com/payments/bacs-debit/accept-a-payment#testing)\nBy this point you should have a basic Bacs Direct Debit integration that\ncollects bank account details and accepts a payment.\n\nThere are several test bank account numbers you can use in [test\nmode](https://docs.stripe.com/keys#test-live-modes) to make sure this\nintegration is ready.\n\nSort code Account numberDescription10880000012345The payment succeeds and the\nPaymentIntent transitions from `processing` to `succeeded`.10880090012345The\npayment succeeds after three minutes and the PaymentIntent transitions from\n`processing` to `succeeded`.10880033333335The payment is accepted but then\nimmediately fails with a `debit_not_authorized` failure code and the\nPaymentIntent transitions from `processing` to `requires_payment_method`. The\nMandate becomes `inactive` and the PaymentMethod can not be used\nagain.10880093333335The payment fails after three minutes with a\n`debit_not_authorized` failure code and the PaymentIntent transitions from\n`processing` to `requires_payment_method`. The Mandate becomes `inactive` and\nthe PaymentMethod can not be used again.10880022222227The payment fails with an\n`insufficient_funds` failure code and the PaymentIntent transitions from\n`processing` to `requires_payment_method`. The Mandate remains `active` and the\nPaymentMethod can be used again.10880092222227The payment fails after three\nminutes with an `insufficient_funds` failure code and the PaymentIntent\ntransitions from `processing` to `requires_payment_method`. The Mandate remains\n`active` and the PaymentMethod can be used again.10880055555559The payment\nsucceeds after three minutes and the PaymentIntent transitions from `processing`\nto `succeeded`, but a dispute is immediately created.10880000033333Payment\nMethod creation succeeds, but the Mandate is refused by the customer’s bank and\nimmediately transitions to inactive.10880000044444The request to set up Bacs\nDirect Debit fails immediately due to an invalid account number and the customer\nis prompted to update their information before submitting. Payment details are\nnot collected.10880034343434The payment fails with a\n`charge_exceeds_source_limit` failure code due to the payment amount causing the\naccount to exceed its weekly payment volume limit.10880012121212The payment\nfails with a `charge_exceeds_weekly_limit` failure code due to the payment\namount exceeding the account’s transaction volume limit.\nYou can test using any of the account numbers provided above. However, because\nBacs Direct Debit payments take several days to process, use the test account\nnumbers that operate on a three-minute delay to better simulate the behavior of\nlive payments.\n\n#### Note\n\nBy default, Stripe automatically sends\n[emails](https://docs.stripe.com/payments/payment-methods/bacs-debit#debit-notifications)\nto the customer when payment details are initially collected and each time a\ndebit will be made on their account. These notifications aren’t sent in\ntestmode.\n\n## Payment failures\n\nPayments can fail for a variety of reasons. The reason for a failure is\navailable through\n[charge.failure_code](https://docs.stripe.com/api/charges/object#charge_object-failure_code).\nYou can only retry payments with certain failure codes. If you can’t retry a\npayment, we recommend reaching out to the customer and asking them to pay again\nusing a different bank account or a different payment method.\n\nBelow is a list of failure codes we currently send for Bacs Direct Debit. We\nmight add more at any time, so in developing and maintaining your code, don’t\nassume that only these types exist.\n\nFailure codeDescriptionRetryable`account_closed`The bank account has been\nclosed.No`bank_ownership_changed`The account has been transferred to a new\nPayment Service Provider (PSP). Check if you have been notified of the new PSP’s\ndetails. If not, you must collect a new mandate from the\ncustomer.No`debit_not_authorized`The customer has notified their bank that this\npayment was unauthorized or there is no mandate held by the paying\nbank.No`generic_could_not_process`This payment could not be\nprocessed.Yes`insufficient_funds`The customer’s account has insufficient funds\nto cover this payment.Yes`invalid_account_number`The account number is not\nvalid. This could mean it is not for a GBP account or that the account cannot\nprocess Direct Debit payments.No\nTo retry a payment, [confirm the\nPaymentIntent](https://docs.stripe.com/api/payment_intents/confirm) again using\nthe same [PaymentMethod](https://docs.stripe.com/api/payment_methods).\n\nTo ensure success, we recommend reaching out to the payer before retrying a\npayment.\n\n## See also\n\n- [Payment Intent\nwebhooks](https://docs.stripe.com/payments/payment-intents/verifying-status#webhooks)\n- [Managing\nMandates](https://docs.stripe.com/payments/payment-methods/bacs-debit#mandates)\n\n## Links\n\n- [Accept a\npayment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted)\n- [configure payment methods in the\nDashboard](https://docs.stripe.com/payments/dashboard-payment-methods)\n- [Checkout](https://docs.stripe.com/payments/checkout)\n- [Checkout Session](https://docs.stripe.com/api/checkout/sessions)\n- [Register now](https://dashboard.stripe.com/register)\n- [Product](https://docs.stripe.com/api/products)\n- [Price](https://docs.stripe.com/api/prices)\n- [Dashboard](https://dashboard.stripe.com/products)\n- [ad-hoc\nprices](https://docs.stripe.com/payments/accept-a-payment?platform=web#redirect-customers)\n- [migration guide](https://docs.stripe.com/payments/checkout/migrating-prices)\n- [keep your existing\nintegration](https://support.stripe.com/questions/prices-api-and-existing-checkout-integrations)\n- [Products](https://dashboard.stripe.com/test/products)\n-\n[line_items](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items)\n-\n[PaymentIntent](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method)\n-\n[URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url)\n- [debit notification\nemails](https://docs.stripe.com/payments/payment-methods/bacs-debit#debit-notifications)\n- [Session\nID](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-id)\n- [PaymentIntent](https://docs.stripe.com/payments/payment-intents)\n-\n[checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed)\n-\n[checkout.session.async_payment_succeeded](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_succeeded)\n-\n[checkout.session.async_payment_failed](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_failed)\n- [webhook](https://docs.stripe.com/webhooks)\n- [Customer](https://docs.stripe.com/api/customers)\n- [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys)\n-\n[https://stripe.com/docs/webhooks#verify-events](https://stripe.com/docs/webhooks#verify-events)\n- [Stripe CLI](https://docs.stripe.com/stripe-cli)\n- [test mode](https://docs.stripe.com/keys#test-live-modes)\n-\n[charge.failure_code](https://docs.stripe.com/api/charges/object#charge_object-failure_code)\n- [confirm the\nPaymentIntent](https://docs.stripe.com/api/payment_intents/confirm)\n- [PaymentMethod](https://docs.stripe.com/api/payment_methods)\n- [Payment Intent\nwebhooks](https://docs.stripe.com/payments/payment-intents/verifying-status#webhooks)\n- [Managing\nMandates](https://docs.stripe.com/payments/payment-methods/bacs-debit#mandates)",
  "metadata": {
    "title": "Bacs Direct Debit payments | Stripe Documentation",
    "description": "Learn to accept Bacs Direct Debit payments.",
    "sourceURL": "https://docs.stripe.com/payments/bacs-debit/accept-a-payment"
  }
}