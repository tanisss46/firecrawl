{
  "content": "# Back-end integration best practicesPublic preview\n\n## Safely integrate the onramp for different web3 use cases.\n\nTo make onramp appear to be part of your product UI, frame the onramp as a\nnative component of your application. In addition to front-end design, consider\npre-populating onramp parameters when creating an onramp session in the back\nend.\n\n## Wallet\n\nWallet users have two main onramp entry points: wallet funding and transaction\ntop-ups.\n\n### Wallet funding\n\nYou can proactively prompt users to fund their wallet after they create a new\nwallet or when their funds are critically low.\n\nIn these cases, consider specifying the following parameters:\n\n- `wallet_addresses`: Use the wallet address already in use.\n- `destination_networks`: Set to the default or selected network to reduce user\nconfusion.\n- `destination_currencies`: You can leave this blank, but you can also restrict\nit to the native gas token or any desired cryptocurrencies. For example, if you\noffer a DeFi service in USDC, consider that the user likely needs both USDC and\nthe gas token.\n- `destination_network`: Leave this blank to inherit the first value of the\nsupported network.\n- `destination_currency`: Leave this blank to inherit the first value of the\nsupported cryptocurrencies.\n\nThe following code example shows the creation of an onramp session using several\nof these parameters:\n\n```\ncurl -X POST https://api.stripe.com/v1/crypto/onramp_sessions \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"customer_ip_address\"=\"8.8.8.8\" \\\n -d \"wallet_addresses[ethereum]\"=\"0xB00F0759DbeeF5E543Cc3E3B07A6442F5f3928a2\" \\\n -d \"wallet_addresses[solana]\"=\"bufoH37MTiMTNAfBS4VEZ94dCEwMsmeSijD2vZRShuV\" \\\n -d \"destination_networks[]\"=\"ethereum\" \\\n -d \"destination_networks[]\"=\"solana\"\n```\n\n### Transaction top-ups\n\nWhen a Dapp or the user proposes a transaction, you might detect that the\ntransaction fails because of insufficient funds. In this case, you can calculate\nthe delta required for the transaction to complete. However, it’s often\ndifficult to detect the requested amount or cryptocurrency for ERC or SPL\ntokens.\n\nIn these cases, consider specifying the following:\n\n- `wallet_addresses`: Use the wallet address in use.\n- `destination_networks`: Set to the selected network.\n- `destination_currencies`: Restrict to the missing currencies when possible.\n- `destination_network`: Set to the selected network (a required value if you\nwant to set the amount).\n- `destination_currency`: Set to the target currency (a required value if you\nwant to set the amount).\n- `destination_amount`: Set to the balance differences, leaving enough of a\nbuffer for gas when applicable.\n\nThe following code example shows the creation of an onramp session using several\nof these parameters:\n\n```\ncurl -X POST https://api.stripe.com/v1/crypto/onramp_sessions \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"customer_ip_address\"=\"8.8.8.8\" \\\n -d \"wallet_addresses[ethereum]\"=\"0xB00F0759DbeeF5E543Cc3E3B07A6442F5f3928a2\" \\\n -d \"destination_networks[]\"=\"ethereum\" \\\n -d \"destination_currencies[]\"=\"usdc\" \\\n -d \"destination_network\"=\"ethereum\" \\\n -d \"destination_currency\"=\"usdc\" \\\n -d \"destination_amount\"=\"10\"\n```\n\n## Dapp or NFT checkout\n\nYou can use the onramp in checkout when you know the destination amount. For\nexample, a Dapp might sell memberships for a fixed price, or a user might want\nto buy a specific NFT from a marketplace.\n\nIn these cases, consider specifying the following:\n\n- `wallet_addresses`: Use the connected wallet address.\n- `destination_networks`: Use the connected network.\n- `destination_currencies`: Use the presentment currency (the price in the\ncurrency the goods are quoted in).\n- `destination_network`: Set to the selected network above (required if you want\nto set the amount).\n- `destination_currency`: Set to the target currency above (required if you want\nto set the amount).\n- `destination_amount`: Set it to either the balance difference or to cover the\nentire purchase amount. Some users adopt both, using on-chain analytics with an\nalmost even split. A user might choose the full amount to simplify their tax\ncost basis or to avoid spending accumulated assets. In both cases, leave room\nfor gas.\n\nThe following code example shows the creation of an onramp session using several\nof these parameters:\n\n```\ncurl -X POST https://api.stripe.com/v1/crypto/onramp_sessions \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"customer_ip_address\"=\"8.8.8.8\" \\\n -d \"wallet_addresses[ethereum]\"=\"0xB00F0759DbeeF5E543Cc3E3B07A6442F5f3928a2\" \\\n -d \"destination_networks[]\"=\"ethereum\" \\\n -d \"destination_currencies[]\"=\"eth\" \\\n -d \"destination_network\"=\"ethereum\" \\\n -d \"destination_currency\"=\"eth\" \\\n -d \"destination_amount\"=\"0.2343\"\n```\n\n## DEX\n\nA DEX offers a unique opportunity to let users buy any cryptocurrency with fiat.\nWhile a DEX can prompt users to top up crypto when exchanging arbitrary crypto\npairs using an existing interface, it’s better to have a dedicated user flow\nthat focuses on fiat to crypto only.\n\nAs the onramp lets you control your brand and UI, a DEX can build an onramp\nwidget that uses Stripe’s ability to process fiat into select cryptocurrencies.\nThe DEX can then complete the final exchange to arbitrary currencies. A DEX can\nalso build an onramp widget for a specific token. For example, a DAO might\nendorse a specific liquidity pool and use a DEX to distribute their tokens and\nonboard new users with fiat.\n\nIn these cases, consider specifying the following:\n\n- `wallet_addresses`: Use the wallet address already in use.\n- `destination_networks`: Set to the selected network.\n- `destination_currencies`: Restrict to the selected cryptocurrency.\n- `destination_network`: Set to the selected network (required if you want to\nset the amount).\n- `destination_currency`: Set to the target currency (required if you want to\nset the amount).\n- `destination_amount`: Set only if you can collect the user’s intent ahead of\ntime—leave blank for Stripe to suggest smart default values.\n\nThe following code example shows the creation of an onramp session using several\nof these parameters:\n\n```\ncurl -X POST https://api.stripe.com/v1/crypto/onramp_sessions \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"customer_ip_address\"=\"8.8.8.8\" \\\n -d \"wallet_addresses[ethereum]\"=\"0xB00F0759DbeeF5E543Cc3E3B07A6442F5f3928a2\" \\\n -d \"destination_networks[]\"=\"ethereum\" \\\n -d \"destination_currencies[]\"=\"eth\" \\\n -d \"destination_network\"=\"ethereum\" \\\n -d \"destination_currency\"=\"eth\"\n```",
  "metadata": {
    "title": "Back-end integration best practices | Stripe Documentation",
    "description": "Integrate the crypto onramp and learn about funding wallets and transaction top-ups.",
    "sourceURL": "https://docs.stripe.com/crypto/onramp/backend-best-practices"
  }
}