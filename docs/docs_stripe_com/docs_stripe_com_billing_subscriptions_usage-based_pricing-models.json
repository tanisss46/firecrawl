{
  "content": "# Model usage-based pricing\n\n## Learn about the different pricing models for usage-based billing on Stripe.\n\nCommon pricing models include fixed fee and overage, pay as you go, or credit\nburndown. Use the guidance below to set up these pricing models in Stripe.\n\n## Fixed fee and overage model\n\nUse the fixed fee and overage model to charge a flat fee per month for your\nservice at the beginning of the period. The flat fee has some included usage\nentitlement, and any additional usage (overage) charges at the end of the\nperiod.\n\nYou can use the Stripe Dashboard or API to set this up with two prices within\nthe same product.\n\nFor example, Alpaca AI introduces an advanced model called Llama AI. Priced at\n200 USD per month, this model includes 100,000 tokens. We charge any usage above\nthe included tokens at an additional rate of 0.001 USD per token.\n\nDashboardAPI- On the [Product\ncatalog](https://dashboard.stripe.com/test/products) page, click **Create\nproduct**.\n- On the **Add a product** page, do the following:\n\n- For **Name**, enter the name of your product. For the Alpaca AI example, enter\n`Llama AI`.\n- (Optional) For **Description**, add a description that appears at checkout in\nthe [customer portal](https://docs.stripe.com/customer-management) and in\n[quotes](https://docs.stripe.com/quotes).\n- Under **Billing period**, select **More pricing options**.\n- On the **Add price** page, do the following:\n\n- Under **Choose your pricing model**, select **Flat rate**.\n- Under **Price**, set the **Amount** to `200.00 USD`.\n- Click **Next**\n- To add a second recurring price to the product, click **Add another price** on\nthe **Add a product** page.\n- On the **Add price** page,do the following:\n\n- Under **Choose your pricing model**, select **Usage-based**, **Per tier**, and\n**Graduated**.\n- Under **Price**, create two graduated pricing tiers:\n\nFirst unitLast unitPer unitFlat feeFor the first0100,0000.00 USD0.00 USDFor the\nnext100,001∞0.001 USD0.00 USD\n- Under **Meter**, create a new meter to record usage. For the Alpaca AI\nexample, use the meter name `llama_api_tokens`.\n- Click **Next**.\n- Click **Add product**. When you create subscriptions, specify both prices.\n\n## Pay as you go\n\nThe pay as you go model (also called in arrears billing) lets you track usage\nincurred over a determined period, then charge the customer at the end of the\nperiod.\n\nYou can deploy any of the following pricing strategies:\n\n- **Per unit**: Charge the same amount for each unit.\n- **Per package**: Charge an amount for a package or bundle of units or usage.\n- **Tiered and volume-based pricing**: With [volume\npricing](https://docs.stripe.com/products-prices/pricing-models#volume-based-pricing),\nyou charge the subscription item at the tier that corresponds to the usage\namount at the end of the period.\n- **Tiered and graduated pricing**: Similar to volume pricing, [graduated\npricing](https://docs.stripe.com/products-prices/pricing-models#graduated-pricing)\ncharges for the usage in each tier instead of applying a single price to all\nusage.\n\nThis model might cause customers to accumulate significant usage, and affect\ntheir payment method status at the end of the month.\n\n## Credit burndown\n\nThe credit burndown model lets you collect prepayment for usage-based products\nand services. Customers can use [billing\ncredits](https://docs.stripe.com/billing/subscriptions/usage-based/billing-credits)\nto pay an initial amount, and then apply their billing credits as they use the\nproduct.\n\nFor example, Alpaca AI wants to sell a large enterprise contract to an existing\nself-serve customer for their new Llama AI Model. The customer commits to pay\n100,000 USD up front for Llama AI, so they can get 120,000 USD of billing credit\nusage to use within 1 year.\n\nDashboardAPI\n### Collect prepayment from a customer\n\n- On the [Invoices](https://dashboard.stripe.com/invoices) page, click **Create\ninvoice**.\n- Select your customer from the **Customer** dropdown.\n- Select **USD - US Dollar** from the **Currency** dropdown.\n- Under **Items**, select **Add a new line item**.\n- Under **Item details**, do the following:- For **Item**, enter `Llama AI\nCredits`.\n- For **Price**, enter `100,000`.\n- Click **Save**.\n- Click **Send invoice**.\n\nAfter your customer pays the invoice, you can grant them billing credits.\n\n### Grant billing credits to a customer\n\n- On the [Customers](https://dashboard.stripe.com/test/customers) page, select\nthe customer name.\n- On the customer page, under **Credit grants**, click the plus (**+**) symbol.\n- On the **New credit grant** page, do the following:- For **Name**, enter a\nname for your credit grant.\n- For **Amount**, specify the amount of the credit grant. For the Alpaca AI\nexample, enter `120,000`.\n- Under **Expiry date**, specify the date, if any, when the credits expire. For\nthe Alpaca AI example, select **Specific date** and set a date 12 months from\nnow.\n- Click **Create grant**.\n\n## Free trials\n\nYou can use [trial periods for\nsubscriptions](https://docs.stripe.com/billing/subscriptions/trials) with\nusage-based billing. During the trial period, any usage accrued doesn’t count\ntoward the total charged to the customer at the end of the billing cycle. After\nthe trial period ends, the usage accrues and bills at the end of the next\nbilling cycle.\n\nMake sure your integration properly monitors and handles [webhook\nevents](https://docs.stripe.com/billing/subscriptions/webhooks) related to trial\nstatus changes.\n\nA few days before a trial ends and the subscription moves from `trialing` to\n`active`, you receive a `customer.subscription.trial_will_end` event. When you\nreceive this event, make sure you have a payment method on the customer account\nto bill them. Optionally, provide advance notification to the customer about the\nupcoming charge.\n\nStatusDescription`trialing`The subscription is currently in a trial period and\nyou can safely provision your product for your customer. The subscription\ntransitions automatically to `active` when a customer makes the first\npayment.`active`The subscription is in good standing. For `past_due`\nsubscriptions, paying the latest associated invoice or marking it uncollectible\ntransitions the subscription to `active`. Note that `active` doesn’t indicate\nthat all outstanding invoices associated with the subscription have been paid.\nYou can leave other outstanding invoices open for payment, mark them as\nuncollectible, or void them as you see fit.`incomplete`The customer must make a\nsuccessful payment within 23 hours to activate the subscription. Or the payment\n[requires\naction](https://docs.stripe.com/billing/subscriptions/usage-based/pricing-models#requires-action),\nsuch as customer authentication. Subscriptions can also be `incomplete` if\nthere’s a pending payment and the PaymentIntent status is\n`processing`.`incomplete_expired`The initial payment on the subscription failed\nand the customer didn’t make a successful payment within 23 hours of\nsubscription creation. These subscriptions don’t bill customers. This status\nexists so you can track customers that failed to activate their\nsubscriptions.`past_due`Payment on the latest finalized invoice either failed or\nwasn’t attempted. The subscription continues to create invoices. Your\n[subscription\nsettings](https://docs.stripe.com/billing/subscriptions/overview#settings)\ndetermine the subscription’s next state. If the invoice is still unpaid after\nall attempted [smart\nretries](https://docs.stripe.com/billing/revenue-recovery/smart-retries), you\ncan configure the subscription to move to `canceled`, `unpaid`, or leave it as\n`past_due`. To move the subscription to `active`, pay the most recent invoice\nbefore its due date.`canceled`The subscription was canceled. During\ncancellation, automatic collection for all unpaid invoices is disabled\n(`auto_advance=false`). This is a terminal state that can’t be\nupdated.`unpaid`The latest invoice hasn’t been paid but the subscription remains\nin place. The latest invoice remains open and invoices continue to generate, but\npayments aren’t attempted. Revoke access to your product when the subscription\nis `unpaid` because payments were already attempted and retried while\n`past_due`. To move the subscription to `active`, pay the most recent invoice\nbefore its due date.`paused`The subscription has ended its trial period without\na default payment method and the\n[trial_settings.end_behavior.missing_payment_method](https://docs.stripe.com/billing/subscriptions/trials#create-free-trials-without-payment)\nis set to `pause`. Invoices are no longer created for the subscription. After\nattaching a default payment method to the customer, you can [resume the\nsubscription](https://docs.stripe.com/billing/subscriptions/trials#resume-a-paused-subscription).\nLearn more about [subscriptions and\nwebhooks](https://docs.stripe.com/billing/subscriptions/webhooks).\n\n## Transform quantities\n\nYou can use the\n[transform_quantity](https://docs.stripe.com/api/prices/create#create_price-transform_quantity)\noption to transform usage before applying the price, which you can use when you\nwant pricing on packages of a product instead of individual units. This allows\nyou to divide the reported usage by a specific number and round the result up or\ndown.\n\n#### Note\n\nQuantity transformation isn’t compatible with [tiered\npricing](https://docs.stripe.com/billing/subscriptions/usage-based/alerts-and-thresholds#tiered-pricing-threshold).\n\nFor example, say you have a car rental service and you want to charge customers\nfor each hour they rent a car. You report usage as a number of minutes.\n\n```\ncurl https://api.stripe.com/v1/products \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d name=\"Car Rental Service\"\n```\n\nCreate a price for the car rental service product. Charge 10 USD per hour, and\nround up to charge for a full hour, even if the customer uses only part of the\nhour.\n\n```\ncurl https://api.stripe.com/v1/prices \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d nickname=\"Car Rental Per Hour Rate\" \\\n -d unit_amount=1000 \\\n -d currency=usd \\\n -d \"recurring[interval]\"=month \\\n -d \"recurring[usage_type]\"=metered \\\n -d product={{CAR_RENTAL_SERVICE_PRODUCT_ID}} \\\n -d \"transform_quantity[divide_by]\"=60 \\\n -d \"transform_quantity[round]\"=up\n```\n\nIf a customer rents the car for 150 minutes, that customer is charged 30 USD for\n3 hours of rental (2 hours and 30 minutes, rounded up).\n\n## Links\n\n- [Product catalog](https://dashboard.stripe.com/test/products)\n- [customer portal](https://docs.stripe.com/customer-management)\n- [quotes](https://docs.stripe.com/quotes)\n- [volume\npricing](https://docs.stripe.com/products-prices/pricing-models#volume-based-pricing)\n- [graduated\npricing](https://docs.stripe.com/products-prices/pricing-models#graduated-pricing)\n- [billing\ncredits](https://docs.stripe.com/billing/subscriptions/usage-based/billing-credits)\n- [Invoices](https://dashboard.stripe.com/invoices)\n- [Customers](https://dashboard.stripe.com/test/customers)\n- [trial periods for\nsubscriptions](https://docs.stripe.com/billing/subscriptions/trials)\n- [webhook events](https://docs.stripe.com/billing/subscriptions/webhooks)\n- [subscription\nsettings](https://docs.stripe.com/billing/subscriptions/overview#settings)\n- [smart\nretries](https://docs.stripe.com/billing/revenue-recovery/smart-retries)\n-\n[trial_settings.end_behavior.missing_payment_method](https://docs.stripe.com/billing/subscriptions/trials#create-free-trials-without-payment)\n- [resume the\nsubscription](https://docs.stripe.com/billing/subscriptions/trials#resume-a-paused-subscription)\n-\n[transform_quantity](https://docs.stripe.com/api/prices/create#create_price-transform_quantity)\n- [tiered\npricing](https://docs.stripe.com/billing/subscriptions/usage-based/alerts-and-thresholds#tiered-pricing-threshold)",
  "metadata": {
    "title": "Model usage-based pricing | Stripe Documentation",
    "description": "Use Stripe Billing to create your usage-based pricing model. Some common pricing models include a fixed fee and overage model, pay as you go model, or credit burndown model.",
    "sourceURL": "https://docs.stripe.com/billing/subscriptions/usage-based/pricing-models"
  }
}