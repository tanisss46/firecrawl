{
  "content": "# Receive Stripe events in your webhook endpoint\n\n## Listen to events in your Stripe account on your webhook endpoint so your integration can automatically trigger reactions.\n\n#### Send events to your AWS account\n\nYou can now send events directly to [Amazon EventBridge as an event\ndestination](https://docs.stripe.com/event-destinations/eventbridge).\n\nWhen building Stripe integrations, you might want your applications to receive\nevents as they occur in your Stripe accounts, so that your backend systems can\nexecute actions accordingly.\n\nCreate an event destination to receive events at an HTTPS webhook endpoint.\nAfter you register a webhook endpoint, Stripe can push real-time event data to\nyour application’s webhook endpoint when\n[events](https://docs.stripe.com/event-destinations#events-overview) happen in\nyour Stripe account. Stripe uses HTTPS to send webhook events to your app as a\nJSON payload that includes an [Event\nobject](https://docs.stripe.com/api/events).\n\nReceiving webhook events is particularly useful for listening to asynchronous\nevents such as when a customer’s bank confirms a payment, a customer disputes a\ncharge, a recurring payment succeeds, or when collecting subscription payments.\n\nYou can also receive events in [Amazon\nEventBridge](https://docs.stripe.com/event-destinations/eventbridge) with event\ndestinations.\n\n## Get started\n\nTo start receiving webhook events in your app:\n\n- Create a webhook endpoint handler to receive event data POST requests.\n- Test your webhook endpoint handler locally using the Stripe CLI.\n- Create a new [event destination](https://docs.stripe.com/event-destinations)\nfor your webhook endpoint.\n- Secure your webhook endpoint.\n\nYou can register and create one endpoint to handle several different event types\nat the same time, or set up individual endpoints for specific events.\n\n[Create a handler](https://docs.stripe.com/webhooks#webhook-endpoint-def)\nSet up an HTTP or HTTPS endpoint function that can accept webhook requests with\na POST method. If you’re still developing your endpoint function on your local\nmachine, it can use HTTP. After it’s publicly accessible, your webhook endpoint\nfunction must use HTTPS.\n\nSet up your endpoint function so that it:\n\n- Handles POST requests with a JSON payload consisting of an [event\nobject](https://docs.stripe.com/api/events/object).\n- Quickly returns a successful status code (`2xx`) prior to any complex logic\nthat could cause a timeout. For example, you must return a `200` response before\nupdating a customer’s invoice as paid in your accounting system.\n\n#### Note\n\nAlternatively, you can build a webhook endpoint function in your programming\nlanguage using our [interactive webhook endpoint\nbuilder](https://docs.stripe.com/webhooks/quickstart).\n\n#### Example endpoint\n\nThis code snippet is a webhook function configured to check that the event type\nwas received, to handle the event, and return a 200 response.\n\n```\nrequire 'json'\n\n# Using Sinatra\npost '/webhook' do\n payload = request.body.read\n event = nil\n\n begin\n event = Stripe::Event.construct_from(\n JSON.parse(payload, symbolize_names: true)\n )\n rescue JSON::ParserError => e\n # Invalid payload\n status 400\n return\n end\n\n # Handle the event\n case event.type\n when 'payment_intent.succeeded'\n payment_intent = event.data.object # contains a Stripe::PaymentIntent\n # Then define and call a method to handle the successful payment intent.\n # handle_payment_intent_succeeded(payment_intent)\n when 'payment_method.attached'\n payment_method = event.data.object # contains a Stripe::PaymentMethod\n# Then define and call a method to handle the successful attachment of a\nPaymentMethod.\n # handle_payment_method_attached(payment_method)\n # ... handle other event types\n else\n puts \"Unhandled event type: #{event.type}\"\n end\n\n status 200\nend\n```\n\n[Test your handler](https://docs.stripe.com/webhooks#test-webhook)\nBefore you go-live with your webhook endpoint function, we recommend that you\ntest your application integration. You can do so by configuring a local listener\nto send events to your local machine, and sending test events. You need to use\nthe [CLI](https://docs.stripe.com/stripe-cli) to test.\n\n#### Forward events to a local endpoint\n\nTo forward events to your local endpoint, run the following command with the\n[CLI](https://docs.stripe.com/stripe-cli) to set up a local listener. The\n`--forward-to` flag sends all [Stripe\nevents](https://docs.stripe.com/cli/trigger#trigger-event) in **test mode** to\nyour local webhook endpoint.\n\n```\nstripe listen --forward-to localhost:4242/webhook\n```\n\n#### Note\n\nYou can also run the stripe listen command on the [Stripe\nShell](https://docs.stripe.com/stripe-shell/overview) to see events through the\nStripe shell terminal, although you won’t be able to forward events from the\nshell to your local endpoint.\n\nUseful configurations to help you test with your local listener include the\nfollowing:\n\n- To disable HTTPS certificate verification, use the `--skip-verify` optional\nflag.\n- To forward only specific events, use the `--events` optional flag and pass in\na comma separated list of events.\n\n```\nstripe listen --events\npayment_intent.created,customer.created,payment_intent.succeeded,checkout.session.completed,payment_intent.payment_failed\n\\\n --forward-to localhost:4242/webhook\n```\n\n- To forward events to your local webhook endpoint from the public webhook\nendpoint that you already registered on Stripe, use the\n`--load-from-webhooks-api` optional flag. It loads your registered endpoint,\nparses the path and its registered events, then appends the path to your local\nwebhook endpoint in the `--forward-to path`.\n\n```\nstripe listen --load-from-webhooks-api --forward-to localhost:4242/webhook\n```\n\n- To check webhook signatures, use the `{{WEBHOOK_SIGNING_SECRET}}` from the\ninitial output of the listen command.\n\n```\nReady! Your webhook signing secret is '{{WEBHOOK_SIGNING_SECRET}}' (^C to quit)\n\n```\n\n#### Triggering test events\n\nTo send test events, trigger an event type that your webhook is subscribed to by\nmanually creating an object in the Stripe Dashboard. Alternatively, you can use\nthe following command in either [Stripe\nShell](https://docs.stripe.com/stripe-shell/overview) or [Stripe\nCLI](https://docs.stripe.com/stripe-cli).\n\nThis example triggers a `payment_intent.succeeded` event:\n\n```\nstripe trigger payment_intent.succeeded\nRunning fixture for: payment_intent\nTrigger succeeded! Check dashboard for event details.\n```\n\nLearn how to trigger events with [Stripe for VS\nCode](https://docs.stripe.com/stripe-vscode).\n\n[Register your endpoint](https://docs.stripe.com/webhooks#register-webhook)\nAfter testing your webhook endpoint function, use the\n[API](https://docs.stripe.com/api/v2/event-destinations) or the **Webhooks** tab\nin Workbench to register your webhook endpoint’s accessible URL to make sure\nthat Stripe knows where to deliver events. You can register up to 16 webhook\nendpoints with Stripe. Registered webhook endpoints must be publicly accessible\n**HTTPS** URLs.\n\n#### Webhook URL format\n\nThe URL format to register a webhook endpoint is:\n\n```\nhttps://<your-website>/<your-webhook-endpoint>\n\n```\n\nFor example, if your domain is `https://mycompanysite.com` and the route to your\nwebhook endpoint is `@app.route('/stripe_webhooks', methods=['POST'])`, specify\n`https://mycompanysite.com/stripe_webhooks` as the **Endpoint URL**.\n\n#### Create an event destination for your webhook endpoint\n\nCreate an event destination using Workbench in the Dashboard or programatically\nwith the [API](https://docs.stripe.com/api/v2/event-destinations). You can\nregister up to 16 event destinations on each Stripe account.\n\nDashboardAPI\nTo create a new webhook endpoint in the Dashboard:\n\n- Open the [Webhooks](https://dashboard.stripe.com/webhooks) tab in Workbench.\n- Click **Create an event destination**.\n- Select where you want to receive events from. Stripe supports two types of\nconfigurations: **Your account** and [Connected\naccounts](https://docs.stripe.com/connect). Select **Account** to listen to\nevents from your own account. If you created a [Connect\napplication](https://docs.stripe.com/connect) and want to listen to events from\nyour connected accounts, select **Connected accounts**.\n- Select the API version for the [events\nobject](https://docs.stripe.com/api/events) you want to consume.\n- Select the [event types](https://docs.stripe.com/api/events/types) that you\nwant to send to a webhook endpoint.\n- Select **Continue**, then select **Webhook endpoint** as the destination type.\n- Click **Continue**, then provide the **Endpoint URL** and an optional\ndescription for the webhook.\n\n![Register a new webhook using the Webhooks\ntab](https://b.stripecdn.com/docs-statics-srv/assets/create-webhook.f728025897e9e4ca2ba623abe34995a0.png)\n\nRegister a new webhook using the **Webhooks** tab\n\n#### Note\n\n[Workbench](https://docs.stripe.com/workbench) replaces the existing [Developers\nDashboard](https://docs.stripe.com/development/dashboard). If you’re still using\nthe Developers Dashboard, see how to [create a new webhook\nendpoint](https://docs.stripe.com/development/dashboard/webhooks).\n\n[Secure your\nendpoint](https://docs.stripe.com/webhooks#verify-official-libraries)\nYou need to secure your integration by making sure your handler verifies that\nall webhook requests are generated by Stripe. You can verify webhook signatures\nusing our official libraries or verify them manually.\n\nVerify with official libraries (recommended)Verify manually\n### Verify webhook signatures with official libraries\n\nWe recommend using our official libraries to verify signatures. You perform the\nverification by providing the event payload, the `Stripe-Signature` header, and\nthe endpoint’s secret. If verification fails, you get an error.\n\nIf you get a signature verification error, read our guide about [troubleshooting\nit](https://docs.stripe.com/webhooks/signature).\n\n#### Warning\n\nStripe requires the raw body of the request to perform signature verification.\nIf you’re using a framework, make sure it doesn’t manipulate the raw body. Any\nmanipulation to the raw body of the request causes the verification to fail.\n\n```\n# Set your secret key. Remember to switch to your live secret key in production.\n# See your keys here: https://dashboard.stripe.com/apikeys\nStripe.api_key = 'sk_test_BQokikJOvBiI2HlWgH4olfQ2'\n\nrequire 'stripe'\nrequire 'sinatra'\n\n# If you are testing your webhook locally with the Stripe CLI you\n# can find the endpoint's secret by running `stripe listen`\n# Otherwise, find your endpoint's secret in your webhook settings in\n# the Developer Dashboard\nendpoint_secret = 'whsec_...'\n\n# Using the Sinatra framework\nset :port, 4242\n\npost '/my/webhook/url' do\n payload = request.body.read\n sig_header = request.env['HTTP_STRIPE_SIGNATURE']\n event = nil\n\n begin\n event = Stripe::Webhook.construct_event(\n payload, sig_header, endpoint_secret\n )\n rescue JSON::ParserError => e\n # Invalid payload\n puts \"Error parsing payload: #{e.message}\"\n status 400\n return\n rescue Stripe::SignatureVerificationError => e\n # Invalid signature\n puts \"Error verifying webhook signature: #{e.message}\"\n status 400\n return\n end\n\n # Handle the event\n case event.type\n when 'payment_intent.succeeded'\n payment_intent = event.data.object # contains a Stripe::PaymentIntent\n puts 'PaymentIntent was successful!'\n when 'payment_method.attached'\n payment_method = event.data.object # contains a Stripe::PaymentMethod\n puts 'PaymentMethod was attached to a Customer!'\n # ... handle other event types\n else\n puts \"Unhandled event type: #{event.type}\"\n end\n\n status 200\nend\n```\n\n## Debug webhook integrations\n\nMultiple types of issues can occur when delivering events to your webhook\nendpoint:\n\n- Stripe might not be able to deliver an event to your webhook endpoint.\n- Your webhook endpoint might have an SSL issue.\n- Your network connectivity is intermittent.\n- Your webhook endpoint isn’t receiving events that you expect to receive.\n\n### View event deliveries\n\nTo view event deliveries, select the webhook endpoint under **Webhooks**, then\nselect the **Events** tab.\n\nThe **Events** tab provides a list of events and whether they’re `Delivered`,\n`Pending`, or `Failed`. Click an event to view the `Delivery attempts`, which\nincludes the HTTP status code of previous delivery attempts and the time of\npending future deliveries.\n\n![View event delivery attempts on a webhook's Events\ntab](https://b.stripecdn.com/docs-statics-srv/assets/view-events.a1e821e78eb4ee329f90f584922d6c0d.png)\n\nView event delivery attempts on a webhook endpoint’s **Events** tab.\n\n### Fix HTTP status codes\n\nWhen an event displays a status code of `200`, it indicates successful delivery\nto the webhook endpoint. You might also receive a status code other than `200`.\nView the table below for a list of common HTTP status codes and recommended\nsolutions.\n\nPending webhook statusDescriptionFix(Unable to connect) ERRWe’re unable to\nestablish a connection to the destination server.Make sure that your host domain\nis publicly accessible to the internet.(`302`) ERR (or other `3xx` status)The\ndestination server attempted to redirect the request to another location. We\nconsider redirect responses to webhook requests as failures.Set the webhook\nendpoint destination to the URL resolved by the redirect.(`400`) ERR (or other\n`4xx` status)The destination server can’t or won’t process the request. This\nmight occur when the server detects an error (`400`), when the destination URL\nhas access restrictions, (`401`, `403`), or when the destination URL doesn’t\nexist (`404`).- Make sure that your endpoint is publicly accessible to the\ninternet.\n- Make sure that your endpoint accepts a POST HTTP method.\n(`500`) ERR (or other `5xx` status)The destination server encountered an error\nwhile processing the request.Review your application’s logs to understand why\nit’s returning a `500` error.(TLS error) ERRWe couldn’t establish a secure\nconnection to the destination server. Issues with the SSL/TLS certificate or an\nintermediate certificate in the destination server’s certificate chain usually\ncause these errors. Stripe requires\n[TLS](https://docs.stripe.com/security/guide#tls) version v1.2 or higher.Perform\nan [SSL server test](https://www.ssllabs.com/ssltest/) to find issues that might\ncause this error.(Timed out) ERRThe destination server took too long to respond\nto the webhook request.Make sure you defer complex logic and return a successful\nresponse immediately in your webhook handling code.\n## Event delivery behaviors\n\nThis section helps you understand different behaviors to expect regarding how\nStripe sends events to your webhook endpoint.\n\n### Automatic retries\n\nStripe attempts to deliver events to your destination for up to three days with\nan exponential back off in live mode. View when the next retry will occur, if\napplicable, in your event destination’s **Event deliveries** tab. We retry event\ndeliveries created in a sandbox three times over the course of a few hours. If\nyour destination has been disabled or deleted when we attempt a retry, we\nprevent future retries of that event. However, if you disable and then re-enable\nthe event destination before we’re able to retry, you still see future retry\nattempts.\n\n### Manual retries\n\nThere are two ways to manually retry events:\n\n- In the Stripe Dashboard, click **Resend** when looking at a specific event.\nThis works for up to 15 days after the event creation.\n- With the [Stripe CLI](https://docs.stripe.com/cli/events/resend), run the\n`stripe events resend <event_id> --webhook-endpoint=<endpoint_id>` command. This\nworks for up to 30 days after the event creation.\n\n### Event ordering\n\nStripe doesn’t guarantee the delivery of events in the order that they’re\ngenerated. For example, creating a subscription might generate the following\nevents:\n\n- `customer.subscription.created`\n- `invoice.created`\n- `invoice.paid`\n- `charge.created` (if there’s a charge)\n\nMake sure that your event destination isn’t dependent on receiving events in a\nspecific order. Be prepared to manage their delivery appropriately. You can also\nuse the API to retrieve any missing objects. For example, you can retrieve the\ninvoice, charge, and subscription objects with the information from\n`invoice.paid` if you receive this event first.\n\n### API versioning\n\nThe API version in your account settings when the event occurs dictates the API\nversion, and therefore the structure of an\n[Event](https://docs.stripe.com/api/v1/events) sent to your destination. For\nexample, if your account is set to an older API version, such as 2015-02-16, and\nyou change the API version for a specific request with\n[versioning](https://docs.stripe.com/api#versioning), the\n[Event](https://docs.stripe.com/api/v1/events) object generated and sent to your\ndestination is still based on the 2015-02-16 API version. You can’t change\n[Event](https://docs.stripe.com/api/v1/events) objects after creation. For\nexample, if you update a charge, the original charge event remains unchanged. As\na result, subsequent updates to your account’s API version don’t retroactively\nalter existing [Event](https://docs.stripe.com/api/v1/events) objects.\nRetrieving an older [Event](https://docs.stripe.com/api/v1/events) by calling\n`/v1/events` using a newer API version also has no impact on the structure of\nthe received event. You can set test event destinations to either your default\nAPI version or the latest API version. The\n[Event](https://docs.stripe.com/api/v1/events) sent to the destination is\nstructured for the event destination’s specified version.\n\n## Best practices for using webhooks\n\nReview these best practices to make sure your webhook endpoints remain secure\nand function well with your integration.\n\n### Handle duplicate events\n\nWebhook endpoints might occasionally receive the same event more than once. You\ncan guard against duplicated event receipts by logging the [event\nIDs](https://docs.stripe.com/api/events/object#event_object-id) you’ve\nprocessed, and then not processing already-logged events.\n\nIn some cases, two separate Event objects are generated and sent. To identify\nthese duplicates, use the ID of the object in `data.object` along with the\n`event.type`.\n\n### Only listen to event types your integration requires\n\nConfigure your webhook endpoints to receive only the types of events required by\nyour integration. Listening for extra events (or all events) puts undue strain\non your server and we don’t recommend it.\n\nYou can [change the\nevents](https://docs.stripe.com/api/webhook_endpoints/update#update_webhook_endpoint-enabled_events)\nthat a webhook endpoint receives in the Dashboard or with the API.\n\n### Handle events asynchronously\n\nConfigure your handler to process incoming events with an asynchronous queue.\nYou might encounter scalability issues if you choose to process events\nsynchronously. Any large spike in webhook deliveries (for example, during the\nbeginning of the month when all subscriptions renew) might overwhelm your\nendpoint hosts.\n\nAsynchronous queues allow you to process the concurrent events at a rate your\nsystem can support.\n\n### Exempt webhook route from CSRF protection\n\nIf you’re using Rails, Django, or another web framework, your site might\nautomatically check that every POST request contains a *CSRF token*. This is an\nimportant security feature that helps protect you and your users from\n[cross-site request\nforgery](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF))\nattempts. However, this security measure might also prevent your site from\nprocessing legitimate events. If so, you might need to exempt the webhooks route\nfrom CSRF protection.\n\n```\nclass StripeController < ApplicationController\n # If your controller accepts requests other than Stripe webhooks,\n # you'll probably want to use `protect_from_forgery` to add CSRF\n # protection for your application. But don't forget to exempt\n # your webhook route!\n protect_from_forgery except: :webhook\n\n def webhook\n # Process webhook data in `params`\n end\nend\n```\n\n### Receive events with an HTTPS server\n\nIf you use an HTTPS URL for your webhook endpoint (required in live mode),\nStripe validates that the connection to your server is secure before sending\nyour webhook data. For this to work, your server must be correctly configured to\nsupport HTTPS with a valid server certificate. Stripe webhooks support only\n[TLS](https://docs.stripe.com/security/guide#tls) versions v1.2 and v1.3.\n\n### Roll endpoint signing secrets periodically\n\nThe secret used for verifying that events come from Stripe is modifiable in the\n**Webhooks** tab in Workbench. To keep them safe, we recommend that you roll\n(change) secrets periodically, or when you suspect a compromised secret.\n\nTo roll a secret:\n\n- Click each endpoint in the Workbench **Webhooks** tab that you want to roll\nthe secret for.\n- Navigate to the overflow menu () and click **Roll secret**. You can choose to\nimmediately expire the current secret or delay its expiration for up to 24 hours\nto allow yourself time to update the verification code on your server. During\nthis time, multiple secrets are active for the endpoint. Stripe generates one\nsignature per secret until expiration.\n\n### Verify events are sent from Stripe\n\nStripe sends webhook events from a set list of IP addresses. Only trust events\ncoming from these [IP addresses](https://docs.stripe.com/ips).\n\nAdditionally, verify webhook signatures to confirm that received events are sent\nfrom Stripe. Stripe signs webhook events it sends to your endpoints by including\na signature in each event’s `Stripe-Signature` header. This allows you to verify\nthat the events were sent by Stripe, not by a third party. You can verify\nsignatures either using our [official\nlibraries](https://docs.stripe.com/webhooks#verify-official-libraries), or\n[verify manually](https://docs.stripe.com/webhooks#verify-manually) using your\nown solution.\n\nThe following section describes how to verify webhook signatures:\n\n- Retrieve your endpoint’s secret.\n- Verify the signature.\n\n#### Retrieving your endpoint’s secret\n\nUse Workbench and navigate to the **Webhooks** tab to view all your endpoints.\nSelect an endpoint that you want to obtain the secret for, then click **Click to\nreveal**.\n\nStripe generates a unique secret key for each endpoint. If you use the same\nendpoint for both [test and live API\nkeys](https://docs.stripe.com/keys#test-live-modes), the secret is different for\neach one. Additionally, if you use multiple endpoints, you must obtain a secret\nfor each one you want to verify signatures on. After this setup, Stripe starts\nto sign each webhook it sends to the endpoint.\n\n### Preventing replay attacks\n\nA [replay attack](https://en.wikipedia.org/wiki/Replay_attack) is when an\nattacker intercepts a valid payload and its signature, then re-transmits them.\nTo mitigate such attacks, Stripe includes a timestamp in the `Stripe-Signature`\nheader. Because this timestamp is part of the signed payload, it’s also verified\nby the signature, so an attacker can’t change the timestamp without invalidating\nthe signature. If the signature is valid but the timestamp is too old, you can\nhave your application reject the payload.\n\nOur libraries have a default tolerance of 5 minutes between the timestamp and\nthe current time. You can change this tolerance by providing an additional\nparameter when verifying signatures. Use Network Time Protocol\n([NTP](https://en.wikipedia.org/wiki/Network_Time_Protocol)) to make sure that\nyour server’s clock is accurate and synchronizes with the time on Stripe’s\nservers.\n\n#### Common mistake\n\nDon’t use a tolerance value of `0`. Using a tolerance value of `0` disables the\nrecency check entirely.\n\nStripe generates the timestamp and signature each time we send an event to your\nendpoint. If Stripe retries an event (for example, your endpoint previously\nreplied with a non-`2xx` status code), then we generate a new signature and\ntimestamp for the new delivery attempt.\n\n### Quickly return a 2xx response\n\nYour [endpoint](https://docs.stripe.com/webhooks#example-endpoint) must quickly\nreturn a successful status code (`2xx`) prior to any complex logic that could\ncause a timeout. For example, you must return a `200` response before updating a\ncustomer’s invoice as paid in your accounting system.\n\n## See also\n\n- [Send events to Amazon\nEventBridge](https://docs.stripe.com/event-destinations/eventbridge)\n- [List of notification event\ntypes](https://docs.stripe.com/api/v2/events/event-types)\n- [List of change event types](https://docs.stripe.com/api/events/)\n- [Interactive webhook endpoint\nbuilder](https://docs.stripe.com/webhooks/quickstart)\n\n## Links\n\n- [Amazon EventBridge as an event\ndestination](https://docs.stripe.com/event-destinations/eventbridge)\n- [events](https://docs.stripe.com/event-destinations#events-overview)\n- [Event object](https://docs.stripe.com/api/events)\n- [event destination](https://docs.stripe.com/event-destinations)\n- [notification event objects](https://stripe.com/api/v2/events/event-types)\n- [change event objects](https://docs.stripe.com/api/events/object)\n- [interactive webhook endpoint\nbuilder](https://docs.stripe.com/webhooks/quickstart)\n- [CLI](https://docs.stripe.com/stripe-cli)\n- [Stripe events](https://docs.stripe.com/cli/trigger#trigger-event)\n- [Stripe Shell](https://docs.stripe.com/stripe-shell/overview)\n- [Stripe for VS Code](https://docs.stripe.com/stripe-vscode)\n- [API](https://docs.stripe.com/api/v2/event-destinations)\n- [Webhooks](https://dashboard.stripe.com/webhooks)\n- [Connected accounts](https://docs.stripe.com/connect)\n- [event types](https://docs.stripe.com/api/events/types)\n- [Workbench](https://docs.stripe.com/workbench)\n- [Developers Dashboard](https://docs.stripe.com/development/dashboard)\n- [create a new webhook\nendpoint](https://docs.stripe.com/development/dashboard/webhooks)\n- [webhook best practices](https://docs.stripe.com/webhooks#best-practices)\n- [troubleshooting it](https://docs.stripe.com/webhooks/signature)\n- [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys)\n- [listen for events](https://docs.stripe.com/webhooks#test-webhook)\n- [TLS](https://docs.stripe.com/security/guide#tls)\n- [SSL server test](https://www.ssllabs.com/ssltest/)\n- [Stripe CLI](https://docs.stripe.com/cli/events/resend)\n- [Event](https://docs.stripe.com/api/v1/events)\n- [versioning](https://docs.stripe.com/api#versioning)\n- [event IDs](https://docs.stripe.com/api/events/object#event_object-id)\n- [change the\nevents](https://docs.stripe.com/api/webhook_endpoints/update#update_webhook_endpoint-enabled_events)\n- [cross-site request\nforgery](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF))\n- [IP addresses](https://docs.stripe.com/ips)\n- [test and live API keys](https://docs.stripe.com/keys#test-live-modes)\n- [replay attack](https://en.wikipedia.org/wiki/Replay_attack)\n- [NTP](https://en.wikipedia.org/wiki/Network_Time_Protocol)\n- [endpoint](https://docs.stripe.com/webhooks#example-endpoint)\n- [List of notification event\ntypes](https://docs.stripe.com/api/v2/events/event-types)\n- [List of change event types](https://docs.stripe.com/api/events/)",
  "metadata": {
    "title": "Receive Stripe events in your webhook endpoint | Stripe Documentation",
    "description": "Create an event destination to receive events at an HTTPS webhook endpoint. Receiving webhook events is particularly useful for listening to asynchronous events such as when a customer's bank confirms a payment, a customer disputes a charge, a recurring payment succeeds, or when collecting subscription payments.",
    "sourceURL": "https://docs.stripe.com/webhooks"
  }
}