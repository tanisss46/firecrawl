{
  "content": "# Create separate charges and transfers\n\n## Create charges on your platform account and transfer funds to multiple connected accounts.\n\nCreate *separate charges and transfers* to transfer funds from one payment to\nmultiple connected accounts, or when a specific user isn’t known at the time of\nthe payment. The charge on your platform account is decoupled from the transfers\nto your connected accounts. With this charge type:\n\n- You create a charge on your platform’s account and also transfer funds to your\nconnected accounts. The payment appears as a charge on your account and there\nare also transfers to connected accounts (amount determined by you), which are\nwithdrawn from your account balance.\n- You can transfer funds to multiple connected accounts.\n- Your account balance is debited for the cost of the Stripe fees, refunds, and\nchargebacks.\n\nThis charge type is most optimal for marketplaces that need to split payments\nbetween multiple parties, such as DoorDash, a restaurant delivery platform.\n\nStripe supports separate charges and transfers in the following regions:\n\nAustraliaAustriaBelgiumBrazilBulgariaCanadaCroatiaCyprusCzech\nRepublicDenmarkEstoniaFinlandFranceGermanyGreeceHungaryIrelandItalyJapanLatviaLiechtensteinLithuaniaLuxembourgMalaysiaMaltaMexicoNetherlandsNew\nZealandNorwayPolandPortugalRomaniaSingaporeSlovakiaSloveniaSpainSwedenSwitzerlandUnited\nKingdomUnited States\nIn most scenarios, your platform and any connected account must be in the same\nregion. Attempting to transfer funds across a disallowed border returns an\nerror. For information about cross-region support, see [cross-border\ntransfers](https://docs.stripe.com/connect/account-capabilities#transfers-cross-border).\nYou must only use transfers in combination with the permitted use cases for\n[charges](https://docs.stripe.com/connect/charges),\n[tops-ups](https://docs.stripe.com/connect/top-ups) and\n[fees](https://docs.stripe.com/connect/separate-charges-and-transfers#collect-fees).\n\n#### Note\n\nWe recommend using separate charges and transfers for connected accounts that\nhave access to the Express Dashboard or no dashboard access.\n\nWebiOSAndroidReact NativeStripe-hosted pageEmbedded formCustom flow\nRedirect to a Stripe-hosted payment page using [Stripe\nCheckout](https://docs.stripe.com/payments/checkout). See how this integration\n[compares to Stripe’s other integration\ntypes](https://docs.stripe.com/payments/online-payments#compare-features-and-availability).\n\n### Integration effort\n\nLow code\n### Integration type\n\nRedirect to Stripe-hosted payment page\n\n### UI customization\n\nLimited customization\n[Try it out](https://checkout.stripe.dev/)\n\nFirst, [register](https://dashboard.stripe.com/register) for a Stripe account.\n\nUse our official libraries to access the Stripe API from your application:\n\n```\n# Available as a gem\nsudo gem install stripe\n```\n\n```\n# If you use bundler, you can add this line to your Gemfile\ngem 'stripe'\n```\n\n[Create a Checkout\nSessionClient-sideServer-side](https://docs.stripe.com/connect/separate-charges-and-transfers#create-checkout-session)\nA [Checkout Session](https://docs.stripe.com/api/checkout/sessions) controls\nwhat your customer sees in the payment form such as line items, the order amount\nand currency, and acceptable payment methods. Add a checkout button to your\nwebsite that calls a server-side endpoint to create a Checkout Session.\n\n```\n<html>\n <head>\n <title>Checkout</title>\n </head>\n <body>\n <form action=\"/create-checkout-session\" method=\"POST\">\n <button type=\"submit\">Checkout</button>\n </form>\n </body>\n</html>\n```\n\nOn your server, create a Checkout Session and redirect your customer to the\n[URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url)\nreturned in the response.\n\n```\ncurl https://api.stripe.com/v1/checkout/sessions \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d \"line_items[0][price_data][currency]\"=usd \\\n-d \"line_items[0][price_data][product_data][name]\"=\"Restaurant delivery service\"\n\\\n -d \"line_items[0][price_data][unit_amount]\"=10000 \\\n -d \"line_items[0][quantity]\"=1 \\\n -d \"payment_intent_data[transfer_group]\"=ORDER100 \\\n -d mode=payment \\\n--data-urlencode\nsuccess_url=\"https://example.com/success?session_id={CHECKOUT_SESSION_ID}\"\n```\n\n- `line_items` - This attribute represents the items the customer is purchasing.\nThe items are displayed in the Stripe-hosted checkout page.\n- `payment_intent_data[transfer_group]` - Use a unique string as the\n`transfer_group` to identify objects that are associated with each other. When\nStripe automatically creates a charge for a PaymentIntent with a\n`transfer_group` value, it assigns the same value to the charge’s\n`transfer_group`.\n- `success_url` - Stripe redirects the customer to the success URL after they\ncomplete a payment and replaces the `{CHECKOUT_SESSION_ID}` string with the\nCheckout Session ID. Use this to retrieve the Checkout Session and inspect the\nstatus to decide what to show your customer. You can also append your own query\nparameters, which persist through the redirect process. See [customize redirect\nbehavior with a Stripe-hosted\npage](https://docs.stripe.com/payments/checkout/custom-success-page) for more\ninformation.\nCustomerPlatformConnected accountConnected account\n$100 Charge\n\n($70) Transfer\n\n$70 Payment\n\n($20) Transfer\n\n$20 Payment\n\n($3.20) Stripe fees\n\nStripe\n$6.80 net\n\n[Handle post-payment\neventsServer-side](https://docs.stripe.com/connect/separate-charges-and-transfers#handle-post-payment-events)\nStripe sends a\n[checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed)\nevent when the payment completes. [Use a webhook to receive these\nevents](https://docs.stripe.com/webhooks/quickstart) and run actions, like\nsending an order confirmation email to your customer, logging the sale in a\ndatabase, or starting a shipping workflow.\n\nListen for these events rather than waiting on a callback from the client. On\nthe client, the customer could close the browser window or quit the app before\nthe callback executes. Some payment methods also take 2-14 days for payment\nconfirmation. Setting up your integration to listen for asynchronous events\nenables you to accept multiple [payment\nmethods](https://stripe.com/payments/payment-methods-guide) with a single\nintegration.\n\nStripe recommends handling all of the following events when collecting payments\nwith Checkout:\n\nEventDescriptionNext\nsteps[checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed)The\ncustomer has successfully authorized the payment by submitting the Checkout\nform.Wait for the payment to succeed or\nfail.[checkout.session.async_payment_succeeded](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_succeeded)The\ncustomer’s payment succeeded.Fulfill the purchased goods or\nservices.[checkout.session.async_payment_failed](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_failed)The\npayment was declined, or failed for some other reason.Contact the customer\nthrough email and request that they place a new order.\nThese events all include the [Checkout\nSession](https://docs.stripe.com/api/checkout/sessions) object. After the\npayment succeeds, the underlying\n[PaymentIntent](https://docs.stripe.com/payments/payment-intents)\n[status](https://docs.stripe.com/payments/paymentintents/lifecycle) changes from\n`processing` to `succeeded` or a failure status.\n\n[Create a\nTransferServer-side](https://docs.stripe.com/connect/separate-charges-and-transfers#create-transfer)\nOn your server, send funds from your account to a connected account by creating\na [Transfer](https://docs.stripe.com/api/transfers/create) and specifying the\n`transfer_group` used.\n\n```\ncurl https://api.stripe.com/v1/transfers \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d amount=7000 \\\n -d currency=usd \\\n -d destination={{CONNECTED_ACCOUNT_ID}} \\\n -d transfer_group=ORDER100\n```\n\nTransfer and charge amounts don’t have to match. You can split a single charge\nbetween multiple transfers or include multiple charges in a single transfer. The\nfollowing example creates an additional transfer associated with the same\n`transfer_group`.\n\n```\ncurl https://api.stripe.com/v1/transfers \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d amount=2000 \\\n -d currency=usd \\\n -d destination={{OTHER_CONNECTED_ACCOUNT_ID}} \\\n -d transfer_group=ORDER100\n```\n\n### Transfer options\n\nYou can assign any value to the `transfer_group` string, but it must represent a\nsingle business action. You can also make a transfer with neither an associated\ncharge nor a `transfer_group`—for example, when you must pay a provider but\nthere’s no associated customer payment.\n\n#### Note\n\nThe `transfer_group` only identifies associated objects. It doesn’t affect any\nstandard functionality. To prevent a transfer from executing before the funds\nfrom the associated charge are available, use the transfer’s\n`source_transaction` attribute.\n\nBy default, a transfer request fails when the amount exceeds the platform’s\n[available account balance](https://docs.stripe.com/connect/account-balances).\nStripe doesn’t automatically retry failed transfer requests.\n\nYou can avoid failed transfer requests for transfers that are associated with\ncharges. When you specify the associated charge [as the transfer’s\nsource_transaction](https://docs.stripe.com/connect/separate-charges-and-transfers#transfer-availability),\nthe transfer request automatically succeeds. However, we don’t execute the\ntransfer until the funds from that charge are available in the platform account.\n\n#### Note\n\nIf you use separate charges and transfers, take that into account when planning\nyour [payout](https://docs.stripe.com/payouts) schedule. Automatic payouts can\ninterfere with transfers that don’t have a defined `source_transaction`.\n\n[Test the\nintegration](https://docs.stripe.com/connect/separate-charges-and-transfers#test-the-integration)CardsWalletsBank\nredirectsBank debitsVouchersCard numberScenarioHow to test4242424242424242The\ncard payment succeeds and doesn’t require authentication.Fill out the credit\ncard form using the credit card number with any expiration, CVC, and postal\ncode.4000002500003155The card payment requires\n[authentication](https://docs.stripe.com/strong-customer-authentication).Fill\nout the credit card form using the credit card number with any expiration, CVC,\nand postal code.4000000000009995The card is declined with a decline code like\n`insufficient_funds`.Fill out the credit card form using the credit card number\nwith any expiration, CVC, and postal code.6205500000000000004The UnionPay card\nhas a variable length of 13-19 digits.Fill out the credit card form using the\ncredit card number with any expiration, CVC, and postal code.\nSee [Testing](https://docs.stripe.com/testing) for additional information to\ntest your integration.\n\n[OptionalEnable additional payment\nmethods](https://docs.stripe.com/connect/separate-charges-and-transfers#enable-payment-methods)\n## Specify the settlement merchant\n\nThe settlement merchant is dependent on the\n[capabilities](https://docs.stripe.com/connect/account-capabilities) set on an\naccount and how a charge is created. The settlement merchant determines whose\ninformation is used to make the charge. This includes the statement descriptor\n(either the platform’s or the connected account’s) that’s displayed on the\ncustomer’s credit card or bank statement for that charge.\n\nSpecifying the settlement merchant allows you to be more explicit about who to\ncreate charges for. For example, some platforms prefer to be the settlement\nmerchant because the end customer interacts directly with their platform (such\nas on-demand platforms). However, some platforms have connected accounts that\ninteract directly with end customers instead (such as a storefront on an\ne-commerce platform). In these scenarios, it might make more sense for the\nconnected account to be the settlement merchant.\n\nYou can set the `on_behalf_of` parameter to the ID of a connected account to\nmake that account the settlement merchant for the payment. When using\n`on_behalf_of`:\n\n- Charges settle in the connected account’s country and settlement currency.\n- The fee structure for the connected account’s country is used.\n- The connected account’s statement descriptor is displayed on the customer’s\ncredit card statement.\n- If the connected account is in a different country than the platform, the\nconnected account’s address and phone number are displayed on the customer’s\ncredit card statement.\n- The number of days that a [pending\nbalance](https://docs.stripe.com/connect/account-balances) is held before being\npaid out depends on the\n[delay_days](https://docs.stripe.com/api/accounts/create#create_account-settings-payouts-schedule-delay_days)\nsetting on the connected account.\n\nIf `on_behalf_of` is omitted, the platform is the business of record for the\npayment.\n\n#### Caution\n\nThe `on_behalf_of` parameter is supported only for connected accounts with a\npayments capability such as\n[card_payments](https://docs.stripe.com/connect/account-capabilities#card-payments).\nAccounts under the [recipient service\nagreement](https://docs.stripe.com/connect/service-agreement-types#recipient)\ncan’t request `card_payments` or other payments capabilities.\n\n```\ncurl https://api.stripe.com/v1/checkout/sessions \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d \"line_items[0][price_data][currency]\"=usd \\\n-d \"line_items[0][price_data][product_data][name]\"=\"Restaurant delivery service\"\n\\\n -d \"line_items[0][price_data][unit_amount]\"=10000 \\\n -d \"line_items[0][quantity]\"=1 \\\n -d \"payment_intent_data[on_behalf_of]\"={{CONNECTED_ACCOUNT_ID}} \\\n -d \"payment_intent_data[transfer_group]\"=ORDER100 \\\n -d mode=payment \\\n --data-urlencode success_url=\"https://example.com/success\"\n```\n\n## Collect fees\n\nWhen using separate charges and transfers, the platform can collect fees on a\ncharge by reducing the amount it transfers to the destination accounts. For\nexample, consider a restaurant delivery service transaction that involves\npayments to the restaurant and to the driver:\n\n- The customer pays a 100 USD charge.\n- Stripe collects a 3.20 USD fee and adds the remaining 96.80 USD to the\nplatform account’s pending balance.\n- The platform transfers 70 USD to the restaurant’s connected account and 20 USD\nto the driver’s connected account.\n- A platform fee of 6.80 USD remains in the platform account.\n\n![How a charge is divided into fees for the platform account and transfers for\nthe connected\naccounts](https://b.stripecdn.com/docs-statics-srv/assets/charges_transfers.c54b814c7e6f88993bf259c8a53f03e8.png)\n\nTo learn about processing payments in multiple currencies with Connect, see\n[working with multiple currencies](https://docs.stripe.com/connect/currencies).\n\n## Transfer availability\n\nThe default behavior is to transfer funds from the platform account’s available\nbalance. Attempting a transfer that exceeds the available balance fails with an\nerror. To avoid this problem, when creating a transfer, tie it to an existing\n[charge](https://docs.stripe.com/api/charges) by specifying the charge ID as the\n`source_transaction` parameter. With a `source_transaction`, the transfer\nrequest returns success regardless of your available balance if the related\ncharge has not settled yet. However, the funds don’t become available in the\ndestination account until the funds from the associated charge are available to\ntransfer from the platform account.\n\n#### Note\n\nIf a transfer fails due to insufficient funds in your platform balance, adding\nfunds doesn’t automatically retry the failed action. After adding funds, you\nmust repeat any failed transfers or payouts.\n\nIf the source charge has a `transfer_group` value, Stripe assigns the same value\nto the transfer’s `transfer_group`. If it doesn’t, then Stripe generates a\nstring in the format `group_` plus the associated PaymentIntent ID, for example:\n`group_pi_2NHDDD589O8KAxCG0179Du2s`. It assigns that string as the\n`transfer_group` for both the charge and the transfer.\n\n#### Note\n\nYou must specify the `source_transaction` when you create a transfer. You can’t\nupdate that attribute later.\n\n```\ncurl https://api.stripe.com/v1/transfers \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d amount=7000 \\\n -d currency=usd \\\n -d source_transaction={{CHARGE_ID}} \\\n -d destination={{CONNECTED_ACCOUNT_ID}}\n```\n\nYou can get the charge ID from the\n[PaymentIntent](https://docs.stripe.com/payments/payment-intents):\n\n- Get the PaymentIntent’s [latest_charge\nattribute](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-latest_charge).\nThis attribute is the ID of the most recent charge associated with the\nPaymentIntent.\n- [Request a list of charges](https://docs.stripe.com/api/charges/list),\nspecifying the `payment_intent` in the request. This method returns full data\nfor all charges associated with the PaymentIntent.\n\nWhen using this parameter:\n\n- The amount of the transfer must not exceed the amount of the source charge\n- You can create multiple transfers with the same `source_transaction`, as long\nas the sum of the transfers doesn’t exceed the source charge\n- The transfer takes on the pending status of the associated charge: if the\nfunds from the charge become available in N days, the payment that the\ndestination Stripe account receives from the transfer also becomes available in\nN days\n- Stripe automatically creates a `transfer_group` for you\n- The currency of the balance transaction associated with the charge must match\nthe currency of the transfer\n\nAsynchronous payment methods, like ACH, can fail after a subsequent transfer\nrequest is made. For these payments, avoid using `source_transaction`. Instead,\nwait until a\n[charge.succeeded](https://docs.stripe.com/api/events/types#event_types-charge.succeeded)\nevent is triggered before transferring the funds. If you have to use\n`source_transaction` with these payments, you must implement functionality to\nmanage payment failures.\n\nWhen a payment used as a `source_transaction` fails, funds from your platform’s\naccount balance are transferred to the connected account to cover the payment.\nTo recover these funds,\n[reverse](https://docs.stripe.com/connect/separate-charges-and-transfers#reverse-transfers)\nthe transfer associated with the failed `source_transaction`.\n\n## Issue refunds\n\nYou can refund charges created on your platform using its secret key. However,\nrefunding a charge has no impact on any associated transfers. It’s up to your\nplatform to reconcile any amount owed back to it by reducing subsequent transfer\namounts or by [reversing\ntransfers](https://docs.stripe.com/connect/separate-charges-and-transfers#reversing-transfers).\n\n```\ncurl https://api.stripe.com/v1/refunds \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d charge={{CHARGE_ID}}\n```\n\n## Reverse transfers\n\nConnect supports the ability to [reverse\ntransfers](https://docs.stripe.com/api#create_transfer_reversal) made to\nconnected accounts, either entirely or partially (by setting an `amount` value).\nUse transfer reversals only for refunds or disputes related to the charge, or to\ncorrect errors in the transfer.\n\n```\ncurl https://api.stripe.com/v1/transfers/{{TRANSFER_ID}}/reversals \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d amount=7000\n```\n\nTransfer reversals add the specified (or entire) amount back to the platform’s\navailable balance, reducing the connected account’s available balance\naccordingly. It is only possible to reverse a transfer if the connected\naccount’s available balance is greater than the reversal amount or has\n[connected\nreserves](https://docs.stripe.com/connect/account-balances#understanding-connected-reserve-balances)\nenabled.\n\nIf the transfer reversal requires a currency conversion, and the reversal amount\nwould result in a zero balance after the conversion, it returns an error.\n\nDisabling refunds for a connected account won’t block the ability to process\ntransfer reversals.\n\n## See also\n\n- [Working with multiple currencies](https://docs.stripe.com/connect/currencies)\n- [Statement descriptors with\nConnect](https://docs.stripe.com/connect/statement-descriptors)\n- [Understanding Connect account\nbalances](https://docs.stripe.com/connect/account-balances)\n\n## Links\n\n- [cross-border\ntransfers](https://docs.stripe.com/connect/account-capabilities#transfers-cross-border)\n- [charges](https://docs.stripe.com/connect/charges)\n- [tops-ups](https://docs.stripe.com/connect/top-ups)\n- [Stripe Checkout](https://docs.stripe.com/payments/checkout)\n- [compares to Stripe’s other integration\ntypes](https://docs.stripe.com/payments/online-payments#compare-features-and-availability)\n- [register](https://dashboard.stripe.com/register)\n- [Checkout Session](https://docs.stripe.com/api/checkout/sessions)\n-\n[URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url)\n-\n[https://example.com/success?session_id={CHECKOUT_SESSION_ID}](https://example.com/success?session_id={CHECKOUT_SESSION_ID})\n- [customize redirect behavior with a Stripe-hosted\npage](https://docs.stripe.com/payments/checkout/custom-success-page)\n-\n[checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed)\n- [Use a webhook to receive these\nevents](https://docs.stripe.com/webhooks/quickstart)\n- [payment methods](https://stripe.com/payments/payment-methods-guide)\n-\n[checkout.session.async_payment_succeeded](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_succeeded)\n-\n[checkout.session.async_payment_failed](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_failed)\n- [PaymentIntent](https://docs.stripe.com/payments/payment-intents)\n- [status](https://docs.stripe.com/payments/paymentintents/lifecycle)\n- [Transfer](https://docs.stripe.com/api/transfers/create)\n- [available account balance](https://docs.stripe.com/connect/account-balances)\n- [payout](https://docs.stripe.com/payouts)\n- [authentication](https://docs.stripe.com/strong-customer-authentication)\n- [Testing](https://docs.stripe.com/testing)\n- [capabilities](https://docs.stripe.com/connect/account-capabilities)\n-\n[delay_days](https://docs.stripe.com/api/accounts/create#create_account-settings-payouts-schedule-delay_days)\n-\n[card_payments](https://docs.stripe.com/connect/account-capabilities#card-payments)\n- [recipient service\nagreement](https://docs.stripe.com/connect/service-agreement-types#recipient)\n- [https://example.com/success](https://example.com/success)\n- [working with multiple currencies](https://docs.stripe.com/connect/currencies)\n- [charge](https://docs.stripe.com/api/charges)\n- [latest_charge\nattribute](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-latest_charge)\n- [Request a list of charges](https://docs.stripe.com/api/charges/list)\n-\n[charge.succeeded](https://docs.stripe.com/api/events/types#event_types-charge.succeeded)\n-\n[reverse](https://docs.stripe.com/connect/separate-charges-and-transfers#reverse-transfers)\n- [reverse transfers](https://docs.stripe.com/api#create_transfer_reversal)\n- [connected\nreserves](https://docs.stripe.com/connect/account-balances#understanding-connected-reserve-balances)\n- [Statement descriptors with\nConnect](https://docs.stripe.com/connect/statement-descriptors)",
  "metadata": {
    "title": "Create separate charges and transfers | Stripe Documentation",
    "description": "Create charges on your platform account and transfer funds to multiple connected accounts.",
    "sourceURL": "https://docs.stripe.com/connect/separate-charges-and-transfers"
  }
}