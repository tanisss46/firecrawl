{
  "content": "# Handle verification outcomes\n\n## Listen for verification results so your integration can automatically trigger reactions.\n\nYou wrote code to [display a modal to collect identity\ndocuments](https://docs.stripe.com/identity/verify-identity-documents). Now,\nwhen your user submits a document, you can listen to verification results to\ntrigger reactions in your application.\n\nIn this guide, you’ll learn how to:\n\n- Receive an event notification when a verification finishes processing.\n- Handle successful and failed verification checks.\n- Turn your event handler on in production.\n\n[Verification checks](https://docs.stripe.com/identity/verification-checks) are\nasynchronous, which means that verification results aren’t immediately\navailable. When the processing completes, the VerificationSession status updates\nand the verified information is available. Stripe generates\n[events](https://docs.stripe.com/api/events) every time a session changes\nstatus. In this guide, we’ll implement\n[webhooks](https://docs.stripe.com/webhooks) to notify your app when\nverification results become available.\n\nSee [How sessions work](https://docs.stripe.com/identity/how-sessions-work) to\nlearn the status and lifecycle of verification sessions.\n\n[Set up\nStripeServer-side](https://docs.stripe.com/identity/handle-verification-outcomes#set-up-stripe)\nInstall our official libraries for access to the Stripe API from your\napplication:\n\n```\n# Available as a gem\nsudo gem install stripe\n```\n\n```\n# If you use bundler, you can add this line to your Gemfile\ngem 'stripe'\n```\n\n[Create a webhook and handle VerificationSession\neventsServer-side](https://docs.stripe.com/identity/handle-verification-outcomes#create-webhook)\nA [webhook](https://docs.stripe.com/webhooks) is an endpoint on your server that\nreceives requests from Stripe, notifying you about events that happen on your\naccount. In this step, we’ll build an endpoint to receive events on\nVerificationSession [status\nchanges](https://docs.stripe.com/identity/how-sessions-work).\n\nWebhook endpoints must be publicly accessible so Stripe can send unauthenticated\nrequests. You’ll need to verify that Stripe sent the event by using the Stripe\nlibrary and request header:\n\n```\n// Set your secret key. Remember to switch to your live secret key in\nproduction.\n// See your keys here: https://dashboard.stripe.com/apikeys\nconst stripe = require('stripe')('sk_test_BQokikJOvBiI2HlWgH4olfQ2');\n\n// You can find your endpoint's secret in your webhook settings\nconst endpointSecret = 'whsec_...';\n\n// This example uses Express to receive webhooks\nconst express = require('express');\n\n// Use body-parser to retrieve the raw body as a buffer\nconst bodyParser = require('body-parser');\n\nconst app = express();\n\n// Use JSON parser for all non-webhook routes\napp.use((req, res, next) => {\n if (req.originalUrl === '/webhook') {\n next();\n } else {\n bodyParser.json()(req, res, next);\n }\n});\n\napp.post('/webhook', bodyParser.raw({type: 'application/json'}), (req, res) => {\n let event;\n\n // Verify the event came from Stripe\n try {\n const sig = req.headers['stripe-signature'];\n event = stripe.webhooks.constructEvent(req.body, sig, endpointSecret);\n } catch (err) {\n // On error, log and return the error message\n console.log(`❌ Error message: ${err.message}`);\n return res.status(400).send(`Webhook Error: ${err.message}`);\n }\n\n // Successfully constructed event\n\n res.json({received: true});\n});\n\napp.listen(4242, () => {\n console.log('Running on port 4242');\n});\n```\n\nNow that you have the basic structure and security in place to listen to\nnotifications from Stripe, update your webhook endpoint to handle verification\nsession events.\n\nAll [session events](https://docs.stripe.com/identity/how-sessions-work#events)\ninclude the\n[VerificationSession](https://docs.stripe.com/api/identity/verification_sessions)\nobject, which contains details about the verification checks performed. See\n[Accessing verification\nresults](https://docs.stripe.com/identity/access-verification-results) to learn\nhow to retrieve verified information not included in session events.\n\nStripe sends the following events when the session status changes:\n\nEvent nameDescriptionNext\nsteps[identity.verification_session.verified](https://docs.stripe.com/api/events/types#event_types-identity.verification_session.verified)Processing\nof all the [verification\nchecks](https://docs.stripe.com/identity/verification-checks) have completed,\nand they’re all successfully verified.Trigger relevant actions in your\napplication.[identity.verification_session.requires_input](https://docs.stripe.com/api/events/types#event_types-identity.verification_session.requires_input)Processing\nof all the [verification\nchecks](https://docs.stripe.com/identity/verification-checks) have completed,\nand at least one of the checks failed.Trigger relevant actions in your\napplication and potentially allow your user to retry the verification.\nYour webhook code needs to handle the `identity.verification_session.verified`\nand `identity.verification_session.requires_input` events. You can subscribe to\nother [session\nevents](https://docs.stripe.com/identity/how-sessions-work#events) to trigger\nadditional reactions in your app.\n\n### Handle VerificationSession verified status change\n\nThe `identity.verification_session.verified` event is sent when verification\nchecks have completed and are all successfully verified.\n\nAdd code to your event handler to handle all verification checks passing:\n\n```\n// Set your secret key. Remember to switch to your live secret key in\nproduction.\n// See your keys here: https://dashboard.stripe.com/apikeys\nconst stripe = require('stripe')('sk_test_BQokikJOvBiI2HlWgH4olfQ2');\n\n// You can find your endpoint's secret in your webhook settings\nconst endpointSecret = 'whsec_...';\n\n// This example uses Express to receive webhooks\nconst express = require('express');\n\n// Use body-parser to retrieve the raw body as a buffer\nconst bodyParser = require('body-parser');\n\nconst app = express();\n\n// Use JSON parser for all non-webhook routes\napp.use((req, res, next) => {\n if (req.originalUrl === '/webhook') {\n next();\n } else {\n bodyParser.json()(req, res, next);\n }\n});\n\napp.post('/webhook', bodyParser.raw({type: 'application/json'}), (req, res) => {\n let event;\n\n // Verify the event came from Stripe\n try {\n const sig = req.headers['stripe-signature'];\n event = stripe.webhooks.constructEvent(req.body, sig, endpointSecret);\n } catch (err) {\n // On error, log and return the error message\n console.log(`❌ Error message: ${err.message}`);\n return res.status(400).send(`Webhook Error: ${err.message}`);\n }\n\n // Successfully constructed event\n switch (event.type) {\n case 'identity.verification_session.verified': {\n // All the verification checks passed\n const verificationSession = event.data.object;\n break;\n }\n }\n\n res.json({received: true});\n});\n\napp.listen(4242, () => {\n console.log('Running on port 4242');\n});\n```\n\nWhen handling this event, you might also consider:\n\n- Saving the verification status in your own database\n- Sending an email to your user letting them know they’ve been verified\n- [Expanding](https://docs.stripe.com/api/expanding_objects) the\nVerificationSession [verified\noutputs](https://docs.stripe.com/api/identity/verification_sessions/object#identity_verification_session_object-verified_outputs)\nand comparing them against an expected value.\n\n### Handle VerificationSession requires_input status changes\n\nThe `identity.verification_session.requires_input` event is sent when at least\none of the checks failed. You can inspect the\n[last_error](https://docs.stripe.com/api/identity/verification_sessions/object#identity_verification_session_object-last_error)\nhash on the verification session to handle specific failure reasons:\n\n- The\n[last_error.code](https://docs.stripe.com/api/identity/verification_sessions/object#identity_verification_session_object-last_error-code)\nfield can be used to programmatically handle verification failures.\n- The\n[last_error.reason](https://docs.stripe.com/api/identity/verification_sessions/object#identity_verification_session_object-last_error-reason)\nfield contains a descriptive message explaining the failure reason and can be\nshown to your user.\n\n#### Event error codes\n\nSessionDocumentSelfieID NumberAddress (Invite only)Error\ncodeDescription`consent_declined`The user declined to be verified by Stripe.\nCheck with your legal counsel to see if you have an obligation to offer an\nalternative, non-biometric means to verify, such as through a manual\nreview.`under_supported_age`Stripe doesn’t verify users under the age of\nmajority.`country_not_supported`Stripe doesn’t verify users from the provided\ncountry.\nAdd code to your event handler to handle verification check failure:\n\n```\n// Set your secret key. Remember to switch to your live secret key in\nproduction.\n// See your keys here: https://dashboard.stripe.com/apikeys\nconst stripe = require('stripe')('sk_test_BQokikJOvBiI2HlWgH4olfQ2');\n\n// You can find your endpoint's secret in your webhook settings\nconst endpointSecret = 'whsec_...';\n\n// This example uses Express to receive webhooks\nconst express = require('express');\n\n// Use body-parser to retrieve the raw body as a buffer\nconst bodyParser = require('body-parser');\n\nconst app = express();\n\n// Use JSON parser for all non-webhook routes\napp.use((req, res, next) => {\n if (req.originalUrl === '/webhook') {\n next();\n } else {\n bodyParser.json()(req, res, next);\n }\n});\n\napp.post('/webhook', bodyParser.raw({type: 'application/json'}), (req, res) => {\n let event;\n\n // Verify the event came from Stripe\n try {\n const sig = req.headers['stripe-signature'];\n event = stripe.webhooks.constructEvent(req.body, sig, endpointSecret);\n } catch (err) {\n // On error, log and return the error message\n console.log(`❌ Error message: ${err.message}`);\n return res.status(400).send(`Webhook Error: ${err.message}`);\n }\n\n // Successfully constructed event\n switch (event.type) {\n case 'identity.verification_session.verified': {\n // All the verification checks passed\n const verificationSession = event.data.object;\n break;\n }\n case 'identity.verification_session.requires_input': {\n // At least one of the verification checks failed\n const verificationSession = event.data.object;\n\nconsole.log('Verification check failed: ' +\nverificationSession.last_error.reason);\n\n // Handle specific failure reasons\n switch (verificationSession.last_error.code) {\n case 'document_unverified_other': {\n // The document was invalid\n break;\n }\n case 'document_expired': {\n // The document was expired\n break;\n }\n case 'document_type_not_supported': {\n // document type not supported\n break;\n }\n default: {\n // ...\n }\n }\n }\n }\n\n res.json({received: true});\n});\n\napp.listen(4242, () => {\n console.log('Running on port 4242');\n});\n```\n\nDepending on your use case, you might want to allow your users to retry the\nverification if it fails. We recommend that you limit the amount of submission\nattempts.\n\nWhen handling this event, you might also consider:\n\n- Manually reviewing the collected information\n- Sending an email to your user letting them know that their verification failed\n- Providing your user an alternative verification method\n[Go live in\nproduction](https://docs.stripe.com/identity/handle-verification-outcomes#go-live)\nAfter you’ve deployed your event handler endpoint to production, set up the\nendpoint so Stripe knows where to send live mode events. It’s also helpful to go\nthrough the [development\nchecklist](https://docs.stripe.com/get-started/checklist/go-live) to ensure a\nsmooth transition when taking your integration live.\n\nWebhook endpoints are configured in the Dashboard or programmatically using the\nAPI.\n\n### Add an endpoint in the Dashboard\n\nIn the Dashboard’s [Webhooks settings](https://dashboard.stripe.com/webhooks)\npage, click **Add an endpoint** to add a new webhook endpoint. Enter the URL of\nyour webhook endpoint and select which events to listen to. See the full list of\n[Verification Session\nevents](https://docs.stripe.com/identity/how-sessions-work#events).\n\n### Add endpoint with the API\n\nYou can also programmatically [create webhook\nendpoints](https://docs.stripe.com/api/webhook_endpoints/create). As with the\nform in the Dashboard, you can enter any URL as the destination for events and\nwhich event types to subscribe to.\n\n```\ncurl https://api.stripe.com/v1/webhook_endpoints \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"url\"=\"https://{{DOMAIN}}/my/webhook/endpoint\" \\\n -d \"enabled_events[]\"=\"identity.verification_session.verified\" \\\n -d \"enabled_events[]\"=\"identity.verification_session.requires_input\"\n```\n\n## See also\n\n- [Test a webhook endpoint](https://docs.stripe.com/webhooks#test-webhook)\n- [How sessions work](https://docs.stripe.com/identity/how-sessions-work)\n- [Best practices for using\nwebhooks](https://docs.stripe.com/webhooks#best-practices)\n- [Webhook development\nchecklist](https://docs.stripe.com/get-started/checklist/go-live)\n\n## Links\n\n- [display a modal to collect identity\ndocuments](https://docs.stripe.com/identity/verify-identity-documents)\n- [Verification checks](https://docs.stripe.com/identity/verification-checks)\n- [events](https://docs.stripe.com/api/events)\n- [webhooks](https://docs.stripe.com/webhooks)\n- [How sessions work](https://docs.stripe.com/identity/how-sessions-work)\n- [Build a webhook endpoint](https://docs.stripe.com/webhooks/quickstart)\n- [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys)\n- [session events](https://docs.stripe.com/identity/how-sessions-work#events)\n-\n[VerificationSession](https://docs.stripe.com/api/identity/verification_sessions)\n- [Accessing verification\nresults](https://docs.stripe.com/identity/access-verification-results)\n-\n[identity.verification_session.verified](https://docs.stripe.com/api/events/types#event_types-identity.verification_session.verified)\n-\n[identity.verification_session.requires_input](https://docs.stripe.com/api/events/types#event_types-identity.verification_session.requires_input)\n- [Expanding](https://docs.stripe.com/api/expanding_objects)\n- [verified\noutputs](https://docs.stripe.com/api/identity/verification_sessions/object#identity_verification_session_object-verified_outputs)\n-\n[last_error](https://docs.stripe.com/api/identity/verification_sessions/object#identity_verification_session_object-last_error)\n-\n[last_error.code](https://docs.stripe.com/api/identity/verification_sessions/object#identity_verification_session_object-last_error-code)\n-\n[last_error.reason](https://docs.stripe.com/api/identity/verification_sessions/object#identity_verification_session_object-last_error-reason)\n- [development checklist](https://docs.stripe.com/get-started/checklist/go-live)\n- [Webhooks settings](https://dashboard.stripe.com/webhooks)\n- [create webhook\nendpoints](https://docs.stripe.com/api/webhook_endpoints/create)\n- [Test a webhook endpoint](https://docs.stripe.com/webhooks#test-webhook)\n- [Best practices for using\nwebhooks](https://docs.stripe.com/webhooks#best-practices)",
  "metadata": {
    "title": "Handle verification outcomes | Stripe Documentation",
    "description": "Listen for verification results so your integration can automatically trigger reactions.",
    "sourceURL": "https://docs.stripe.com/identity/handle-verification-outcomes"
  }
}