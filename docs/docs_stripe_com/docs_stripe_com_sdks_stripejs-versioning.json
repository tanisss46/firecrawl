{
  "content": "# Stripe.js versioning and support policy\n\n## Learn about the Stripe.js versioning and support policy.\n\nStripe.js uses an evergreen model, which means it receives updates continuously\nover time. Stripe.js v3, the scripts backing `js.stripe.com/v3`, was the most\nrecent version of Stripe.js for many years. We release new major versions such\nas [Acacia](https://docs.stripe.com/changelog/acacia) on a biannual basis. These\nversions allow us to introduce major features and breaking changes on a\npredictable schedule, so you can plan your upgrades.\n\n## Types of changes\n\nChanges to Stripe.js fall into two main categories:\n\n### Optimizations and new features\n\nThe most common type of change we make to Stripe.js are optimizations and new\nfeatures.\n\nWe add new features, make optimizations, and fix bugs such as critical security\nissues, without any required integration changes. This happens automatically for\nall Stripe.js integrations, and will continue for all versions of Stripe.js. All\nversions continue to get these non-breaking updates and are regularly updated\ntogether in our internal release process.\n\nSome examples of optimizations we consider to be non-breaking:\n\n- Changing the input labels in the Payment Element to be more accessible.\n- Updating the UI within Payment Element for BNPL redirects to increase\nconversion.\n- Adding a new parameter that allows you to specify when you don’t want to\nsubmit a postal code for a card charge.\n\nSome changes require integration changes to gain access to, but aren’t breaking\nchanges. One example might be adding a new function on the Stripe object. We\nsafely release these features across some existing Stripe.js versions in our\nregular release process. This process is called *backporting*.\n\n### Breaking changes\n\nThe Stripe.js versioning system is a tool that enables us to release new\nfeatures that might otherwise be constrained by our need to support backward\ncompatibility. We release these breaking changes in the [Stripe release\ntrains](https://stripe.com/blog/introducing-stripes-new-api-release-process),\ndone twice per year.\n\nA breaking change is something that could cause your integration to fail or\nappear broken. For example:\n\n- Removing a parameter or support for a specific option. For example, no longer\nallowing `captureMethod: manual` for `stripe.elements()`.\n- Removing an input field that you might rely on from a payment method. For\nexample, no longer collecting `country` for Klarna payments.\n- Changes that could cause your checkout page to appear visually broken or\nconfusing. For example, changing the default behavior for Payment Element layout\nfrom tabs to accordion could cause display issues if your page makes certain\nassumptions about the element in the flow of the page.\n\n## Usage\n\nThere are three ways to use versioned Stripe.js: with a script tag, with the\n`@stripe/stripe-js` package on npm, or with the `@stripe/react-stripe-js`\npackage on npm.\n\n### With a script tag\n\nTo use versioned Stripe.js, include the version name in the script tag’s URL.\n\n```\n<script src=\"https://js.stripe.com/acacia/stripe.js\"></script>\n```\n\nWe recommend that you stay up to date with the latest version of Stripe.js.\nStripe.js v3 is no longer recommended for integrations, but we’ll continue to\nsupport it.\n\n### With stripe-js on npm\n\nIf you use Stripe.js with the `@stripe/stripe-js` package on npm, you can\ncontinue to consume Stripe.js this way. Starting with `@stripe/stripe-js@6.0.0`,\neach major version of Stripe.js consumes a specific fixed version of Stripe.js.\nFor example, `@stripe/stripe-js@6.0.0` consumes Stripe.js `acacia`. For\ninformation about the relationships between specific `@stripe/stripe-js`\nversions and their corresponding Stripe.js versions, see the [releases\npage](https://github.com/stripe/stripe-js/releases).\n\n### With react-stripe-js on npm\n\nThe `@stripe/react-stripe-js` package continues to work with the\n`@stripe/stripe-js` package using its `peerDependencies`.\n\n## Version lifecycle\n\nWe release Stripe.js major versions alongside the [API release\ntrains](https://stripe.com/blog/introducing-stripes-new-api-release-process)\ntwice per year. We release non-breaking changes, including both optimizations\nand backported features, on our ongoing frequent release schedule. We continue\nto support and update older versions.\n\n## Compatibility with API versions\n\nWhen performing API requests, each versioned Stripe.js automatically uses the\nAPI version associated with the Stripe.js version. That is, the Stripe.js\n`acacia` version uses a compatible API version such as `2024-12-18.acacia`\n(which includes the date) to represent the release date of the API version. You\ncan’t override the API version.\n\n## Changelog\n\nThe [changelog](https://docs.stripe.com/changelog) shows the history of\nversioned changes in Stripe.js over time. It includes all breaking changes and\nother important changes and is the best place to understand what integration\nchanges you need to make to upgrade Stripe.js versions.\n\n## Migrate from Stripe.js v3\n\nReview the following considerations before you upgrade from Stripe.js v3 to a\nnewer version.\n\n### API changes\n\nWhen you update Stripe.js to `acacia` from v3, this might cause breaking changes\nfor API requests, depending on the API version you previously used for the\nrequests. To upgrade older accounts, we recommend that you [identify the current\nAPI\nversion](https://docs.stripe.com/upgrades#view-your-api-version-and-the-latest-available-upgrade-in-workbench)\nused in your account. Then identify the\n[changes](https://docs.stripe.com/changelog) that affect your Stripe.js\nintegration, and upgrade the [API version used by your Stripe.js\nintegration](https://docs.stripe.com/js/initializing#init_stripe_js-options-apiVersion)\nto `2024-12-18.acacia` gradually (if it makes sense for your needs) before\nupgrading Stripe.js to `acacia`.\n\n### API beta\n\nAPI versions can contain breaking changes for\n[previews](https://docs.stripe.com/release-phases) that aren’t listed in the\nchangelog, so you need to upgrade your Stripe.js version carefully if you’re on\na preview such as the [Elements with Checkout Sessions\nbeta](https://docs.stripe.com/checkout/elements-with-checkout-sessions-api/changelog).\n\nHistorically, some preview features involved adding beta headers to your\n`apiVersion` used by Stripe.js requests (for example, `'2025-02-24.acacia;\ncustom_checkout_beta=v1'`). Because we no longer support this API version\noverride, you can’t explicitly add beta headers directly to API requests.\nInstead, any supported Stripe.js previews add necessary headers automatically\nwhen the corresponding beta flag (for example `custom_checkout_beta_5`) is set\nwhen you initialize Stripe.js.\n\nFor `acacia`, this is expressly supported for `custom_checkout_beta` and\n`nz_bank_account_beta`. If you provide API headers for other previews, contact\nthe email provided to you for preview support to determine your options for\nupgrading Stripe.js or migrating to GA behavior.\n\n### Support for Stripe.js v3\n\nWe’ll continue to support `js.stripe.com/v3` for the foreseeable future. We’ll\nbackport features to this version and continue to maintain Stripe.js v3 as an\nevergreen version. Stripe.js v3 isn’t deprecated, but we encourage you to\nregularly update your applications to the newest version of Stripe.js to access\nrecent features that can’t be backported because of their breaking changes.\n\n## Links\n\n- [Acacia](https://docs.stripe.com/changelog/acacia)\n- [Stripe release\ntrains](https://stripe.com/blog/introducing-stripes-new-api-release-process)\n-\n[https://js.stripe.com/acacia/stripe.js](https://js.stripe.com/acacia/stripe.js)\n- [releases page](https://github.com/stripe/stripe-js/releases)\n- [changelog](https://docs.stripe.com/changelog)\n- [identify the current API\nversion](https://docs.stripe.com/upgrades#view-your-api-version-and-the-latest-available-upgrade-in-workbench)\n- [API version used by your Stripe.js\nintegration](https://docs.stripe.com/js/initializing#init_stripe_js-options-apiVersion)\n- [previews](https://docs.stripe.com/release-phases)\n- [Elements with Checkout Sessions\nbeta](https://docs.stripe.com/checkout/elements-with-checkout-sessions-api/changelog)",
  "metadata": {
    "title": "Stripe.js versioning and support policy | Stripe Documentation",
    "description": "Learn about the Stripe.js versioning and support policy.",
    "sourceURL": "https://docs.stripe.com/sdks/stripejs-versioning"
  }
}