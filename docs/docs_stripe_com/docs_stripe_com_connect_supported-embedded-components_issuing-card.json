{
  "content": "# Issuing card\n\n## Show an individual issued card.\n\nIssuing card renders the details of an individual\n[card](https://docs.stripe.com/api/issuing/cards) issued to your connected\naccounts.\n\nSizeDesktopLocale (United States)This demo is read-only with limited\nfunctionality. Visit [furever.dev](https://furever.dev/) for a fully functional\ndemo.\nThe permission boundary for this component is at the connected account level,\nnot at the individual card level. This UI should be shown to users that have\naccess to all cards, not to users that have restricted access to a single card.\n\nWhen [creating an Account\nSession](https://docs.stripe.com/api/account_sessions/create), enable the\nIssuing card component by specifying `issuing_card` in the `components`\nparameter.\n\n```\ncurl https://api.stripe.com/v1/account_sessions \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d account={{CONNECTED_ACCOUNT_ID}} \\\n -d \"components[issuing_card][enabled]\"=true \\\n -d \"components[issuing_card][features][card_management]\"=true \\\n -d \"components[issuing_card][features][cardholder_management]\"=true \\\n -d \"components[issuing_card][features][card_spend_dispute_management]\"=true \\\n -d \"components[issuing_card][features][spend_control_management]\"=true\n```\n\nAfter creating the account session and [initializing\nConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions),\nyou can render the Issuing card component in the front end:\n\n```\n// Include this element in your HTML\nconst issuingCard = stripeConnectInstance.create('issuing-card');\nissuingCard.setDefaultCard('{{ISSUING_CARD_ID_ID');\nissuingCard.setShowSpendControls(true);\ncontainer.appendChild(issuingCard);\n```\n\nThis embedded component supports the following attributes:\n\nHTML + JSReactSetterTypeDescription`setDefaultCard``(string) => void`Sets the\nIssuing\n[Card](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-id)\nID to display upon initial load.`setCardSwitching``(boolean) => void`Sets\nwhether to render the card dropdown selector. Defaults to\ntrue.`setFetchEphemeralKey``(function) => void`Sets the callback that fetches\nthe ephemeral key for the card. See [sensitive data\ndisplay](https://docs.stripe.com/connect/supported-embedded-components/issuing-card#sensitive-data-display).\n## Set spending controls\n\nYou can use Issuing Connect embedded components to view and, optionally, edit\n[spending controls](https://docs.stripe.com/issuing/controls/spending-controls)\non your cards by turning on the Issuing component’s `showSpendControls`\nattribute.\n\n```\nconst issuingCard = stripeConnectInstance.create('issuing-card');\nissuingCard.setShowSpendControls(true);\ndocument.body.appendChild(issuingCard);\n```\n\nTo enable editing spend controls in the component, pass\n`spend_control_management: true` as a feature when you [create an\nAccountSession](https://docs.stripe.com/connect/connect-embedded-components/quickstart#server-endpoint).\n\n```\ncurl https://api.stripe.com/v1/account_sessions \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d account={{CONNECTED_ACCOUNT_ID}} \\\n -d \"components[issuing_card][enabled]\"=true \\\n -d \"components[issuing_card][features][spend_control_management]\"=true\n```\n\n## Sensitive data display\n\nIssuing Connect embedded components integrate with [Issuing\nElements](https://docs.stripe.com/issuing/elements) to provide a PCI-compliant\nway for you to allow your admins to view card numbers (PANs) and CVV or CVCs for\nvirtual cards. The sensitive data renders inside Stripe-hosted iframes and never\ntouches your servers.\n\nThe components can use an ephemeral key to securely retrieve card information\nfrom the Stripe API without publicly exposing your secret keys.\n\nTo enable this functionality you must:\n\n- Set up an ephemeral key exchange on your server.\n- Pass an asynchronous callback to the components.\n\nStripe generates a `nonce` from the [Card\nID](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-id) in\nthe Issuing Card or Issuing Cards List component when a card is selected or\nloaded. Stripe then calls your callback function which returns an ephemeral key,\nand then renders a `Show numbers` button if the ephemeral key is valid.\n\n### Ephemeral key exchange\n\nYour server-side endpoint needs to accept a [Card\nID](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-id) and\na `nonce`. It can then create an ephemeral key using Stripe.\n\nHere’s how you might implement an ephemeral key creation endpoint in web\napplication frameworks across various languages:\n\n```\n// This example sets up an endpoint using the Express framework.\n// Watch this video to get started: https://youtu.be/rPR2aJ6XnAc\n\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\nconst stripe = require('stripe')('sk_test_BQokikJOvBiI2HlWgH4olfQ2');\n\napp.post('/ephemeral-keys', async (request, response) => {\n const { card_id, nonce } = request.body;\n\n const ephemeralKey = await stripe.ephemeralKeys.create({\n nonce: nonce,\n issuing_card: card_id,\n }, {\n apiVersion: '2025-02-24.acacia',\n stripeAccount: '{{CONNECTED_ACCOUNT_ID}}',\n });\n\n response.json({\n ephemeralKeySecret: ephemeralKey.secret,\n nonce: nonce,\n issuingCard: card_id,\n });\n});\n```\n\n### Asynchronous callback\n\nYou must define an asynchronous function that accepts a named argument with\nproperty `issuingCard` which is a\n[Card](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-id)\nID and additionally, a `nonce` property. This function must return an `Object`\nwith properties `issuingCard`, `nonce`, and `ephemeralKeySecret` which are\nretrieved from the endpoint you set up in the previous step.\n\nHere’s how you might implement this callback:\n\n```\nconst issuingCard = stripeConnectInstance.create('issuing-card');\nconst fetchEphemeralKey = async (fetchParams) => {\n const { issuingCard, nonce } = fetchParams;\n\n // This may vary greatly based on your implementation\n const response = await myServer.getEphemeralKey({issuingCard, nonce})\n\n return {\n issuingCard: response.issuingCard,\n nonce: response.nonce,\n ephemeralKeySecret: response.ephemeralKeySecret\n }\n}\n\nissuingCard.setFetchEphemeralKey(fetchEphemeralKey);\ndocument.body.appendChild(issuingCard);\n```\n\n## Links\n\n- [card](https://docs.stripe.com/api/issuing/cards)\n- [furever.dev](https://furever.dev)\n- [creating an Account\nSession](https://docs.stripe.com/api/account_sessions/create)\n- [initializing\nConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions)\n-\n[Card](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-id)\n- [spending\ncontrols](https://docs.stripe.com/issuing/controls/spending-controls)\n- [create an\nAccountSession](https://docs.stripe.com/connect/connect-embedded-components/quickstart#server-endpoint)\n- [Issuing Elements](https://docs.stripe.com/issuing/elements)\n- [https://youtu.be/rPR2aJ6XnAc](https://youtu.be/rPR2aJ6XnAc)",
  "metadata": {
    "title": "Issuing card | Stripe Documentation",
    "description": "Show an individual issued card.",
    "sourceURL": "https://docs.stripe.com/connect/supported-embedded-components/issuing-card"
  }
}