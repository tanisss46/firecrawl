{
  "content": "# Set up a subscription with PayPal\n\n## Learn how to create and charge for a subscription with PayPal.\n\n#### Caution\n\nTo start accepting PayPal subscriptions on Stripe, you need to [enable PayPal\nrecurring\npayments](https://docs.stripe.com/payments/paypal/set-up-future-payments?platform=web#enable-recurring-payments-support-from-stripe-dashboard)\nfrom the Dashboard.\n\nUse this guide to set up a\n[subscription](https://docs.stripe.com/billing/subscriptions/creating) using\n[PayPal](https://docs.stripe.com/payments/paypal) as a payment method.\n\n[Create a product and\npriceDashboard](https://docs.stripe.com/billing/subscriptions/paypal#create-product-plan-code)\n[Products](https://docs.stripe.com/api/products) represent the item or service\nyou’re selling. [Prices](https://docs.stripe.com/api/prices) define how much and\nhow frequently you charge for a product. This includes how much the product\ncosts, what currency you accept, and whether it’s a one-time or recurring\ncharge. If you only have a few products and prices, create and manage them in\nthe Dashboard.\n\nThis guide uses a stock photo service as an example and charges customers a 15\nEUR monthly subscription. To model this:\n\n- Navigate to the [Add a\nproduct](https://dashboard.stripe.com/test/products/create) page.\n- Enter a **Name** for the product.\n- Enter **15** for the price.\n- Select **EUR** as the currency.\n- Click **Save product**.\n\nAfter you create the product and the price, record the price ID so you can use\nit in subsequent steps. The pricing page displays the ID and it looks similar to\nthis: `price_G0FvDp6vZvdwRZ`.\n\n[Create or retrieve a Customer before\nsetupServer-side](https://docs.stripe.com/billing/subscriptions/paypal#web-create-a-customer)\nTo reuse a PayPal payment method for future payments, attach it to a\n[Customer](https://docs.stripe.com/api/customers).\n\nCreate a Customer object when a customer creates an account on your business.\nAssociating the ID of the Customer object with your own internal representation\nof a customer lets you retrieve and use the stored payment method details later.\nIf the customer hasn’t created an account, you can still create a Customer\nobject now and associate it with your internal representation of the customer’s\naccount later.\n\n```\ncurl -X POST https://api.stripe.com/v1/customers \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\"\n```\n\n[Create a\nSetupIntentServer-side](https://docs.stripe.com/billing/subscriptions/paypal#web-create-setup-intent)\nA [SetupIntent](https://docs.stripe.com/api/setup_intents) is an object that\nrepresents your intent and tracks the steps to set up your customer’s payment\nmethod for future payments.\n\nCreate a [SetupIntent](https://docs.stripe.com/api/setup_intents) on your server\nwith\n[payment_method_types](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-payment_method_types)\nset to `paypal` and specify the\n[Customer](https://docs.stripe.com/api/customers)’s\n[id](https://docs.stripe.com/api/customers/object#customer_object-id).\n\n```\ncurl https://api.stripe.com/v1/setup_intents \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d customer={{CUSTOMER_ID}} \\\n -d \"payment_method_types[]\"=paypal \\\n -d \"payment_method_data[type]\"=paypal\n```\n\nThe SetupIntent object contains a\n[client_secret](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-client_secret),\na unique key that you need to pass to Stripe on the client side to redirect your\nbuyer to PayPal and authorize the mandate.\n\n[Redirect your\ncustomerClient-side](https://docs.stripe.com/billing/subscriptions/paypal#web-confirm-setup-intent)\nWhen a customer attempts to set up their PayPal account for future payments, we\nrecommend you use [Stripe.js](https://docs.stripe.com/js) to confirm the\nSetupIntent. Stripe.js is our foundational JavaScript library for building\npayment flows. It will automatically handle complexities like the redirect\ndescribed below, and enables you to easily extend your integration to other\npayment methods in the future.\n\nInclude the Stripe.js script on your checkout page by adding it to the head of\nyour HTML file.\n\n```\n<head>\n <title>Checkout</title>\n <script src=\"https://js.stripe.com/v3/\"></script>\n</head>\n```\n\nCreate an instance of Stripe.js with the following JavaScript on your checkout\npage.\n\n```\n// Set your publishable key. Remember to change this to your live publishable\nkey in production!\n// See your keys here: https://dashboard.stripe.com/apikeys\nconst stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx',\n {}\n);\n```\n\nTo confirm the setup on the client side, pass the client secret of the\nSetupIntent object that you created in Step 3.\n\nThe client secret is different from your API keys that authenticate Stripe API\nrequests. It should still be handled carefully because it can complete the\ncharge. Do not log it, embed it in URLs, or expose it to anyone but the\ncustomer.\n\n### Confirm PayPal Setup\n\nTo authorize you to use their PayPal account for future payments, your customer\nwill be redirected to a PayPal billing agreement page, which they will need to\napprove before being redirected back to your website. Use\n[stripe.confirmPayPalSetup](https://docs.stripe.com/js/setup_intents/confirm_paypal_setup)\nto handle the redirect away from your page and to complete the setup. Add a\n`return_url` to this function to indicate where Stripe should redirect the user\nto after they approve the billing agreement on PayPal’s website.\n\n```\n// Redirects away from the client\nconst {error} = await stripe.confirmPayPalSetup(\n '{{SETUP_INTENT_CLIENT_SECRET}}',\n {\n return_url: 'https://example.com/setup/complete',\n mandate_data: {\n customer_acceptance: {\n type: 'online',\n online: {\n infer_from_client: true\n }\n }\n },\n }\n);\n\nif (error) {\n // Inform the customer that there was an error.\n}\n```\n\nYou can find the Payment Method owner’s email, payer ID, and Billing Agreement\nID on the resulting [Mandate](https://docs.stripe.com/api/mandates/) under the\n[payment_method_details](https://docs.stripe.com/api/mandates/object#mandate_object-payment_method_details-paypal)\nproperty. You can also find the buyer’s email and payer ID in the\n[paypal](https://docs.stripe.com/api/payment_methods/object#payment_method_object-paypal)\nproperty on the [PaymentMethod](https://docs.stripe.com/api/payment_methods).\n\nFieldValue`verified_email`The email address of the payer on their PayPal\naccount.`payer_id`A unique ID of the payer’s PayPal\naccount.`billing_agreement_id`The PayPal Billing Agreement ID (BAID). This is an\nID generated by PayPal which represents the mandate between the business and the\ncustomer.[Monitor\nwebhooksServer-side](https://docs.stripe.com/billing/subscriptions/paypal#web-monitor-webhooks)\nUse a method such as\n[webhooks](https://docs.stripe.com/payments/payment-intents/verifying-status#webhooks)\nto confirm the billing agreement was authorized successfully by your customer,\ninstead of relying on your customer to return to the payment status page. When a\ncustomer successfully authorizes the billing agreement, the SetupIntent emits\nthe\n[setup_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-setup_intent.succeeded)\n[webhook](https://docs.stripe.com/webhooks) event. If a customer doesn’t\nsuccessfully authorize the billing agreement, the SetupIntent will emit the\n[setup_intent.setup_failed](https://docs.stripe.com/api/events/types#event_types-setup_intent.setup_failed)\nwebhook event and returns to a status of `requires_payment_method`. When a\ncustomer revokes the billing agreement from their PayPal account, the\n[mandate.updated](https://docs.stripe.com/api/events/types#event_types-mandate.updated)\nis emitted.\n\n[Create the\nsubscriptionServer-side](https://docs.stripe.com/billing/subscriptions/paypal#create-subscription-code)\nCreate a [subscription](https://docs.stripe.com/api/subscriptions) with the\nprice and customer:\n\n```\ncurl https://api.stripe.com/v1/subscriptions \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d customer=cus_Gk0uVzT2M4xOKD \\\n -d default_payment_method=pm_1F0c9v2eZvKYlo2CJDeTrB4n \\\n -d \"items[0][price]\"=price_F52b2UdntfQsfR \\\n -d \"expand[0]\"=\"latest_invoice.payment_intent\" \\\n -d off_session=true\n```\n\nCreating subscriptions automatically charges customers because the [default\npayment\nmethod](https://docs.stripe.com/api/customers/create#create_customer-invoice_settings-default_payment_method)\nis set. After a successful payment, the status in the [Stripe\nDashboard](https://dashboard.stripe.com/test/subscriptions) changes to\n**Active**. The price you created earlier determines subsequent billings.\n\n[Manage subscription\nstatusClient-side](https://docs.stripe.com/billing/subscriptions/paypal#manage-sub-status)\nIf the initial payment succeeds, the state of the subscription is `active` and\nno further action is needed. When payments fail, the status is changed to the\n**Subscription status** configured in your [automatic collection\nsettings](https://docs.stripe.com/invoicing/automatic-collection). Notify the\ncustomer on failure and [charge them with a different payment\nmethod](https://docs.stripe.com/billing/subscriptions/overview#requires-payment-method).\n\n[Update a\nsubscriptionServer-side](https://docs.stripe.com/billing/subscriptions/paypal#update-subscription)\nWhen you update a subscription, you need to specify `off_session=true`.\nOtherwise, any new payment requires a user redirection to PayPal for\nconfirmation. For example, if you want to change the quantity of an item\nincluded in the subscription you can use:\n\n```\ncurl https://api.stripe.com/v1/subscriptions \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d customer=cus_Gk0uVzT2M4xOKD \\\n -d default_payment_method=pm_1F0c9v2eZvKYlo2CJDeTrB4n \\\n -d \"items[0][price]\"=price_F52b2UdntfQsfR \\\n -d \"items[0][quantity]\"=2 \\\n -d off_session=true\n```\n\n[Test the\nintegration](https://docs.stripe.com/billing/subscriptions/paypal#test-integration)\nTest your PayPal integration with your [test API\nkeys](https://docs.stripe.com/keys#test-live-modes) by viewing the redirect\npage. You can test the successful payment case by authenticating the payment on\nthe redirect page. The PaymentIntent will transition from `requires_action` to\n`succeeded`.\n\nTo test the case where the user fails to authenticate, use your test API keys\nand view the redirect page. On the redirect page, click **Fail test payment**.\nThe PaymentIntent will transition from `requires_action` to\n`requires_payment_method`.\n\n[OptionalSetting the billing\ncycle](https://docs.stripe.com/billing/subscriptions/paypal#billing-cycle)[OptionalSubscription\ntrials](https://docs.stripe.com/billing/subscriptions/paypal#trial-periods)[OptionalRemove\na saved PayPal\naccount](https://docs.stripe.com/billing/subscriptions/paypal#payment-method-detatch)\n\n## Links\n\n- [enable PayPal recurring\npayments](https://docs.stripe.com/payments/paypal/set-up-future-payments?platform=web#enable-recurring-payments-support-from-stripe-dashboard)\n- [subscription](https://docs.stripe.com/billing/subscriptions/creating)\n- [PayPal](https://docs.stripe.com/payments/paypal)\n- [Products](https://docs.stripe.com/api/products)\n- [Prices](https://docs.stripe.com/api/prices)\n- [Add a product](https://dashboard.stripe.com/test/products/create)\n- [Customer](https://docs.stripe.com/api/customers)\n- [SetupIntent](https://docs.stripe.com/api/setup_intents)\n-\n[payment_method_types](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-payment_method_types)\n- [id](https://docs.stripe.com/api/customers/object#customer_object-id)\n-\n[client_secret](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-client_secret)\n- [Stripe.js](https://docs.stripe.com/js)\n- [https://js.stripe.com/v3/](https://js.stripe.com/v3/)\n- [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys)\n-\n[stripe.confirmPayPalSetup](https://docs.stripe.com/js/setup_intents/confirm_paypal_setup)\n- [Mandate](https://docs.stripe.com/api/mandates/)\n-\n[payment_method_details](https://docs.stripe.com/api/mandates/object#mandate_object-payment_method_details-paypal)\n-\n[paypal](https://docs.stripe.com/api/payment_methods/object#payment_method_object-paypal)\n- [PaymentMethod](https://docs.stripe.com/api/payment_methods)\n-\n[webhooks](https://docs.stripe.com/payments/payment-intents/verifying-status#webhooks)\n-\n[setup_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-setup_intent.succeeded)\n- [webhook](https://docs.stripe.com/webhooks)\n-\n[setup_intent.setup_failed](https://docs.stripe.com/api/events/types#event_types-setup_intent.setup_failed)\n-\n[mandate.updated](https://docs.stripe.com/api/events/types#event_types-mandate.updated)\n- [subscription](https://docs.stripe.com/api/subscriptions)\n- [default payment\nmethod](https://docs.stripe.com/api/customers/create#create_customer-invoice_settings-default_payment_method)\n- [Stripe Dashboard](https://dashboard.stripe.com/test/subscriptions)\n- [automatic collection\nsettings](https://docs.stripe.com/invoicing/automatic-collection)\n- [charge them with a different payment\nmethod](https://docs.stripe.com/billing/subscriptions/overview#requires-payment-method)\n- [test API keys](https://docs.stripe.com/keys#test-live-modes)",
  "metadata": {
    "title": "Set up a subscription with PayPal | Stripe Documentation",
    "description": "Learn how to create and charge for a subscription with PayPal.",
    "sourceURL": "https://docs.stripe.com/billing/subscriptions/paypal"
  }
}