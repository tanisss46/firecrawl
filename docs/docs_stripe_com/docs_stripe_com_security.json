{
  "content": "# Security at Stripe\n\n## Learn how Stripe handles security.\n\n#### PCI 4.0 released\n\n[PCI DSS\nv4.0](https://docs-prv.pcisecuritystandards.org/PCI%20DSS/Standard/PCI-DSS-v3-2-1-to-v4-0-Summary-of-Changes-r2.pdf)\nreplaces v3.2.1 effective March 31, 2024. Stripe can help you understand how the\nrequirements for demonstrating your compliance might change. Read our [Guide to\nPCI compliance](https://stripe.com/ie/guides/pci-compliance) to get started.\n\nOur users trust Stripe with their sensitive data and rely on us to be good\ncustodians of their customers’ data as well. As a payments infrastructure\ncompany, our security posture continually evolves to meet the rigorous standards\nof the global financial industry.\n\n## Standards and regulations compliance\n\nStripe uses best-in-class security practices to maintain a high level of\nsecurity.\n\n### PCI-certified\n\nA PCI-certified auditor evaluated Stripe and certified us to [PCI Service\nProvider Level 1](https://usa.visa.com/splisting/splistinglearnmore.html). This\nis the most stringent level of certification available in the payments industry.\nThis audit includes both Stripe’s Card Data Vault (CDV) and the secure software\ndevelopment of our integration code.\n\nWe provide our users with features to automate some aspects of PCI compliance.\n\n- We analyze the user’s integration method and dynamically inform them of which\nPCI validation form to use.\n- If a user integrates with Stripe Elements, Checkout, Terminal SDKs, or our\nmobile libraries, we provide assistance in completing their PCI validation form\n([Self-Assessment Questionnaire\nA](https://www.pcisecuritystandards.org/pci_security/completing_self_assessment))\nin the Dashboard.\n- We publish a [PCI Compliance Guide](https://stripe.com/guides/pci-compliance)\nto help educate our users about PCI compliance and how Stripe can help.\n\n### System and Organization Controls (SOC) reports\n\nStripe’s systems, processes, and controls are regularly audited as part of our\nSOC 1 and SOC 2 compliance programs. SOC 1 and SOC 2 Type II reports are\nproduced annually and can be provided upon request.\n\nThe Auditing Standards Board of the American Institute of Certified Public\nAccountants’ ([AICPA](https://www.aicpa.org/)) Trust Service Criteria (TSC)\ndeveloped the SOC 3 report. Stripe’s SOC 3 is a public report of internal\ncontrols over security, availability, and confidentiality. [View our recent SOC\n3\nreport](https://d37ugbyn3rpeym.cloudfront.net/docs/security/2023-Stripe-Payment-Processing-SOC3.pdf).\n\n### EMVCo standard for card terminals\n\nStripe Terminal is certified to the [EMVCo Level 1 and\n2](https://www.emvco.com/approved-products/?search_bar_keywords=bbpos&tax%5Bapproved-products_categories%5D%5B90%5D%5B%5D=94%2C95%2C96%2C97%2C99)\nstandards of EMV® Specifications for card and terminal security and\ninteroperability. Terminal is also certified to the [PCI Payment Application\nData Security Standard](https://en.wikipedia.org/wiki/PA-DSS) (PA-DSS)—the\nglobal security standard that aims to prevent payment applications developed for\nthird parties from storing prohibited secure data.\n\n### NIST Cybersecurity Framework\n\nStripe’s suite of information security policies and their overarching design are\naligned with the [NIST Cybersecurity\nFramework](https://www.nist.gov/cyberframework/new-framework). Our security\npractices meet the standards of our enterprise customers who must provide secure\nproducts like on-demand cloud computing and storage platforms (for example,\nDigitalOcean and Slack).\n\n### Privacy and data protection\n\nStripe’s privacy practices comply with CBPR and PRP systems as evidenced by the\nCBPR and PRP certifications Stripe has obtained. To view the status of our\ncertifications, please click\n[here](https://privacy.trustarc.com/privacy-seal/validation?rid=31b93f92-8732-402c-9768-f15aabc763f4)\n(CBPR) and\n[here](https://privacy.trustarc.com/privacy-seal/validation?rid=712f8b7a-6d3c-4484-9522-3bf21d56818a)\n(PRP). Stripe also complies with the U.S. Data Privacy Framework (“EU-U.S.\nDPF”), the UK Extension to the EU-U.S. DPF, and the Swiss-U.S. Data Privacy\nFramework as set forth by the U.S. Department of Commerce. To view our\ncertifications, please see\n[here](https://www.dataprivacyframework.gov/s/participant-search/participant-detail?id=a2zt0000000TQOUAA4&status=Active).\n\nWe continuously implement evolving privacy and data protection processes,\nprocedures, and best practices under all applicable privacy and data protection\nregimes. For more information, see the following resources:\n\n- [Privacy Policy](https://stripe.com/privacy)\n- [Privacy Center](https://stripe.com/en-ca/legal/privacy-center)\n- [Data Processing Agreement](https://stripe.com/legal/dpa)\n\n## Stripe product securement\n\nSecurity is one of Stripe’s guiding principles for all our product design and\ninfrastructure decisions. We offer a range of features to help our users better\nprotect their Stripe data.\n\n### Sensitive action authentication\n\nThe Stripe Dashboard supports several forms of [multi-factor\nauthentication](https://support.stripe.com/questions/enable-two-step-authentication)\n(MFA) including:\n[SMS](https://support.stripe.com/questions/enable-two-step-authentication-via-text-messaging),\n[time-based one-time password\nalgorithm](https://support.stripe.com/questions/enable-two-step-authentication-using-a-mobile-app)\n(TOTP), [hardware security\nkeys](https://support.stripe.com/questions/set-up-a-hardware-security-key-for-two-step-authentication),\nand [passkeys](https://support.stripe.com/questions/sign-in-using-a-passkey). We\nalso support [single sign-on](https://docs.stripe.com/get-started/account/sso)\nthrough Security Assertion Markup Language (SAML) 2.0, allowing customers to\nmandate sign-in requirements, configure access control, and instantly onboard\nteam members through Just-in-Time account provisioning.\n\nSupport requests from users must be authenticated by sending the request from\nthe Dashboard (after login) or by verifying account access before a support\nresponse is proffered. By requiring authentication, we minimize the risk of\nproviding any information to non-authorized people.\n\n### Access restriction and auditing\n\nFrom the Dashboard, users can assign different detailed\n[roles](https://docs.stripe.com/get-started/account/teams) to enable\nleast-privilege access for their employees, and create [restricted access\nkeys](https://docs.stripe.com/keys#limit-access) to reduce the security and\nreliability risk of API key exposure.\n\nUsers can also view audit logs of important account changes and activity in\ntheir [security history](https://dashboard.stripe.com/security_history). These\naudit logs contain records of sensitive account activity, like logging in or\nchanging bank account information. We monitor logins and note:\n\n- If they’re from the same or usual devices\n- If they’re from consistent IP addresses\n- Failed attempts\n\nUsers can export historical information from the logs. For time-sensitive\nactivities, such as logins from unknown IPs and devices, we send automatic\nnotifications so that logs don’t need to be reviewed manually.\n\n### HTTPS and HSTS for secure connections\n\nWe mandate the use of HTTPS for all services using\n[TLS](https://docs.stripe.com/security/guide#tls) (SSL), including our public\nwebsite and the [Dashboard](https://dashboard.stripe.com/dashboard). We\nregularly audit the details of our implementation, including the certificates we\nserve, the certificate authorities we use, and the ciphers we support. We use\n[HSTS](http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security) to make sure\nthat browsers interact with Stripe only over HTTPS. Stripe is also on the HSTS\npreloaded lists for all modern major browsers.\n\nAll server-to-sever communication is encrypted using mutual transport layer\nsecurity (mTLS) and Stripe has dedicated [PGP\nkeys](https://docs.stripe.com/security/python-client-pgp-key) for users to\nencrypt communications with Stripe, or verify signed messages they receive from\nStripe. Our systems automatically block requests made using older, less secure\nversions of TLS, [requiring use of at least TLS\n1.2](https://stripe.com/blog/completing-tls-upgrade).\n\nThe [stripe.com](https://stripe.com/) domain, including the Dashboard and API\nsubdomains, are on the [top\ndomains](https://chromium-review.googlesource.com/c/chromium/src/+/605062) list\nfor Chrome, providing extra protection against homoglyph attacks. This makes it\nharder to create fake pages that look like stripe.com in Chrome (for example,\n[strípe.com](https://xn--strpe-1sa.com/)), which renders as punycode\n([xn–strpe-1sa.com](https://xn--strpe-1sa.com/)), in turn making it harder for\nStripe credentials to be phished.\n\n### Proactive internet monitoring\n\nWe proactively scan the internet for our merchants’ API keys. If we find a\ncompromised key, we take appropriate action, advising the user to roll their API\nkey. We use the GitHub Token Scanner to alert us when a user’s API keys have\nbeen leaked on GitHub. If we find external phishing pages that might catch our\nusers, we work proactively with our vendors to take those down and report them\nto Google Safe Browsing.\n\n## Infrastructure safeguards\n\nOur security teams test our infrastructure regularly by scanning for\nvulnerabilities and conducting penetration tests and red team exercises. We hire\nindustry-leading security companies to perform third-party scans of our systems,\nand we immediately address their findings. Our servers are frequently and\nautomatically replaced to maintain server health and discard stale connections\nor resources. Server operating systems are upgraded well in advance of their\nsecurity end of life (EOL) date.\n\n### Dedicated card technology\n\nStripe encrypts sensitive data both in transit and at rest. Stripe’s\ninfrastructure for storing, decrypting, and transmitting primary account numbers\n(PANs), such as credit card numbers, runs in a separate hosting infrastructure,\nand doesn’t share any credentials with the rest of our services. A dedicated\nteam manages our CDV in an isolated Amazon Web Services (AWS) environment that’s\nseparate from the rest of Stripe’s infrastructure. Access to this separate\nenvironment is restricted to a small number of specially trained engineers and\naccess is reviewed quarterly.\n\nAll card numbers are encrypted at rest with AES-256. Decryption keys are stored\non separate machines. We tokenize PANs internally, isolating raw numbers from\nthe rest of our infrastructure. None of Stripe’s internal servers and daemons\ncan obtain plain text card numbers but can request that cards are sent to a\nservice provider on a static allowlist. Stripe’s infrastructure for storing,\ndecrypting, and transmitting card numbers runs in a separate hosting\nenvironment, and doesn’t share any credentials with Stripe’s primary services\nincluding our API and website. It’s not just PANs that are tokenized this way;\nwe treat other sensitive data, like bank account information, in a similar way.\n\n### Corporate technology\n\nStripe takes a zero-trust approach to employee access management. Employees are\nauthenticated leveraging SSO, two-factor authentication (2FA) using a\nhardware-based token, and mTLS through a cryptographic certificate on\nStripe-issued machines. After connecting to the network, sensitive internal\nsystems and those outside the scope of the employee’s standard work require\nadditional access permissions.\n\nWe monitor audit logs to detect abnormalities and watch for intrusions and\nsuspicious activity, and also monitor changes to sensitive files in our code\nbase. All of Stripe’s code goes through multiparty review and automated testing.\nCode changes are recorded in an immutable, tamper-evident log. We constantly\ncollect information about Stripe-issued laptops to monitor for malicious\nprocesses, connections to fraudulent domains, and intruder activity. We have a\ncomprehensive process for allowlisting permitted software on employee laptops,\npreventing the installation of non-approved applications.\n\n## Security posture maintenance\n\nOur developers work with security experts early in a project’s life cycle. As\npart of our Security Review process, security experts develop threat models and\ntrust boundaries that help guide the implementation of the project. Developers\nuse this same process to make changes to sensitive pieces of code.\n\n### Dedicated experts on-call\n\nWe have a number of dedicated security teams that specialize in different areas\nof security, including infrastructure, operations, privacy, users, and\napplications. Security experts are available 24/7 through on-call rotations.\nWe’re focused on constantly raising the bar on best practices to minimize\ncybersecurity risks.\n\n### Security is every Stripe employee’s job\n\nWe require every Stripe employee to complete security education annually, and we\nprovide secure software development training to Stripe engineers. We run\ninternal phishing campaigns to test everyone at Stripe on recognizing phishing\nattempts and flagging them to the appropriate security team.\n\n### Managing access control\n\nWe have a formal process for granting access to systems and information; we\nregularly review and automatically remove inactive access. Actions within the\nmost sensitive areas of the infrastructure need a human review. To enable best\npractices for access control, our security experts build primitives to assist\nStripe teams in implementing the principle of least privilege. To minimize our\nexposure, we have a data retention policy that minimizes the data we keep while\ncomplying with regulatory and business requirements.\n\n### Vulnerability disclosure and reward program\n\nWe maintain a vulnerability disclosure and reward (“bug bounty”) program that\ncompensates independent security researchers who help us keep our users safe. By\nsubmitting a security bug or vulnerability to Stripe through\n[HackerOne](https://hackerone.com/stripe), you acknowledge that you’ve read and\nagreed to the [program terms and conditions](https://hackerone.com/stripe).\nRefer to our policy on HackerOne for more information on how to participate in\nour bug bounty program.\n\n## See also\n\n- [Integration security guide](https://docs.stripe.com/security/guide)\n- [Single sign-on (SSO)](https://docs.stripe.com/get-started/account/sso)\n- [Fighting fraud](https://docs.stripe.com/disputes/prevention)\n\n## Links\n\n- [PCI DSS\nv4.0](https://docs-prv.pcisecuritystandards.org/PCI%20DSS/Standard/PCI-DSS-v3-2-1-to-v4-0-Summary-of-Changes-r2.pdf)\n- [Guide to PCI compliance](https://stripe.com/ie/guides/pci-compliance)\n- [PCI Service Provider Level\n1](https://usa.visa.com/splisting/splistinglearnmore.html)\n- [Self-Assessment Questionnaire\nA](https://www.pcisecuritystandards.org/pci_security/completing_self_assessment)\n- [PCI Compliance Guide](https://stripe.com/guides/pci-compliance)\n- [AICPA](https://www.aicpa.org/)\n- [View our recent SOC 3\nreport](https://d37ugbyn3rpeym.cloudfront.net/docs/security/2023-Stripe-Payment-Processing-SOC3.pdf)\n- [EMVCo Level 1 and\n2](https://www.emvco.com/approved-products/?search_bar_keywords=bbpos&tax%5Bapproved-products_categories%5D%5B90%5D%5B%5D=94%2C95%2C96%2C97%2C99)\n- [PCI Payment Application Data Security\nStandard](https://en.wikipedia.org/wiki/PA-DSS)\n- [NIST Cybersecurity\nFramework](https://www.nist.gov/cyberframework/new-framework)\n-\n[here](https://privacy.trustarc.com/privacy-seal/validation?rid=31b93f92-8732-402c-9768-f15aabc763f4)\n-\n[here](https://privacy.trustarc.com/privacy-seal/validation?rid=712f8b7a-6d3c-4484-9522-3bf21d56818a)\n-\n[here](https://www.dataprivacyframework.gov/s/participant-search/participant-detail?id=a2zt0000000TQOUAA4&status=Active)\n- [Privacy Policy](https://stripe.com/privacy)\n- [Privacy Center](https://stripe.com/en-ca/legal/privacy-center)\n- [Data Processing Agreement](https://stripe.com/legal/dpa)\n- [multi-factor\nauthentication](https://support.stripe.com/questions/enable-two-step-authentication)\n-\n[SMS](https://support.stripe.com/questions/enable-two-step-authentication-via-text-messaging)\n- [time-based one-time password\nalgorithm](https://support.stripe.com/questions/enable-two-step-authentication-using-a-mobile-app)\n- [hardware security\nkeys](https://support.stripe.com/questions/set-up-a-hardware-security-key-for-two-step-authentication)\n- [passkeys](https://support.stripe.com/questions/sign-in-using-a-passkey)\n- [single sign-on](https://docs.stripe.com/get-started/account/sso)\n- [roles](https://docs.stripe.com/get-started/account/teams)\n- [restricted access keys](https://docs.stripe.com/keys#limit-access)\n- [security history](https://dashboard.stripe.com/security_history)\n- [TLS](https://docs.stripe.com/security/guide#tls)\n- [Dashboard](https://dashboard.stripe.com/dashboard)\n- [HSTS](http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security)\n- [PGP keys](https://docs.stripe.com/security/python-client-pgp-key)\n- [requiring use of at least TLS\n1.2](https://stripe.com/blog/completing-tls-upgrade)\n- [stripe.com](https://stripe.com)\n- [top\ndomains](https://chromium-review.googlesource.com/c/chromium/src/+/605062)\n- [strípe.com](https://xn--strpe-1sa.com)\n- [HackerOne](https://hackerone.com/stripe)\n- [Integration security guide](https://docs.stripe.com/security/guide)\n- [Fighting fraud](https://docs.stripe.com/disputes/prevention)",
  "metadata": {
    "title": "Security at Stripe | Stripe Documentation",
    "description": "Learn how Stripe handles security.",
    "sourceURL": "https://docs.stripe.com/security"
  }
}