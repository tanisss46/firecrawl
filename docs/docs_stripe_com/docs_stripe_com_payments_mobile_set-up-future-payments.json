{
  "content": "# Set up future payments\n\n## Learn how to save payment details in your mobile app and charge your customers later.\n\niOSAndroidReact Native\nThe [Setup Intents API](https://docs.stripe.com/api/setup_intents) lets you save\na customer’s payment details without an initial payment. This is helpful if you\nwant to onboard customers now, set them up for payments, and charge them in the\nfuture—when they’re offline.\n\nUse this integration to set up recurring payments or to create one-time payments\nwith a final amount determined later, often after the customer receives your\nservice.\n\n#### Card-present transactions\n\nCard-present transactions, such as collecting card details through Stripe\nTerminal, use a different process for saving the payment method. For details,\nsee [the Terminal\ndocumentation](https://docs.stripe.com/terminal/features/saving-cards/save-cards-directly).\n\n## Compliance\n\nYou’re responsible for your compliance with all applicable laws, regulations,\nand network rules when saving a customer’s payment details. These requirements\ngenerally apply if you want to save your customer’s payment method for future\nuse, such as displaying a customer’s payment method to them in the checkout flow\nfor a future purchase or charging them when they’re not actively using your\nwebsite or app. Add terms to your website or app that state how you plan to save\npayment method details and allow customers to opt in.\n\nWhen you save a payment method, you can only use it for the specific usage you\nhave included in your terms. To charge a payment method when a customer is\noffline and save it as an option for future purchases, make sure that you\nexplicitly collect consent from the customer for this specific use. For example,\ninclude a “Save my payment method for future use” checkbox to collect consent.\n\nTo charge them when they’re offline, make sure your terms include the following:\n\n- The customer’s agreement to your initiating a payment or a series of payments\non their behalf for specified transactions.\n- The anticipated timing and frequency of payments (for example, if the charges\nare for scheduled installments, subscription payments, or unscheduled top-ups).\n- How you determine the payment amount.\n- Your cancellation policy, if the payment method is for a subscription service.\n\nMake sure you keep a record of your customer’s written agreement to these terms.\n\n#### Note\n\nIf you need to use manual server-side confirmation or your integration requires\npresenting payment methods separately, see our [alternative\nguide](https://docs.stripe.com/payments/save-and-reuse-cards-only).\n\n!\n\nIntegrate Stripe’s prebuilt payment UI into the checkout of your iOS app with\nthe\n[PaymentSheet](https://stripe.dev/stripe-ios/stripe-paymentsheet/Classes/PaymentSheet.html)\nclass. See our sample integration [on\nGitHub](https://github.com/stripe/stripe-ios/tree/master/Example/PaymentSheet%20Example).\n\n[Set up\nStripeServer-sideClient-side](https://docs.stripe.com/payments/mobile/set-up-future-payments#setup)\nFirst, you need a Stripe account. [Register\nnow](https://dashboard.stripe.com/register).\n\n### Server-side\n\nThis integration requires endpoints on your server that talk to the Stripe API.\nUse our official libraries for access to the Stripe API from your server:\n\n```\n# Available as a gem\nsudo gem install stripe\n```\n\n```\n# If you use bundler, you can add this line to your Gemfile\ngem 'stripe'\n```\n\n### Client-side\n\nThe [Stripe iOS SDK](https://github.com/stripe/stripe-ios) is open source,\n[fully documented](https://stripe.dev/stripe-ios/index.html), and compatible\nwith apps supporting iOS 13 or above.\n\nSwift Package ManagerCocoaPodsCarthageManual Framework\nTo install the SDK, follow these steps:\n\n- In Xcode, select **File** > **Add Package Dependencies…** and enter\n`https://github.com/stripe/stripe-ios-spm` as the repository URL.\n- Select the latest version number from our [releases\npage](https://github.com/stripe/stripe-ios/releases).\n- Add the **StripePaymentSheet** product to the [target of your\napp](https://developer.apple.com/documentation/swift_packages/adding_package_dependencies_to_your_app).\n\n#### Note\n\nFor details on the latest SDK release and past versions, see the\n[Releases](https://github.com/stripe/stripe-ios/releases) page on GitHub. To\nreceive notifications when a new release is published, [watch\nreleases](https://help.github.com/en/articles/watching-and-unwatching-releases-for-a-repository#watching-releases-for-a-repository)\nfor the repository.\n\n[Add an\nendpointServer-side](https://docs.stripe.com/payments/mobile/set-up-future-payments#add-server-endpoint)\n#### Note\n\nThe mobile Payment Element only supports SetupIntents with cards, Bancontact,\niDEAL, Link, SEPA Direct Debit, Sofort, and US bank accounts.\n\nThis integration uses three Stripe API objects:\n\n- A [SetupIntent](https://docs.stripe.com/api/setup_intents) is an object that\nrepresents your intent to set up a customer’s payment method for future\npayments. The payment methods shown to customers during the checkout process are\nalso included on the SetupIntent. You can let Stripe automatically pull payment\nmethods from your Dashboard settings or you can list them manually.\n- A [Customer](https://docs.stripe.com/api/customers). To set up a payment\nmethod for future payments, it must be attached to a Customer. Create a Customer\nobject when your customer creates an account with your business. If your\ncustomer is making a payment as a guest, you can create a Customer object before\npayment and associate it with your own internal representation of the customer’s\naccount later.\n- A Customer Ephemeral Key (optional). Information on the Customer object is\nsensitive, and can’t be retrieved directly from an app. An Ephemeral Key grants\nthe SDK temporary access to the Customer.\n\nFor security reasons, your app can’t create these objects. Instead, add an\nendpoint on your server that:\n\n- Retrieves the Customer, or creates a new one.\n- Creates an Ephemeral Key for the Customer.\n- Creates a SetupIntent with the Customer ID.\n- Returns the SetupIntent’s [client\nsecret](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-client_secret),\nthe Ephemeral Key’s `secret`, the Customer’s\n[ID](https://docs.stripe.com/api/customers/object#customer_object-id), and your\n[publishable key](https://dashboard.stripe.com/apikeys) to your app.\n\nThe payment methods shown to customers during the checkout process are also\nincluded on the SetupIntent. You can let Stripe automatically pull payment\nmethods from your Dashboard settings or you can list them manually.\n\nManage payment methods from the DashboardListing payment methods manually\nYou can manage payment methods from the\n[Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe\nhandles the return of eligible payment methods based on factors such as the\ntransaction’s amount, currency, and payment flow.\n\n```\n# Create a Customer (use an existing Customer ID if this is a returning customer)\ncurl https://api.stripe.com/v1/customers \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -X \"POST\"\n\n# Create an Ephemeral Key for the Customer\ncurl https://api.stripe.com/v1/ephemeral_keys \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -H \"Stripe-Version: 2025-02-24.acacia\" \\\n -X \"POST\" \\\n -d \"customer\"=\"{{CUSTOMER_ID}}\" \\\n\n# Create a SetupIntent\ncurl https://api.stripe.com/v1/setup_intents \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n# In the latest version of the API, specifying the `automatic_payment_methods`\nparameter\n # is optional because Stripe enables its functionality by default.\n -d \"customer\"=\"{{CUSTOMER_ID}}\" \\\n -d \"automatic_payment_methods[enabled]\"=true \\\n```\n\n[Collect payment\ndetailsClient-side](https://docs.stripe.com/payments/mobile/set-up-future-payments#collect-payment-details)\n#### Note\n\nTo display the mobile Payment Element before you create a SetupIntent, see\n[Collect payment details before creating an\nIntent](https://docs.stripe.com/payments/accept-a-payment-deferred?type=setup).\n\nTo display the mobile Payment Element on your checkout screen, you must add a\ncheckout button that displays Stripe’s UI components.\n\nUIKitSwiftUI\nIn your app’s checkout screen, fetch the SetupIntent client secret, Ephemeral\nKey secret, Customer ID, and publishable key from the endpoint you created in\nthe previous step. Set your publishable key using `StripeAPI.shared` and\ninitialize\n[PaymentSheet](https://stripe.dev/stripe-ios/stripe-paymentsheet/Classes/PaymentSheet.html).\n\n```\nimport UIKit\nimport StripePaymentSheet\n\nclass CheckoutViewController: UIViewController {\n @IBOutlet weak var checkoutButton: UIButton!\n var paymentSheet: PaymentSheet?\nlet backendCheckoutUrl = URL(string: \"Your backend endpoint/payment-sheet\")! //\nYour backend endpoint\n\n override func viewDidLoad() {\n super.viewDidLoad()\n\ncheckoutButton.addTarget(self, action: #selector(didTapCheckoutButton), for:\n.touchUpInside)\n checkoutButton.isEnabled = false\n\n// MARK: Fetch the SetupIntent client secret, Ephemeral Key secret, Customer ID,\nand publishable key\n var request = URLRequest(url: backendCheckoutUrl)\n request.httpMethod = \"POST\"\nlet task = URLSession.shared.dataTask(with: request, completionHandler: { [weak\nself] (data, response, error) in\n guard let data = data,\nlet json = try? JSONSerialization.jsonObject(with: data, options: []) as?\n[String : Any],\n let customerId = json[\"customer\"] as? String,\n let customerEphemeralKeySecret = json[\"ephemeralKey\"] as? String,\n let setupIntentClientSecret = json[\"setupIntent\"] as? String,\n let publishableKey = json[\"publishableKey\"] as? String,\n let self = self else {\n // Handle error\n return\n }\n\n STPAPIClient.shared.publishableKey = publishableKey\n // MARK: Create a PaymentSheet instance\n var configuration = PaymentSheet.Configuration()\n configuration.merchantDisplayName = \"Example, Inc.\"\nconfiguration.customer = .init(id: customerId, ephemeralKeySecret:\ncustomerEphemeralKeySecret)\n // Set `allowsDelayedPaymentMethods` to true if your business handles\n // delayed notification payment methods like US bank accounts.\n configuration.allowsDelayedPaymentMethods = true\nself.paymentSheet = PaymentSheet(setupIntentClientSecret:\nsetupIntentClientSecret, configuration: configuration)\n\n DispatchQueue.main.async {\n self.checkoutButton.isEnabled = true\n }\n })\n task.resume()\n }\n\n}\n```\n\nWhen the customer taps the **Checkout** button, call `present` to present the\nPaymentSheet. After the customer completes the payment, Stripe dismisses the\nPaymentSheet and calls the completion block with\n[PaymentSheetResult](https://stripe.dev/stripe-ios/stripe-paymentsheet/Enums/PaymentSheetResult.html).\n\n```\n@objc\nfunc didTapCheckoutButton() {\n // MARK: Start the checkout process\n paymentSheet?.present(from: self) { paymentResult in\n // MARK: Handle the payment result\n switch paymentResult {\n case .completed:\n print(\"Your order is confirmed\")\n case .canceled:\n print(\"Canceled!\")\n case .failed(let error):\n print(\"Payment failed: \\(error)\")\n }\n }\n}\n```\n\nIf `PaymentSheetResult` is `.completed`, inform the user (for example, by\ndisplaying an order confirmation screen).\n\nSetting `allowsDelayedPaymentMethods` to true allows [delayed\nnotification](https://docs.stripe.com/payments/payment-methods#payment-notification)\npayment methods like US bank accounts. For these payment methods, the final\npayment status isn’t known when the `PaymentSheet` completes, and instead\nsucceeds or fails later. If you support these types of payment methods, inform\nthe customer their order is confirmed and only fulfill their order (for example,\nship their product) when the payment is successful.\n\n[Set up a return\nURLServer-side](https://docs.stripe.com/payments/mobile/set-up-future-payments#set-up-return-url)\nThe customer might navigate away from your app to authenticate (for example, in\nSafari or their banking app). To allow them to automatically return to your app\nafter authenticating, [configure a custom URL\nscheme](https://developer.apple.com/documentation/xcode/defining-a-custom-url-scheme-for-your-app)\nand set up your app delegate to forward the URL to the SDK. Stripe doesn’t\nsupport [universal\nlinks](https://developer.apple.com/documentation/xcode/allowing-apps-and-websites-to-link-to-your-content).\n\nSceneDelegateAppDelegateSwiftUI\n```\n// This method handles opening custom URL schemes (for example,\n\"your-app://stripe-redirect\")\nfunc scene(_ scene: UIScene, openURLContexts URLContexts: Set<UIOpenURLContext>)\n{\n guard let url = URLContexts.first?.url else {\n return\n }\n let stripeHandled = StripeAPI.handleURLCallback(with: url)\n if (!stripeHandled) {\n // This was not a Stripe url – handle the URL normally as you would\n }\n}\n```\n\nAdditionally, set the\n[returnURL](https://stripe.dev/stripe-ios/stripe-paymentsheet/Classes/PaymentSheet/Configuration.html#/s:6Stripe12PaymentSheetC13ConfigurationV9returnURLSSSgvp)\non your\n[PaymentSheet.Configuration](https://stripe.dev/stripe-ios/stripe-paymentsheet/Classes/PaymentSheet/Configuration.html)\nobject to the URL for your app.\n\n```\nvar configuration = PaymentSheet.Configuration()\nconfiguration.returnURL = \"your-app://stripe-redirect\"\n```\n\n[Charge the saved payment method\nlaterServer-side](https://docs.stripe.com/payments/mobile/set-up-future-payments#charge-saved-payment-method)\n#### Compliance\n\nYou’re responsible for your compliance with all applicable laws, regulations,\nand network rules when saving a customer’s payment details. When rendering past\npayment methods to your end customer for future purchases, make sure you’re\nlisting payment methods where you’ve collected consent from the customer to save\nthe payment method details for this specific future use. To differentiate\nbetween payment methods attached to customers that can and can’t be presented to\nyour end customer as a saved payment method for future purchases, use the\n[allow_redisplay](https://docs.stripe.com/api/payment_methods/object#payment_method_object-allow_redisplay)\nparameter.\n\nWhen you’re ready to charge your customer off-session, use the Customer and\nPaymentMethod IDs to create a PaymentIntent. To find a payment method to charge,\nlist the payment methods associated with your customer. This example lists cards\nbut you can list any supported\n[type](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type).\n\n```\ncurl -G https://api.stripe.com/v1/payment_methods \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d customer={{CUSTOMER_ID}} \\\n -d type=card\n```\n\nWhen you have the Customer and PaymentMethod IDs, create a PaymentIntent with\nthe amount and currency of the payment. Set a few other parameters to make the\noff-session payment:\n\n- Set\n[off_session](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-off_session)\nto `true` to indicate that the customer isn’t in your checkout flow during a\npayment attempt and can’t fulfill an authentication request made by a partner,\nsuch as a card issuer, bank, or other payment institution. If, during your\ncheckout flow, a partner requests authentication, Stripe requests exemptions\nusing customer information from a previous on-session transaction. If the\nconditions for exemption aren’t met, the PaymentIntent might throw an error.\n- Set the value of the PaymentIntent’s\n[confirm](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-confirm)\nproperty to `true`, which causes confirmation to occur immediately when the\nPaymentIntent is created.\n- Set\n[payment_method](https://docs.stripe.com/api#create_payment_intent-payment_method)\nto the ID of the PaymentMethod and\n[customer](https://docs.stripe.com/api#create_payment_intent-customer) to the ID\nof the Customer.\n\n```\ncurl https://api.stripe.com/v1/payment_intents \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d amount=1099 \\\n -d currency=usd \\\n# In the latest version of the API, specifying the `automatic_payment_methods`\nparameter is optional because Stripe enables its functionality by default.\n -d \"automatic_payment_methods[enabled]\"=true \\\n -d customer=\"{{CUSTOMER_ID}}\" \\\n -d payment_method=\"{{PAYMENT_METHOD_ID}}\" \\\n -d return_url=\"https://example.com/order/123/complete\" \\\n -d off_session=true \\\n -d confirm=true\n```\n\n[Test the\nintegration](https://docs.stripe.com/payments/mobile/set-up-future-payments#test-the-integration)Payment\nmethodScenarioHow to testCredit cardThe card setup succeeds and doesn’t require\n[authentication](https://docs.stripe.com/strong-customer-authentication).Fill\nout the credit card form using the credit card number `4242 4242 4242 4242` with\nany expiration, CVC, and postal code.Credit cardThe card requires authentication\nfor the initial setup, then succeeds for subsequent payments.Fill out the credit\ncard form using the credit card number `4000 0025 0000 3155` with any\nexpiration, CVC, and postal code.Credit cardThe card requires authentication for\nthe initial setup and also requires authentication for subsequent payments.Fill\nout the credit card form using the credit card number `4000 0027 6000 3184` with\nany expiration, CVC, and postal code.Credit cardThe card is declined during\nsetup.Fill out the credit card form using the credit card number `4000 0000 0000\n9995` with any expiration, CVC, and postal code.[OptionalEnable Apple\nPay](https://docs.stripe.com/payments/mobile/set-up-future-payments#apple-pay)[OptionalEnable\ncard\nscanning](https://docs.stripe.com/payments/mobile/set-up-future-payments#card-scanning)[OptionalCustomize\nthe\nsheet](https://docs.stripe.com/payments/mobile/set-up-future-payments#customization)[OptionalComplete\npayment in your\nUI](https://docs.stripe.com/payments/mobile/set-up-future-payments#flowcontroller)\n\n## Links\n\n- [Setup Intents API](https://docs.stripe.com/api/setup_intents)\n- [the Terminal\ndocumentation](https://docs.stripe.com/terminal/features/saving-cards/save-cards-directly)\n- [alternative\nguide](https://docs.stripe.com/payments/save-and-reuse-cards-only)\n-\n[PaymentSheet](https://stripe.dev/stripe-ios/stripe-paymentsheet/Classes/PaymentSheet.html)\n- [on\nGitHub](https://github.com/stripe/stripe-ios/tree/master/Example/PaymentSheet%20Example)\n- [Register now](https://dashboard.stripe.com/register)\n- [Stripe iOS SDK](https://github.com/stripe/stripe-ios)\n- [fully documented](https://stripe.dev/stripe-ios/index.html)\n- [releases page](https://github.com/stripe/stripe-ios/releases)\n- [target of your\napp](https://developer.apple.com/documentation/swift_packages/adding_package_dependencies_to_your_app)\n- [watch\nreleases](https://help.github.com/en/articles/watching-and-unwatching-releases-for-a-repository#watching-releases-for-a-repository)\n- [Customer](https://docs.stripe.com/api/customers)\n- [client\nsecret](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-client_secret)\n- [ID](https://docs.stripe.com/api/customers/object#customer_object-id)\n- [publishable key](https://dashboard.stripe.com/apikeys)\n- [Dashboard](https://dashboard.stripe.com/settings/payment_methods)\n- [Collect payment details before creating an\nIntent](https://docs.stripe.com/payments/accept-a-payment-deferred?type=setup)\n-\n[PaymentSheetResult](https://stripe.dev/stripe-ios/stripe-paymentsheet/Enums/PaymentSheetResult.html)\n- [delayed\nnotification](https://docs.stripe.com/payments/payment-methods#payment-notification)\n- [configure a custom URL\nscheme](https://developer.apple.com/documentation/xcode/defining-a-custom-url-scheme-for-your-app)\n- [universal\nlinks](https://developer.apple.com/documentation/xcode/allowing-apps-and-websites-to-link-to-your-content)\n-\n[returnURL](https://stripe.dev/stripe-ios/stripe-paymentsheet/Classes/PaymentSheet/Configuration.html#/s:6Stripe12PaymentSheetC13ConfigurationV9returnURLSSSgvp)\n-\n[PaymentSheet.Configuration](https://stripe.dev/stripe-ios/stripe-paymentsheet/Classes/PaymentSheet/Configuration.html)\n-\n[allow_redisplay](https://docs.stripe.com/api/payment_methods/object#payment_method_object-allow_redisplay)\n-\n[type](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type)\n-\n[off_session](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-off_session)\n-\n[confirm](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-confirm)\n-\n[payment_method](https://docs.stripe.com/api#create_payment_intent-payment_method)\n- [customer](https://docs.stripe.com/api#create_payment_intent-customer)\n- [authentication](https://docs.stripe.com/strong-customer-authentication)",
  "metadata": {
    "title": "Set up future payments | Stripe Documentation",
    "description": "Learn how to save payment details in your mobile app and charge your customers later.",
    "sourceURL": "https://docs.stripe.com/payments/mobile/set-up-future-payments"
  }
}