{
  "content": "# React Stripe.js reference\n\n## Learn about React components for Stripe.js and Stripe Elements.\n\nReact Stripe.js is a thin wrapper around [Stripe\nElements](https://docs.stripe.com/payments/elements). It allows you to add\nElements to any React app.\n\nThe [Stripe.js\nreference](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options)\ncovers complete Elements customization details.\n\nYou can use Elements with any Stripe product to collect online payments. To find\nthe right integration path for your business, [explore our\ndocs](https://docs.stripe.com/).\n\n#### Note\n\nThis reference covers the full React Stripe.js API. If you prefer to learn by\ndoing, check out our documentation on [accepting a\npayment](https://docs.stripe.com/payments/accept-a-payment?platform=web) or take\na look at a [sample integration](https://docs.stripe.com/payments/quickstart).\n\n## Before you begin\n\nThis doc assumes that you already have a basic working knowledge of\n[React](https://reactjs.org/) and that you have already set up a React project.\nIf you’re new to React, we recommend that you take a look at the [Getting\nStarted](https://react.dev/learn) guide before continuing.\n\n## Setup\n\nnpmumd\nInstall [React Stripe.js](https://www.npmjs.com/package/@stripe/react-stripe-js)\nand the [Stripe.js loader](https://www.npmjs.com/package/@stripe/stripe-js) from\nthe npm public registry.\n\n```\nnpm install --save @stripe/react-stripe-js @stripe/stripe-js\n```\n\n## Elements provider\n\nThe `Elements` provider allows you to use [Element\ncomponents](https://docs.stripe.com/sdks/stripejs-react#element-components) and\naccess the [Stripe object](https://docs.stripe.com/js/initializing) in any\nnested component. Render an `Elements` provider at the root of your React app so\nthat it is available everywhere you need it.\n\nTo use the `Elements` provider, call\n[loadStripe](https://github.com/stripe/stripe-js/blob/master/README.md#loadstripe)\nfrom `@stripe/stripe-js` with your publishable key. The `loadStripe` function\nasynchronously loads the Stripe.js script and initializes a Stripe object. Pass\nthe returned `Promise` to `Elements`.\n\n```\nimport {Elements} from '@stripe/react-stripe-js';\nimport {loadStripe} from '@stripe/stripe-js';\n\n// Make sure to call `loadStripe` outside of a component’s render to avoid\n// recreating the `Stripe` object on every render.\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nexport default function App() {\n const options = {\n // passing the client secret obtained from the server\n clientSecret: '{{CLIENT_SECRET}}',\n };\n\n return (\n <Elements stripe={stripePromise} options={options}>\n <CheckoutForm />\n </Elements>\n );\n};\n```\n\npropdescription\n`stripe`\n\nrequired `Stripe | null | Promise<Stripe | null>`\n\nA [Stripe object](https://docs.stripe.com/js/initializing) or a `Promise`\nresolving to a Stripe object. The easiest way to initialize a Stripe object is\nwith the [Stripe.js wrapper\nmodule](https://github.com/stripe/stripe-js/blob/master/README.md#readme). After\nyou set this prop, you can’t change it.\n\nYou can also pass in `null` or a `Promise` resolving to `null` if you’re\nperforming an initial server-side render or when generating a static site.\n\n`options`\n\noptional `Object`\n\nOptional Elements configuration options. [See available\noptions](https://docs.stripe.com/js/elements_object/create#stripe_elements-options).\nTo create Payment Elements, you must include the Intent’s `clientSecret` unless\n[you render the element before creating the\nIntent](https://docs.stripe.com/payments/accept-a-payment-deferred?platform=web).\n\nBecause props are immutable, you can’t change `options` after setting it.\nHowever, you can change the appearance of an element by calling the\n[elements.update](https://docs.stripe.com/js/elements_object/update#elements_update-options-appearance)\nmethod.\n\n## Element components\n\nElement components provide a flexible way to securely collect payment\ninformation in your React app.\n\nYou can mount individual Element components inside of your `Elements` tree. Note\nthat you can only mount one of each type of Element in a single `<Elements>`\ngroup.\n\n```\nimport {PaymentElement} from '@stripe/react-stripe-js';\n\nconst CheckoutForm = () => {\n return (\n <form>\n <PaymentElement />\n <button>Submit</button>\n </form>\n );\n};\n\nexport default CheckoutForm;\n```\n\nprop description\n`id`\n\noptional `string`\n\nPasses through to the [Element’s\ncontainer](https://docs.stripe.com/js/element/the_element_container).\n\n`className`\n\noptional `string`\n\nPasses through to the [Element’s\ncontainer](https://docs.stripe.com/js/element/the_element_container).\n\n`options`\n\noptional `Object`\n\nAn object containing Element configuration options. [See available\noptions](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options)\nfor the Payment Element or [available\noptions](https://docs.stripe.com/js/elements_object/create_element?type=card#elements_create-options)\nfor individual payment method Elements.\n\n`onBlur`\n\noptional `() => void`\n\nTriggered when the Element loses focus.\n\n`onChange`\n\noptional `(event: Object) => void`\n\nTriggered when data exposed by this Element is changed (for example, when there\nis an error).\n\nFor more information, refer to the [Stripe.js\nreference](https://docs.stripe.com/js/element/events/on_change?type=paymentElement#element_on_change-handler).\n\n`onClick`\n\noptional `(event: Object) => void`\n\nTriggered by the `<PaymentRequestButtonElement>` when it is clicked.\n\nFor more information, refer to the [Stripe.js\nreference](https://docs.stripe.com/js/element/events/on_click#element_on_click-handler).\n\n`onEscape`\n\noptional `(event: Object) => void`\n\nTriggered when the escape key is pressed within an Element.\n\nFor more information, refer to the [Stripe.js\nreference](https://docs.stripe.com/js/element/events/on_escape).\n\n`onFocus`\n\noptional `() => void`\n\nTriggered when the Element receives focus.\n\n`onLoaderror`\n\noptional `(event: Object) => void`\n\nTriggered when the Element fails to load.\n\nThis event is only emitted from the `payment`, `linkAuthentication`, `address`,\nand `expressCheckout` Elements.\n\nFor more information, refer to the [Stripe.js\nreference](https://docs.stripe.com/js/element/events/on_loaderror).\n\n`onLoaderStart`\n\noptional `(event: Object) => void`\n\nTriggered when the\n[loader](https://docs.stripe.com/js/elements_object/create#stripe_elements-options-loader)\nUI is mounted to the DOM and ready to be displayed.\n\nThis event is only emitted from the `payment`, `linkAuthentication`, and\n`address` Elements.\n\nFor more information, refer to the [Stripe.js\nreference](https://docs.stripe.com/js/element/events/on_loaderstart).\n\n`onReady`\n\noptional `(element: Element) => void`\n\nTriggered when the Element is fully rendered and can accept imperative\n`element.focus()` calls. Called with a reference to the underlying Element\ninstance.\n\n### Available Element components\n\nThere are many different kinds of Elements, useful for collecting different\nkinds of payment information. These are the available Elements today.\n\nComponentUsage`AddressElement`Collects address details for 236+ regional\nformats. See the [Address\nElement](https://docs.stripe.com/elements/address-element/collect-addresses?platform=web&client=react)\ndocs.`AfterpayClearpayMessageElement`Displays installments messaging for\nAfterpay payments.`AuBankAccountElement`Collects Australian bank account\ninformation (BSB and account number) for use with BECS Direct Debit\npayments.`CardCvcElement`Collects the card‘s CVC number.`CardElement`A flexible\nsingle-line input that collects all necessary card\ndetails.`CardExpiryElement`Collects the card‘s expiration\ndate.`CardNumberElement`Collects the card number.`ExpressCheckoutElement`Allows\nyou to accept card or wallet payments through one or more payment buttons,\nincluding Apple Pay, Google Pay, Link, or PayPal. See the [Express Checkout\nElement](https://docs.stripe.com/elements/express-checkout-element)\ndocs.`FpxBankElement`The customer’s bank, for use with FPX\npayments.`IbanElement`The International Bank Account Number (IBAN). Available\nfor SEPA countries.`IdealBankElement`The customer’s bank, for use with iDEAL\npayments.`LinkAuthenticationElement`Collects email addresses and allows users to\nlog in to Link. See the [Link Authentication\nElement](https://docs.stripe.com/payments/elements/link-authentication-element)\ndocs.`PaymentElement`Collects payment details for [25+ payment\nmethods](https://docs.stripe.com/payments/payment-methods/integration-options)\nfrom around the globe. See the [Payment\nElement](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=elements&client=react)\ndocs.`PaymentRequestButtonElement`An all-in-one checkout button backed by either\nApple Pay or the Payment Request API. See the [Payment Request\nButton](https://docs.stripe.com/stripe-js/elements/payment-request-button) docs.\n## useElements hook\n\n#### `useElements(): Elements | null`\n\nTo safely pass the payment information collected by the Payment Element to the\nStripe API, access the `Elements` instance so that you can use it with\n[stripe.confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment).\nIf you use the [React Hooks API](https://react.dev/reference/react), then\n`useElements` is the recommended way to access a mounted Element. If you need to\naccess an Element from a class component, use\n[ElementsConsumer](https://docs.stripe.com/sdks/stripejs-react#elements-consumer)\ninstead.\n\n#### Note\n\nNote that if you pass a `Promise` to the [Elements\nprovider](https://docs.stripe.com/sdks/stripejs-react#elements-provider) and the\n`Promise` hasn’t yet resolved, then `useElements` will return `null`.\n\n```\nimport {useStripe, useElements, PaymentElement} from '@stripe/react-stripe-js';\n\nconst CheckoutForm = () => {\n const stripe = useStripe();\n const elements = useElements();\n\n const handleSubmit = async (event) => {\n // We don't want to let default form submission happen here,\n // which would refresh the page.\n event.preventDefault();\n\n if (!stripe || !elements) {\n // Stripe.js hasn't yet loaded.\n // Make sure to disable form submission until Stripe.js has loaded.\n return;\n }\n\n const result = await stripe.confirmPayment({\n //`Elements` instance that was used to create the Payment Element\n elements,\n confirmParams: {\n return_url: \"https://example.com/order/123/complete\",\n },\n });\n\n if (result.error) {\n // Show error to your customer (for example, payment details incomplete)\n console.log(result.error.message);\n } else {\n // Your customer will be redirected to your `return_url`. For some payment\n // methods like iDEAL, your customer will be redirected to an intermediate\n// site first to authorize the payment, then redirected to the `return_url`.\n }\n };\n\n return (\n <form onSubmit={handleSubmit}>\n <PaymentElement />\n <button disabled={!stripe}>Submit</button>\n </form>\n )\n};\n\nexport default CheckoutForm;\n```\n\n## useStripe hook\n\n#### `useStripe(): Stripe | null`\n\nThe `useStripe` [hook](https://react.dev/reference/react) returns a reference to\nthe [Stripe](https://docs.stripe.com/js/initializing) instance passed to the\n[Elements](https://docs.stripe.com/sdks/stripejs-react#elements-provider)\nprovider. If you need to access the Stripe object from a class component, use\n[ElementsConsumer](https://docs.stripe.com/sdks/stripejs-react#elements-consumer)\ninstead.\n\n#### Note\n\nNote that if you pass a `Promise` to the [Elements\nprovider](https://docs.stripe.com/sdks/stripejs-react#elements-provider) and the\n`Promise` hasn’t yet resolved, then `useStripe` will return `null`.\n\n```\nimport {useStripe, useElements, PaymentElement} from '@stripe/react-stripe-js';\n\nconst CheckoutForm = () => {\n const stripe = useStripe();\n const elements = useElements();\n\n const handleSubmit = async (event) => {\n // We don't want to let default form submission happen here,\n // which would refresh the page.\n event.preventDefault();\n\n if (!stripe || !elements) {\n // Stripe.js hasn't yet loaded.\n // Make sure to disable form submission until Stripe.js has loaded.\n return;\n }\n\n const result = await stripe.confirmPayment({\n //`Elements` instance that was used to create the Payment Element\n elements,\n confirmParams: {\n return_url: \"https://example.com/order/123/complete\",\n },\n });\n\n if (result.error) {\n // Show error to your customer (for example, payment details incomplete)\n console.log(result.error.message);\n } else {\n // Your customer will be redirected to your `return_url`. For some payment\n // methods like iDEAL, your customer will be redirected to an intermediate\n// site first to authorize the payment, then redirected to the `return_url`.\n }\n };\n\n return (\n <form onSubmit={handleSubmit}>\n <PaymentElement />\n <button disabled={!stripe}>Submit</button>\n </form>\n )\n};\n\nexport default CheckoutForm;\n```\n\n## ElementsConsumer\n\nTo safely pass the payment information collected by the Payment Element to the\nStripe API, access the `Elements` instance so that you can use it with\n[stripe.confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment).\nIf you need to access the Stripe object or an Element from a class component,\nthen `ElementsConsumer` provides an alternative to the\n[useElements](https://docs.stripe.com/sdks/stripejs-react#useElements-hook) and\n[useStripe](https://docs.stripe.com/sdks/stripejs-react#useStripe-hook) hooks.\n\n```\nimport {ElementsConsumer, PaymentElement} from '@stripe/react-stripe-js';\n\nclass CheckoutForm extends React.Component {\n handleSubmit = async (event) => {\n // We don't want to let default form submission happen here,\n // which would refresh the page.\n event.preventDefault();\n\n const {stripe, elements} = this.props;\n\n if (!stripe || !elements) {\n // Stripe.js hasn't yet loaded.\n // Make sure to disable form submission until Stripe.js has loaded.\n return;\n }\n\n const result = await stripe.confirmPayment({\n //`Elements` instance that was used to create the Payment Element\n elements,\n confirmParams: {\n return_url: \"https://example.com/order/123/complete\",\n },\n });\n\n if (result.error) {\n // Show error to your customer (for example, payment details incomplete)\n console.log(result.error.message);\n } else {\n // Your customer will be redirected to your `return_url`. For some payment\n // methods like iDEAL, your customer will be redirected to an intermediate\n// site first to authorize the payment, then redirected to the `return_url`.\n }\n };\n\n render() {\n return (\n <form onSubmit={this.handleSubmit}>\n <PaymentElement />\n <button disabled={!this.props.stripe}>Submit</button>\n </form>\n );\n }\n}\n\nexport default function InjectedCheckoutForm() {\n return (\n <ElementsConsumer>\n {({stripe, elements}) => (\n <CheckoutForm stripe={stripe} elements={elements} />\n )}\n </ElementsConsumer>\n )\n}\n```\n\nprop description\n`children`\n\nrequired `({elements, stripe}) => ReactNode`\n\nThis component takes a [function as\nchild](https://reactjs.org/docs/render-props.html#using-props-other-than-render).\nThe function that you provide will be called with the [Elements\nobject](https://docs.stripe.com/js/elements_object) that is managing your\nElement components and the [Stripe\nobject](https://docs.stripe.com/js/initializing) that you passed to\n[<Elements>](https://docs.stripe.com/sdks/stripejs-react#elements-provider).\n\nNote that if you pass a `Promise` to the [Elements\nprovider](https://docs.stripe.com/sdks/stripejs-react#elements-provider) and the\n`Promise` hasn’t yet resolved, then `stripe` and `elements` will be `null`.\n\n## Customization and styling\n\nEach element is mounted in an `iframe`, which means that Elements probably won’t\nwork with any existing styling and component frameworks that you have. Despite\nthis, you can still configure Elements to match the design of your site.\nCustomizing Elements consists of [responding to\nevents](https://docs.stripe.com/js/element/events) and configuring Elements with\nthe [appearance](https://docs.stripe.com/elements/appearance-api) option. The\nlayout of each Element stays consistent, but you can modify colors, fonts,\nborders, padding, and more.\n\nThis demo only displays Google Pay or Apple Pay if you have an active card with\neither wallet.\n## Next steps\n\nBuild an integration with React Stripe.js and Elements.\n\n- [Accept a payment](https://docs.stripe.com/payments/quickstart)\n- [Accept a payment with the Express Checkout\nElement](https://docs.stripe.com/elements/express-checkout-element/accept-a-payment)\n- [Adding the Payment Request\nButton](https://docs.stripe.com/stripe-js/elements/payment-request-button)\n- [Learn about the Elements Appearance\nAPI](https://docs.stripe.com/elements/appearance-api)\n- [Stripe.js reference](https://docs.stripe.com/js)\n\n## Links\n\n- [project on GitHub](https://github.com/stripe/react-stripe-js)\n- [Stripe Elements](https://docs.stripe.com/payments/elements)\n- [Stripe.js\nreference](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options)\n- [explore our docs](https://docs.stripe.com/)\n- [accepting a\npayment](https://docs.stripe.com/payments/accept-a-payment?platform=web)\n- [sample integration](https://docs.stripe.com/payments/quickstart)\n- [React](https://reactjs.org/)\n- [Getting Started](https://react.dev/learn)\n- [React Stripe.js](https://www.npmjs.com/package/@stripe/react-stripe-js)\n- [Stripe.js loader](https://www.npmjs.com/package/@stripe/stripe-js)\n- [Stripe object](https://docs.stripe.com/js/initializing)\n-\n[loadStripe](https://github.com/stripe/stripe-js/blob/master/README.md#loadstripe)\n- [Stripe.js wrapper\nmodule](https://github.com/stripe/stripe-js/blob/master/README.md#readme)\n- [See available\noptions](https://docs.stripe.com/js/elements_object/create#stripe_elements-options)\n- [you render the element before creating the\nIntent](https://docs.stripe.com/payments/accept-a-payment-deferred?platform=web)\n-\n[elements.update](https://docs.stripe.com/js/elements_object/update#elements_update-options-appearance)\n- [Element’s\ncontainer](https://docs.stripe.com/js/element/the_element_container)\n- [available\noptions](https://docs.stripe.com/js/elements_object/create_element?type=card#elements_create-options)\n- [Stripe.js\nreference](https://docs.stripe.com/js/element/events/on_change?type=paymentElement#element_on_change-handler)\n- [Stripe.js\nreference](https://docs.stripe.com/js/element/events/on_click#element_on_click-handler)\n- [Stripe.js reference](https://docs.stripe.com/js/element/events/on_escape)\n- [Stripe.js reference](https://docs.stripe.com/js/element/events/on_loaderror)\n-\n[loader](https://docs.stripe.com/js/elements_object/create#stripe_elements-options-loader)\n- [Stripe.js\nreference](https://docs.stripe.com/js/element/events/on_loaderstart)\n- [Address\nElement](https://docs.stripe.com/elements/address-element/collect-addresses?platform=web&client=react)\n- [Express Checkout\nElement](https://docs.stripe.com/elements/express-checkout-element)\n- [Link Authentication\nElement](https://docs.stripe.com/payments/elements/link-authentication-element)\n- [25+ payment\nmethods](https://docs.stripe.com/payments/payment-methods/integration-options)\n- [Payment\nElement](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=elements&client=react)\n- [Payment Request\nButton](https://docs.stripe.com/stripe-js/elements/payment-request-button)\n-\n[stripe.confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment)\n- [React Hooks API](https://react.dev/reference/react)\n-\n[https://example.com/order/123/complete](https://example.com/order/123/complete)\n- [function as\nchild](https://reactjs.org/docs/render-props.html#using-props-other-than-render)\n- [Elements object](https://docs.stripe.com/js/elements_object)\n- [compliant with industry\nregulation](https://docs.stripe.com/security/guide#validating-pci-compliance)\n- [responding to events](https://docs.stripe.com/js/element/events)\n- [appearance](https://docs.stripe.com/elements/appearance-api)\n- [Accept a payment with the Express Checkout\nElement](https://docs.stripe.com/elements/express-checkout-element/accept-a-payment)\n- [Stripe.js reference](https://docs.stripe.com/js)",
  "metadata": {
    "title": "React Stripe.js reference | Stripe Documentation",
    "description": "Learn about React components for Stripe.js and Stripe Elements.",
    "sourceURL": "https://docs.stripe.com/sdks/stripejs-react"
  }
}