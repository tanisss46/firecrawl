{
  "content": "# Save a customer's payment method without making a payment\n\n## Learn how to save a customer's payment method using a SetupIntent.\n\nThe [Setup Intents API](https://docs.stripe.com/api/setup_intents) lets you save\na customer’s payment details without an initial payment. This is helpful if you\nwant to onboard customers now, set them up for payments, and charge them in the\nfuture—when they’re offline.\n\nUse this integration to set up recurring payments or to create one-time payments\nwith a final amount determined later, often after the customer receives your\nservice.\n\n#### Card-present transactions\n\nCard-present transactions, such as collecting card details through Stripe\nTerminal, use a different process for saving the payment method. For details,\nsee [the Terminal\ndocumentation](https://docs.stripe.com/terminal/features/saving-cards/save-cards-directly).\n\n## Compliance\n\nYou’re responsible for your compliance with all applicable laws, regulations,\nand network rules when saving a customer’s payment details. These requirements\ngenerally apply if you want to save your customer’s payment method for future\nuse, such as displaying a customer’s payment method to them in the checkout flow\nfor a future purchase or charging them when they’re not actively using your\nwebsite or app. Add terms to your website or app that state how you plan to save\npayment method details and allow customers to opt in.\n\nWhen you save a payment method, you can only use it for the specific usage you\nhave included in your terms. To charge a payment method when a customer is\noffline and save it as an option for future purchases, make sure that you\nexplicitly collect consent from the customer for this specific use. For example,\ninclude a “Save my payment method for future use” checkbox to collect consent.\n\nTo charge them when they’re offline, make sure your terms include the following:\n\n- The customer’s agreement to your initiating a payment or a series of payments\non their behalf for specified transactions.\n- The anticipated timing and frequency of payments (for example, if the charges\nare for scheduled installments, subscription payments, or unscheduled top-ups).\n- How you determine the payment amount.\n- Your cancellation policy, if the payment method is for a subscription service.\n\nMake sure you keep a record of your customer’s written agreement to these terms.\n\n#### Note\n\nIf you need to use manual server-side confirmation or your integration requires\npresenting payment methods separately, see our [alternative\nguide](https://docs.stripe.com/payments/save-and-reuse-cards-only).\n\n[Set up\nStripeServer-side](https://docs.stripe.com/payments/save-and-reuse#set-up-stripe)\nFirst, [create a Stripe account](https://dashboard.stripe.com/register) or [sign\nin](https://dashboard.stripe.com/login).\n\nUse our official libraries to access the Stripe API from your application:\n\n```\n# Available as a gem\nsudo gem install stripe\n```\n\n```\n# If you use bundler, you can add this line to your Gemfile\ngem 'stripe'\n```\n\n[Enable payment\nmethods](https://docs.stripe.com/payments/save-and-reuse#enable-payment-methods)\nView your [payment methods\nsettings](https://dashboard.stripe.com/settings/payment_methods) and enable the\npayment methods you want to support. You need at least one payment method\nenabled to create a [SetupIntent](https://docs.stripe.com/api/setup_intents).\n\nBy default, Stripe enables cards and other prevalent payment methods that can\nhelp you reach more customers, but we recommend turning on additional payment\nmethods that are relevant for your business and customers. See [Payment method\nsupport](https://docs.stripe.com/payments/payment-methods/payment-method-support)\nfor product and payment method support, and our [pricing\npage](https://stripe.com/pricing/local-payment-methods) for fees.\n\n[Create a\nCustomerServer-side](https://docs.stripe.com/payments/save-and-reuse#create-customer)\nTo set up a payment method for future payments, you must attach it to a\n[Customer](https://docs.stripe.com/api/customers). Create a `Customer` object\nwhen your customer creates an account with your business. `Customer` objects\nallow for reusing payment methods and tracking across multiple payments.\n\n```\ncurl -X POST https://api.stripe.com/v1/customers \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\"\n```\n\n[Create a\nSetupIntentServer-side](https://docs.stripe.com/payments/save-and-reuse#create-intent)\n#### Note\n\nIf you want to render the Payment Element without first creating a SetupIntent,\nsee [Collect payment details before creating an\nIntent](https://docs.stripe.com/payments/accept-a-payment-deferred?type=setup).\n\nA [SetupIntent](https://docs.stripe.com/api/setup_intents) is an object that\nrepresents your intent to set up a customer’s payment method for future\npayments. The payment methods shown to customers during the checkout process are\nalso included on the `SetupIntent`. You can let Stripe automatically pull\npayment methods from your Dashboard settings or you can list them manually.\n\nUnless your integration requires a code-based option for offering payment\nmethods, Stripe recommends the automated option. This is because Stripe\nevaluates the currency, payment method restrictions, and other parameters to\ndetermine the list of supported payment methods. Payment methods that increase\nconversion and that are most relevant to the currency and customer’s location\nare prioritized. Lower priority payment methods are hidden beneath an overflow\nmenu.\n\nManage payment methods from the DashboardManually list payment methods\nSome payment methods can’t be saved for future payments, and customers don’t see\nthem as options when setting up future payments. For more details about managing\npayment methods, see [Payment method integration\noptions](https://docs.stripe.com/payments/payment-methods/integration-options).\n\nYou can optionally create a SetupIntent with `automatic_payment_methods`\nenabled, and the SetupIntent is created using the payment methods you configured\nin the Dashboard. Specifying the `automatic_payment_methods` parameter is\noptional because Stripe enables its functionality by default in the latest\nversion of the API.\n\nYou can manage payment methods from the\n[Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe\nhandles the return of eligible payment methods based on factors such as the\ntransaction’s amount, currency, and payment flow.\n\n```\ncurl https://api.stripe.com/v1/setup_intents \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d customer={{CUSTOMER_ID}} \\\n -d \"automatic_payment_methods[enabled]\"=true\n```\n\n### Retrieve the client secret\n\nThe SetupIntent includes a [client\nsecret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret)\nthat the client side uses to securely complete the payment process. You can use\ndifferent approaches to pass the client secret to the client side.\n\nSingle-page applicationServer-side rendering\nRetrieve the client secret from an endpoint on your server, using the browser’s\n`fetch` function. This approach is best if your client side is a single-page\napplication, particularly one built with a modern frontend framework like React.\nCreate the server endpoint that serves the client secret:\n\n```\nget '/secret' do\n intent = # ... Create or retrieve the SetupIntent\n {client_secret: intent.client_secret}.to_json\nend\n```\n\nAnd then fetch the client secret with JavaScript on the client side:\n\n```\n(async () => {\n const response = await fetch('/secret');\n const {client_secret: clientSecret} = await response.json();\n // Render the form using the clientSecret\n})();\n```\n\n#### Using Radar\n\nWhen saving a customer’s payment method without an initial payment,\n[Radar](https://docs.stripe.com/radar) doesn’t act on the SetupIntent by\ndefault. If you want to activate this as the default, go to the [Radar\nsettings](https://dashboard.stripe.com/settings/radar) and enable **Use Radar on\npayment methods saved for future use**.\n\n[Collect payment\ndetailsClient-side](https://docs.stripe.com/payments/save-and-reuse#collect-payment-details)\nYou’re ready to collect payment details on the client with the [Payment\nElement](https://docs.stripe.com/payments/payment-element). The Payment Element\nis a prebuilt UI component that simplifies collecting payment details for a\nvariety of payment methods.\n\nThe Payment Element contains an iframe that securely sends payment information\nto Stripe over an HTTPS connection. The checkout page address must start with\n`https://` rather than `http://` for your integration to work. You can test your\nintegration without doing so, but remember to [enable\nHTTPS](https://docs.stripe.com/security/guide#tls) when you’re ready to accept\nlive payments.\n\nHTML + JSReact\n### Set up Stripe.js\n\nThe Payment Element is automatically available as a feature of Stripe.js.\nInclude the Stripe.js script on your checkout page by adding it to the `head` of\nyour HTML file. Always load Stripe.js directly from js.stripe.com to remain PCI\ncompliant. Don’t include the script in a bundle or host a copy of it yourself.\n\n```\n<head>\n <title>Checkout</title>\n <script src=\"https://js.stripe.com/v3/\"></script>\n</head>\n```\n\nCreate an instance of Stripe with the following JavaScript on your checkout\npage:\n\n```\n// Set your publishable key: remember to change this to your live publishable\nkey in production\n// See your keys here: https://dashboard.stripe.com/apikeys\nconst stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n```\n\n### Add the Payment Element to your payment setup page\n\nThe Payment Element needs a place to live on your payment setup page. Create an\nempty DOM node (container) with a unique ID in your payment form:\n\n```\n<form id=\"payment-form\">\n <div id=\"payment-element\">\n <!-- Elements will create form elements here -->\n </div>\n <button id=\"submit\">Submit</button>\n <div id=\"error-message\">\n <!-- Display error message to your customers here -->\n </div>\n</form>\n```\n\nWhen the previous form loads, create an instance of the Payment Element and\nmount it to the container DOM node. Pass the [client\nsecret](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-client_secret)\nfrom the previous step into `options` when you create the\n[Elements](https://docs.stripe.com/js/elements_object/create) instance:\n\n```\nconst options = {\n clientSecret: '{{CLIENT_SECRET}}',\n // Fully customizable with appearance API.\n appearance: {/*...*/},\n};\n\n// Set up Stripe.js and Elements using the SetupIntent's client secret\nconst elements = stripe.elements(options);\n\n// Create and mount the Payment Element\nconst paymentElementOptions = { layout: 'accordion'};\nconst paymentElement = elements.create('payment', paymentElementOptions);\npaymentElement.mount('#payment-element');\n```\n\nThe Payment Element renders a dynamic form that allows your customer to pick a\npayment method. For each payment method, the form automatically asks the\ncustomer to fill in all necessary payment details.\n\n### Customize appearance\n\nCustomize the Payment Element to match the design of your site by passing the\n[appearance\nobject](https://docs.stripe.com/js/elements_object/create#stripe_elements-options-appearance)\ninto `options` when creating the `Elements` provider.\n\n### Request Apple Pay merchant token\n\nIf you accept Apple Pay payments, we recommend configuring the Apple Pay\ninterface to return a [merchant\ntoken](https://docs.stripe.com/apple-pay/merchant-tokens?pay-element=web-pe) to\nenable merchant initiated transactions (MIT). [Request the relevant merchant\ntoken\ntype](https://docs.stripe.com/apple-pay/merchant-tokens?pay-element=web-pe) in\nthe Payment Element. The following example shows a request for the deferred\npayments merchant token.\n\n```\nconst paymentElement = elements.create('payment', {\n applePay: {\n deferredPaymentRequest: {\n paymentDescription: 'My deferred payment',\n managementURL: 'https://example.com/billing',\n deferredBilling: {\n amount: 2500,\n label: 'Deferred Fee',\n deferredPaymentDate: new Date('2024-01-05')\n },\n }\n },\n // Other options\n});\n```\n\n### Configure currency\n\nWhen using SetupIntents with\n[automatic_payment_methods](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-automatic_payment_methods),\nyou can specify the currency when you [create the Payment\nElement](https://docs.stripe.com/js/elements_object/create#stripe_elements-options-currency).\nThe Payment Element renders the enabled payment methods that support the\nprovided currency. For more details, see [the Payment Element\ndocumentation](https://docs.stripe.com/payments/payment-methods/integration-options).\n\n### Collect addresses\n\nBy default, the Payment Element only collects the necessary billing address\ndetails. To collect a customer’s full billing address (to calculate the tax for\ndigital goods and services, for example) or shipping address, use the [Address\nElement](https://docs.stripe.com/elements/address-element).\n\n[OptionalLink in your checkout\npageClient-side](https://docs.stripe.com/payments/save-and-reuse#enable-checkout-link)[OptionalSave\nand retrieve customer payment\nmethods](https://docs.stripe.com/payments/save-and-reuse#save-payment-methods)[Submit\nthe payment details to\nStripeClient-side](https://docs.stripe.com/payments/save-and-reuse#submit-payment-details)\nUse\n[stripe.confirmSetup](https://docs.stripe.com/js/setup_intents/confirm_setup) to\ncomplete the setup using details collected by the Payment Element. Provide a\n[return_url](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-return_url)\nto this function so that Stripe can redirect the user after they complete setup.\nWe may first redirect them to an intermediate site, like a bank authorization\npage, before redirecting them to the `return_url`.\n\nIf your customer saves their card details, we immediately redirect them to the\n`return_url` when setup is successful. If you don’t want to redirect for card\npayments, you can set\n[redirect](https://docs.stripe.com/js/setup_intents/confirm_setup#confirm_setup_intent-options-redirect)\nto `if_required`. This only redirects customers that check out with\nredirect-based payment methods.\n\nHTML + JSReact\n```\nconst form = document.getElementById('payment-form');\n\nform.addEventListener('submit', async (event) => {\n event.preventDefault();\n\n const {error} = await stripe.confirmSetup({\n //`Elements` instance that was used to create the Payment Element\n elements,\n confirmParams: {\n return_url: 'https://example.com/account/payments/setup-complete',\n }\n });\n\n if (error) {\n // This point will only be reached if there is an immediate error when\n // confirming the payment. Show error to your customer (for example, payment\n // details incomplete)\n const messageContainer = document.querySelector('#error-message');\n messageContainer.textContent = error.message;\n } else {\n // Your customer will be redirected to your `return_url`. For some payment\n // methods like iDEAL, your customer will be redirected to an intermediate\n // site first to authorize the payment, then redirected to the `return_url`.\n }\n});\n```\n\nMake sure the `return_url` corresponds to a page on your website that [provides\nthe status](https://docs.stripe.com/payments/payment-intents/verifying-status)\nof the `SetupIntent`. Stripe provides the following URL query parameters to\nverify the status when we redirect the customer to the `return_url`. You can\nalso append your own query parameters when providing the `return_url`, and they\npersist through the redirect process.\n\nParameterDescription`setup_intent`The unique identifier for the\n`SetupIntent`.`setup_intent_client_secret`The [client\nsecret](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-client_secret)\nof the `SetupIntent` object.\nYou can use\n[stripe.retrieveSetupIntent](https://docs.stripe.com/js/setup_intents/retrieve_setup_intent)\nto retrieve the SetupIntent using the `setup_intent_client_secret` query\nparameter. Successful confirmation of the SetupIntent saves the resulting\n`PaymentMethod` ID (in `result.setupIntent.payment_method`) to the provided\n`Customer`.\n\nHTML + JSReact\n```\n// Initialize Stripe.js using your publishable key\nconst stripe = Stripe('{PUBLISHABLE_KEY}');\n\n// Retrieve the \"setup_intent_client_secret\" query parameter appended to\n// your return_url by Stripe.js\nconst clientSecret = new URLSearchParams(window.location.search).get(\n 'setup_intent_client_secret'\n);\n\n// Retrieve the SetupIntent\nstripe.retrieveSetupIntent(clientSecret).then(({setupIntent}) => {\n const message = document.querySelector('#message')\n\n // Inspect the SetupIntent `status` to indicate the status of the payment\n // to your customer.\n //\n // Some payment methods will [immediately succeed or fail][0] upon\n // confirmation, while others will first enter a `processing` state.\n //\n // [0]: https://stripe.com/docs/payments/payment-methods#payment-notification\n switch (setupIntent.status) {\n case 'succeeded': {\n message.innerText = 'Success! Your payment method has been saved.';\n break;\n }\n\n case 'processing': {\nmessage.innerText = \"Processing payment details. We'll update you when\nprocessing is complete.\";\n break;\n }\n\n case 'requires_payment_method': {\nmessage.innerText = 'Failed to process payment details. Please try another\npayment method.';\n\n // Redirect your user back to your payment page to attempt collecting\n // payment again\n\n break;\n }\n }\n});\n```\n\n#### Caution\n\nIf you have tooling that tracks the customer’s browser session, you might need\nto add the `stripe.com` domain to the referrer exclude list. Redirects cause\nsome tools to create new sessions which prevents you from tracking the complete\nsession.\n\n[Charge the saved payment method\nlaterServer-side](https://docs.stripe.com/payments/save-and-reuse#charge-saved-payment-method)\n#### Compliance\n\nYou’re responsible for your compliance with all applicable laws, regulations,\nand network rules when saving a customer’s payment details. When rendering past\npayment methods to your end customer for future purchases, make sure you’re\nlisting payment methods where you’ve collected consent from the customer to save\nthe payment method details for this specific future use. To differentiate\nbetween payment methods attached to customers that can and can’t be presented to\nyour end customer as a saved payment method for future purchases, use the\n[allow_redisplay](https://docs.stripe.com/api/payment_methods/object#payment_method_object-allow_redisplay)\nparameter.\n\nWhen you’re ready to charge your customer off-session, use the Customer and\nPaymentMethod IDs to create a PaymentIntent. To find a payment method to charge,\nlist the payment methods associated with your customer. This example lists cards\nbut you can list any supported\n[type](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type).\n\n```\ncurl -G https://api.stripe.com/v1/payment_methods \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d customer={{CUSTOMER_ID}} \\\n -d type=card\n```\n\nWhen you have the Customer and PaymentMethod IDs, create a PaymentIntent with\nthe amount and currency of the payment. Set a few other parameters to make the\noff-session payment:\n\n- Set\n[off_session](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-off_session)\nto `true` to indicate that the customer isn’t in your checkout flow during a\npayment attempt and can’t fulfill an authentication request made by a partner,\nsuch as a card issuer, bank, or other payment institution. If, during your\ncheckout flow, a partner requests authentication, Stripe requests exemptions\nusing customer information from a previous on-session transaction. If the\nconditions for exemption aren’t met, the PaymentIntent might throw an error.\n- Set the value of the PaymentIntent’s\n[confirm](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-confirm)\nproperty to `true`, which causes confirmation to occur immediately when the\nPaymentIntent is created.\n- Set\n[payment_method](https://docs.stripe.com/api#create_payment_intent-payment_method)\nto the ID of the PaymentMethod and\n[customer](https://docs.stripe.com/api#create_payment_intent-customer) to the ID\nof the Customer.\n\n```\ncurl https://api.stripe.com/v1/payment_intents \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d amount=1099 \\\n -d currency=usd \\\n# In the latest version of the API, specifying the `automatic_payment_methods`\nparameter is optional because Stripe enables its functionality by default.\n -d \"automatic_payment_methods[enabled]\"=true \\\n -d customer=\"{{CUSTOMER_ID}}\" \\\n -d payment_method=\"{{PAYMENT_METHOD_ID}}\" \\\n -d return_url=\"https://example.com/order/123/complete\" \\\n -d off_session=true \\\n -d confirm=true\n```\n\nWhen a payment attempt fails, the request also fails with a 402 HTTP status code\nand the status of the PaymentIntent is\n[requires_payment_method](https://docs.stripe.com/upgrades#2019-02-11). You must\nnotify your customer to return to your application to complete the payment (for\nexample, by sending an email or in-app notification).\n\nCheck the code of the [error](https://docs.stripe.com/api/errors/handling)\nraised by the Stripe API library. If the payment failed due to an\n[authentication_required](https://docs.stripe.com/declines/codes) decline code,\nuse the declined PaymentIntent’s client secret with confirmPayment to allow the\ncustomer to authenticate the payment.\n\n```\nconst form = document.getElementById('payment-form');\n\nform.addEventListener('submit', async (event) => {\n event.preventDefault();\n\n const {error} = await stripe.confirmPayment({\n // The client secret of the PaymentIntent\n clientSecret,\n confirmParams: {\n return_url: 'https://example.com/order/123/complete',\n },\n });\n\n if (error) {\n // This point will only be reached if there is an immediate error when\n // confirming the payment. Show error to your customer (for example, payment\n // details incomplete)\n const messageContainer = document.querySelector('#error-message');\n messageContainer.textContent = error.message;\n } else {\n // Your customer will be redirected to your `return_url`. For some payment\n // methods like iDEAL, your customer will be redirected to an intermediate\n // site first to authorize the payment, then redirected to the `return_url`.\n }\n});\n```\n\n#### Note\n\n`stripe.confirmPayment` can take several seconds to complete. During that time,\ndisable your form from being resubmitted and show a waiting indicator like a\nspinner. If you receive an error, show it to the customer, re-enable the form,\nand hide the waiting indicator. If the customer must perform additional steps to\ncomplete the payment, such as authentication, Stripe.js walks them through that\nprocess.\n\nIf the payment failed for other reasons, such as insufficient funds, send your\ncustomer to a payment page to enter a new payment method. You can reuse the\nexisting PaymentIntent to attempt the payment again with the new payment\ndetails.\n\n[Test the\nintegration](https://docs.stripe.com/payments/save-and-reuse#test-the-integration)\nUse test payment details and the test redirect page to verify your integration.\nClick the tabs below to view details for each payment method.\n\nCardsBank redirectsBank debitsPayment methodScenarioHow to testCredit cardThe\ncard setup succeeds and doesn’t require\n[authentication](https://docs.stripe.com/strong-customer-authentication).Fill\nout the credit card form using the credit card number `4242 4242 4242 4242` with\nany expiration, CVC, and postal code.Credit cardThe card requires authentication\nfor the initial setup, then succeeds for subsequent payments.Fill out the credit\ncard form using the credit card number `4000 0025 0000 3155` with any\nexpiration, CVC, and postal code.Credit cardThe card requires authentication for\nthe initial setup and also requires authentication for subsequent payments.Fill\nout the credit card form using the credit card number `4000 0027 6000 3184` with\nany expiration, CVC, and postal code.Credit cardThe card is declined during\nsetup.Fill out the credit card form using the credit card number `4000 0000 0000\n9995` with any expiration, CVC, and postal code.\n### Test charging a saved SEPA Debit PaymentMethod\n\nConfirming the SetupIntent using iDEAL, Bancontact, or Sofort, generates a [SEPA\nDirect Debit](https://docs.stripe.com/payments/sepa-debit)\n[PaymentMethod](https://docs.stripe.com/api/payment_methods). SEPA Direct Debit\nis a [delayed\nnotification](https://docs.stripe.com/payments/payment-methods#payment-notification)\npayment method that transitions to an intermediate `processing` state before\ntransitioning several days later to a `succeeded` or `requires_payment_method`\nstate.\n\nEmailPaymentMethod\nSet `payment_method.billing_details.email` to one of the following values to\ntest the PaymentIntent status transitions. You can include your own custom text\nat the beginning of the email address followed by an underscore. For example,\n`test_1_generatedSepaDebitIntentsFail@example.com` results in a SEPA Direct\nDebit PaymentMethod that always fails when used with a PaymentIntent.\n\nEmail AddressDescription`generatedSepaDebitIntentsSucceed@example.com`The\nPaymentIntent status transitions from `processing` to\n`succeeded`.`generatedSepaDebitIntentsSucceedDelayed@example.com`The\nPaymentIntent status transitions from `processing` to `succeeded` after at least\nthree minutes.`generatedSepaDebitIntentsFail@example.com`The PaymentIntent\nstatus transitions from `processing` to\n`requires_payment_method`.`generatedSepaDebitIntentsFailDelayed@example.com`The\nPaymentIntent status transitions from `processing` to `requires_payment_method`\nafter at least three\nminutes.`generatedSepaDebitIntentsSucceedDisputed@example.com`The PaymentIntent\nstatus transitions from `processing` to `succeeded`, but a dispute is created\nimmediately.[OptionalCustomize the\nlayoutClient-side](https://docs.stripe.com/payments/save-and-reuse#customize-layout)[OptionalApple\nPay and Google\nPayClient-side](https://docs.stripe.com/payments/save-and-reuse#apple-pay-and-google-pay)\n## Disclose Stripe to your customers\n\nStripe collects information on customer interactions with Elements to provide\nservices to you, prevent fraud, and improve its services. This includes using\ncookies and IP addresses to identify which Elements a customer saw during a\nsingle checkout session. You’re responsible for disclosing and obtaining all\nrights and consents necessary for Stripe to use data in these ways. For more\ninformation, visit our [privacy\ncenter](https://stripe.com/legal/privacy-center#as-a-business-user-what-notice-do-i-provide-to-my-end-customers-about-stripe).\n\n## See also\n\n- [Accept a payment](https://docs.stripe.com/payments/accept-a-payment)\n- [Save payment details during\npayment](https://docs.stripe.com/payments/save-during-payment)\n- [The Elements Appearance API](https://docs.stripe.com/elements/appearance-api)\n- [Optimizing your Radar Integration](https://docs.stripe.com/radar/integration)\n\n## Links\n\n- [Setup Intents API](https://docs.stripe.com/api/setup_intents)\n- [the Terminal\ndocumentation](https://docs.stripe.com/terminal/features/saving-cards/save-cards-directly)\n- [alternative\nguide](https://docs.stripe.com/payments/save-and-reuse-cards-only)\n- [create a Stripe account](https://dashboard.stripe.com/register)\n- [sign in](https://dashboard.stripe.com/login)\n- [payment methods\nsettings](https://dashboard.stripe.com/settings/payment_methods)\n- [Payment method\nsupport](https://docs.stripe.com/payments/payment-methods/payment-method-support)\n- [pricing page](https://stripe.com/pricing/local-payment-methods)\n- [Customer](https://docs.stripe.com/api/customers)\n- [Collect payment details before creating an\nIntent](https://docs.stripe.com/payments/accept-a-payment-deferred?type=setup)\n- [Payment method integration\noptions](https://docs.stripe.com/payments/payment-methods/integration-options)\n- [client\nsecret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret)\n- [Radar](https://docs.stripe.com/radar)\n- [Radar settings](https://dashboard.stripe.com/settings/radar)\n- [Payment Element](https://docs.stripe.com/payments/payment-element)\n- [enable HTTPS](https://docs.stripe.com/security/guide#tls)\n- [https://js.stripe.com/v3/](https://js.stripe.com/v3/)\n- [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys)\n- [client\nsecret](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-client_secret)\n- [Elements](https://docs.stripe.com/js/elements_object/create)\n- [Elements docs](https://docs.stripe.com/payments/elements)\n- [appearance\nobject](https://docs.stripe.com/js/elements_object/create#stripe_elements-options-appearance)\n- [merchant\ntoken](https://docs.stripe.com/apple-pay/merchant-tokens?pay-element=web-pe)\n- [https://example.com/billing](https://example.com/billing)\n-\n[automatic_payment_methods](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-automatic_payment_methods)\n- [create the Payment\nElement](https://docs.stripe.com/js/elements_object/create#stripe_elements-options-currency)\n- [Address Element](https://docs.stripe.com/elements/address-element)\n- [stripe.confirmSetup](https://docs.stripe.com/js/setup_intents/confirm_setup)\n-\n[return_url](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-return_url)\n-\n[redirect](https://docs.stripe.com/js/setup_intents/confirm_setup#confirm_setup_intent-options-redirect)\n-\n[https://example.com/account/payments/setup-complete](https://example.com/account/payments/setup-complete)\n- [provides the\nstatus](https://docs.stripe.com/payments/payment-intents/verifying-status)\n-\n[stripe.retrieveSetupIntent](https://docs.stripe.com/js/setup_intents/retrieve_setup_intent)\n-\n[https://stripe.com/docs/payments/payment-methods#payment-notification](https://stripe.com/docs/payments/payment-methods#payment-notification)\n-\n[allow_redisplay](https://docs.stripe.com/api/payment_methods/object#payment_method_object-allow_redisplay)\n-\n[type](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type)\n-\n[off_session](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-off_session)\n-\n[confirm](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-confirm)\n-\n[payment_method](https://docs.stripe.com/api#create_payment_intent-payment_method)\n- [customer](https://docs.stripe.com/api#create_payment_intent-customer)\n- [requires_payment_method](https://docs.stripe.com/upgrades#2019-02-11)\n- [error](https://docs.stripe.com/api/errors/handling)\n- [authentication_required](https://docs.stripe.com/declines/codes)\n-\n[https://example.com/order/123/complete](https://example.com/order/123/complete)\n- [authentication](https://docs.stripe.com/strong-customer-authentication)\n- [SEPA Direct Debit](https://docs.stripe.com/payments/sepa-debit)\n- [PaymentMethod](https://docs.stripe.com/api/payment_methods)\n- [delayed\nnotification](https://docs.stripe.com/payments/payment-methods#payment-notification)\n- [privacy\ncenter](https://stripe.com/legal/privacy-center#as-a-business-user-what-notice-do-i-provide-to-my-end-customers-about-stripe)\n- [Accept a payment](https://docs.stripe.com/payments/accept-a-payment)\n- [Save payment details during\npayment](https://docs.stripe.com/payments/save-during-payment)\n- [The Elements Appearance API](https://docs.stripe.com/elements/appearance-api)\n- [Optimizing your Radar Integration](https://docs.stripe.com/radar/integration)",
  "metadata": {
    "title": "Save a customer's payment method without making a payment | Stripe Documentation",
    "description": "Learn how to save a customer's payment method using a SetupIntent.",
    "sourceURL": "https://docs.stripe.com/payments/save-and-reuse"
  }
}