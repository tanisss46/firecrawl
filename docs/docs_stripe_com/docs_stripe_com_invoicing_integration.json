{
  "content": "# Integrate with the Invoicing API\n\n## Learn how to create and send an invoice with code.\n\nThe [Dashboard](https://dashboard.stripe.com/invoices) is the most common way to\n[create invoices](https://docs.stripe.com/invoicing/dashboard#create-invoice).\nIf you’d like to automate invoice creation, you can integrate with the API.\nBuild a full, working Invoicing integration using our [sample\nintegration](https://docs.stripe.com/invoicing/integration/quickstart).\n\n#### Note\n\nYou don’t need to integrate with the Payments API to integrate with the\nInvoicing API.\n\n[Set up Stripe](https://docs.stripe.com/invoicing/integration#setup)\nUse our official libraries for access to the Stripe API:\n\n```\n# Available as a gem\nsudo gem install stripe\n```\n\n```\n# If you use bundler, you can add this line to your Gemfile\ngem 'stripe'\n```\n\n[Create a product](https://docs.stripe.com/invoicing/integration#create-product)\nTo create a product, enter its name:\n\n```\ncurl https://api.stripe.com/v1/products \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d name=\"Gold Special\"\n```\n\n[Create a price](https://docs.stripe.com/invoicing/integration#create-prices)\n[Prices](https://docs.stripe.com/api#prices) define how much and how often to\ncharge for products. This includes how much the product costs, what currency to\nuse, and the billing interval (when the price is for a subscription). Like\nproducts, if you only have a few prices, it’s preferable to manage them in the\nDashboard. Use the unit amount to express prices in the lowest unit of the\ncurrency—in this case, cents (10 USD is 1,000 cents, so the unit amount is\n1000).\n\n#### Note\n\nAs an alternative, if you don’t need to create a price for your product, you can\nuse the\n[amount](https://docs.stripe.com/api/invoiceitems/create#create_invoiceitem-amount)\nparameter during invoice item creation.\n\nTo create a price and assign it to the product, pass the product ID, unit\namount, and currency. In the following example, the price for the “Gold Special”\nproduct is 10 USD:\n\n```\ncurl https://api.stripe.com/v1/prices \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d product={{PRODUCT_ID}} \\\n -d unit_amount=1000 \\\n -d currency=usd\n```\n\n[Create a\ncustomer](https://docs.stripe.com/invoicing/integration#create-customer-code)\nThe [Customer](https://docs.stripe.com/api#customer_object) object represents\nthe customer purchasing your product. It’s required for creating an invoice. To\ncreate a customer with a `name`, `email`, and `description`, add the following\ncode replacing the values with your own:\n\n```\ncurl https://api.stripe.com/v1/customers \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d name=\"Jenny Rosen\" \\\n --data-urlencode email=\"jenny.rosen@example.com\" \\\n -d description=\"My first customer\"\n```\n\nAfter you create the customer, store the customer `id` in your database so that\nyou can use it later. The next step, for example, uses the customer ID to create\nan invoice.\n\n#### Note\n\nSee [Create a customer](https://docs.stripe.com/api/customers/create) for\nadditional parameters.\n\n[Create an\ninvoice](https://docs.stripe.com/invoicing/integration#create-invoice-code)\nSet the\n[collection_method](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method)\nattribute to `send_invoice`. For Stripe to mark an invoice as past due, you must\nadd the\n[days_until_due](https://docs.stripe.com/api/invoices/create#create_invoice-days_until_due)\nparameter. When you send an invoice, Stripe emails the invoice to the customer\nwith payment instructions.\n\n```\ncurl https://api.stripe.com/v1/invoices \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d customer={{CUSTOMER_ID}} \\\n -d collection_method=send_invoice \\\n -d days_until_due=30\n```\n\nThen, create an invoice item by passing in the customer `id`, product `price`,\nand invoice ID `invoice`.\n\nThe maximum number of invoice items is 250.\n\n```\ncurl https://api.stripe.com/v1/invoiceitems \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d customer={{CUSTOMER_ID}} \\\n -d price={{PRICE_ID}} \\\n -d invoice={{INVOICE_ID}}\n```\n\nIf you set `auto_advance` to `false`, you can continue to modify the invoice\nuntil you\n[finalize](https://docs.stripe.com/invoicing/integration/workflow-transitions)\nit. To finalize a draft invoice, use the Dashboard, send it to the customer, or\npay it. You can also use the\n[Finalize](https://docs.stripe.com/api/invoices/finalize) API:\n\n#### Note\n\nIf you created the invoice in error,\n[void](https://docs.stripe.com/invoicing/overview#void) it. You can also mark an\ninvoice as\n[uncollectible](https://docs.stripe.com/invoicing/overview#uncollectible).\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/{{INVOICE_ID}}/finalize \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\"\n```\n\n[Accept invoice\npayment](https://docs.stripe.com/invoicing/integration#accept-invoice-payment)Send\nan InvoiceStripe Elements\nSend the invoice to the email address associated with the customer. As soon as\nthe an invoice is sent, Stripe finalizes it. Many jurisdictions consider\nfinalized invoices a legal document making certain fields unalterable. If you\nsend invoices that have already been paid, there’s no reference to the payment\nin the email.\n\n#### Note\n\nWhen you send invoices that have already been paid, the email doesn’t reference\nthe payment. Stripe sends invoices to the email address associated with the\ncustomer.\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/{{INVOICE_ID}}/send \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\"\n```\n\n[Handle post-payment\nevents](https://docs.stripe.com/invoicing/integration#handle-payment-events)\nStripe sends an\n[invoice.paid](https://docs.stripe.com/api/events/types?event_types-invoice.paid)\nevent when an invoice payment completes. Listen for this event to ensure\nreliable fulfillment. If your integration relies on only a client-side callback,\nthe customer could lose connection before the callback executes, which would\nresult in the customer being charged without your server being notified. Setting\nup your integration to listen for asynchronous events is also what enables you\nto accept [different types of payment\nmethods](https://stripe.com/payments/payment-methods-guide) with a single\nintegration.\n\n#### Note\n\nSuccessful invoice payments trigger both an\n[invoice.paid](https://docs.stripe.com/api/events/types?event_types-invoice.paid)\nand\n[invoice.payment_succeeded](https://docs.stripe.com/api/events/types?event_types-invoice.payment_succeeded)\nevent. Both event types contain the same invoice data, so it’s only necessary to\nlisten to one of them to be notified of successful invoice payments. The\ndifference is that `invoice.payment_succeeded` events are sent for successful\ninvoice payments, but aren’t sent when you mark an invoice as\n[paid_out_of_band](https://docs.stripe.com/api/invoices/pay#pay_invoice-paid_out_of_band).\n`invoice.paid` events, on the other hand, are triggered for both successful\npayments and out of band payments. Because `invoice.paid` covers both scenarios,\nwe typically recommend listening to `invoice.paid` rather than\n`invoice.payment_succeeded`.\n\nUse the [Dashboard webhook tool](https://dashboard.stripe.com/webhooks) or\nfollow the [webhook quickstart](https://docs.stripe.com/webhooks/quickstart) to\nreceive these events and run actions, such as sending an order confirmation\nemail to your customer, logging the sale in a database, or starting a shipping\nworkflow.\n\nIn addition to handling the `invoice.paid` event, we recommend handling two\nother events when collecting payments with the Payment Element:\n\nEventDescriptionAction[payment_intent.processing](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.processing)Sent\nwhen a customer successfully initiated a payment, but the payment has yet to\ncomplete. This event is most commonly sent when a bank debit is initiated. It’s\nfollowed by either a `invoice.paid` or `invoice.payment_failed` event in the\nfuture.Send the customer an order confirmation that indicates their payment is\npending. For digital goods, you might want to fulfill the order before waiting\nfor payment to\ncomplete.[invoice.payment_failed](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.payment_failed)Sent\nwhen a customer attempted a payment on an invoice, but the payment failed.If a\npayment transitioned from `processing` to `payment_failed`, offer the customer\nanother attempt to pay.[OptionalCustomize an\ninvoice](https://docs.stripe.com/invoicing/integration#customize-invoices)\n## See also\n\n-\n[Post-finalization](https://docs.stripe.com/invoicing/integration/workflow-transitions#post-finalized)\n- [Use incoming webhooks to get real-time\nupdates](https://docs.stripe.com/webhooks)\n\n## Links\n\n- [Dashboard](https://dashboard.stripe.com/invoices)\n- [create invoices](https://docs.stripe.com/invoicing/dashboard#create-invoice)\n- [sample integration](https://docs.stripe.com/invoicing/integration/quickstart)\n- [Prices](https://docs.stripe.com/api#prices)\n-\n[amount](https://docs.stripe.com/api/invoiceitems/create#create_invoiceitem-amount)\n- [Customer](https://docs.stripe.com/api#customer_object)\n- [Create a customer](https://docs.stripe.com/api/customers/create)\n-\n[collection_method](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method)\n-\n[days_until_due](https://docs.stripe.com/api/invoices/create#create_invoice-days_until_due)\n- [finalize](https://docs.stripe.com/invoicing/integration/workflow-transitions)\n- [Finalize](https://docs.stripe.com/api/invoices/finalize)\n- [void](https://docs.stripe.com/invoicing/overview#void)\n- [uncollectible](https://docs.stripe.com/invoicing/overview#uncollectible)\n-\n[invoice.paid](https://docs.stripe.com/api/events/types?event_types-invoice.paid)\n- [different types of payment\nmethods](https://stripe.com/payments/payment-methods-guide)\n-\n[invoice.payment_succeeded](https://docs.stripe.com/api/events/types?event_types-invoice.payment_succeeded)\n-\n[paid_out_of_band](https://docs.stripe.com/api/invoices/pay#pay_invoice-paid_out_of_band)\n- [Dashboard webhook tool](https://dashboard.stripe.com/webhooks)\n- [webhook quickstart](https://docs.stripe.com/webhooks/quickstart)\n-\n[payment_intent.processing](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.processing)\n-\n[invoice.payment_failed](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.payment_failed)\n-\n[Post-finalization](https://docs.stripe.com/invoicing/integration/workflow-transitions#post-finalized)\n- [Use incoming webhooks to get real-time\nupdates](https://docs.stripe.com/webhooks)",
  "metadata": {
    "title": "Integrate with the Invoicing API | Stripe Documentation",
    "description": "Learn how to create and send an invoice with code.",
    "sourceURL": "https://docs.stripe.com/invoicing/integration"
  }
}