{
  "content": "# Tax API for Sales Tax, GST, and VAT\n\n## Use Stripe Tax APIs to implement tax calculations in your custom integration.\n\n#### Note\n\nThis guide describes how to integrate Stripe Tax with a custom payment flow,\nsuch as [PaymentIntents](https://docs.stripe.com/api/payment_intents). You can\nalso integrate Stripe Tax with [Payment\nLinks](https://docs.stripe.com/tax/payment-links),\n[Checkout](https://docs.stripe.com/tax/checkout),\n[Billing](https://docs.stripe.com/tax/subscriptions) and\n[Invoicing](https://docs.stripe.com/tax/invoicing) with no or low code setups.\n\nStripe Tax APIs enable you to calculate tax in custom payment flows. After your\ncustomer completes their payment, record the transaction so it appears in Stripe\nTax reporting. The examples in this guide use Stripe payments APIs, but you can\nuse the Tax API with any payment processor, or multiple payment processors.\n\nClient\n\nServer\n\nStripe\n\nPreview order summary\n\nCalculate tax with API\n\nTotal amount and tax breakdown\n\nAdjust total amount and display tax information\n\nSubmit payment\n\nRecord transaction with API\n\nRequest a refund\n\nRecord a partial or full refund with API\n\nReport for filing taxes with all recorded transactions and refunds\n\nA diagram providing a high level overview of the tax api integration outlined in\nthis doc\n## Get started with a video demo\n\nThis short video walks through a Stripe Tax API integration that uses\nPaymentIntents and the Payment Element.\n\n[Add registrations](https://docs.stripe.com/tax/custom#add-registrations)\nStripe Tax only calculates tax in jurisdictions where you’re registered to\ncollect tax and requires you to [add your\nregistrations](https://docs.stripe.com/tax/registering#add-a-registration) in\nthe Dashboard.\n\n[OptionalCollect customer\naddressClient-side](https://docs.stripe.com/tax/custom#collect-address)[Calculate\ntaxServer-side](https://docs.stripe.com/tax/custom#calculate-tax)\nYou choose when and how often to [calculate\ntax](https://docs.stripe.com/api/tax/calculations/create). For example, you can:\n\n- Show a tax estimate [based on your customer’s IP\naddress](https://docs.stripe.com/tax/custom#ip-address) when they enter your\ncheckout flow\n- Recalculate tax as your customer types their billing or shipping address\n- Calculate the final tax amount to collect when your customer finishes typing\ntheir address\n\nStripe [charges a fee](https://stripe.com/tax/pricing) per tax calculation API\ncall. You can throttle tax calculation API calls to manage your costs.\n\nThe examples below show how to calculate tax in a variety of scenarios. Stripe\nTax only calculates tax in jurisdictions where you’re registered to collect tax\nand requires you to [add your\nregistrations](https://docs.stripe.com/tax/registering#add-a-registration) in\nthe Dashboard.\n\nExample:United States: tax-exclusive itemUnited States: multiple items with\nshippingUnited States: item with quantityEurope: tax-inclusive itemEurope:\nmultiple items with shippingShip-from address\nThis example calculates tax for a US shipping address. The line item has a price\nof 10 USD and uses your account’s [preset tax\ncode](https://docs.stripe.com/tax/set-up#preset-tax-code).\n\n```\ncurl https://api.stripe.com/v1/tax/calculations \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d currency=usd \\\n -d \"line_items[0][amount]\"=1000 \\\n -d \"line_items[0][reference]\"=L1 \\\n -d \"customer_details[address][line1]\"=\"920 5th Ave\" \\\n -d \"customer_details[address][city]\"=Seattle \\\n -d \"customer_details[address][state]\"=WA \\\n -d \"customer_details[address][postal_code]\"=98104 \\\n -d \"customer_details[address][country]\"=US \\\n -d \"customer_details[address_source]\"=shipping\n```\n\nThe [calculation response](https://docs.stripe.com/api/tax/calculations/object)\ncontains amounts you can display to your customer, and use to take payment:\n\nAttributeDescription[amount_total](https://docs.stripe.com/api/tax/calculations/object#tax_calculation_object-amount_total)The\ngrand total after calculating tax. Use this to set the PaymentIntent\n[amount](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-amount)\nto charge your\ncustomer.[tax_amount_exclusive](https://docs.stripe.com/api/tax/calculations/object#tax_calculation_object-tax_amount_exclusive)The\namount of tax added on top of your line item amounts and shipping cost. This tax\namount increases the `amount_total`. Use this to show your customer the amount\nof tax added to the transaction\nsubtotal.[tax_amount_inclusive](https://docs.stripe.com/api/tax/calculations/object#tax_calculation_object-tax_amount_inclusive)The\namount of tax that’s included in your line item amounts and shipping cost (if\nusing tax-inclusive pricing). This tax amount does not increase the\n`amount_total`. Use this to show your customer the tax included in the total\nthey’re\npaying.[tax_breakdown](https://docs.stripe.com/api/tax/calculations/object#tax_calculation_object-tax_breakdown)A\nlist of tax amounts broken out by country or state tax rate. Use this to show\nyour customer the specific taxes you’re collecting.\n### Handling customer location errors\n\nThe calculation returns the `customer_tax_location_invalid` error code if your\ncustomer’s address is invalid or isn’t precise enough to calculate tax:\n\n```\n{\n \"error\": {\n\"doc_url\": \"https://docs.stripe.com/error-codes#customer-tax-location-invalid\",\n \"code\": \"customer_tax_location_invalid\",\n\"message\": \"We could not determine the customer's tax location based on the\nprovided customer address.\",\n \"param\": \"customer_details[address]\",\n \"type\": \"invalid_request_error\"\n }\n}\n```\n\nWhen you receive this error, prompt your customer to check the address they’ve\nentered and fix any typos.\n\n[Create tax\ntransactionServer-side](https://docs.stripe.com/tax/custom#tax-transaction)\nCreating a tax transaction records the tax you’ve collected from your customer,\nso that later you can [download exports and generate\nreports](https://docs.stripe.com/tax/reports) to help with filing your taxes.\nYou can [create a\ntransaction](https://docs.stripe.com/api/tax/transactions/create_from_calculation)\nfrom a calculation until the\n[expires_at](https://docs.stripe.com/api/tax/calculations/object#tax_calculation_object-expires_at)\ntimestamp, 90 days after it’s created. Attempting to use it after this time\nreturns an error.\n\n#### Note\n\nThe transaction is considered effective on the date when create_from_calculation\nis called, and tax amounts won’t be recalculated.\n\nWhen creating a tax transaction, you must provide a unique `reference` for the\ntax transaction and each line item. The references appear in tax exports to help\nyou reconcile the tax you collected with the orders in your system.\n\nFor example, a tax transaction with reference `pi_123456789`, line item\nreferences `L1` and `L2`, and a shipping cost, looks like this in the itemized\ntax exports:\n\nIDline_item_idtypecurrencytransaction_date…pi_123456789L1externalusd2023-02-23\n17:01:16…pi_123456789L2externalusd2023-02-23\n17:01:16…pi_123456789shippingexternalusd2023-02-23 17:01:16…\nWhen your customer pays, use the calculation ID to record the tax collected. Two\nways to do this are:\n\n- If your server has an endpoint where your customer submits their order, you\ncan create the tax transaction after the order is successfully submitted.\n- Listen for the\n[payment_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-payment_intent.succeeded)\nwebhook event. Retrieve the calculation ID from the PaymentIntent `metadata`.\n\nThe example below creates a transaction and uses the PaymentIntent ID as the\nunique reference:\n\n```\ncurl https://api.stripe.com/v1/tax/transactions/create_from_calculation \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d calculation={{TAX_CALCULATION}} \\\n -d reference={{PAYMENT_INTENT_ID}} \\\n -d \"expand[]\"=line_items\n```\n\nStore the [tax transaction\nID](https://docs.stripe.com/api/tax/transactions/object#tax_transaction_object-id)\nso that later you can record refunds. You can store the transaction ID in your\ndatabase or in the PaymentIntent’s metadata:\n\n```\ncurl https://api.stripe.com/v1/payment_intents/{{PAYMENT_INTENT_ID}} \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d \"metadata[tax_transaction]\"={{TAX_TRANSACTION}}\n```\n\n[Record refundsServer-side](https://docs.stripe.com/tax/custom#reversals)\nAfter creating a tax transaction to record a sale to your customer, you might\nneed to record refunds. These are also represented as tax transactions, with\n`type=reversal`. Reversal transactions offset an earlier transaction by having\namounts with opposite signs. For example, a transaction that recorded a sale for\n50 USD might later have a full reversal of -50 USD.\n\nWhen you issue a refund (using Stripe or outside of Stripe) you need to create a\nreversal tax transaction with a unique `reference`. Common strategies include:\n\n- Append a suffix to the original reference. For example, if the original\ntransaction has reference `pi_123456789`, then create the reversal transaction\nwith reference `pi_123456789-refund`.\n- Use the ID of the [Stripe refund](https://docs.stripe.com/api/refunds/object)\nor a refund ID from your system. For example, `re_3MoslRBUZ691iUZ41bsYVkOg` or\n`myRefund_456`.\n\nChoose the approach that works best for how you reconcile your customer orders\nwith your [tax exports](https://docs.stripe.com/tax/reports).\n\n### Fully refund a sale\n\nWhen you fully refund a sale in your system, create a reversal transaction with\n`mode=full`.\n\nIn the example below, `tax_1MEFAAI6rIcR421eB1YOzACZ` is the tax transaction\nrecording the sale to your customer:\n\n```\ncurl https://api.stripe.com/v1/tax/transactions/create_reversal \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d mode=full \\\n -d original_transaction=tax_1MEFAAI6rIcR421eB1YOzACZ \\\n -d reference=pi_123456789-cancel \\\n -d \"expand[]\"=line_items\n```\n\nThis returns the full reversal transaction that’s created:\n\n```\n{\n \"id\": \"tax_1MEFtXI6rIcR421e0KTGXvCK\",\n \"object\": \"tax.transaction\",\n \"created\": 1670866467,\n \"currency\": \"eur\",\n \"customer\": null,\n \"customer_details\": {\n \"address\": {\n \"city\": null,\n \"country\": \"IE\",\n```\n\nSee all 73 lines\nFully reversing a transaction doesn’t affect previous partial reversals. When\nyou record a full reversal, make sure you [fully\nreverse](https://docs.stripe.com/tax/custom#reversals-void-refund) any previous\npartial reversals for the same transaction to avoid duplicate refunds.\n\n### Partially refund a sale\n\nAfter [issuing a refund](https://docs.stripe.com/api/refunds/create) to your\ncustomer, create a reversal tax transaction with `mode=partial`. This allows you\nto record a partial refund by providing the line item amounts refunded. You can\ncreate up to 30 partial reversals for each sale. Reversing more than the amount\nof tax you collected returns an error.\n\nThe example below records a refund of only the first line item in the original\ntransaction:\n\n```\ncurl https://api.stripe.com/v1/tax/transactions/create_reversal \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d mode=partial \\\n -d original_transaction=tax_1MEFAAI6rIcR421eB1YOzACZ \\\n -d reference=pi_123456789-refund_1 \\\n -d \"line_items[0][original_line_item]\"=tax_li_MyBXPByrSUwm6r \\\n -d \"line_items[0][reference]\"=L1 \\\n -d \"line_items[0][amount]\"=-4999 \\\n -d \"line_items[0][amount_tax]\"=-1150 \\\n -d \"metadata[refund]\"={{REFUND_ID}} \\\n--data-urlencode \"metadata[refund_reason]\"=\"Refunded line 1 of pi_123456789\n(customer was unhappy)\" \\\n -d \"expand[0]\"=line_items\n```\n\nThis returns the partial reversal transaction that’s created:\n\n```\n{\n \"id\": \"tax_1MEFACI6rIcR421eHrjXCSmD\",\n \"object\": \"tax.transaction\",\n \"created\": 1670863656,\n \"currency\": \"eur\",\n ...\n \"line_items\": {\n \"object\": \"list\",\n \"data\": [\n {\n```\n\nSee all 44 lines\nFor each line item reversed you need to provide the `amount` and `amount_tax`\nreversed. The `amount` is tax-inclusive if the original calculation line item\nwas tax-inclusive.\n\nHow `amount` and `amount_tax` are determined depends on your situation:\n\n- If your transactions always have a single line item, use [full\nreversals](https://docs.stripe.com/tax/custom#reversals-full) instead.\n- If you always refund entire line items, use the original transaction line item\n`amount` and `amount_tax`, but with negative signs.\n- If you refund parts of line items, you need to calculate the amounts refunded.\nFor example, for a sale transaction with `amount=5000` and `amount_tax=500`,\nafter refunding half the line item you’d create a partial reversal with line\nitem `amount=-2500` and `amount_tax=-250`.\n\n### Partially refund a sale by a flat amount\n\nAlternatively, you can create a reversal with `mode=partial` by specifying a\nflat after-tax amount to refund. The amount distributes across each line item\nand shipping cost proportionally, depending on the remaining amount left to\nrefund on each.\n\nIn the example below, the transaction has two line items: one 10 USD item and\none 20 USD item, both taxed at 10%. The total amount of the transaction is 33.00\nUSD. A refund for a flat 16.50 USD is recorded:\n\n```\ncurl https://api.stripe.com/v1/tax/transactions/create_reversal \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d mode=partial \\\n -d original_transaction=tax_1NVcKqBUZ691iUZ4xMZtcGYt \\\n -d reference=pi_234567890-refund_1 \\\n -d flat_amount=-1650 \\\n -d \"metadata[refund]\"={{REFUND_ID}} \\\n--data-urlencode \"metadata[refund_reason]\"=\"Refunded $16.50 of pi_234567890\n(customer was unhappy)\" \\\n -d \"expand[]\"=line_items\n```\n\nThis returns the partial reversal transaction that’s created:\n\n```\n{\n \"id\": \"tax_1NVcQYBUZ691iUZ4SBPukGa6\",\n \"object\": \"tax.transaction\",\n \"created\": 1689780994,\n \"currency\": \"usd\",\n ...\n \"line_items\": {\n \"object\": \"list\",\n \"data\": [\n {\n```\n\nSee all 61 lines\nFor each line item and shipping cost in the original transaction, the refunded\namounts and tax are calculated as follows:\n\n- First, we calculate the total remaining funds in the transaction available to\nrefund. Because this transaction hasn’t had any other reversals recorded, the\ntotal amount is 33.00 USD.\n- Next, we calculate the total amount to refund for each line item. We base this\ncalculation on the proportion of the item’s total available amount to refund\nversus the total remaining amount of the transaction. For example, the 10 USD\nitem, which has 11.00 USD total remaining to refund, represents 33.33% of the\ntransaction’s remaining total, so the total amount to refund is `-16.50 USD *\n33.33% = -5.50 USD`.\n- Finally, the total amount to refund is divided between `amount` and\n`amount_tax`. We also do this proportionally, depending on how much tax is\navailable to refund in the line item compared to the total funds left to refund.\nUsing the 10 USD item example, tax (1.00 USD) represents 9.09% of the total\nremaining to refund (11.00 USD), so the `amount_tax` is `-5.50 USD * 9.09% =\n-0.50 USD`.\n\nThe flat amount distributes according to what’s *left* to refund in the\ntransaction, not what was originally recorded. Consider this example: instead of\nrecording a refund for a flat 16.50 USD, you first record a partial reversal for\nthe total amount of the 10 USD item:\n\n```\ncurl https://api.stripe.com/v1/tax/transactions/create_reversal \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d mode=partial \\\n -d original_transaction=tax_1NVcKqBUZ691iUZ4xMZtcGYt \\\n -d reference=pi_234567890-refund_1 \\\n -d \"line_items[0][original_line_item]\"=tax_li_OICmRXkFuWr8Df \\\n -d \"line_items[0][reference]\"=partial_refund_l1 \\\n -d \"line_items[0][amount]\"=-1000 \\\n -d \"line_items[0][amount_tax]\"=-100 \\\n -d \"metadata[refund]\"={{REFUND_ID}} \\\n--data-urlencode \"metadata[refund_reason]\"=\"Refunded line 1 of pi_234567890\n(customer was unhappy)\" \\\n -d \"expand[0]\"=line_items\n```\n\nAfter this, you record a 16.50 USD flat amount reversal:\n\n```\ncurl https://api.stripe.com/v1/tax/transactions/create_reversal \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d mode=partial \\\n -d original_transaction=tax_1NVcKqBUZ691iUZ4xMZtcGYt \\\n -d reference=pi_234567890-refund_2 \\\n -d flat_amount=-1650 \\\n -d \"metadata[refund]\"={{REFUND_ID}} \\\n--data-urlencode \"metadata[refund_reason]\"=\"Refunded $16.50 of pi_234567890\n(customer was still unhappy)\" \\\n -d \"expand[]\"=line_items\n```\n\nThis returns the partial reversal transaction:\n\n```\n{\n \"id\": \"tax_1NVxFIBUZ691iUZ4saOIloxB\",\n \"object\": \"tax.transaction\",\n \"created\": 1689861020,\n \"currency\": \"usd\",\n ...\n \"line_items\": {\n \"object\": \"list\",\n \"data\": [\n {\n```\n\nSee all 58 lines\nBecause the total amount remaining in the transaction is now 22.00 USD and the\n10 USD item is completely refunded, the 16.50 USD distributes entirely to the 20\nUSD item. The 16.50 USD then distributes, using the logic from step 3, into\n`amount = -15.00 USD` and `amount_tax = -1.50 USD`. Meanwhile, the 10 USD item\nin the transaction records a refund of 0 USD.\n\n### Undo a partial refund\n\nTax transactions are immutable but you can cancel out a partial refund by\ncreating a [full\nreversal](https://docs.stripe.com/api/tax/transactions/create_reversal#tax_transaction_create_reversal-mode)\nof it.\n\nYou might need to do this when:\n\n- The payment [refund fails](https://docs.stripe.com/refunds#failed-refunds) and\nyou haven’t provided the good or service to your customer\n- The wrong order is refunded or the wrong amounts are refunded\n- The original sale is fully refunded and the partial refunds are no longer\nvalid\n\nIn the example below, `tax_1MEFACI6rIcR421eHrjXCSmD` is the transaction\nrepresenting the partial refund:\n\n```\ncurl https://api.stripe.com/v1/tax/transactions/create_reversal \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d mode=full \\\n -d original_transaction=tax_1MEFACI6rIcR421eHrjXCSmD \\\n -d reference=pi_123456789-refund_1-cancel \\\n-d \"metadata[refund_reason]\"=\"User called to cancel because they picked the\nwrong item\" \\\n -d \"expand[]\"=line_items\n```\n\nThis returns the full reversal transaction that’s created:\n\n```\n{\n \"id\": \"tax_1MEFADI6rIcR421e94fNTOCK\",\n \"object\": \"tax.transaction\",\n \"created\": 1670863657,\n \"currency\": \"eur\",\n ...\n \"line_items\": {\n \"object\": \"list\",\n \"data\": [\n {\n```\n\nSee all 43 lines[Testing](https://docs.stripe.com/tax/custom#testing)\nThe response structure in [test mode](https://docs.stripe.com/test-mode) is\nidentical to live mode, so that you can confirm your integration is working\ncorrectly before going live.\n\n#### Warning\n\nWe don’t guarantee test mode calculations return up-to-date taxation results.\n\nYou are limited to 1,000 test mode tax calculations per day. Contact [Stripe\nsupport](https://support.stripe.com/contact) if you need a higher limit.\n\n[View tax transactions in the\nDashboard](https://docs.stripe.com/tax/custom#view-recorded-transactions)\nYou can view all tax transactions for your account on the [Tax\nTransactions](https://dashboard.stripe.com/test/tax/transactions) page in the\nDashboard. Click an individual transaction to see a detailed breakdown of\ncalculated tax by jurisdiction, and by the individual products included in the\ntransaction.\n\n#### Note\n\nThis page only includes *transactions* and not *calculations*. If you expect a\ncalculation to be visible but can’t find it on this page, check that you’ve\nsuccessfully [created a tax\ntransaction](https://docs.stripe.com/tax/custom#tax-transaction) from the\ncalculation.\n\n[OptionalIntegration\nexamples](https://docs.stripe.com/tax/custom#integration-examples)[OptionalCalculate\ntax on shipping\ncostsServer-side](https://docs.stripe.com/tax/custom#shipping-costs)[OptionalEstimate\ntaxes with an IP\naddressServer-side](https://docs.stripe.com/tax/custom#ip-address)[OptionalCollect\ncustomer tax\nIDsServer-side](https://docs.stripe.com/tax/custom#tax-ids)[OptionalTax-inclusive\npricingServer-side](https://docs.stripe.com/tax/custom#inclusive-pricing)[OptionalUse\nan existing Product\nobjectServer-side](https://docs.stripe.com/tax/custom#existing-product)[OptionalUse\nan existing Customer\nobjectServer-side](https://docs.stripe.com/tax/custom#existing-customer)[OptionalOverride\ncustomer\ntaxabilityServer-side](https://docs.stripe.com/tax/custom#taxability-override)[OptionalSpecify\na ship-from\nlocationServer-side](https://docs.stripe.com/tax/custom#ship_from)[OptionalCalculate\nthe retail delivery\nfeeServer-side](https://docs.stripe.com/tax/custom#retail_delivery_fee)[OptionalDetailed\nline item tax\nbreakdownsServer-side](https://docs.stripe.com/tax/custom#tax-breakdowns)\n## See also\n\n- [Use Stripe Tax with Connect](https://docs.stripe.com/tax/connect)\n\n## Links\n\n- [PaymentIntents](https://docs.stripe.com/api/payment_intents)\n- [Payment Links](https://docs.stripe.com/tax/payment-links)\n- [Checkout](https://docs.stripe.com/tax/checkout)\n- [Billing](https://docs.stripe.com/tax/subscriptions)\n- [Invoicing](https://docs.stripe.com/tax/invoicing)\n- [add your\nregistrations](https://docs.stripe.com/tax/registering#add-a-registration)\n- [calculate tax](https://docs.stripe.com/api/tax/calculations/create)\n- [charges a fee](https://stripe.com/tax/pricing)\n- [preset tax code](https://docs.stripe.com/tax/set-up#preset-tax-code)\n- [calculation response](https://docs.stripe.com/api/tax/calculations/object)\n-\n[amount_total](https://docs.stripe.com/api/tax/calculations/object#tax_calculation_object-amount_total)\n-\n[amount](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-amount)\n-\n[tax_amount_exclusive](https://docs.stripe.com/api/tax/calculations/object#tax_calculation_object-tax_amount_exclusive)\n-\n[tax_amount_inclusive](https://docs.stripe.com/api/tax/calculations/object#tax_calculation_object-tax_amount_inclusive)\n-\n[tax_breakdown](https://docs.stripe.com/api/tax/calculations/object#tax_calculation_object-tax_breakdown)\n-\n[https://docs.stripe.com/error-codes#customer-tax-location-invalid](https://docs.stripe.com/error-codes#customer-tax-location-invalid)\n- [download exports and generate reports](https://docs.stripe.com/tax/reports)\n- [create a\ntransaction](https://docs.stripe.com/api/tax/transactions/create_from_calculation)\n-\n[expires_at](https://docs.stripe.com/api/tax/calculations/object#tax_calculation_object-expires_at)\n-\n[payment_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-payment_intent.succeeded)\n- [tax transaction\nID](https://docs.stripe.com/api/tax/transactions/object#tax_transaction_object-id)\n- [Stripe refund](https://docs.stripe.com/api/refunds/object)\n- [issuing a refund](https://docs.stripe.com/api/refunds/create)\n- [full\nreversal](https://docs.stripe.com/api/tax/transactions/create_reversal#tax_transaction_create_reversal-mode)\n- [refund fails](https://docs.stripe.com/refunds#failed-refunds)\n- [test mode](https://docs.stripe.com/test-mode)\n- [Stripe support](https://support.stripe.com/contact)\n- [Tax Transactions](https://dashboard.stripe.com/test/tax/transactions)\n- [Use Stripe Tax with Connect](https://docs.stripe.com/tax/connect)",
  "metadata": {
    "title": "Tax API for Sales Tax, GST, and VAT | Stripe Documentation",
    "description": "Use Stripe Tax APIs to calculate sales tax, GST, and VAT with Stripe's payments APIs and non-Stripe payment processors",
    "sourceURL": "https://docs.stripe.com/tax/custom"
  }
}