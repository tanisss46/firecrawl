{
  "content": "# Build a custom checkout page that includes Link\n\n## Integrate Link using the Payment Element or Link Authentication Element.\n\nThis guide walks you through how to accept payments with\n[Link](https://docs.stripe.com/payments/link) using the [Payment Intents\nAPI](https://docs.stripe.com/api/payment_intents) and either the [Payment\nElement](https://docs.stripe.com/payments/payment-element) or [Link\nAuthentication\nElement](https://docs.stripe.com/payments/elements/link-authentication-element).\n\nThere are three ways you can secure a customer email address for Link\nauthentication and enrollment:\n\n- **Pass in an email address:** You can pass an email address to the Payment\nElement using\n[defaultValues](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-defaultValues).\nIf you’re already collecting the email address and or customer’s phone number in\nthe checkout flow, we recommend this approach.\n- **Collect an email address:** You can collect an email address directly in the\nPayment Element. If you’re not collecting the email address anywhere in the\ncheckout flow, we recommend this approach.\n- **Link Authentication Element:** You can use the Link Authentication Element\nto create a single email input field for both email collection and Link\nauthentication. We recommend doing this if you use the [Address\nElement](https://docs.stripe.com/elements/address-element).\n\n![Authenticate or enroll with Link directly in the Payment Element during\ncheckout](https://b.stripecdn.com/docs-statics-srv/assets/link-in-pe.2efb5138a4708b781b8a913ebddd9aba.png)\n\nCollect a customer email address for Link authentication or enrollment\n\n[Set up\nStripeServer-side](https://docs.stripe.com/payments/link/add-link-elements-integration#set-up-stripe)\nFirst, [create a Stripe account](https://dashboard.stripe.com/register) or [sign\nin](https://dashboard.stripe.com/login).\n\nUse our official libraries to access the Stripe API from your application:\n\n```\n# Available as a gem\nsudo gem install stripe\n```\n\n```\n# If you use bundler, you can add this line to your Gemfile\ngem 'stripe'\n```\n\n[Create a\nPaymentIntentServer-side](https://docs.stripe.com/payments/link/add-link-elements-integration#web-create-intent)\nStripe uses a [PaymentIntent](https://docs.stripe.com/api/payment_intents)\nobject to represent your intent to collect payment from a customer, tracking\ncharge attempts and payment state changes throughout the process.\n\n![An overview diagram of the entire payment\nflow](https://b.stripecdn.com/docs-statics-srv/assets/accept-a-payment-payment-element.5cf6795a02f864923f9953611493d735.svg)\n\nIf you collect card details for [future usage with Setup\nIntents](https://docs.stripe.com/payments/save-and-reuse), list payment methods\nmanually instead of using dynamic payment methods. To use Link without dynamic\npayment methods, update your integration to pass `link` to\n`payment_method_types`.\n\nWhen you create a PaymentIntent, [dynamically offer your customers the most\nrelevant payment\nmethods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods),\nincluding Link, by using dynamic payment methods. To use dynamic payment\nmethods, don’t include the `payment_method_types` parameter. Optionally, you can\nalso enable `automatic_payment_methods`.\n\n#### Note\n\nWhen your integration doesn’t set the `payment_method_types` parameter, some\npayment methods turn on automatically, including cards and wallets.\n\nTo add Link to your Elements integration using dynamic payment methods:\n\n- In your Dashboard [payment method\nsettings](https://dashboard.stripe.com/settings/payment_methods), turn on Link.\n- If you have an existing integration that manually lists payment methods,\nremove the\n[payment_method_types](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-payment_method_types)\nparameter from your integration.\n\n### Retrieve the client secret\n\nThe PaymentIntent includes a [client\nsecret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret)\nthat the client side uses to securely complete the payment process. You can use\ndifferent approaches to pass the client secret to the client side.\n\nSingle-page applicationServer-side rendering\nRetrieve the client secret from an endpoint on your server, using the browser’s\n`fetch` function. This approach is best if your client side is a single-page\napplication, particularly one built with a modern frontend framework like React.\nCreate the server endpoint that serves the client secret:\n\n```\nget '/secret' do\n intent = # ... Create or retrieve the PaymentIntent\n {client_secret: intent.client_secret}.to_json\nend\n```\n\nAnd then fetch the client secret with JavaScript on the client side:\n\n```\n(async () => {\n const response = await fetch('/secret');\n const {client_secret: clientSecret} = await response.json();\n // Render the form using the clientSecret\n})();\n```\n\n[Collect customer\nemail](https://docs.stripe.com/payments/link/add-link-elements-integration#design-your-integration)\nLink authenticates a customer by using their email address. Depending on your\ncheckout flow, you have the following options: pass an email to the Payment\nElement, collect it directly within the Payment Element, or use the Link\nAuthentication Element. Of these, Stripe recommends passing a customer email\naddress to the Payment Element if available.\n\nPass in an emailCollect an emailUse the Link Authentication Element\nIf *any* of the following apply to you:\n\n- You want a single, optimized component for email collection and Link\nauthentication.\n- You need to collect a shipping address from your customer.\n\nThen use the integration flow that implements these elements: the Link\nAuthentication Element, Payment Element and optional Address Element.\n\nA Link-enabled checkout page has the Link Authentication Element at the\nbeginning, followed by the Address Element, and the Payment Element at the end.\nYou can also display the Link Authentication Element on separate pages, in this\nsame order, for multi-page checkout flows.\n\n![Create a payment form using multiple\nElements](https://b.stripecdn.com/docs-statics-srv/assets/link-with-elements.f60af275f69b6e6e73c766d1f9928457.png)\n\nCreate a payment form using multiple Elements\n\nThe integration works as follows:\n\nCustomer\n\nStripe\n\nLink\n\nMerchant\n\nCustomer enters email into Link Authentication Element\n\nCustomer authenticates to Link\n\nThe Payment Element displays Link-stored payment information in your Stripe\npayment page\n\nCustomer pays\n\nPayment with payment_method_type=link\n\nA diagram describing how to integrate Link using the Link Authentication\nElement[Set up your payment\nformClient-side](https://docs.stripe.com/payments/link/add-link-elements-integration#web-collect-payment-details)\nNow you can set up your custom payment form with the Elements prebuilt UI\ncomponents. Your payment page address must start with `https://` rather than\n`http://` for your integration to work. You can test your integration without\nusing HTTPS. [Enable HTTPS](https://docs.stripe.com/security/guide#tls) when\nyou’re ready to accept live payments.\n\nPass in an emailCollect an emailUse the Link Authentication Element\nThe Link Authentication Element renders an email address input. When Link\nmatches a customer email with an existing Link account, it sends the customer a\nsecure, one-time code to their phone to authenticate. If the customer\nsuccessfully authenticates, Stripe displays their Link-saved addresses and\npayment methods automatically for them to use.\n\nThis integration also creates the Payment Element, which renders a dynamic form\nthat allows your customer to pick a payment method type. The form automatically\ncollects all necessary payments details for the payment method type selected by\nthe customer. The Payment Element also handles the display of Link-saved payment\nmethods for authenticated customers.\n\nReactHTML + JS\n### Set up Stripe Elements\n\nInstall [React Stripe.js](https://www.npmjs.com/package/@stripe/react-stripe-js)\nand the [Stripe.js loader](https://www.npmjs.com/package/@stripe/stripe-js) from\nthe npm public registry.\n\n```\nnpm install --save @stripe/react-stripe-js @stripe/stripe-js\n```\n\nOn your payment page, wrap your payment form with the `Elements` component,\npassing the [client\nsecret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret)\nfrom [the previous\nstep](https://docs.stripe.com/payments/link/add-link-elements-integration#web-create-intent).\n​​If you already collect the customer’s email in another part of your form,\nreplace your existing input with the `linkAuthenticationElement​`.\n\nIf you don’t collect email, add the `linkAuthenticationElement​` to your\ncheckout flow. You must place the `linkAuthenticationElement` before the\n`ShippingAddressElement` (optional if you collect shipping addresses) and the\n`PaymentElement` for Link to autofill Link-saved details for your customer in\nthe `ShippingAddressElement` and `PaymentElement`. You can also pass in the\n[appearance option](https://docs.stripe.com/elements/appearance-api),\ncustomizing the Elements to match the design of your site.\n\nIf you have the customer’s email, pass it to the `defaultValues` option of the\n`linkAuthenticationElement`. This prefills their email address and initiates the\nLink authentication process.\n\nIf you have other customer information, pass it to the\n`defaultValues.billingDetails` object for the `PaymentElement`. Prefilling as\nmuch information as possible simplifies Link account creation and reuse for your\ncustomers.\n\nThen, render the `linkAuthenticationElement` and `PaymentElement` components in\nyour payment form:\n\n```\nimport {loadStripe} from \"@stripe/stripe-js\";\nimport {\n Elements,\n LinkAuthenticationElement,\n PaymentElement,\n} from \"@stripe/react-stripe-js\";\n\nconst stripe = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\n// Customize the appearance of Elements using the Appearance API.\nconst appearance = {/* ... */};\n\n// Enable the skeleton loader UI for the optimal loading experience.\nconst loader = 'auto';\n\n```\n\nSee all 49 lines\nThe `linkAuthenticationElement`, `PaymentElement`, and `ShippingAddressElement`\ndon’t need to be on the same page. If you have a process where customer contact\ninformation, shipping details, and payment details display to the customer in\nseparate steps, you can display each Element in the appropriate step or page.\nInclude the `linkAuthenticationElement` as the email input form in the contact\ninfo collection step to make sure the customer can take full advantage of the\nshipping and payment autofill provided by Link.\n\nIf you collect your customer’s email with the Link Authentication Element early\nin the checkout flow, you don’t need to show it again on the shipping or payment\npages.\n\n### Retrieve an email address\n\nYou can retrieve the email address details using the `onChange` prop on the\n`linkAuthenticationElement` component. The `onChange` handler fires whenever the\nuser updates the email field, or when a saved customer email is autofilled.\n\n```\n<linkAuthenticationElement onChange={(event) => {\n setEmail(event.value.email);\n}} />\n```\n\n### Prefill a customer email address\n\nThe Link Authentication Element accepts an email address. Providing a customer’s\nemail address triggers the Link authentication flow as soon as the customer\nlands on the payment page using the `defaultValues` option.\n\n```\n<linkAuthenticationElement options={{defaultValues: {email: 'foo@bar.com'}}}/>\n```\n\n[OptionalPrefill additional customer\ndataClient-side](https://docs.stripe.com/payments/link/add-link-elements-integration#prefill-customer-data)[OptionalCollect\nshipping\naddressesClient-side](https://docs.stripe.com/payments/link/add-link-elements-integration#collect-shipping)[OptionalCustomize\nthe\nappearanceClient-side](https://docs.stripe.com/payments/link/add-link-elements-integration#customize-appearance)[Submit\nthe payment to\nStripeClient-side](https://docs.stripe.com/payments/link/add-link-elements-integration#web-submit-payment)\nUse\n[stripe.confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment)\nto complete the payment with details collected from your customer in the\ndifferent Elements forms. Provide a\n[return_url](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-return_url)\nto this function to indicate where Stripe redirects the user after they complete\nthe payment.\n\nYour user might be first redirected to an intermediate site, like a bank\nauthorization page, before Stripe redirects them to the `return_url`.\n\nBy default, card and bank payments immediately redirect to the `return_url` when\na payment is successful. If you don’t want to redirect to the `return_url`, you\ncan use\n[if_required](https://docs.stripe.com/js/payment_intents/confirm_payment#confirm_payment_intent-options-redirect)\nto change the behavior.\n\nReactHTML + JS\n```\nimport {loadStripe} from \"@stripe/stripe-js\";\nimport {\n useStripe,\n useElements,\n Elements,\n LinkAuthenticationElement,\n PaymentElement,\n // If collecting shipping\n AddressElement,\n} from \"@stripe/react-stripe-js\";\n\nconst stripe = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst appearance = {/* ... */};\n\n// Enable the skeleton loader UI for the optimal loading experience.\nconst loader = 'auto';\n\nconst CheckoutPage =({clientSecret}) => (\n <Elements stripe={stripe} options={{clientSecret, appearance, loader}}>\n <CheckoutForm />\n </Elements>\n);\n\nexport default function CheckoutForm() {\n const stripe = useStripe();\n const elements = useElements();\n\n const handleSubmit = async (event) => {\n event.preventDefault();\n\n const {error} = await stripe.confirmPayment({\n elements,\n confirmParams: {\n return_url: \"https://example.com/order/123/complete\",\n },\n });\n\n if (error) {\n // handle error\n }\n };\n\n return (\n <form onSubmit={handleSubmit}>\n <h3>Contact info</h3>\n <LinkAuthenticationElement />\n {/* If collecting shipping */}\n <h3>Shipping</h3>\n <AddressElement options={{mode: 'shipping', allowedCountries: ['US']}} />\n <h3>Payment</h3>\n <PaymentElement />\n\n <button type=\"submit\">Submit</button>\n </form>\n );\n}\n```\n\nThe `return_url` corresponds to a page on your website that provides [the\npayment\nstatus](https://docs.stripe.com/payments/payment-intents/verifying-status) of\nthe `PaymentIntent` when you render the return page. When Stripe redirects the\ncustomer to the `return_url`, you can use the following URL query parameters to\nverify payment status. You can also append your own query parameters when\nproviding the `return_url`. These query parameters persist through the redirect\nprocess.\n\nParameterDescription`payment_intent`The unique identifier for the\n`PaymentIntent``payment_intent_client_secret`The [client\nsecret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret)\nof the `PaymentIntent` object.[OptionalSeparate authorization and\ncaptureServer-side](https://docs.stripe.com/payments/link/add-link-elements-integration#manual-capture)[Handle\npost-payment\neventsServer-side](https://docs.stripe.com/payments/link/add-link-elements-integration#web-post-payment)\nStripe sends a\n[payment_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-payment_intent.succeeded)\nevent when the payment completes. [Use a webhook to receive these\nevents](https://docs.stripe.com/webhooks/quickstart) and run actions, like\nsending an order confirmation email to your customer, logging the sale in a\ndatabase, or starting a shipping workflow.\n\nConfigure your integration to listen for these events rather than waiting on a\ncallback from the client. When you wait on a callback from the client, the\ncustomer can close the browser window or quit the app before the callback\nexecutes. Setting up your integration to listen for asynchronous events enables\nyou to accept [different types of payment\nmethods](https://stripe.com/payments/payment-methods-guide) with a single\nintegration.\n\nIn addition to handling the `payment_intent.succeeded` event, you can also\nhandle two other important events when collecting payments with the Payment\nElement:\n\nEventDescriptionAction[payment_intent.succeeded](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.succeeded)Sent\nfrom Stripe when a customer has successfully completed a payment.Send the\ncustomer an order confirmation and fulfill their\norder.[payment_intent.payment_failed](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.payment_failed)Sent\nfrom Stripe when a customer attempted a payment, but the payment didn’t\nsucceed.If a payment transitioned from `processing` to `payment_failed`, offer\nthe customer another attempt to pay.[Test the\nintegration](https://docs.stripe.com/payments/link/add-link-elements-integration#web-test-the-integration)\n#### Caution\n\nDon’t store real user data in [sandbox](https://docs.stripe.com/sandboxes) Link\naccounts. Treat them as if they’re publicly available, because these test\naccounts are associated with your publishable key.\n\nCurrently, Link only works with credit cards, debit cards, and qualified US bank\naccount purchases. Link requires [domain\nregistration](https://docs.stripe.com/payments/payment-methods/pmd-registration).\n\nYou can create sandbox accounts for Link using any valid email address. The\nfollowing table shows the fixed one-time passcode values that Stripe accepts for\nauthenticating sandbox accounts:\n\nValueOutcomeAny other 6 digits not listed belowSuccess000001Error, code\ninvalid000002Error, code expired000003Error, max attempts exceeded\nFor testing specific payment methods, refer to the [Payment Element testing\nexamples](https://docs.stripe.com/payments/accept-a-payment?platform=web#additional-testing-resources).\n\n### Multiple funding sources\n\nAs Stripe adds additional funding source support, you don’t need to update your\nintegration. Stripe automatically supports them with the same transaction\nsettlement time and guarantees as card and bank account payments.\n\n### Card authentication and 3D Secure\n\nLink supports [3D Secure 2 (3DS2)](https://stripe.com/guides/3d-secure-2)\nauthentication for card payments. 3DS2 requires customers to complete an\nadditional verification step with the card issuer when paying. Payments that\nhave been successfully authenticated using 3D Secure are covered by a liability\nshift.\n\nTo trigger 3DS2 authentication challenge flows with Link in a sandbox, use the\nfollowing test card with any CVC, postal code, and future expiration date:\n4000000000003220.\n\nIn a sandbox, the authentication process displays a mock authentication page. On\nthat page, you can either authorize or cancel the payment. Authorizing the\npayment simulates successful authentication and redirects you to the specified\nreturn URL. Clicking the **Failure** button simulates an unsuccessful attempt at\nauthentication.\n\nFor more details, refer to the [3D Secure authentication\npage](https://docs.stripe.com/payments/3d-secure).\n\n#### Note\n\nWhen testing 3DS flows, only test cards for 3DS2 will trigger authentication on\nLink.\n\n[OptionalDisplay customer-saved\ndataServer-sideClient-side](https://docs.stripe.com/payments/link/add-link-elements-integration#display-customer-saved-data)[OptionalSave\nLink payment\nmethodsServer-sideClient-side](https://docs.stripe.com/payments/link/add-link-elements-integration#saving-link-payment-methods)\n## Disclose Stripe to your customers\n\nStripe collects information on customer interactions with Elements to provide\nservices to you, prevent fraud, and improve its services. This includes using\ncookies and IP addresses to identify which Elements a customer saw during a\nsingle checkout session. You’re responsible for disclosing and obtaining all\nrights and consents necessary for Stripe to use data in these ways. For more\ninformation, visit our [privacy\ncenter](https://stripe.com/legal/privacy-center#as-a-business-user-what-notice-do-i-provide-to-my-end-customers-about-stripe).\n\n## See also\n\n- [What is Link](https://docs.stripe.com/payments/link)\n- [Link with Elements](https://docs.stripe.com/payments/link/elements-link)\n- [Link in the Payment\nElement](https://docs.stripe.com/payments/link/payment-element-link)\n- [Explore the Link Authentication\nElement](https://docs.stripe.com/payments/link/link-authentication-element)\n- [Link in different payment\nintegrations](https://docs.stripe.com/payments/link/link-payment-integrations)\n\n## Links\n\n- [Link](https://docs.stripe.com/payments/link)\n- [Payment Intents API](https://docs.stripe.com/api/payment_intents)\n- [Payment Element](https://docs.stripe.com/payments/payment-element)\n- [Link Authentication\nElement](https://docs.stripe.com/payments/elements/link-authentication-element)\n-\n[defaultValues](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-defaultValues)\n- [Address Element](https://docs.stripe.com/elements/address-element)\n- [create a Stripe account](https://dashboard.stripe.com/register)\n- [sign in](https://dashboard.stripe.com/login)\n- [future usage with Setup\nIntents](https://docs.stripe.com/payments/save-and-reuse)\n- [dynamically offer your customers the most relevant payment\nmethods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods)\n- [payment method\nsettings](https://dashboard.stripe.com/settings/payment_methods)\n-\n[payment_method_types](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-payment_method_types)\n- [client\nsecret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret)\n- [Enable HTTPS](https://docs.stripe.com/security/guide#tls)\n- [React Stripe.js](https://www.npmjs.com/package/@stripe/react-stripe-js)\n- [Stripe.js loader](https://www.npmjs.com/package/@stripe/stripe-js)\n- [appearance option](https://docs.stripe.com/elements/appearance-api)\n-\n[stripe.confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment)\n-\n[return_url](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-return_url)\n-\n[if_required](https://docs.stripe.com/js/payment_intents/confirm_payment#confirm_payment_intent-options-redirect)\n- [the payment\nstatus](https://docs.stripe.com/payments/payment-intents/verifying-status)\n-\n[payment_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-payment_intent.succeeded)\n- [Use a webhook to receive these\nevents](https://docs.stripe.com/webhooks/quickstart)\n- [different types of payment\nmethods](https://stripe.com/payments/payment-methods-guide)\n-\n[payment_intent.succeeded](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.succeeded)\n-\n[payment_intent.payment_failed](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.payment_failed)\n- [sandbox](https://docs.stripe.com/sandboxes)\n- [domain\nregistration](https://docs.stripe.com/payments/payment-methods/pmd-registration)\n- [Payment Element testing\nexamples](https://docs.stripe.com/payments/accept-a-payment?platform=web#additional-testing-resources)\n- [3D Secure 2 (3DS2)](https://stripe.com/guides/3d-secure-2)\n- [3D Secure authentication page](https://docs.stripe.com/payments/3d-secure)\n- [privacy\ncenter](https://stripe.com/legal/privacy-center#as-a-business-user-what-notice-do-i-provide-to-my-end-customers-about-stripe)\n- [Link with Elements](https://docs.stripe.com/payments/link/elements-link)\n- [Link in the Payment\nElement](https://docs.stripe.com/payments/link/payment-element-link)\n- [Explore the Link Authentication\nElement](https://docs.stripe.com/payments/link/link-authentication-element)\n- [Link in different payment\nintegrations](https://docs.stripe.com/payments/link/link-payment-integrations)",
  "metadata": {
    "title": "Build a custom checkout page that includes Link | Stripe Documentation",
    "description": "Integrate Link using the Payment Element or Link Authentication Element.",
    "sourceURL": "https://docs.stripe.com/payments/link/add-link-elements-integration"
  }
}