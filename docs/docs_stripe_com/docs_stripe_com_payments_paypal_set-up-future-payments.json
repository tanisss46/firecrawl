{
  "content": "# Set up future PayPal payments\n\n## Learn how to save PayPal details and charge your customers later.\n\n## Enable recurring payments support from the Stripe Dashboard\n\nYou can request access to the recurring payments directly from the Stripe\nDashboard. To do that, go to the [Payment Methods\nSettings](https://dashboard.stripe.com/settings/payment_methods) page, find\nPayPal and click **Enable** next to the Recurring Payments section. You’ll see\nthe **pending** status. It usually takes up to 5 business days to get access to\nthe recurring payments for PayPal. When access is granted, you’ll see recurring\npayments on your [PayPal\nsettings](https://dashboard.stripe.com/settings/payment_methods) page. For test\nmode, recurring payments are enabled by default.\n\nWebMobileStripe-hosted pageDirect API\nUse [Stripe Checkout](https://docs.stripe.com/payments/checkout) to collect\nPayPal payment details in advance, and determine the final amount or payment\ndate later. Use it to:\n\n- Save payment methods to a wallet to streamline future purchases\n- Collect surcharges after fulfilling a service\n- [Start a free trial for a\nsubscription](https://docs.stripe.com/billing/subscriptions/trials)\n[Set up\nStripeServer-side](https://docs.stripe.com/payments/paypal/set-up-future-payments#set-up-stripe)\nFirst, you need a Stripe account. [Register\nnow](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n```\n# Available as a gem\nsudo gem install stripe\n```\n\n```\n# If you use bundler, you can add this line to your Gemfile\ngem 'stripe'\n```\n\n[Create or retrieve a Customer before\nsetupServer-side](https://docs.stripe.com/payments/paypal/set-up-future-payments#create-customer)\nTo reuse a PayPal payment method for future payments, it must be attached to a\n[Customer](https://docs.stripe.com/api/customers).\n\nYou should create a Customer object when your customer creates an account on\nyour business. Associating the ID of the Customer object with your own internal\nrepresentation of a customer will enable you to retrieve and use the stored\npayment method details later. If your customer hasn’t created an account, you\ncan still create a Customer object now and associate it with your internal\nrepresentation of the customer’s account later.\n\n```\ncurl -X POST https://api.stripe.com/v1/customers \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\"\n```\n\n[Create a Checkout\nSessionClient-sideServer-side](https://docs.stripe.com/payments/paypal/set-up-future-payments#create-checkout-session)\nBefore you can accept PayPal payments, your customer must authorize you to use\ntheir PayPal account for future payments through Stripe Checkout.\n\nAdd a checkout button to your website that calls a server-side endpoint to\ncreate a [Checkout Session](https://docs.stripe.com/api/checkout/sessions).\n\n```\n<html>\n <head>\n <title>Checkout</title>\n </head>\n <body>\n <form action=\"/create-checkout-session\" method=\"POST\">\n <button type=\"submit\">Checkout</button>\n </form>\n </body>\n</html>\n```\n\nCreate a Checkout Session in `setup` mode to collect the required information.\nAfter creating the Checkout Session, redirect your customer to the\n[URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url)\nreturned in the response.\n\n```\ncurl https://api.stripe.com/v1/checkout/sessions \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"payment_method_types[]\"=\"paypal\" \\\n -d mode=setup \\\n -d customer={{CUSTOMER_ID}} \\\n-d success_url=\"https://example.com/success?session_id={CHECKOUT_SESSION_ID}\" \\\n -d cancel_url=\"https://example.com/cancel\"\n```\n\nWhen your customer provides their payment method details, they’re redirected to\nthe `success_url`, a page on your website that informs them that their payment\nmethod was saved successfully. Make the Session ID available on your success\npage by including the `{CHECKOUT_SESSION_ID}` template variable in the\n`success_url` as in the above example.\n\nWhen your customer clicks on your logo in a Checkout Session without providing\ntheir payment method details, Checkout redirects them back to your website by\nnavigating to the `cancel_url`. This is usually the page on your website that\nthe customer viewed prior to redirecting to Stripe Checkout.\n\n#### Caution\n\nDon’t rely on the redirect to the `success_url` alone for detecting payment\ninitiation, as:\n\n- Malicious users could directly access the `success_url` without paying and\ngain access to your goods or services.\n- Customers may not always reach the `success_url` after a successful\npayment—they might close their browser tab before the redirect occurs.\n[Retrieve the payment\nmethodServer-side](https://docs.stripe.com/payments/paypal/set-up-future-payments#retrieve-payment-method)\nAfter a customer submits their payment details, retrieve the\n[PaymentMethod](https://docs.stripe.com/payments/payment-methods) object. A\n[PaymentMethod](https://docs.stripe.com/api/payment_methods) stores the\ncustomer’s PayPal account information for future payments. You can retrieve the\nPaymentMethod synchronously using the `success_url` or asynchronously using\n[webhooks](https://docs.stripe.com/webhooks).\n\nThe decision to retrieve the PaymentMethod synchronously or asynchronously\ndepends on your tolerance for dropoff, as customers might not always reach the\n`success_url` after a successful payment (for example, it’s possible for them to\nclose their browser tab before the redirect occurs). Using webhooks prevents\nyour integration from experiencing this form of dropoff.\n\nWebhooksSuccess URL\nHandle `checkout.session.completed` webhooks, which contain a Session object. To\nlearn more, see [setting up webhooks](https://docs.stripe.com/webhooks). The\nfollowing example is a `checkout.session.completed` response.\n\n```\n{\n \"id\": \"evt_1Ep24XHssDVaQm2PpwS19Yt0\",\n \"object\": \"event\",\n \"api_version\": \"2019-03-14\",\n \"created\": 1561420781,\n \"data\": {\n \"object\": {\n \"id\": \"cs_test_MlZAaTXUMHjWZ7DcXjusJnDU4MxPalbtL5eYrmS2GKxqscDtpJq8QM0k\",\n \"object\": \"checkout.session\",\n \"billing_address_collection\": null,\n \"cancel_url\": \"https://example.com/cancel\",\n \"client_reference_id\": null,\n \"customer\": null,\n \"customer_email\": null,\n \"display_items\": [],\n \"mode\": \"setup\",\n \"setup_intent\": \"seti_1EzVO3HssDVaQm2PJjXHmLlM\",\n \"submit_type\": null,\n \"subscription\": null,\n \"success_url\": \"https://example.com/success\"\n }\n },\n \"livemode\": false,\n \"pending_webhooks\": 1,\n \"request\": {\n \"id\": null,\n \"idempotency_key\": null\n },\n \"type\": \"checkout.session.completed\"\n}\n```\n\nNote the value of the `setup_intent` key, which is the ID for the SetupIntent\ncreated with the Checkout Session. A\n[SetupIntent](https://docs.stripe.com/payments/setup-intents) is an object used\nto set up the customer’s PayPal account information for future payments.\n[Retrieve](https://docs.stripe.com/api/setup_intents/retrieve) the SetupIntent\nobject with the ID.\n\n```\ncurl https://api.stripe.com/v1/setup_intents/seti_1EzVO3HssDVaQm2PJjXHmLlM \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\"\n```\n\n[Handle post-setup\neventsServer-side](https://docs.stripe.com/payments/paypal/set-up-future-payments#handle-post-setup-events)\nUse a method such as\n[webhooks](https://docs.stripe.com/payments/payment-intents/verifying-status#webhooks)\nto confirm the billing agreement was authorized successfully by your customer,\ninstead of relying on your customer to return to the payment status page. When a\ncustomer successfully authorizes the billing agreement, the SetupIntent emits\nthe\n[setup_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-setup_intent.succeeded)\n[webhook](https://docs.stripe.com/webhooks) event. If a customer doesn’t\nsuccessfully authorize the billing agreement, the SetupIntent will emit the\n[setup_intent.setup_failed](https://docs.stripe.com/api/events/types#event_types-setup_intent.setup_failed)\nwebhook event and returns to a status of `requires_payment_method`. When a\ncustomer revokes the billing agreement from their PayPal account, the\n[mandate.updated](https://docs.stripe.com/api/events/types#event_types-mandate.updated)\nis emitted.\n\n[Test the\nintegration](https://docs.stripe.com/payments/paypal/set-up-future-payments#testing)\nTest your PayPal integration with your [test API\nkeys](https://docs.stripe.com/keys#test-live-modes) by viewing the redirect\npage. You can test the successful payment case by authenticating the payment on\nthe redirect page. The PaymentIntent will transition from `requires_action` to\n`succeeded`.\n\nTo test the case where the user fails to authenticate, use your test API keys\nand view the redirect page. On the redirect page, click **Fail test payment**.\nThe PaymentIntent will transition from `requires_action` to\n`requires_payment_method`.\n\n[Use the payment method for future\npaymentsServer-side](https://docs.stripe.com/payments/paypal/set-up-future-payments#charge-later)\nWhen you’re ready to charge your customer off-session, use the\n[Customer](https://docs.stripe.com/api/customers) and\n[PaymentMethod](https://docs.stripe.com/api/payment_methods) IDs to create a\n[PaymentIntent](https://docs.stripe.com/api/payment_intents).\n\nTo find a `paypal` instrument to charge,\n[list](https://docs.stripe.com/api/payment_methods/list) the PaymentMethods\nassociated with your Customer.\n\n```\ncurl -G https://api.stripe.com/v1/payment_methods \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d customer={{CUSTOMER_ID}} \\\n -d type=paypal\n```\n\nWhen you have the Customer and PaymentMethod IDs, create a PaymentIntent with\nthe amount and currency of the payment. Set a few other parameters to make the\noff-session payment:\n\n- Set\n[off_session](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-off_session)\nto `true` to indicate that the customer is not in your checkout flow during this\npayment attempt. This causes the PaymentIntent to throw an error if\nauthentication is required.\n- Set the value of the PaymentIntent’s\n[confirm](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-confirm)\nproperty to `true`, which causes confirmation to occur immediately when the\nPaymentIntent is created.\n- Set\n[payment_method](https://docs.stripe.com/api#create_payment_intent-payment_method)\nto the ID of the PaymentMethod and\n[customer](https://docs.stripe.com/api#create_payment_intent-customer) to the ID\nof the Customer.\n\n```\ncurl https://api.stripe.com/v1/payment_intents \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d amount=1099 \\\n -d currency=eur \\\n -d customer={{CUSTOMER_ID}} \\\n -d \"payment_method_types[]\"=paypal \\\n -d payment_method={{PAYMENT_METHOD_ID}} \\\n -d off_session=true \\\n -d confirm=true\n```\n\n[User-initiated payment method\ncancellationServer-side](https://docs.stripe.com/payments/paypal/set-up-future-payments#web-user-initiated-payment-method-cancellation)\nA customer can cancel the subscription (Billing Agreement) through their PayPal\naccount. When they do so, Stripe emits a\n[mandate.updated](https://docs.stripe.com/api/events/types#event_types-mandate.updated)\nwebhook. All subsequent Payment Intents using the saved Payment Method will fail\nuntil you change to a Payment Method with active mandates. When payments fail\nfor Subscriptions, the status changes to the Subscription status configured in\nyour [automatic collection\nsettings](https://docs.stripe.com/invoicing/automatic-collection). Notify the\ncustomer of failure and [charge them with a different payment\nmethod](https://docs.stripe.com/billing/subscriptions/overview#requires-payment-method).\n\n[OptionalRemove a saved PayPal\naccountServer-side](https://docs.stripe.com/payments/paypal/set-up-future-payments#payment-method-detatch)\n\n## Links\n\n- [Payment Methods\nSettings](https://dashboard.stripe.com/settings/payment_methods)\n- [Stripe Checkout](https://docs.stripe.com/payments/checkout)\n- [Start a free trial for a\nsubscription](https://docs.stripe.com/billing/subscriptions/trials)\n- [Register now](https://dashboard.stripe.com/register)\n- [Customer](https://docs.stripe.com/api/customers)\n- [Checkout Session](https://docs.stripe.com/api/checkout/sessions)\n-\n[URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url)\n-\n[https://example.com/success?session_id={CHECKOUT_SESSION_ID}](https://example.com/success?session_id={CHECKOUT_SESSION_ID})\n- [https://example.com/cancel](https://example.com/cancel)\n- [PaymentMethod](https://docs.stripe.com/payments/payment-methods)\n- [PaymentMethod](https://docs.stripe.com/api/payment_methods)\n- [webhooks](https://docs.stripe.com/webhooks)\n- [https://example.com/success](https://example.com/success)\n- [SetupIntent](https://docs.stripe.com/payments/setup-intents)\n- [Retrieve](https://docs.stripe.com/api/setup_intents/retrieve)\n-\n[webhooks](https://docs.stripe.com/payments/payment-intents/verifying-status#webhooks)\n-\n[setup_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-setup_intent.succeeded)\n-\n[setup_intent.setup_failed](https://docs.stripe.com/api/events/types#event_types-setup_intent.setup_failed)\n-\n[mandate.updated](https://docs.stripe.com/api/events/types#event_types-mandate.updated)\n- [test API keys](https://docs.stripe.com/keys#test-live-modes)\n- [PaymentIntent](https://docs.stripe.com/api/payment_intents)\n- [list](https://docs.stripe.com/api/payment_methods/list)\n-\n[off_session](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-off_session)\n-\n[confirm](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-confirm)\n-\n[payment_method](https://docs.stripe.com/api#create_payment_intent-payment_method)\n- [customer](https://docs.stripe.com/api#create_payment_intent-customer)\n- [automatic collection\nsettings](https://docs.stripe.com/invoicing/automatic-collection)\n- [charge them with a different payment\nmethod](https://docs.stripe.com/billing/subscriptions/overview#requires-payment-method)",
  "metadata": {
    "title": "Set up future PayPal payments | Stripe Documentation",
    "description": "Learn how to save PayPal details and charge your customers later.",
    "sourceURL": "https://docs.stripe.com/payments/paypal/set-up-future-payments"
  }
}