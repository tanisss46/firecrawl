{
  "content": "# Store secret credentials and tokens in your app\n\n## Use the Secret Store API to persist sensitive data, like authentication credentials.\n\nThe [Secret Store API](https://docs.stripe.com/api/secret_management) is a way\nto securely set, find, list, and delete persistent secrets used in Stripe Apps.\nThese credentials, also known as secrets, are only accessible to your app and\nthe users who own them.\n\n## Overview\n\nThe Secret Store API enables your app to:\n\n- Securely store and retrieve authentication credentials\n- Keep users authenticated with third-party services, even if they sign out of\n`stripe.com` and sign in again\n- Securely pass secrets between your UI extension and backend\n\n#### Caution\n\nStripe **does not** permit you to store sensitive personal data, personal\naccount numbers such as credit card numbers, and other data within [PCI\nCompliance](https://docs.stripe.com/security/guide#validating-pci-compliance)\nusing the Secret Store API.\n\n### Scopes\n\nThe secrets of an uploaded app are only accessible by other apps that you’ve\nuploaded. You can only publish one app on an account, so published apps can\nnever share secrets. Requests made by third-party apps can’t ever access your\napp’s secrets.\n\nUse scopes to further specify the accessibility of a given secret. A scope is a\ncollection of secrets identified by its accessibility.\n\nThe Secret Store API supports the following scope types:\n\nScope typeScope limitsStores up toUse forAccessible to[account\nscope](https://docs.stripe.com/api/apps/secret_store/secret_resource#secret_object-scope)There’s\none `account` scope per app. Example: third-party API keyA maximum of 10\n[Secrets](https://docs.stripe.com/api/apps/secret_store/secret_resource)Secrets\nthat apply to all users of a Stripe account that installs your appAll Dashboard\nusers of a Stripe account and the app’s backend, on a per-app basis[user\nscope](https://docs.stripe.com/api/apps/secret_store/secret_resource#secret_object-scope)Each\nuser has one `user` scope per app. Example: OAuth access tokenA maximum of 10\n[Secrets](https://docs.stripe.com/api/apps/secret_store/secret_resource)Secrets\nthat only apply to a specific user of a Stripe accountA specific Dashboard user\nof a Stripe account and the app’s backend, on a per-app basis\nThe diagram below shows the secret scoping between the following:\n\n- The Stripe account: “The Cactus Practice Stripe account”\n- Two users sharing the same Stripe account: “User 1”, “User 2”\n- Two different apps installed by the Stripe account: “Installed App A”,\n“Installed App B”\n- `account` scoped secrets: “Foo API key” secret for App A, “Bar API key” for\nApp B\n- `user` scoped secrets: “OAuth access token”, “OAuth refresh token”\n\n![account secret\nrelationship](https://b.stripecdn.com/docs-statics-srv/assets/secret_scoping_diagram.32c3c7d35e007d261389cf593bec470f.png)\n\nThe scoped secrets of two different apps installed by the Cactus Practice Stripe\naccount.\n\n### Expiration\n\nIf a secret becomes invalid at some point in the future, you can specify an\nexpiration time by setting the optional\n[expires_at](https://docs.stripe.com/api/apps/secret_store/secret_resource#secret_object-expires_at)\nparameter when you [set a\nsecret](https://docs.stripe.com/stripe-apps/store-secrets#set-a-secret). This\nparameter takes in a Unix timestamp (the number of seconds elapsed since the\nUnix epoch).\n\nAfter the `expires_at` date has passed, the secret is automatically deleted from\nthe Secret Store API.\n\nExpiration times can’t be in the past and can’t be more than 100 years in the\nfuture.\n\n## Set a secret\n\n- Add the `secret_write` permission to your app:\n\n```\nstripe apps grant permission \"secret_write\" \"Allows storing secrets between page\nreloads\"\n```\n- Set a secret by name and scope in the Secret Store API. You can use the\nfollowing example code in your app’s UI extension or backend:\n\n```\nimport { createHttpClient, STRIPE_API_KEY } from\n'@stripe/ui-extension-sdk/http_client';\nimport Stripe from 'stripe';\nimport type { ExtensionContextValue } from '@stripe/ui-extension-sdk/context';\nimport { useEffect } from 'react';\n\n// Create an instance of a Stripe object to access customer information.\n// You don't need an API Key here, because the app uses the\n// dashboard credentials to make requests.\nconst stripe: Stripe = new Stripe(STRIPE_API_KEY, {\n httpClient: createHttpClient() as Stripe.HttpClient,\n apiVersion: '2025-02-24.acacia',\n});\n\nconst App = ({userContext}: ExtensionContextValue) => {\n useEffect(() => {\n stripe.apps.secrets.create({\n scope: { type: 'user', user: userContext.id },\n name: 'secret_name',\n payload: 'secret value',\n expires_at: 1956528000 // optional\n }).then(resp => console.log(resp));\n }, []);\n\n return null;\n};\n\nexport default App;\n```\n\nFor more information, see the API reference documentation on [setting a\nsecret](https://docs.stripe.com/api/apps/secret_store/set).\n\n## Find a secret\n\nYou can find a secret by name and scope in the Secret Store API. For example,\nuse the following example code in your app’s UI extension or backend:\n\n```\nimport Stripe from 'stripe';\nimport { createHttpClient, STRIPE_API_KEY } from\n'@stripe/ui-extension-sdk/http_client';\nimport type { ExtensionContextValue } from '@stripe/ui-extension-sdk/context';\nimport { useEffect } from 'react';\n\n// Create an instance of a Stripe object to access customer information.\n// You don't need to use an API key, because the app uses the\n// dashboard credentials to make requests.\nconst stripe: Stripe = new Stripe(STRIPE_API_KEY, {\n httpClient: createHttpClient() as Stripe.HttpClient,\n apiVersion: '2025-02-24.acacia',\n});\n\nconst App = ({userContext}: ExtensionContextValue) => {\n useEffect(() => {\n stripe.apps.secrets.find({\n scope: { type: 'user', user: userContext.id },\n name: 'secret_name',\n expand: ['payload'],\n }).then(resp => console.log(resp.payload));\n }, []);\n\n return null;\n};\n\nexport default App;\n```\n\nFor more information, see [Find a\nsecret](https://docs.stripe.com/api/apps/secret_store/find).\n\n## Delete a secret\n\nTo delete a secret by name and scope in the Secret Store API, you can use the\nfollowing example code in your app’s UI extension or backend:\n\n```\nimport Stripe from 'stripe';\nimport { createHttpClient, STRIPE_API_KEY } from\n'@stripe/ui-extension-sdk/http_client';\nimport type { ExtensionContextValue } from '@stripe/ui-extension-sdk/context';\nimport { useEffect } from 'react';\n\n// Create an instance of a Stripe object to access customer information.\n// Note that you don't need to use an API key, because the app uses the\n// dashboard credentials to make requests.\nconst stripe: Stripe = new Stripe(STRIPE_API_KEY, {\n httpClient: createHttpClient() as Stripe.HttpClient,\n apiVersion: '2025-02-24.acacia',\n});\n\nconst App = ({userContext}: ExtensionContextValue) => {\n useEffect(() => {\n stripe.apps.secrets.deleteWhere({\n scope: { type: 'user', user: userContext.id },\n name: 'secret_name',\n }).then(resp => console.log(resp));\n }, []);\n\n return null;\n};\n\nexport default App;\n```\n\nFor more information, see [Delete a\nsecret](https://docs.stripe.com/api/apps/secret_store/delete).\n\n## List secrets\n\nIf you stored the maximum amount of secrets in an `account` or `user` scope and\nwant to add another secret, you must delete at least 1 of the 10 secrets. To\ndetermine which secrets to delete, you can list all the secrets for a given\nscope.\n\nTo list the secrets of an `account` or `user` scope, you can use the following\nexample code in your app’s UI extension or backend:\n\n```\nimport Stripe from 'stripe';\nimport { createHttpClient, STRIPE_API_KEY } from\n'@stripe/ui-extension-sdk/http_client';\nimport type { ExtensionContextValue } from '@stripe/ui-extension-sdk/context';\nimport { useEffect } from 'react';\n\n// Create an instance of a Stripe object to access customer information.\n// Note that you don't need to use an API key, because the app uses the\n// dashboard credentials to make requests.\nconst stripe: Stripe = new Stripe(STRIPE_API_KEY, {\n httpClient: createHttpClient() as Stripe.HttpClient,\n apiVersion: '2025-02-24.acacia',\n});\n\nconst App = ({userContext}: ExtensionContextValue) => {\n useEffect(() => {\n stripe.apps.secrets.list({\n scope: { type: 'user', user: userContext.id },\n }).then(resp => console.log(resp.data));\n }, []);\n\n return null;\n};\n\nexport default App;\n```\n\nFor more information, see [List\nsecrets](https://docs.stripe.com/api/apps/secret_store/list).\n\n## Example apps\n\nThe following example apps demonstrate how to use the Secret Store API:\n\n- [Simple demo\napp](https://github.com/stripe/stripe-apps/tree/master/examples/secret-store)\n- [Dropbox OAuth with PKCE\napp](https://github.com/stripe/stripe-apps/tree/master/examples/dropbox-oauth-pkce)\n\n## See also\n\n- [Authorization flows](https://docs.stripe.com/stripe-apps/pkce-oauth-flow)\n- [Server-side logic](https://docs.stripe.com/stripe-apps/build-backend)\n- [Build a UI](https://docs.stripe.com/stripe-apps/build-ui)\n\n## Links\n\n- [Secret Store API](https://docs.stripe.com/api/secret_management)\n- [PCI\nCompliance](https://docs.stripe.com/security/guide#validating-pci-compliance)\n- [account\nscope](https://docs.stripe.com/api/apps/secret_store/secret_resource#secret_object-scope)\n- [Secrets](https://docs.stripe.com/api/apps/secret_store/secret_resource)\n-\n[expires_at](https://docs.stripe.com/api/apps/secret_store/secret_resource#secret_object-expires_at)\n- [set a secret](https://docs.stripe.com/stripe-apps/store-secrets#set-a-secret)\n- [setting a secret](https://docs.stripe.com/api/apps/secret_store/set)\n- [Find a secret](https://docs.stripe.com/api/apps/secret_store/find)\n- [Delete a secret](https://docs.stripe.com/api/apps/secret_store/delete)\n- [List secrets](https://docs.stripe.com/api/apps/secret_store/list)\n- [Simple demo\napp](https://github.com/stripe/stripe-apps/tree/master/examples/secret-store)\n- [Dropbox OAuth with PKCE\napp](https://github.com/stripe/stripe-apps/tree/master/examples/dropbox-oauth-pkce)\n- [Authorization flows](https://docs.stripe.com/stripe-apps/pkce-oauth-flow)\n- [Server-side logic](https://docs.stripe.com/stripe-apps/build-backend)\n- [Build a UI](https://docs.stripe.com/stripe-apps/build-ui)",
  "metadata": {
    "title": "Store secret credentials and tokens in your app | Stripe Documentation",
    "description": "Use the Secret Store API to persist sensitive data, like authentication credentials.",
    "sourceURL": "https://docs.stripe.com/stripe-apps/store-secrets"
  }
}