{
  "content": "# Save a card without bank authentication\n\n## Collect card details and charge your customer at a later time.\n\n​​Stripe allows you to collect card details and charge your customer at a later\ntime. ​​In some regions, banks require a second form of authentication such as\nentering a code sent to a phone. ​​The extra step decreases conversion if your\ncustomer isn’t actively using your website or application because they aren’t\navailable to authenticate the purchase.\n\n​​If you primarily do business in the US and Canada, banks don’t require\nauthentication, so you can follow this simpler integration. This integration\nwill be non-compliant in countries that require authentication for saving cards\n(for example, India) so building this integration means that expanding to other\ncountries or adding other payment methods will require significant changes.\nLearn how to [save cards that require\nauthentication](https://docs.stripe.com/payments/save-and-reuse).\n\n#### Compliance\n\nYou’re responsible for your compliance with all applicable laws, regulations,\nand network rules when saving a customer’s payment details. For instance, if you\nwant to save their payment method for future use, such as charging them when\nthey’re not actively using your website or app. Add terms to your website or app\nthat state how you plan to save payment method details and allow customers to\nopt in. If you want to charge them when they’re offline, make sure your terms\ninclude the following:\n\n- The customer’s agreement to your initiating a payment or a series of payments\non their behalf for specified transactions.\n- The anticipated timing and frequency of payments (for example, if the charges\nare for scheduled installments, subscription payments, or unscheduled top-ups).\n- How you determine the payment amount.\n- Your cancellation policy, if the payment method is for a subscription service.\n\nMake sure you keep a record of your customer’s written agreement to these terms.\n\n[Collect card\ndetailsClient-side](https://docs.stripe.com/payments/save-card-without-authentication#web-collect-card-details)\nBefore starting this guide, you need a Stripe account. [Register\nnow](https://dashboard.stripe.com/register).\n\nBuild a checkout page to collect your customer’s card details. Use [Stripe\nElements](https://docs.stripe.com/payments/elements), a UI library that helps\nyou build custom payment forms. To get started with Elements, include the\nStripe.js library with the following script on your checkout page.\n\n```\n<script src=\"https://js.stripe.com/v3/\"></script>\n```\n\nAlways load Stripe.js directly from js.stripe.com to remain PCI compliant. Don’t\ninclude the script in a bundle or host a copy of it yourself.\n\nTo best leverage Stripe’s [advanced fraud\nfunctionality](https://docs.stripe.com/radar), include this script on every page\non your site, not just the checkout page. Including the script on every page\n[allows Stripe to detect suspicious\nbehavior](https://docs.stripe.com/disputes/prevention/advanced-fraud-detection)\nthat might indicate fraud when users browse your website.\n\n### Add Elements to your page\n\nTo securely collect card details from your customers, Elements creates UI\ncomponents for you hosted by Stripe. They’re then placed into your payment form,\nrather than you creating them directly. To determine where to insert these\ncomponents, create empty DOM elements (containers) with unique IDs within your\npayment form.\n\n```\n<input id=\"cardholder-name\" type=\"text\">\n<!-- placeholder for Elements -->\n<div id=\"card-element\"></div>\n<div id=\"card-result\"></div>\n<button id=\"card-button\">Save Card</button>\n```\n\nNext, create an instance of the [Stripe\nobject](https://docs.stripe.com/js#stripe-function), providing your publishable\n[API key](https://docs.stripe.com/keys) as the first parameter. After, create an\ninstance of the [Elements object](https://docs.stripe.com/js#stripe-elements)\nand use it to mount a `card` element in the DOM.\n\nThe `card` Element simplifies the payment form and minimizes the number of\nrequired fields by inserting a single, flexible input field that securely\ncollects all necessary card details.\n\nOtherwise, combine `cardNumber`, `cardExpiry`, and `cardCvc` Elements for a\nflexible, multi-input card form.\n\n#### Note\n\nAlways collect a postal code to increase card acceptance rates and reduce fraud.\n\nThe [single line Card\nElement](https://docs.stripe.com/js/element/other_element?type=card)\nautomatically collects and sends the customer’s postal code to Stripe. If you\nbuild your payment form with split Elements ([Card\nNumber](https://docs.stripe.com/js/element/other_element?type=cardNumber),\n[Expiry](https://docs.stripe.com/js/element/other_element?type=cardExpiry),\n[CVC](https://docs.stripe.com/js/element/other_element?type=cardCvc)), add a\nseparate input field for the customer’s postal code.\n\n```\nconst stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst elements = stripe.elements();\nconst cardElement = elements.create('card');\ncardElement.mount('#card-element');\n```\n\nA Stripe Element contains an iframe that securely sends the payment information\nto Stripe over an HTTPS connection. The checkout page address must also start\nwith `https://` rather than `http://` for your integration to work.\n\nYou can test your integration without using HTTPS. [Enable\nit](https://docs.stripe.com/security/guide#tls) when you’re ready to accept live\npayments.\n\n```\nconst cardholderName = document.getElementById('cardholder-name');\nconst cardButton = document.getElementById('card-button');\nconst resultContainer = document.getElementById('card-result');\n\ncardButton.addEventListener('click', async (ev) => {\n const {paymentMethod, error} = await stripe.createPaymentMethod({\n type: 'card',\n card: cardElement,\n billing_details: {\n name: cardholderName.value,\n },\n }\n );\n\n if (error) {\n // Display error.message in your UI.\n resultContainer.textContent = error.message;\n } else {\n // You have successfully created a new PaymentMethod\n resultContainer.textContent = \"Created payment method: \" + paymentMethod.id;\n }\n});\n```\n\nSend the resulting [PaymentMethod](https://docs.stripe.com/api/payment_methods)\nID to your server.\n\n[Set up\nStripeServer-side](https://docs.stripe.com/payments/save-card-without-authentication#web-setup)\nUse our official libraries for access to the Stripe API from your application:\n\n```\n# Available as a gem\nsudo gem install stripe\n```\n\n```\n# If you use bundler, you can add this line to your Gemfile\ngem 'stripe'\n```\n\n[Save the\ncardServer-side](https://docs.stripe.com/payments/save-card-without-authentication#web-save-card)\nSave the card by attaching the PaymentMethod to a\n[Customer](https://docs.stripe.com/api/customers). You can use the Customer\nobject to store other information about your customer, such as shipping details\nand email address.\n\n```\ncurl https://api.stripe.com/v1/customers \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d payment_method={{PAYMENT_METHOD_ID}}\n```\n\nIf you have an existing Customer, you can attach the PaymentMethod to that\nobject instead.\n\n```\ncurl https://api.stripe.com/v1/payment_methods/{{PAYMENT_METHOD_ID}}/attach \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d customer={{CUSTOMER_ID}}\n```\n\nAt this point, associate the Customer ID and the PaymentMethod ID with your own\ninternal representation of a customer, if you have one.\n\n[Charge the saved\ncardServer-side](https://docs.stripe.com/payments/save-card-without-authentication#web-charge-card)\nWhen you’re ready, fetch the PaymentMethod and Customer IDs to charge. You can\ndo this by either storing the IDs of both in your database, or by using the\nCustomer ID to look up all the Customer’s available PaymentMethods.\n\n```\ncurl -G https://api.stripe.com/v1/payment_methods \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d customer={{CUSTOMER_ID}} \\\n -d type=card\n```\n\nUse the PaymentMethod ID and the Customer ID to create a new PaymentIntent. Set\n[error_on_requires_action](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-error_on_requires_action)\nto true to decline payments that require any actions from your customer, such as\ntwo-factor authentication.\n\n```\ncurl https://api.stripe.com/v1/payment_intents \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d amount=1099 \\\n -d currency=usd \\\n -d \"payment_method_types[]\"=card \\\n -d customer={{CUSTOMER_ID}} \\\n -d payment_method={{PAYMENT_METHOD_ID}} \\\n -d error_on_requires_action=true \\\n -d confirm=true\n```\n\nWhen a payment attempt fails, the request also fails with a 402 HTTP status code\nand Stripe throws an error. You need to notify your customer to return to your\napplication (for example, by sending an email) to complete the payment. Check\nthe code of the [Error](https://docs.stripe.com/api/errors/handling) raised by\nthe Stripe API library or check the\n[last_payment_error.decline_code](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-last_payment_error-decline_code)\non the PaymentIntent to inspect why the card issuer declined the payment.\n\n[Handle any card\nerrors](https://docs.stripe.com/payments/save-card-without-authentication#web-handle-errors)\nNotify your customer that the payment failed and direct them to the payment form\nyou made in Step 1 where they can enter new card details. Send that new\nPaymentMethod ID to your server to\n[attach](https://docs.stripe.com/api/payment_methods/attach) to the Customer\nobject and make the payment again.\n\nAlternatively, you can create a PaymentIntent and save a card all in one API\ncall if you have already created a Customer.\n\n```\ncurl https://api.stripe.com/v1/payment_intents \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d amount=1099 \\\n -d currency=usd \\\n -d \"payment_method_types[]\"=card \\\n -d customer={{CUSTOMER_ID}} \\\n -d payment_method={{PAYMENT_METHOD_ID}} \\\n -d error_on_requires_action=true \\\n -d confirm=true \\\n -d setup_future_usage=on_session\n```\n\nSetting\n[setup_future_usage](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-setup_future_usage)\nto `on_session` indicates to Stripe that you wish to save the card for later,\nwithout triggering unnecessary authentication.\n\n[Test the\nintegration](https://docs.stripe.com/payments/save-card-without-authentication#web-test-integration)\nStripe provides [test cards](https://docs.stripe.com/testing) you can use in a\nsandbox to simulate different cards’ behavior. Use these cards with any CVC,\npostal code, and expiry date in the future.\n\nNumberDescription4242424242424242Succeeds and immediately processes the\npayment.4000000000009995Always fails with a decline code of\n`insufficient_funds`.4000002500003155Requires authentication, which in this\nintegration will decline with a code of\n`authentication_required`.[OptionalRe-collect a\nCVC](https://docs.stripe.com/payments/save-card-without-authentication#web-recollect-cvc)\n## Upgrade your integration to handle card authentication\n\nThis integration **declines cards that require authentication during payment**.\nIf you start seeing many payments in the Dashboard listed as `Failed`, then it’s\ntime to [upgrade your\nintegration](https://docs.stripe.com/payments/payment-intents/upgrade-to-handle-actions).\nStripe’s global integration handles these payments instead of automatically\ndeclining.\n\n## Links\n\n- [save cards that require\nauthentication](https://docs.stripe.com/payments/save-and-reuse)\n- [Register now](https://dashboard.stripe.com/register)\n- [Stripe Elements](https://docs.stripe.com/payments/elements)\n- [https://js.stripe.com/v3/](https://js.stripe.com/v3/)\n- [advanced fraud functionality](https://docs.stripe.com/radar)\n- [allows Stripe to detect suspicious\nbehavior](https://docs.stripe.com/disputes/prevention/advanced-fraud-detection)\n- [example payment forms](https://stripe.com/payments/elements/examples)\n- [Stripe object](https://docs.stripe.com/js#stripe-function)\n- [API key](https://docs.stripe.com/keys)\n- [Elements object](https://docs.stripe.com/js#stripe-elements)\n- [single line Card\nElement](https://docs.stripe.com/js/element/other_element?type=card)\n- [Card\nNumber](https://docs.stripe.com/js/element/other_element?type=cardNumber)\n- [Expiry](https://docs.stripe.com/js/element/other_element?type=cardExpiry)\n- [CVC](https://docs.stripe.com/js/element/other_element?type=cardCvc)\n- [Enable it](https://docs.stripe.com/security/guide#tls)\n- [View full\nsample](https://github.com/stripe-samples/saving-card-without-payment/blob/master/client/script.js#L41-L46)\n- [PaymentMethod](https://docs.stripe.com/api/payment_methods)\n- [Customer](https://docs.stripe.com/api/customers)\n-\n[error_on_requires_action](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-error_on_requires_action)\n- [Error](https://docs.stripe.com/api/errors/handling)\n-\n[last_payment_error.decline_code](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-last_payment_error-decline_code)\n- [attach](https://docs.stripe.com/api/payment_methods/attach)\n-\n[setup_future_usage](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-setup_future_usage)\n- [test cards](https://docs.stripe.com/testing)\n- [upgrade your\nintegration](https://docs.stripe.com/payments/payment-intents/upgrade-to-handle-actions)",
  "metadata": {
    "title": "Save a card without bank authentication | Stripe Documentation",
    "description": "Collect card details and charge your customer at a later time.",
    "sourceURL": "https://docs.stripe.com/payments/save-card-without-authentication"
  }
}