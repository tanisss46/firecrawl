{
  "content": "# Best practices for using SourcesDeprecated\n\n## Best practices to accept a variety of payment methods through a single integration.\n\n#### Warning\n\nWe deprecated the Sources API and plan to remove support for local payment\nmethods. If you currently handle any local payment methods using the Sources\nAPI, you must [migrate them to the Payment Methods\nAPI](https://docs.stripe.com/payments/payment-methods/transitioning).\n\nWhile we don’t plan to remove support for card payments, we recommend replacing\nany use of the Sources API with the [PaymentMethods\nAPI](https://docs.stripe.com/api/payment_methods), which provides access to our\nlatest features and payment method types.\n\nThe flexibility of the Sources API helps you minimize the changes required to\nsupport additional payment methods as you add them.\n\n## Typical flow for card payments\n\nIn a typical checkout flow for [card\npayments](https://docs.stripe.com/sources/cards) (excluding 3D Secure), your\nintegration collects the card information and creates a source, and uses it to\nmake a charge request. Because it requires no additional action from the\ncustomer and card payments provide synchronous confirmation, we can immediately\nconfirm if the payment is successful and that the funds are guaranteed—using\n[webhooks](https://docs.stripe.com/webhooks) isn’t necessary.\n\n## The required use of webhooks\n\nOther payment methods may require your customer to take [additional\naction](https://docs.stripe.com/sources#flow-for-customer-action) (for example,\na redirect) before a source becomes `chargeable` and can be used to make a\ncharge request (for example, [iDEAL](https://docs.stripe.com/sources/ideal)).\nThis transition generally happens asynchronously and may even occur after the\ncustomer leaves your website. For these reasons your integration must rely on\nwebhooks to determine when a source becomes chargeable before creating a charge.\n\nStripe sends the following webhook events to notify you about changes to the\nstatus of the source:\n\nEventDescriptionSuggested action`source.chargeable`A Source object becomes\n`chargeable` after a customer has authenticated and verified a payment.Create a\nCharge.`source.failed`A Source object failed to become chargeable because your\ncustomer declined to authenticate the payment.Cancel the order and (optionally)\nre-engage the customer in your payment flow.`source.canceled`A Source object\nexpired and you can’t use it to create a charge.Cancel the order and\n(optionally) re-engage the customer in your payment flow.\nSimilarly, when creating a charge, certain\n[asynchronous](https://docs.stripe.com/sources#synchronous-or-asynchronous-confirmation)\npayment methods might require days for the funds to be confirmed and the charge\nto succeed, requiring webhooks to know when to confirm and eventually fulfill\nyour orders.\n\nStripe sends the following webhook events to notify you about changes to the\nstatus of a charge:\n\nEventDescriptionSuggested action`charge.pending`The Charge is pending\n(asynchronous payments only).No action required.`charge.succeeded`The Charge\nsucceeded and the payment is complete.Finalize the order and send a confirmation\nto the customer over email.`charge.failed`The Charge has failed and the payment\ncouldn’t be completed.Cancel the order and (optionally) re-engage the customer\nin your payment flow.\n## Building a flexible integration\n\nTo ensure that your checkout process is flexible and ready to support multiple\npayment methods, we recommend the following approach:\n\n### Source creation\n\nWhen creating [Sources](https://docs.stripe.com/api#sources), record the source\nID on your internal order representation so that you can retrieve the order when\nyou receive and process `source.chargeable` webhooks. Make sure to index your\norder objects based on this `source` attribute for efficient lookup.\n\n### Charge creation\n\nDelivery of the `source.chargeable` webhook charges the Source. When receiving\nthe webhook, retrieve your internal order representation by a look-up based on\nthe received source ID and verify that the order is awaiting a payment.\n\nWhen making a charge request, use your internal order ID as an [idempotency\nkey](https://docs.stripe.com/api#idempotent_requests) to avoid any possible race\ncondition. Additionally, if the source is reusable and you want to reuse it,\nmake sure to attach it to a [Customer](https://docs.stripe.com/api#customers)\nbefore charging it. Refer to the [Single-use or\nreusable](https://docs.stripe.com/sources#single-use-or-reusable) and [Sources &\nCustomers](https://docs.stripe.com/sources/customers) guides to learn more about\nhow to handle single-use and reusable Sources and how they interact with\n[Customers](https://docs.stripe.com/api/customers).\n\nSimilarly to source creation, record the charge ID on your internal order\nrepresentation so that you can retrieve the order when you receive and process\n`charge.succeeded` webhooks.\n\n### Confirmation page\n\nAfter your customer takes the required actions to authorize a payment (for\nexample, they’ve followed a redirect) you should present a confirmation page\nthat shows the state of the order. You can do this by polling the order\ninternally.\n\nBecause webhook delivery latency isn’t guaranteed, if want to further streamline\nyour confirmation page, you can poll for the status of the associated Source in\nyour client-side code. When you detect that your Source has become `chargeable`,\nyou can initiate a Charge creation using that Source without waiting for the\n`source.chargeable` webhook to arrive.\n\nBe aware that some types of Sources take minutes (or even days) to become\n`chargeable`. If you decide to poll the Source, we recommend that you time out\nat some point and tell the customer that their order is awaiting payment\nconfirmation, then send them a payment confirmation email asynchronously. You\ncan see our recommended customer-facing messaging for each Source status in the\ntable below.\n\nClient-side polling stops if the customer leaves your page. This means that you\n**must also** integrate against the `source.chargeable`\n[webhook](https://docs.stripe.com/sources/best-practices#the-required-use-of-webhooks)\nto make sure you don’t lose track of your customer’s order.\n\nIf you’re using Stripe.js, you can use\n[stripe.retrieveSource()](https://docs.stripe.com/js#stripe-retrieve-source) to\nimplement your own polling:\n\n```\n// In order-confirmation-page.js\n\nconst stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\n// After some amount of time, we should stop trying to resolve the order\nsynchronously:\nconst MAX_POLL_COUNT = 10;\nlet pollCount = 0;\n\nconst pollForSourceStatus = async () => {\nconst {source} = await stripe.retrieveSource({id: SOURCE_ID, client_secret:\nCLIENT_SECRET})\n if (source.status === 'chargeable') {\n // Make a request to your server to charge the Source.\n // Depending on the Charge status, show your customer the relevant message.\n } else if (source.status === 'pending' && pollCount < MAX_POLL_COUNT) {\n // Try again in a second, if the Source is still `pending`:\n pollCount += 1;\n setTimeout(pollForSourceStatus, 1000);\n } else {\n // Depending on the Source status, show your customer the relevant message.\n }\n};\n\npollForSourceStatus();\n```\n\nThe table below contains recommendations for potential customer-facing messages\nyou can show based on the Source’s status.\n\nStatusCustomer-facing messagingSource is `chargeable`Your order was received and\nis awaiting payment confirmation.Source is `canceled`Your payment failed and\nyour order couldn’t be processed.Source is `failed`Your payment failed and your\norder couldn’t be processed.Source is still `pending` after polling for a\nwhileYour order was received and is awaiting payment confirmation.\nAfter you create a Charge (and if the user is still on your confirmation page),\nyou can show the following messages based on the status of the Charge:\n\nStatusCustomer-facing messagingCharge is `pending`Your order was received and is\nawaiting payment confirmation.Charge is `failed`Your payment failed and your\norder couldn’t be processed.Charge is `succeeded`Your payment is confirmed and\nyour order is complete.\n### Order confirmation\n\nOnly confirm your order after you receive the `charge.succeeded` webhook (this\nmay happen instantly, but it may not). Send an email to the customer at this\nstage because the payment confirmation can take days for asynchronous payments.\n\n### Cancellations and failures\n\nListen for the `source.canceled` and `source.failed` webhooks and make sure to\ncancel the order associated with the source concerned. If you follow the best\npractices above, you should never receive a `source.canceled` webhook for\nsources that were previously `chargeable` (as your `source.chargeable` handler\nshould have created a charge immediately, preventing the source from getting\ncanceled). You’ll still receive `source.canceled` webhooks for sources that were\nnever `chargeable` and remained `pending`, generally an indication that your\ncustomer left your checkout flow early. You can also receive a `source.failed`\nwebhook whenever the Customer refused the payment or a technical failure\nhappened at the payment scheme level.\n\nYou should also listen for the `charge.failed` webhooks to make sure to cancel\nthe order associated with the received charge.\n\nFor each of these events, we recommend that you notify your customer that their\norder failed and to invite them to re-engage in your payment flow, if desired.\n\n## See also\n\n- [Supported payment methods](https://docs.stripe.com/sources)\n- [Sources API reference](https://docs.stripe.com/api#sources)\n- [Considerations for Stripe Connect\nplatforms](https://docs.stripe.com/sources/connect)\n\n## Links\n\n- [migrate them to the Payment Methods\nAPI](https://docs.stripe.com/payments/payment-methods/transitioning)\n- [PaymentMethods API](https://docs.stripe.com/api/payment_methods)\n- [card payments](https://docs.stripe.com/sources/cards)\n- [webhooks](https://docs.stripe.com/webhooks)\n- [additional action](https://docs.stripe.com/sources#flow-for-customer-action)\n- [iDEAL](https://docs.stripe.com/sources/ideal)\n-\n[asynchronous](https://docs.stripe.com/sources#synchronous-or-asynchronous-confirmation)\n- [Sources](https://docs.stripe.com/api#sources)\n- [idempotency key](https://docs.stripe.com/api#idempotent_requests)\n- [Customer](https://docs.stripe.com/api#customers)\n- [Single-use or\nreusable](https://docs.stripe.com/sources#single-use-or-reusable)\n- [Sources & Customers](https://docs.stripe.com/sources/customers)\n- [Customers](https://docs.stripe.com/api/customers)\n- [stripe.retrieveSource()](https://docs.stripe.com/js#stripe-retrieve-source)\n- [Supported payment methods](https://docs.stripe.com/sources)\n- [Considerations for Stripe Connect\nplatforms](https://docs.stripe.com/sources/connect)",
  "metadata": {
    "title": "Best practices for using Sources | Stripe Documentation",
    "description": "Best practices to accept a variety of payment methods through a single integration.",
    "sourceURL": "https://docs.stripe.com/sources/best-practices"
  }
}