{
  "content": "# Metadata use cases\n\n## Use these examples to store your data on Stripe objects.\n\nUse [metadata](https://docs.stripe.com/api/metadata) to store your important\ndata on Stripe objects with these common examples. The following use cases\naren’t exhaustive; how you use metadata depends on your specific use cases.\n\n#### Security tip\n\nDon’t include sensitive data in `metadata`, such as PII, bank account details,\nor customer card details.\n\n## Store IDs for objects or records\n\nYou can use metadata in Stripe objects to store IDs that belong to objects or\nrecords from your other systems. This allows you to build references between\nStripe objects and their related resources from your other systems.\n\n### Order or cart ID\n\nWhen you create IDs to track your customers’ carts, you can store those IDs as\nmetadata on [Checkout Sessions](https://docs.stripe.com/api/checkout/sessions).\nThis allows you to use the related Stripe object to locate the associated cart\nin your system after the checkout process is complete.\n\nStore the cart ID in the metadata of the Checkout Session after you create it:\n\n```\ncurl https://api.stripe.com/v1/checkout/sessions \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n --data-urlencode success_url=\"https://example.com/success\" \\\n -d mode=payment \\\n -d \"line_items[0][price]\"=price_1MotwRLkdIwHu7ixYcPLm5uZ \\\n -d \"line_items[0][quantity]\"=1 \\\n -d \"metadata[cart_id]\"=cart_6943\n```\n\nThen, you can view, update, or delete the ID on the `Checkout Session` object.\nIt also appears in the events sent to your webhook endpoint that contain that\nCheckout Session (including the `checkout.session.completed` event).\n\n```\n{\n \"id\": \"evt_1PYCL6CzbZon1zn9VivIehz7\",\n \"object\": \"event\",\n \"api_version\": \"2024-06-20\",\n \"created\": 1719948368,\n \"data\": {\n \"object\": {\n\"id\": \"cs_test_a1Znb7gdtlLEPzSi8qMIJzvsSPpIBMKFWovXx0h0O43WS411PpICgCqKjw\",\n \"object\": \"checkout.session\",\n ...\n \"metadata\": {\n \"cart_id\": \"cart_6943\"\n },\n ...\n }\n },\n ...\n \"type\": \"checkout.session.completed\",\n}\n```\n\n### Customer or CMS ID\n\nYou can associate the [Customers](https://docs.stripe.com/api/customers) you\ncreate in Stripe with your customer management system (CMS) records to help\ntrack and manage your customers.\n\nStore the ID of the customer record from your CMS in the metadata of the\nCustomer you create in Stripe.\n\n```\ncurl https://api.stripe.com/v1/customers \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d name=\"Jenny Rosen\" \\\n -d \"metadata[cms_id]\"=cust_6573\n```\n\nStripe includes this information in the events sent to your webhook endpoint\nthat contain that Customer object. For example, when you receive\n`customer.updated` events, you can use the stored ID to identify the record you\nneed to update in your CMS.\n\n```\n{\n \"id\": \"evt_1PajAGCzbZon1zn9FUsn7IoG\",\n \"object\": \"event\",\n \"api_version\": \"2024-06-20\",\n \"created\": 1720551204,\n \"data\": {\n \"object\": {\n \"id\": \"cus_QRcNyZh9aZHXnI\",\n \"object\": \"customer\",\n ...\n \"metadata\": {\n \"cms_id\": \"cust_6573\"\n },\n ...\n }\n },\n ...\n \"type\": \"customer.updated\"\n}\n```\n\n## Track order fulfillment\n\nUse metadata to store data that facilitates or tracks your order fulfillment\nprocesses.\n\n### Price or Product ID on a payment intent\n\nWhen you directly create [payment\nintents](https://docs.stripe.com/api/payment_intents), you can associate them\nwith your [products](https://docs.stripe.com/api/prodcuts) or\n[prices](https://docs.stripe.com/api/prices) using metadata. This allows you to\nstore the ID of the associated objects on the payment intent, which lacks an\nexisting field that associates them with a price or product.\n\n```\ncurl https://api.stripe.com/v1/payment_intents \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d amount=2000 \\\n -d currency=usd \\\n -d \"automatic_payment_methods[enabled]\"=true \\\n -d \"metadata[price_id]\"=price_1MoBy5LkdIwHu7ixZhnattbh \\\n -d \"metadata[product_id]\"=prod_NWjs8kKbJWmuuc\n```\n\nYou can locate the ID of the associated object in events that include that\npayment intent, such as `payment_intent.succeeded` events. Then, pass the\nmetadata from the event to your downstream processes (for example, order\nfulfillment or inventory management).\n\n```\n{\n \"id\": \"evt_3PajIyCzbZon1zn90b9Wvsqf\",\n \"object\": \"event\",\n \"api_version\": \"2024-06-20\",\n \"created\": 1720551759,\n \"data\": {\n \"object\": {\n \"id\": \"pi_3PajIyCzbZon1zn901xQeOdi\",\n \"object\": \"payment_intent\",\n ...\n \"metadata\": {\n \"price_id\": \"price_1MoBy5LkdIwHu7ixZhnattbh\",\n \"product_id\": \"prod_NWjs8kKbJWmuuc\"\n },\n ...\n }\n },\n ...\n \"type\": \"payment_intent.succeeded\",\n}\n```\n\n### Fulfillment status and tracking\n\nAfter you begin your order fulfillment flow, you can use metadata to record the\ncurrent fulfillment status on the associated Stripe object. This allows you to\nretrieve an object from Stripe, and receive both the payment status and\nfulfillment status simultaneously.\n\n```\ncurl https://api.stripe.com/v1/payment_intents \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d amount=2000 \\\n -d currency=usd \\\n -d \"automatic_payment_methods[enabled]\"=true \\\n -d \"metadata[fulfillment_status]\"=fulfillment_not_started\n```\n\nTo update the current fulfillment status:\n\n```\ncurl https://api.stripe.com/v1/payment_intents/{{INTENT_ID}} \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d \"metadata[fulfillment_status]\"=shipping_label_created\n```\n\n## Track affiliate links\n\nIn [some cases](https://docs.stripe.com/metadata#exceptions), Stripe copies\n`metadata` from the original object to a related object. If you have affiliates\nhosting [Payment Links](https://docs.stripe.com/api/payment_links) on their\nsites and offer incentives for sales originating from those links, you can use\nthis behavior in your affiliate tracking.\n\nWhen you create payment links, you can populate `metadata` to track your\naffiliate:\n\n```\ncurl https://api.stripe.com/v1/payment_links \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d \"line_items[0][price]\"=price_1MotwRLkdIwHu7ixYcPLm5uZ \\\n -d \"line_items[0][quantity]\"=1 \\\n -d \"metadata[affiliate]\"=afl_7920\n```\n\nEvery time a customer uses that link to complete a purchase, Stripe creates a\n[Checkout Session](https://docs.stripe.com/api/checkkout/sessions) that inherits\nthe metadata that you provided on the payment link. You can monitor\n`checkout.session.completed` events to receive notifications from Stripe when a\ncustomer completes a purchase. You can then pull your affiliate tracking details\nfrom the Checkout Session’s metadata to attribute the sale accurately.\n\n```\n{\n \"id\": \"evt_1PajfeCzbZon1zn9S7pNlQkU\",\n \"object\": \"event\",\n \"api_version\": \"2024-06-20\",\n \"created\": 1720553150,\n \"data\": {\n \"object\": {\n\"id\": \"cs_test_a1zgRtgzjvamTgTnqMqIaqP6zehBIkaM03iYzxNjZiJ7FMDRRhibd5w3gL\",\n \"object\": \"checkout.session\",\n ...\n \"metadata\": {\n \"affiliate\": \"afl_7920\"\n },\n ...\n }\n },\n ...\n \"type\": \"checkout.session.completed\",\n}\n```\n\n## Store notes\n\nYou can use metadata to store notes on objects. For example, to create a note of\na customer’s preferred call time, add metadata to the\n[Customer](https://docs.stripe.com/api/customers) object:\n\n```\ncurl https://api.stripe.com/v1/customers \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d name=\"Jenny Rosen\" \\\n --data-urlencode \"metadata[call_window]\"=\"10:00 AM - 2:00 PM\"\n```\n\nTo store a note that details why an\n[Invoice](https://docs.stripe.com/api/invoices) was voided, you can use the\n`metadata` on the `Invoice` object:\n\n```\ncurl https://api.stripe.com/v1/invoices/{{INVOICE_ID}} \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n --data-urlencode \"metadata[void_reason]\"=\"Duplicate of Invoice #011\"\n```\n\n## Set metadata indirectly\n\nThe placement of your metadata determines which event types contain the\ninformation you provide. Similarly, if you’re tracking certain event types in\nyour integration, it determines where you place your metadata.\n\nCertain object creation endpoints contain multiple fields for your metadata: one\nfor storing metadata directly on the object being created, and others for\nsetting metadata on downstream-created objects. Learn more about the [indirect\nmetadata fields](https://docs.stripe.com/metadata#set-indirectly).\n\nThe following example creates a [Checkout\nSession](https://docs.stripe.com/api/checkout/sessions) that generates a\nsubscription when completed. This uses the top-level `metadata` field, and the\n`subscription_data.metadata` field:\n\n```\ncurl https://api.stripe.com/v1/checkout/sessions \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n --data-urlencode success_url=\"https://example.com/success\" \\\n -d mode=subscription \\\n -d \"line_items[0][price]\"=price_1MotwRLkdIwHu7ixYcPLm5uZ \\\n -d \"line_items[0][quantity]\"=1 \\\n -d \"metadata[checkout_metadata]\"=\"Checkout Session metadata goes here\" \\\n-d \"subscription_data[metadata][subscription_metadata]\"=\"Subscription metadata\ngoes here\"\n```\n\nYou can set metadata on the object that you create (in this case, the Checkout\nSession). After your customer completes the checkout process, the metadata\npreviously provided in `subscription_data.metadata` is set on the newly created\n[Subscription](https://docs.stripe.com/api/subscriptions) object. This\ndetermines which events include the metadata. For example, events that contain a\nCheckout Session, such as `checkout.session.completed`, contain values provided\nthrough the top-level `metadata` parameter.\n\n```\n{\n \"id\": \"evt_1PakshCzbZon1zn9PlQwJYn0\",\n \"object\": \"event\",\n \"api_version\": \"2024-06-20\",\n \"created\": 1720557803,\n \"data\": {\n \"object\": {\n\"id\": \"cs_test_a1lsYmNYnEqQAxHT9knVy8v7u7m5ChjKtyB3M68ovMCjUQgCADsCkUviUU\",\n \"object\": \"checkout.session\",\n ...\n \"metadata\": {\n \"checkout_metadata\": \"Checkout Session metadata goes here\"\n },\n ...\n }\n },\n ...\n \"type\": \"checkout.session.completed\",\n}\n```\n\nEvents that contain a `Subscription` object, such as\n`customer.subscription.created`, contain values provided through\n`subscription_data.metadata`. However, because that event contains a\nSubscription object, Stripe provides the values in the top-level `metadata`\nfield on the Subscription object.\n\n```\n{\n \"id\": \"evt_1PaksgCzbZon1zn9x9u3MTSC\",\n \"object\": \"event\",\n \"api_version\": \"2024-06-20\",\n \"created\": 1720557800,\n \"data\": {\n \"object\": {\n \"id\": \"sub_1PaksdCzbZon1zn9D6DQjr9L\",\n \"object\": \"subscription\",\n ...\n \"metadata\": {\n \"subscription_metadata\": \"Subscription metadata goes here\"\n },\n ...\n }\n },\n ...\n \"type\": \"customer.subscription.created\",\n}\n```\n\nYou can access the metadata you provide in `subscription_data.metadata` in the\n[invoice](https://docs.stripe.com/api/invoices) events. This occurs because the\nsubscription’s metadata is transferred to `subscription_details.metadata` on the\n`Invoice` objects created by the subscription.\n\n```\n{\n \"id\": \"evt_1PaksgCzbZon1zn9wD24BlvY\",\n \"object\": \"event\",\n \"api_version\": \"2024-06-20\",\n \"created\": 1720557800,\n \"data\": {\n \"object\": {\n \"id\": \"in_1PaksdCzbZon1zn9Z4bl0z7k\",\n \"object\": \"invoice\",\n ...\n \"subscription_details\": {\n \"metadata\": {\n \"subscription_metadata\": \"Subscription metadata goes here\"\n }\n ...\n },\n }\n },\n ...\n \"type\": \"invoice.finalized\",\n}\n```\n\n## Store large amounts of metadata\n\nUse metadata fields in Stripe to store data directly or store an external lookup\nkey to access additional data from your own database, minimizing the information\nyou need to retrieve.\n\n### Store structured data\n\nMetadata can accept any string, including those representing structured data\nsuch as JSON, up to [500 characters](https://docs.stripe.com/metadata#data). You\ncan use it to store more data within your metadata fields, reducing the number\nof keys you need to access to retrieve all your information.\n\n```\ncurl https://api.stripe.com/v1/accounts \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n--data-urlencode\n\"metadata[account_details]\"=\"{\\\"sourcing_details\\\":{\\\"found_from\\\":\\\"web_search\\\",\\\"referrer\\\":\\\"user_123\\\",\\\"joined\\\":\\\"2024-01-01\\\"},\\\"tier_information\\\":{\\\"tier\\\":\\\"silver\\\",\\\"total_sales\\\":35,\\\"next_tier_at\\\":50,\\\"next_tier\\\":\\\"gold\\\"}}\"\n```\n\n### Store metadata externally\n\nTo associate more data with an object than the [500\ncharacters](https://docs.stripe.com/metadata#data) the provided metadata fields\nallow, store the excess data in your own database. You can then use metadata to\nstore the ID or lookup key for accessing that information. This approach is\nsimilar to storing the ID of any other record in your system.\n\n```\ncurl https://api.stripe.com/v1/accounts \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d \"metadata[account_details_lookup_key]\"=rec_a1b2c3\n```\n\n## Use metadata with other Stripe APIs and products\n\nYou can use metadata with other Stripe APIs and products to enhance their\nflexibility and extensibility.\n\n### Radar\n\nYou can write Radar rules to [reference\nmetadata](https://docs.stripe.com/radar/rules/reference#metadata-attributes)\nvalues and use them to determine if a rule triggers its associated action for a\ntransaction.\n\n#### Perform initial review of customer transactions\n\nYou can set up a flow to flag a\n[customer’s](https://docs.stripe.com/api/customers) initial transaction for\nreview, then update the customer’s details to omit subsequent transactions from\nreview.\n\n```\ncurl https://api.stripe.com/v1/customers \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d name=\"Jenny Rosen\" \\\n -d \"metadata[verified_customer]\"=false\n```\n\n`Review if ::customer:verified_customer:: != 'true'`\n\n```\ncurl https://api.stripe.com/v1/customers/{{CUSTOMER_ID}} \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d \"metadata[verified_customer]\"=true\n```\n\nStripe only triggers this rule for payments if `verified_customer` is set to\n`false` on the customer. Customers who have that set to `true` aren’t affected.\n\n#### A/B testing rules\n\nYou can use metadata with Radar to create A/B testing scenarios for new rules,\nallowing you to evaluate a new rule’s effectiveness before implementing it\nacross your entire customer base.\n\n```\ncurl https://api.stripe.com/v1/payment_intents \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d amount=2000 \\\n -d currency=usd \\\n -d \"automatic_payment_methods[enabled]\"=true \\\n -d \"metadata[experiment_group]\"=treatment\n```\n\n```\ncurl https://api.stripe.com/v1/payment_intents \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d amount=2000 \\\n -d currency=usd \\\n -d \"automatic_payment_methods[enabled]\"=true \\\n -d \"metadata[experiment_group]\"=control\n```\n\n`Block if ::experiment_group:: = 'treatment' and :card_funding: = 'prepaid'`\n\nStripe only triggers this rule for payments that you label as part of the\ntreatment group. It doesn’t affect payments set to `control` as their\n`experiment_group`.\n\n### The Search API\n\nUse the [Search API](https://docs.stripe.com/search#metadata) to query and\nfilter results based on the metadata that you set on the [supported\nobjects](https://docs.stripe.com/search#supported-query-fields-for-each-resource)\nyou’re searching for.\n\nFor example, you can track your “premium” customers by adding metadata to the\n[Customer](https://docs.stripe.com/api/customers) object. To offer them\nexclusive promotions, use the Search API to identify customers marked as\n`premium`, then reach out to them with the promotion.\n\n```\ncurl https://api.stripe.com/v1/customers \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d name=\"Jenny Rosen\" \\\n -d \"metadata[service_tier]\"=premium\n```\n\n```\ncurl -G https://api.stripe.com/v1/customers/search \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n --data-urlencode query=\"metadata['service_tier']:'premium'\"\n```\n\nObjects must be [indexed](https://docs.stripe.com/search#data-freshness) before\nthey appear in results from the Search API. The objects won’t show up in search\nresults until that indexing completes.\n\n## Links\n\n- [metadata](https://docs.stripe.com/api/metadata)\n- [Checkout Sessions](https://docs.stripe.com/api/checkout/sessions)\n- [https://example.com/success](https://example.com/success)\n- [Customers](https://docs.stripe.com/api/customers)\n- [payment intents](https://docs.stripe.com/api/payment_intents)\n- [products](https://docs.stripe.com/api/prodcuts)\n- [prices](https://docs.stripe.com/api/prices)\n- [some cases](https://docs.stripe.com/metadata#exceptions)\n- [Payment Links](https://docs.stripe.com/api/payment_links)\n- [Checkout Session](https://docs.stripe.com/api/checkkout/sessions)\n- [Invoice](https://docs.stripe.com/api/invoices)\n- [indirect metadata fields](https://docs.stripe.com/metadata#set-indirectly)\n- [Subscription](https://docs.stripe.com/api/subscriptions)\n- [500 characters](https://docs.stripe.com/metadata#data)\n- [reference\nmetadata](https://docs.stripe.com/radar/rules/reference#metadata-attributes)\n- [Search API](https://docs.stripe.com/search#metadata)\n- [supported\nobjects](https://docs.stripe.com/search#supported-query-fields-for-each-resource)\n- [indexed](https://docs.stripe.com/search#data-freshness)",
  "metadata": {
    "title": "Metadata use cases | Stripe Documentation",
    "description": "Use these examples to store your data on Stripe objects.",
    "sourceURL": "https://docs.stripe.com/metadata/use-cases"
  }
}