{
  "content": "# Migrating to the Payment Intents API\n\n#### Interested in using Stripe Billing, Tax, discounts, shipping, or currency conversion?\n\nWe’re developing a Payment Element integration that manages subscriptions, tax,\ndiscounts, shipping, and currency conversion. Read the [Build a checkout\npage](https://docs.stripe.com/checkout/custom/quickstart) guide to learn more.\n\nLearn how to migrate your existing cards and Charges API integration.\n\nMigrating your payment flow can be daunting. It is safe to incrementally adopt\nthe Payment Intents API and use it in parallel with the Charges API. To this\nend, you can split up the migration into the following steps:\n\n- [Update your API version and your client\nlibrary](https://docs.stripe.com/payments/payment-intents/migration#api-version).\n- If applicable, [migrate code that reads from Charge\nproperties](https://docs.stripe.com/payments/payment-intents/migration/charges)\nso that you have a consistent read path between charges created by the Charges\nAPI and charges created by the Payment Intents API. This ensures a read-side\nintegration that works for both your old and new payments integrations.\n- Migrate your existing Charges API integration on\n[Web](https://docs.stripe.com/payments/payment-intents/migration#web),\n[iOS](https://docs.stripe.com/payments/accept-a-payment?platform=ios), and\n[Android](https://docs.stripe.com/payments/accept-a-payment?platform=android) to\nuse the Payment Intents API.\n- Migrate your integration that [saves cards on Customer\nobjects](https://docs.stripe.com/payments/payment-intents/migration#saved-cards).\n- [Test with regulatory test\ncards](https://docs.stripe.com/testing#regulatory-cards) to ensure your upgraded\nintegration handles authentication correctly.\n\n## Update your API version and your client library\n\nWhile the Payment Intents API works on all API versions, we recommend that you\n[upgrade to the latest API\nversion](https://docs.stripe.com/upgrades#how-can-i-upgrade-my-api). If you\ndecide to use an API version older than\n[2019-02-11](https://docs.stripe.com/upgrades#2019-02-11), note the following\ntwo changes as you go through the code examples:\n\n- `requires_source` has been renamed to `requires_payment_method`\n- `requires_source_action` has been renamed to `requires_action`\n\nIn addition, if you use one of our [SDKs](https://docs.stripe.com/sdks), upgrade\nto the latest version of the library in order to use the Payment Intents API.\n\n## Migrate your one-time payment flows\n\nElementsPayment Request ButtonLegacy CheckoutStripe.js v2\nAn integration built with Stripe.js & Elements consists of the following steps:\n\n- Register your intent to collect payment on the server side\n- Collect payment details on the client side\n- Initiate creation of the payment\n- Fulfill the customer’s order on the server side\n\n### Step 1: Register intent to collect payment on the server side\n\n[Create a PaymentIntent](https://docs.stripe.com/payments/payment-intents) on\nyour server and make it [accessible on the client\nside](https://docs.stripe.com/payments/payment-intents#passing-to-client).\n\ncurlRubyPythonPHPJavaNodeGo.NETBeforeAfter\nNot possible before\n\n```\ncurl https://api.stripe.com/v1/payment_intents \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"amount\"=1099 \\\n -d \"currency\"=\"usd\"\n```\n\n### Step 2: Collect payment details on the client side\n\nUse the\n[confirmCardPayment](https://docs.stripe.com/js#stripe-confirm-card-payment)\nfunction, which collects the payment information and submits it directly to\nStripe.\n\nJavaScriptJavascript (ESNext)BeforeAfter\n```\nstripe.createToken(\n cardElement\n).then(function(token) {\n // Send token to server\n});\n```\n\n```\nstripe.confirmCardPayment(\n INTENT_SECRET_FROM_STEP_1,\n {\n payment_method: {card: cardElement}\n }\n).then(function(result) {\n if (result.error) {\n // Display error.message in your UI.\n } else {\n // The payment has succeeded\n // Display a success message\n }\n});\n```\n\n### Step 3: Initiate creation of the payment\n\nIn your existing integration, the final step is using tokenized payment\ninformation to create a charge on your server. This is no longer necessary, as\nthe `confirmCardPayment` function—called in the previous step—initiates creation\nof the charge.\n\ncurlRubyPythonPHPJavaNodeGo.NETBeforeAfter\n```\ncurl https://api.stripe.com/v1/charges \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"source\"=\"{{FROM_PREVIOUS_STEP}}\" \\\n -d \"amount\"=1099 \\\n -d \"currency\"=\"usd\"\n```\n\nCompleted in previous step\n\n### Step 4: Fulfill the customer’s order\n\nWith automatic confirmation, the charge is created for you asynchronously based\non customer action on the client side, so you must [monitor\nwebhooks](https://docs.stripe.com/payments/payment-intents/verifying-status) to\ndetermine when the payment completes successfully. To perform steps like order\nfulfillment after a customer’s payment is successful, implement support for\nwebhooks and monitor the `payment_intent.succeeded` event.\n\nBeforeAfter\nIf charge succeeds, fulfill.\n\nSubscribe to the `payment_intent.succeeded` webhook and fulfill in the webhook\nhandler.\n\nNow that you have migrated, use the test cards in the following section to\nverify your upgraded integration handles 3D Secure authentication.\n\n## Migrate your integration that saves cards on Customer objects\n\nSaving cards in checkout flowSaving cards outside checkout flowPaying with saved\ncards\nA Payment Intents API integration that collects card information in the checkout\nflow consists of the following steps:\n\n- Register your intent to collect payment on the server side\n- Collect payment details on the client side\n- Initiate creation of the payment\n- Fulfill the customer’s order on the server side\n\n### Step 1: Register intent to collect payment on the server side\n\n[Create a PaymentIntent](https://docs.stripe.com/payments/payment-intents) on\nyour server. Set\n[setup_future_usage](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-setup_future_usage)\nto `off_session` if you primarily intend to charge users when they’re outside of\nyour application, or `on_session` if you plan to charge them in the application.\nIf you plan to use the card for both on and off session payments use\n`off_session`. Providing the `setup_future_usage` parameter along with a\nCustomer ID will save the resulting PaymentMethod to that Customer after the\nPaymentIntent has been confirmed and any required actions from the customer are\ncomplete. Next, make the PaymentIntent [accessible on the client\nside](https://docs.stripe.com/payments/payment-intents#passing-to-client).\n\ncurlRubyPythonPHPJavaNodeGo.NETBeforeAfter\nNot possible before\n\n```\ncurl https://api.stripe.com/v1/payment_intents \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"setup_future_usage\"=\"off_session\" \\\n -d \"amount\"=1099 \\\n -d \"currency\"=\"usd\"\n```\n\n### Step 2: Collect payment details on the client side\n\nUse the\n[confirmCardPayment](https://docs.stripe.com/js#stripe-confirm-card-payment)\nfunction, which collects the payment information and submits it directly to\nStripe.\n\nJavaScriptJavascript (ESNext)BeforeAfter\n```\nstripe.createToken(\n// or stripe.createSource\n cardElement\n).then(function(token) {\n // Send token to server\n});\n```\n\n```\nstripe.confirmCardPayment(\n '{{INTENT_SECRET_FROM_STEP_1}}',\n {\n payment_method: {card: cardElement},\n }\n).then(function(result) {\n if (result.error) {\n // Display error.message in your UI.\n } else {\n // The payment has succeeded\n // Display a success message\n }\n});\n```\n\nFinally, attach the payment method (`paymentIntent.payment_method`) to the\ncustomer.\n\ncurlRubyPythonPHPJavaNodeGo.NETBeforeAfter\n```\ncurl https://api.stripe.com/v1/customers/{{CUSTOMER_ID}}/sources \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"source\"=\"{{TOKEN_OR_SOURCE}}\"\n```\n\n```\ncurl https://api.stripe.com/v1/payment_method/{{PAYMENT_METHOD_ID}}/attach \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"customer\"=\"{{CUSTOMER_ID}}\"\n```\n\n### Step 3: Initiate creation of the payment\n\nIn your existing integration, the final step is using tokenized payment\ninformation to create a charge on your server. This is no longer necessary, as\nthe `confirmCardPayment` function—called in the previous step—initiates creation\nof the charge.\n\ncurlRubyPythonPHPJavaNodeGo.NETBeforeAfter\n```\ncurl https://api.stripe.com/v1/charges \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"source\"=\"{{FROM_PREVIOUS_STEP}}\" \\\n -d \"customer\"=\"{{CUSTOMER_ID}}\" \\\n -d \"amount\"=1099 \\\n -d \"currency\"=\"usd\"\n```\n\nCompleted in previous step\n\n### Step 4: Fulfill the customer’s order\n\nWith automatic confirmation, the charge is created for you asynchronously based\non customer action on the client side, so you must [monitor\nwebhooks](https://docs.stripe.com/payments/payment-intents/verifying-status) to\ndetermine when the payment completes successfully. To perform steps like order\nfulfillment after a customer’s payment is successful, implement support for\nwebhooks and monitor the `payment_intent.succeeded` event.\n\nBeforeAfter\nIf charge succeeds, fulfill.\n\nSubscribe to the `payment_intent.succeeded` webhook and fulfill in the webhook\nhandler.\n\nNow that you have migrated, use the test cards in the following section to\nverify your upgraded integration handles 3D Secure authentication.\n\n## Access saved payment methods\n\nTo display the customer’s previously saved Cards, Sources, and PaymentMethods,\n[list the payment methods](https://docs.stripe.com/api/payment_methods/list)\ninstead of reading the\n[sources](https://docs.stripe.com/api/customers/object#customer_object-sources)\nproperty of the customer object. This is required because new PaymentMethods\nadded to a customer will not be duplicated in the sources property of the\ncustomer object.\n\ncurlRubyPythonPHPJavaNodeGo.NETBeforeAfter\n```\ncustomer.sources\n```\n\n```\ncurl\nhttps://api.stripe.com/v1/payment_methods?customer={{CUSTOMER_ID}}&type=card \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2:\n```\n\n## Test the integration\n\nIt’s important to thoroughly test your integration to make sure you’re correctly\nhandling cards that require additional authentication and cards that don’t. Use\nthese card numbers in a [sandbox](https://docs.stripe.com/keys#test-live-modes)\nwith any expiration date in the future and any three digit CVC code to validate\nyour integration when authentication is required and when it’s not required.\n\nNumberAuthenticationDescription4000002500003155Required on setup or first\ntransactionThis test card requires authentication for [one-time\npayments](https://docs.stripe.com/payments/accept-a-payment?platform=web).\nHowever, if you set up this card using the [Setup Intents\nAPI](https://docs.stripe.com/payments/save-and-reuse) and use the saved card for\nsubsequent payments, no further authentication is\nneeded.4000002760003184RequiredThis test card requires authentication on all\ntransactions.4000008260003178RequiredThis test card requires authentication, but\npayments will be declined with an `insufficient_funds` failure code after\nsuccessful authentication.4000000000003055SupportedThis test card supports\nauthentication via 3D Secure 2, but does not require it. Payments using this\ncard do not require additional authentication in a sandbox unless your [sandbox\nRadar\nrules](https://docs.stripe.com/payments/3d-secure/authentication-flow#three-ds-radar)\nrequest authentication.\nUse these cards in your application or the [payments\ndemo](https://stripe-payments-demo.appspot.com/) to see the different behavior.\n\n## See also\n\n- [Payment Intents on\niOS](https://docs.stripe.com/payments/accept-a-payment?platform=ios)\n- [Payment Intents on\nAndroid](https://docs.stripe.com/payments/accept-a-payment?platform=android)\n\n## Links\n\n- [Build a checkout page](https://docs.stripe.com/checkout/custom/quickstart)\n- [migrate code that reads from Charge\nproperties](https://docs.stripe.com/payments/payment-intents/migration/charges)\n- [iOS](https://docs.stripe.com/payments/accept-a-payment?platform=ios)\n- [Android](https://docs.stripe.com/payments/accept-a-payment?platform=android)\n- [Test with regulatory test\ncards](https://docs.stripe.com/testing#regulatory-cards)\n- [upgrade to the latest API\nversion](https://docs.stripe.com/upgrades#how-can-i-upgrade-my-api)\n- [2019-02-11](https://docs.stripe.com/upgrades#2019-02-11)\n- [SDKs](https://docs.stripe.com/sdks)\n- [Create a PaymentIntent](https://docs.stripe.com/payments/payment-intents)\n- [accessible on the client\nside](https://docs.stripe.com/payments/payment-intents#passing-to-client)\n- [confirmCardPayment](https://docs.stripe.com/js#stripe-confirm-card-payment)\n- [monitor\nwebhooks](https://docs.stripe.com/payments/payment-intents/verifying-status)\n-\n[setup_future_usage](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-setup_future_usage)\n- [list the payment methods](https://docs.stripe.com/api/payment_methods/list)\n-\n[sources](https://docs.stripe.com/api/customers/object#customer_object-sources)\n- [sandbox](https://docs.stripe.com/keys#test-live-modes)\n- [one-time\npayments](https://docs.stripe.com/payments/accept-a-payment?platform=web)\n- [Setup Intents API](https://docs.stripe.com/payments/save-and-reuse)\n- [sandbox Radar\nrules](https://docs.stripe.com/payments/3d-secure/authentication-flow#three-ds-radar)\n- [payments demo](https://stripe-payments-demo.appspot.com)",
  "metadata": {
    "title": "Migrating to the Payment Intents API | Stripe Documentation",
    "description": "",
    "sourceURL": "https://docs.stripe.com/payments/payment-intents/migration"
  }
}