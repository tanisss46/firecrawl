{
  "content": "# Add an app settings page\n\n## Create a page that allows users to configure their settings for your Stripe app.\n\nWhen you upload your app to Stripe, we create an app settings page in the Stripe\nDashboard. The rest of the page is open for you to create custom settings.\n\n## How to use app settings\n\nAn account administrator who installs your app can use the settings page in\nseveral ways:\n\n- **Configuring your app for their use case**: For example, say a business on\nStripe wants to synchronize payments data from the last seven days with another\napplication. Your settings page can provide a dropdown menu to let admin users\nselect 1 week as the time period. The configuration applies globally on the\naccount, meaning all users on that Stripe account now see data from the past\nweek in your app.\n- **Authenticating users**: If your app connects to a different\napplication—outside of Stripe—you need a place for Stripe users to log in to the\nother app, pass credentials, and handle authentication. The settings page is the\nbest place for users to link accounts in this way. For example, an app that uses\na third-party API like Zendesk needs a `SettingsView` to authenticate a user\nwith their Zendesk account.\n- **Uninstalling an app**: The only place to uninstall an app is the settings\npage. You can’t remove the uninstall button from the settings page. There are\nalso buttons for users to report your app and view its marketplace listing if\nyou have one.\n\n## What you can do with it\n\nBy default, the settings page includes buttons for uninstalling and reporting\nyour app, plus various app details. To populate the page with custom settings,\nuse `SettingsView`. This view root component renders in the settings page. Add\nUI components, like tabs and form fields, to create the user experience you\nwant.\n\n![SettingsView in the Stripe\nDashboard](https://b.stripecdn.com/docs-statics-srv/assets/settingsview.ca0e43bcc311ea9819da61b2949e6ed1.png)\n\nWhat SettingsView looks like in the Stripe Dashboard\n\n# How to customize the settings page\n\nPopulate your app’s empty settings page by defining a settings view and\ncomposing a UI to let your users set up and configure your app.\n\nYou have control over the design of your app settings page. In the developer\npreview mode, the settings page appears as a smaller view. In live mode, your\nsettings page is a full screen.\n\n[Add a settings\nview](https://docs.stripe.com/stripe-apps/app-settings#define-settingsview)\nDefine a settings view with the CLI:\n\n```\nstripe apps add settings\n```\n\nYou can name your settings component anything you want. The generated settings\nview is available in the `src/views` directory. In the [app\nmanifest](https://docs.stripe.com/stripe-apps/reference/app-manifest), your new\nview is tied to the `settings` viewport in a `ui_extension` field:\n\n```\n{\n ...,\n \"ui_extension\": {\n \"views\": [\n ...,\n {\n \"viewport\": \"settings\",\n \"component\": \"AppSettings\"\n }\n ],\n }\n}\n```\n\nThis code shows how a view is a pairing of a React component plus a specified\nviewport. In this case, the `AppSettings` view root component appears on the\nsettings page of the Stripe Dashboard—the `settings` viewport.\n\nThe `SettingsView` view root component isn’t tied to a specific object, but tied\ninstead to the `settings` viewport. The `settings` viewport maps to predefined\nlocations in the Dashboard, outside of the app drawer.\n\n[Preview your settings\npage](https://docs.stripe.com/stripe-apps/app-settings#preview-settings-page)\nWhile previewing your app locally, test your `SettingsView` at\n[https://dashboard.stripe.com/apps/settings-preview](https://dashboard.stripe.com/apps/settings-preview)\nto see what it looks like.\n\nAfter you upload your app, your `SettingsView` renders on the app settings page\nin the Dashboard. To see it live, go to\n`https://dashboard.stripe.com/settings/apps/YOUR_APPLICATION_ID` and replace\n`YOUR_APPLICATION_ID` with the ID you specified when creating your app.\n\n[Save the\nvalues](https://docs.stripe.com/stripe-apps/app-settings#save-the-values)\nWhen a user configures their settings, your app needs to apply those settings.\nProvide a function to pass to the `SettingsView` component for handling the save\nevent. Clicking the **Save** button triggers the save event.\n\nThe `onSave` callback function receives an object of `values`. This object maps\nany form elements into key value pairs where the element `name` attribute is the\nkey and the element `value` attribute is the value:\n\n```\n/**\n* An example app settings view that provides two settings fields of first & last\nname.\n* The fields are combined into a single string value and passed to an external\nAPI.\n */\nimport {SettingsView, TextField} from \"@stripe/ui-extension-sdk/ui\";\n\nconst ExampleAppSettings = () => {\n // Define a callback function to pass to the onSave event.\n const saveSettings = async (values: any) => {\n try {\n// Extract our fields from the values object. The key is the name attribute of\nthe form element.\n const { firstname, lastname } = values;\n // Make a POST request to an external API\n const result = await fetch(\n 'https://www.my-api.com/',\n {\n method: 'POST',\n body: JSON.stringify({\n fullName: `${firstname} ${lastname}`,\n }),\n }\n );\n await result.text();\n } catch (error) {\n console.error(error);\n }\n };\n\n return (\n /* Assign our callback function to the onSave property */\n <SettingsView onSave={saveSettings}>\n{ /* A name attribute for each field is required to handle the form data in the\nonSave callback */ }\n <TextField\n name=\"firstname\"\n label=\"First name\"\n />\n <TextField\n name=\"lastname\"\n label=\"Last name\"\n />\n </SettingsView>\n );\n};\n\nexport default ExampleAppSettings;\n```\n\nFor more information, see the [SettingsView\nreference](https://docs.stripe.com/stripe-apps/components/settingsview).\n\n[Store and retrieve\nsettings](https://docs.stripe.com/stripe-apps/app-settings#store-and-retrieve-settings)\nTo handle storage and retrieval of the settings values, connect the\n`SettingsView` component to an [app\nbackend](https://docs.stripe.com/stripe-apps/build-backend) or a third-party\nservice that includes application settings.\n\nSee a [settings UI\nexample](https://github.com/stripe/stripe-apps/tree/master/examples/settings-view).\n\n[Display a success\nmessage](https://docs.stripe.com/stripe-apps/app-settings#display-success-message)\nMake sure your UI tells users they’ve successfully saved their settings choices.\nUse the `statusMessage` property to display a success message when a user clicks\nthe save button.\n\n![An example of SettingsView displaying a status\nmessage](https://b.stripecdn.com/docs-statics-srv/assets/settingsview-statusmessage.372f7befb8b2104ab42f2cc35ac021d3.png)\n\nAn example of SettingsView displaying a status message.\n\nHere’s the code for this example, where a `SettingsView` generates a status\nmessage to the left of the save button:\n\n```\nimport {useState} from 'react';\nimport {SettingsView, TextField} from \"@stripe/ui-extension-sdk/ui\";\n\n/**\n* An example app settings view that provides two settings fields of first & last\nname.\n* The fields are combined into a single string value and passed to an external\nAPI.\n* The user is notified of the status of their settings form via the\nstatusMessage property.\n */\nconst ExampleAppSettings = () => {\n// useState to track the status of the form. Changing the status value triggers\na rerender.\n const [status, setStatus] = useState('');\n\n // Define a callback function to pass to the onSave event.\n const saveSettings = async (values: any) => {\n // Update the form status with a loading message.\n setStatus('Saving...');\n try {\n const { firstname, lastname } = values;\n const result = await fetch(\n 'https://www.my-api.com/',\n {\n method: 'POST',\n body: JSON.stringify({\n fullName: `${firstname} ${lastname}`,\n }),\n }\n );\n await result.text();\n // Update the form status with a success message.\n setStatus('Saved!');\n } catch (error) {\n console.error(error);\n // Update the form status with an error message.\n setStatus('There was an error saving your settings.');\n }\n };\n\n return (\n// Assign our callback function to the onSave property & pass the current value\nof statusMessage\n <SettingsView\n onSave={saveSettings}\n statusMessage={status}\n >\n <TextField\n name=\"firstname\"\n label=\"First name\"\n />\n <TextField\n name=\"lastname\"\n label=\"Last name\"\n />\n </SettingsView>\n );\n};\n\nexport default ExampleAppSettings;\n```\n\nYou can also create your own unique designs to communicate status to your app’s\nusers using [UI components](https://docs.stripe.com/stripe-apps/components).\n\n## See also\n\n- [Extension SDK\nreference](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api)\n- [UI components](https://docs.stripe.com/stripe-apps/components)\n- [Build a UI](https://docs.stripe.com/stripe-apps/build-ui)\n\n## Links\n\n- [app manifest](https://docs.stripe.com/stripe-apps/reference/app-manifest)\n-\n[https://dashboard.stripe.com/apps/settings-preview](https://dashboard.stripe.com/apps/settings-preview)\n- [https://www.my-api.com/](https://www.my-api.com/)\n- [SettingsView\nreference](https://docs.stripe.com/stripe-apps/components/settingsview)\n- [app backend](https://docs.stripe.com/stripe-apps/build-backend)\n- [settings UI\nexample](https://github.com/stripe/stripe-apps/tree/master/examples/settings-view)\n- [UI components](https://docs.stripe.com/stripe-apps/components)\n- [Extension SDK\nreference](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api)\n- [Build a UI](https://docs.stripe.com/stripe-apps/build-ui)",
  "metadata": {
    "title": "Add an app settings page | Stripe Documentation",
    "description": "Create a page that allows users to configure their settings for your Stripe app.",
    "sourceURL": "https://docs.stripe.com/stripe-apps/app-settings"
  }
}