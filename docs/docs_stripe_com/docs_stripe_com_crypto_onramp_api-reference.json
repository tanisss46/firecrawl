{
  "content": "# Onramp API referencePublic preview\n\n## Use the onramp API reference as you build the embeddable onramp.\n\nRefer to the following developer flows when building your onramp integration.\n\n## Integrate the onramp into your application\n\nBefore you can use live mode, Stripe must approve your [onramp\napplication](https://dashboard.stripe.com/register?redirect=%2Fcrypto-onramp%2Fapplication).\n\n### Get started\n\nTo integrate an application with the onramp:\n\n- After you [onboard](https://dashboard.stripe.com/crypto-onramp/onboarding)\nonto Stripe, use the [Dashboard](https://dashboard.stripe.com/apikeys) to grab\nyour [secret](https://docs.stripe.com/keys#obtain-api-keys) and\n[publishable](https://docs.stripe.com/keys#obtain-api-keys) API keys.\n- Generate a `CryptoOnrampSession` server-side.\n- On the server, expose a new API endpoint (for example,\n`myserver.com/mint-onramp-session`) that makes a call to the Stripe `POST\n/v1/crypto/onramp_sessions` endpoint. This “mints” an onramp session with Stripe\nthat you can use with new or returning users. You need to mint one session per\nuser.\n- Run the following command:\n\n```\ncurl -X POST https://api.stripe.com/v1/crypto/onramp_sessions \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2:\n```\n\nYou receive a response similar to the following:\n\n```\n{\n \"id\": \"cos_0MYvmj589O8KAxCGp14dTjiw\",\n \"object\": \"crypto.onramp_session\",\n\"client_secret\":\n\"cos_0MYvmj589O8KAxCGp14dTjiw_secret_BsxEqQLiYKANcTAoVnJ2ikH5q002b9xzouk\",\n \"created\": 1675794053,\n \"livemode\": false,\n \"status\": \"initialized\",\n \"transaction_details\": {\n \"destination_currency\": null,\n \"destination_amount\": null,\n \"destination_network\": null,\n \"fees\": null,\n \"lock_wallet_address\": false,\n \"source_currency\": null,\n \"source_amount\": null,\n \"destination_currencies\": [\n \"btc\",\n \"eth\",\n \"sol\",\n \"usdc\",\n \"xlm\"\n ],\n \"destination_networks\": [\n \"bitcoin\",\n \"ethereum\",\n \"solana\",\n \"stellar\"\n ],\n \"transaction_id\": null,\n \"wallet_address\": null,\n \"wallet_addresses\": null\n }\n}\n```\n\nThis endpoint returns error codes if Stripe can’t create onramp sessions. See\nthe supportability section below to learn why this might happen. We recommend\nthat you render the onramp component conditional when a user gets an HTTP status\n`200` during session creation, providing a fallback UI that can deal with\nsession creation errors.\n\n### Use the session client_secret in the frontend\n\nTo initialize the onramp component, you need:\n\n- Your publishable API key.\n- The `client_secret` from your request to `POST /v1/crypto/onramp_sessions`.\n\nThe following code mounts an iframe on the `#onramp-element` node, which hosts\nall of the onramp. You can use an event listener to improve your application’s\nfunctionality. For example, you can resume operation in a decentralized\napplication (Dapp) after cryptocurrency purchases. See the [frontend\nevents](https://docs.stripe.com/crypto/onramp/api-reference#frontend-events) for\nall of the events a user can subscribe to.\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n <head>\n <meta charset=\"utf-8\" />\n <title>Crypto Onramp</title>\n <meta name=\"description\" content=\"A demo of hosted onramp\" />\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\n <script src=\"https://js.stripe.com/v3/\"></script>\n<script type=\"text/javascript\"\nsrc=\"https://crypto-js.stripe.com/crypto-onramp-outer.js\"></script>\n </head>\n <body>\n <div id=\"onramp-element\" style=\"max-width: 500px\">\n\n <script>\n const stripeOnramp = StripeOnramp(\"pk_test_TYooMQauvdEDq54NiTphI7jx\");\n initialize();\n // initialize onramp element with client secret\n function initialize() {\nconst clientSecret =\n\"cos_1LLgeLF5fgi2FFcAWx8RlsMT_secret_WNA1VOkwZ0bHMc9MtOuyJ4vto00EMsLP7Io\";\n const onrampSession = stripeOnramp.createSession({clientSecret});\n onrampSession\n .mount(\"#onramp-element\");\n }\n </script>\n </body>\n</html>\n```\n\n### CryptoOnramp element renders and takes over\n\nAfter the above `CryptoOnramp` html element renders, the frontend client drives\nthe interface. As the state of the session changes and we collect more details\naround `transaction_details`, the `CryptoOnrampSession` object updates\naccordingly. Webhooks and frontend events are generated for every status\ntransition that occurs. By using frontend event listeners, you can redirect\nusers back to your application user flow after the onramp session completes.\n\n### (Optional) Change the appearance of the onramp\n\nTo enable darkmode, include an appearance struct in the session creation call\nfrom above.\n\n```\nconst onrampSession = stripeOnramp.createSession({\n clientSecret: clientSecret,\n appearance: {\n theme: 'dark'\n },\n});\n```\n\nIf you don’t specify the appearance, the onramp defaults to a light theme. You\ncan also change the theme after the onramp renders by calling:\n\n```\nonrampSession.setAppearance({\n theme: newTheme\n});\n```\n\nYou can use [branding\nsettings](https://docs.stripe.com/payments/checkout/customization/appearance#branding)\nto upload your logo and brand colors which automatically apply to onramp\nsessions created with your platform API key.\n\n## Pre-populate transaction parameters\n\nTo deliver a seamless onramp user flow, you can pre-populate some of the\nparameters of the onramp session. For example, a Dapp or wallet would already\nhave a user’s `wallet_addresses`. You can achieve this during session creation\nas follows:\n\n```\ncurl -X POST https://api.stripe.com/v1/crypto/onramp_sessions \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"wallet_addresses[ethereum]\"=\"0xB00F0759DbeeF5E543Cc3E3B07A6442F5f3928a2\" \\\n -d \"source_currency\"=\"usd\" \\\n -d \"destination_currency\"=\"eth\" \\\n -d \"destination_network\"=\"ethereum\" \\\n -d \"destination_amount\"=\"0.1234\"\n```\n\nYou receive a response similar to the following:\n\n```\n{\n \"id\": \"cos_0MYvnp589O8KAxCGwmWATYfA\",\n \"object\": \"crypto.onramp_session\",\n\"client_secret\":\n\"cos_0MYvnp589O8KAxCGwmWATYfA_secret_LhqXJi2lvbMCYhVHfrHGfUfX6009qtZPtV7\",\n \"created\": 1675794121,\n \"livemode\": false,\n \"status\": \"initialized\",\n \"transaction_details\": {\n \"destination_currency\": \"eth\",\n \"destination_amount\": \"0.123400000000000000\",\n \"destination_network\": \"ethereum\",\n \"fees\": null,\n \"lock_wallet_address\": false,\n \"source_currency\": \"usd\",\n \"source_amount\": null,\n \"destination_currencies\": [\n \"btc\",\n \"eth\",\n \"sol\",\n \"usdc\",\n \"xlm\"\n ],\n \"destination_networks\": [\n \"bitcoin\",\n \"ethereum\",\n \"solana\",\n \"stellar\"\n ],\n \"transaction_id\": null,\n \"wallet_address\": null,\n \"wallet_addresses\": {\n \"bitcoin\": null,\n \"ethereum\": \"0xB00F0759DbeeF5E543Cc3E3B07A6442F5f3928a2\",\n \"polygon\": null,\n \"solana\": null,\n \"stellar\": null,\n \"destination_tags\": null\n }\n }\n}\n```\n\nWe allow the following parameters to be pre-populated:\n\n- `wallet_addresses`: The suggested wallet address to deliver crypto to (the\ndefault selection on the wallet attach screen)\n- `lock_wallet_address`: Whether or not to lock the suggested wallet address\n- `source_currency`: The fiat currency for the transaction (`usd` and `eur` only\nfor now)\n- `source_amount`: The amount of fiat currency to use for the purchase of crypto\n(mutually exclusive with destination amount)\n- `destination_network`: The default crypto network for this onramp (for\nexample, `ethereum`)\n- `destination_currency`: The default cryptocurrency for this onramp session\n(for example, `eth`)\n- `destination_amount`: The amount of cryptocurrency to purchase (mutually\nexclusive with the source amount)\n- `destination_currencies`: An array of cryptocurrencies you want to restrict to\n(for example, `[eth, usdc]`)\n- `destination_networks`: An array of crypto networks you want to restrict to\n(for example, `[ethereum, polygon]`)\n\nRefer to the API reference for more details on the specific requirements and how\nthey impact users in the onramp UI.\n\n## Pre-populate customer information\n\nTo reduce user friction during the onramp flow and increase conversion, you\nmight want to pre-populate some of the required KYC information for the user if\nyou’ve already collected it within your application.\n\nThroughout the flow, users are required to provide at least:\n\n- Email\n- First name\n- Last name\n- Date of birth\n- SSN\n- Home address (country, address line 1, address line 2, city, state, postal\ncode)\n\nThe onramp API provides the ability to pre-populate all of those fields except\nfor SSN. To pre-populate this information, you can provide it using the\n`customer_information` parameter in the OnrampSession creation API.\n\nExample request:\n\n```\ncurl -X POST https://api.stripe.com/v1/crypto/onramp_sessions \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"customer_information[email]\"=\"john@doe.com\" \\\n -d \"customer_information[first_name]\"=\"John\" \\\n -d \"customer_information[last_name]\"=\"Doe\" \\\n -d \"customer_information[dob][year]\"=1990 \\\n -d \"customer_information[dob][month]\"=7 \\\n -d \"customer_information[dob][day]\"=4 \\\n -d \"customer_information[address][country]\"=\"US\" \\\n -d \"customer_information[address][line1]\"=\"354 Oyster Point Blvd\" \\\n -d \"customer_information[address][line2]\"=\"Apt 1A\" \\\n -d \"customer_information[address][city]\"=\"South San Francisco\" \\\n -d \"customer_information[address][state]\"=\"CA\" \\\n -d \"customer_information[address][postal_code]\"=\"94080\"\n```\n\nResponse:\n\n```\n{\n \"id\": \"cos_1MbuUeAEFtmWU4EVBFZS0gce\",\n \"object\": \"crypto.onramp_session\",\n\"client_secret\":\n\"cos_1MbuUeAEFtmWU4EVBFZS0gce_secret_zPsPPytwNU6mMKh1Bmz7ymXGi00ILwwyGeG\",\n \"created\": 1676504072,\n \"livemode\": false,\n \"status\": \"initialized\",\n \"transaction_details\": {\n \"destination_currency\": null,\n \"destination_amount\": null,\n \"destination_network\": null,\n \"fees\": null,\n \"lock_wallet_address\": false,\n \"source_currency\": null,\n \"source_amount\": null,\n \"destination_currencies\": [\n \"btc\",\n \"eth\",\n \"sol\",\n \"usdc\",\n \"xlm\"\n ],\n \"destination_networks\": [\n \"bitcoin\",\n \"ethereum\",\n \"solana\",\n \"polygon\",\n \"stellar\"\n ],\n \"transaction_id\": null,\n \"wallet_address\": null,\n \"wallet_addresses\": null\n }\n}\n```\n\nWe allow the following parameters to be pre-populated:\n\n- `customer_information.email`—Freeform string for the user’s email\n- `customer_information.first_name`—Freeform string for the user’s first name\n- `customer_information.last_name`—Freeform string for the user’s last name\n- `customer_information.dob.year`—Integer for the user’s birth year\n- `customer_information.dob.month`—Integer for the user’s birth month\n- `customer_information.dob.day`—Integer for the user’s birth day\n- `customer_information.address.country`—String of the two letter country code\nfor the user’s country of residence\n- `customer_information.address.line1`—Freeform string for the user’s address\nline one\n- `customer_information.address.line2`—Freeform string for the user’s address\nline two\n- `customer_information.address.city`—Freeform string for the user’s city\n- `customer_information.address.state`—String of the two letter state code for\nUS states (the full state name also works), for example, “CA” or “California”\n- `customer_information.address.postal_code`—Freeform string for the user’s\npostal code\n\nAll of the fields are optional and you can provide any subset of them for\npre-population. However, if you provide date of birth, you must also provide all\nof `year`, `month`, and `day` (that is, not just one or two of the birth\nfields).\n\n## Handle user supportability and fraud\n\nStripe enforces limitations on the onramp product for both user supportability\nand in the event of fraud attacks.\n\n### Check user supportablity\n\n#### Regional considerationsUnited StatesEU\n\nOnramp is only available in the United States (excluding Hawaii) and EU\ncountries.\n\nPass `customer_ip_address` during session creation so we can preemptively check\nthe aforementioned limitation. The endpoint returns `HTTP 400` with\n`code=crypto_onramp_unsupportable_customer` if the customer is in a geography we\ncan’t support (based on `customer_ip_address`)\n\nYou might want to hide the onramp option from users in this case. Otherwise, our\nonramp UI renders in a `disabled` state.\n\nHere’s a sample request and response (400) illustrating this behavior:\n\n```\ncurl -X POST https://api.stripe.com/v1/crypto/onramp_sessions \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"customer_ip_address\"=\"8.8.8.8\" \\\n```\n\n```\n{\n \"error\": {\n \"type\": \"invalid_request_error\",\n \"code\": \"crypto_onramp_unsupportable_customer\",\n\"message\": \"Based on the information provided about the customer, we’re\ncurrently unable to support them.\"\n }\n}\n```\n\n### Handle fraud attacks\n\nStripe serves as the business of record and takes on the liability for disputes\nand fraud. Stripe has deep expertise in risk management, but we might decide to\ntemporarily restrict creation of onramp sessions if we detect a high risk\nsituation (for example, if we see active attacks and exploits).\n\nIf we need to shut off the API because of an unbounded fraud attack, we’ll\nreturn the following when anyone attempts to create a new session:\n\n```\ncurl -X POST https://api.stripe.com/v1/crypto/onramp_sessions \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n```\n\nYou recieve a response similar to the following:\n\n```\n{\n \"error\": {\n \"type\": \"api_error\",\n \"code\": \"crypto_onramp_disabled\",\n\"message\": \"The v1/crypto/onramp_sessions endpoint has been disabled\ntemporarily. Stripe will get in contact with you about details of the outage.\",\n \"updated\": 1652025690\n }\n}\n```\n\n## API reference\n\n### CryptoOnrampSession resource\n\nThe `CryptoOnrampSession` resource looks as follows:\n\n```\n{\n \"id\": \"cos_1Ke0052eZvKYlo2Clh7lJ50Q\",\n \"object\": \"crypto.onramp_session\",\n // One of the most important parts of the resource is going to be this\n // client_secret. This will be passed from the server to the client to\n // drive a single session using our embedded widget.\n\"client_secret\":\n\"cos_1Ke0052eZvKYlo2Clh7lJ50Q_secret_f7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8\",\n \"created\": 1647449225,\n \"livemode\": true,\n// A hash representing monetary details of the transaction this session\nrepresents\n \"transaction_details\": {\n // The consumer's wallet address (where crypto will be sent to)\n \"wallet_addresses\": null |\n {\n \"ethereum\": \"0xB00F0759DbeeF5E543Cc3E3B07A6442F5f3928a2\",\n \"solana\": \"bufoH37MTiMTNAfBS4VEZ94dCEwMsmeSijD2vZRShuV\",\n \"bitcoin\": \"1BuFoRu4W1usdnj1nPSfnNUgUm9BM6JtnV\",\n \"stellar\": \"GBUCRQX2GXV2CCPNBVB6FMXORFRNXXQMZ5RN2GMH2KZNMH7O4WON5DDN\",\n// Mapping of assets to the destination tag where the crypto will be sent to\n(for supported assets)\n \"destination_tags\": null | {\n \"xlm\": \"123456789\"\n }\n },\n // A fiat currency code\n \"source_currency\": null | \"usd\", \"eur\",\n // The amount of fiat we intend to onramp - excluding fees\n \"source_amount\": null | \"1.01\",\n // The selected destination_currency to convert the `source` to.\n // This should be a a crypto currency, currency code\n // If destination_currencies is set, it must be a value in that array.\n \"destination_currency\": null | \"usdc\",\n // The specific crypto network the `destination_currency` is settled on.\n // If destination_networks is set, it must be a value in that array.\n \"destination_network\": null | \"ethereum\",\n // If a platform wants to lock the currencies an session will support,\n// they can add supported currencies to this array. If left null, the experience\n // will allow selection of all supported destination currencies.\n \"destination_currencies\": null | [\"eth\", \"usdc\", \"btc\" , \"xlm\"],\n// If a platform wants to lock the supported networks, they can do so through\n // this array. If left null, the experience will allow selection of all\n // supported networks.\n\"destination_networks\": null | [\"solana\", \"ethereum\", \"polygon\" , \"stellar\"],\n // The amount of crypto the customer will get deposited into their wallet\n \"destination_amount\": null | \"1.012345678901234567\",\n // Details about the fees associated with this transaction\n // Note: The currency associated with fee is always the same as\n // source_currency\n // Note: We won't know what fees to charge until after the customer has\n // passed status=onboarding\n \"fees\": null | {\n // The cost associated with moving crypto from Stripe to the end\n // consumers's wallet. e.g: for ETH, this is called \"gas fee\",\n // for BTC this is a \"miner's fee\".\n \"network_fee_amount\": \"1.23\",\n // Stripe's cut of the transaction\n \"transaction_fee_amount\": \"1.23\",\n },\n // The total amount of source currency the consumer needs to give us to\n // complete the transaction. Equivalent to source_amount + fees.\n \"source_total_amount\": null | \"3.47\",\n // Pointer to the on network transaction id/hash\n// This will only be set if the sessions hits the stauts=fulfillment_complete\n // and we've transferred the crypto successfully to the external wallet.\n// E.g:\nhttps://etherscan.io/tx/0xc2573af6b3a18e6f7c0e1cccc187a483f61d72cbb421f7166970d3ab45731a95\n\"transaction_id\": null |\n\"0xc2573af6b3a18e6f7c0e1cccc187a483f61d72cbb421f7166970d3ab45731a95\"\n },\n // The status of the OnrampSession.\n // One of = {initialized, rejected,\n // requires_payment, fulfillment_processing, fulfillment_complete}\n \"status\": \"initialized\"\n}\n```\n\n### CryptoOnrampSession state machine\n\nThe `status` field represents a state machine for the session with the following\nstates:\n\n![The state machine for the\nCryptoOnrampSession](https://b.stripecdn.com/docs-statics-srv/assets/state-machine.2bed0615bff44c25bfc58f16f7383391.png)\n\n- `initialized`: The application has newly minted the onramp session on the\nserver-side, but the customer hasn’t used it yet. Sessions are in this state\nuntil the user onboards and is ready to pay.\n- `rejected`: We rejected the customer for some reason (KYC failure, sanctions\nscreening issues, fraud checks).\n- `requires_payment`: The user has completed onboarding or sign-in and gets to\nthe payment page. If they attempt payment and fail, they stay in this status.\n- `fulfillment_processing`: The customer successfully completed payment. We\nhaven’t delivered the crypto they purchased yet.\n- `fulfillment_complete`: The customer was successfully able to pay for crypto\nand we have confirmed delivery.\n\n### CryptoOnrampSession operations\n\nAll endpoints require authentication with your [API\nkey](https://docs.stripe.com/keys). The authentication header is omitted in the\nexample requests.\n\nApplications can perform the following operations on a `CryptoOnrampSession`:\n\n- Create a session\n- Get an existing session\n\n### Create Session\n\nEndpoint: `POST /v1/crypto/onramp_sessions`\n\nParameter nameType (optional?) default: ?Detailswallet_addressesString\n(optional) default: nullThe end customer’s crypto wallet address (for each\nnetwork) to use for this transaction.- When left null, the user enters their\nwallet in the onramp UI.\n- When set, the platform must set either `destination_networks` or\n`destination_network` and we perform address validation. Users can still select\na different wallet in the onramp UI.\n\nFor assets that use destination tags or memos, you can nest a `destination_tags`\nmap in `wallet_addresses` that maps assets to the specified destination tag for\na user.\n\nsource_currencyString (optional) default: nullThe default source fiat currency\nfor the onramp session.- When left null, a default currency is selected based on\nuser locale.\n- When set, it must be one of the fiat currencies supported by onramp. Users can\nstill select a different currency in the onramp UI.\nsource_amountString (optional) default: nullThe default amount of fiat (in\ndecimal) to exchange into crypto.- When left null, a default value is computed\nif `destination_amount` is set.\n- When set, setting `source_amount` is mutually exclusive with setting\n`destination_amount` (only one or the other is supported). We don’t support\nfractional pennies. If fractional minor units of a currency are passed in, it\ngenerates an error. Users can update the value in the onramp UI.\ndestination_networksArray<String> (optional) default: nullThe list of\ndestination crypto networks user can choose from.- When left null, all supported\ncrypto networks are shown in the onramp UI.\n- When set, it must be a non-empty array where values in the array are each a\nvalid crypto network. Allowed values are `{solana, ethereum, bitcoin, polygon}`.\nIt can be used to lock users to a specific network by passing a single value\narray. Users **cannot** override this parameter.\ndestination_currenciesArray<String> (optional) default: nullThe list of\ndestination cryptocurrencies a user can choose from.- When left null, all\nsupported cryptocurrencies are shown in the onramp UI subject to\n`destination_networks` if set.\n- When set, it must be a non-empty array where all values in the array are valid\ncryptocurrencies. These are `{eth, matic, sol, usdc, btc}`. You can use it to\nlock users to a specific cryptocurrency by passing a single value array. Users\n**cannot** override this parameter.\ndestination_networkString (optional) default: nullThe default destination crypto\nnetwork.- When left null, the first value of `destination_networks` is selected.\n- When set, if `destination_networks` is also set, the value of\n`destination_network` must be present in that array. To lock a\n`destination_network`, specify that value as the single value for\n`destination_networks`. Supported destination networks are `{solana, bitcoin,\nethereum, polygon}`. Users can select a different network in the onramp UI\nsubject to `destination_networks` if set.\ndestination_currencyString (optional) default: nullThe default destination\ncryptocurrency.- When left null, the first value of `destination_currencies` is\nselected.\n- When set, if `destination_currencies` is also set, the value of\n`destination_currency` must be present in that array. To lock a\n`destination_currency`, specify that value as the single value for\n`destination_currencies`. Supported destination currencies are `{eth, matic,\nsol, usdc, btc}`. Users can select a different cryptocurrency in the onramp UI\nsubject to `destination_currencies` if set.\ndestination_amountString (optional) default: nullThe default amount of crypto to\nexchange into.- When left null, a default value is computed if `source_amount`,\n`destination_currency`, and `destination_network` are set.\n- When set, both `destination_currency` and `destination_network` must also be\nset. All cryptocurrencies are supported to their full precisions (for example,\n18 decimal places for `eth`). We validate and generate an error if the amount\nexceeds the supported precision based on the exchange currency. Setting\n`source_amount` is mutually exclusive with setting `destination_amount` (only\none or the other is supported). Users can update the amount in the onramp UI.\ncustomer_ip_addressString (optional) default: nullThe IP address of the customer\nthe platform intends to onramp. If the user’s IP is in a region we can’t\nsupport, we return an `HTTP 400` with an appropriate error code. We support IPv4\nand IPv6 addresses. Geographic supportability is checked again later in the\nonramp flow, which provides a way to hide the onramp option from ineligible\nusers for a better user experience.\nSample request and response:\n\n```\ncurl -X POST https://api.stripe.com/v1/crypto/onramp_sessions \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"wallet_addresses[ethereum]\"=\"0xB00F0759DbeeF5E543Cc3E3B07A6442F5f3928a2\" \\\n -d \"source_currency\"=\"usd\" \\\n -d \"destination_currency\"=\"eth\" \\\n -d \"destination_network\"=\"ethereum\" \\\n -d \"destination_currencies[]\"=\"eth\" \\\n -d \"destination_networks[]\"=\"ethereum\"\n```\n\n```\n{\n \"id\": \"cos_0MYvv9589O8KAxCGPm84FhVR\",\n \"object\": \"crypto.onramp_session\",\n\"client_secret\":\n\"cos_0MYvv9589O8KAxCGPm84FhVR_secret_IGBYKVlTlnJL8UGxji48pKxBO00deNcBuVc\",\n \"created\": 1675794575,\n \"livemode\": false,\n \"status\": \"initialized\",\n \"transaction_details\": {\n \"destination_currency\": \"eth\",\n \"destination_amount\": null,\n \"destination_network\": \"ethereum\",\n \"fees\": null,\n \"lock_wallet_address\": false,\n \"source_currency\": \"usd\",\n \"source_amount\": null,\n \"destination_currencies\": [\n \"eth\"\n ],\n \"destination_networks\": [\n \"ethereum\"\n ],\n \"transaction_id\": null,\n \"wallet_address\": null,\n \"wallet_addresses\": {\n \"bitcoin\": null,\n \"ethereum\": \"0xB00F0759DbeeF5E543Cc3E3B07A6442F5f3928a2\",\n \"polygon\": null,\n \"solana\": null,\n \"stellar\": null,\n \"destination_tags\": null\n }\n }\n}\n```\n\n#### Get session\n\nEndpoint: `GET /v1/crypto/onramp_sessions/:id`\n\nParameter nameType (optional?) default: ?DetailsNo supported parameters for this\noperation!\nHere’s an example request:\n\n```\ncurl -X GET\nhttps://api.stripe.com/v1/crypto/onramp_sessions/cos_0MYvv9589O8KAxCGPm84FhVR \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2:\n```\n\nYou receive a response similar to the following:\n\n```\n{\n \"id\": \"cos_0MYvv9589O8KAxCGPm84FhVR\",\n \"object\": \"crypto.onramp_session\",\n\"client_secret\":\n\"cos_0MYvv9589O8KAxCGPm84FhVR_secret_IGBYKVlTlnJL8UGxji48pKxBO00deNcBuVc\",\n \"created\": 1675794575,\n \"livemode\": false,\n \"status\": \"initialized\",\n \"transaction_details\": {\n \"destination_currency\": \"eth\",\n \"destination_amount\": null,\n \"destination_network\": \"ethereum\",\n \"fees\": null,\n \"lock_wallet_address\": false,\n \"source_currency\": \"usd\",\n \"source_amount\": null,\n \"destination_currencies\": [\n \"eth\"\n ],\n \"destination_networks\": [\n \"ethereum\"\n ],\n \"transaction_id\": null,\n \"wallet_address\": null,\n \"wallet_addresses\": {\n \"bitcoin\": null,\n \"ethereum\": \"0xB00F0759DbeeF5E543Cc3E3B07A6442F5f3928a2\",\n \"polygon\": null,\n \"solana\": null,\n \"stellar\": null,\n \"destination_tags\": null\n }\n }\n}\n```\n\n#### Validation and errors\n\nConditionHTTP statusError codeWe’re unable to mint new sessions because of an\nincident400`crypto_onramp_disabled`Based on the `customer_ip_address` parameter,\nwe’re unable to support the given\nconsumer.400`crypto_onramp_unsupported_country` or\n`crypto_onramp_unsupportable_customer`Malformed `customer_ip_address` is passed\nin to the `/v1/crypto/onramp_session`\nendpoint400`customer_ip_address``source_amount` and `destination_amount` are\nmutually exclusive, but the platform set\nboth.400`crypto_onramp_invalid_source_destination_pair`One of\n`destination_currency` and `destination_network` is set, but the other one\nisn’t400`crypto_onramp_incomplete_destination_currency_and_network_pair`The\ncombination of `destination_currency` and `destination_network` isn’t\nvalid400`crypto_onramp_invalid_destination_currency_and_network_pair``source_amount`\nis set, but `source_currency` isn’t\nset400`crypto_onramp_missing_source_currency``source_amount` isn’t a positive\nnumber400`crypto_onramp_invalid_source_amount``destination_amount` is set, but\n`destination_currency` isn’t\nset400`crypto_onramp_missing_destination_currency``destination_amount` isn’t a\npositive number400`crypto_onramp_invalid_destination_amount`The combination of\n`destination_currencies` and `destination_networks` doesn’t have any supported\ncurrencies400`crypto_onramp_invalid_destination_currencies_and_networks``destination_currency`\nisn’t included in\n`destination_currencies`400`crypto_onramp_conflicting_destination_currency``destination_network`\nisn’t included in\n`destination_networks`400`crypto_onramp_conflicting_destination_network`At least\none wallet address in `wallet_addresses` is associated with a network that isn’t\nincluded in\n`destination_networks`400`crypto_onramp_wallet_addresses_not_all_networks_supported`No\nwallet addresses were provided in `wallet_addresses` but `lock_wallet_address`\nwas set to true400`crypto_onramp_no_wallet_address_to_lock`The business hasn’t\nset the `business_name` or `business_url` fields. These are populated in the\n[Dashboard](https://dashboard.stripe.com/settings/public/) under `Public\nbusiness name` and `Business\nwebsite`400`crypto_onramp_merchant_not_properly_setup`\n#### Get multiple sessions\n\nEndpoint: `GET /v1/crypto/onramp_sessions`\n\nFetch multiple onramp sessions at the same time using the [list\nendpoint](https://docs.stripe.com/api/crypto/onramp_sessions/list).\n\n### Webhooks\n\nWe send a `crypto.onramp_session_updated` webhook every time the status of an\nonramp session changes post creation. We won’t send one when a new session is\ncreated. You can [configure webhooks](https://docs.stripe.com/webhooks) in the\nDashboard.\n\nThe resource used by the webhook will be the `CryptoOnrampSession` resource\nabove:\n\n```\n{\n \"id\": \"evt_123\",\n \"object\": \"event\",\n \"data\": {\n \"object\": {\n \"id\": \"cos_0MYvv9589O8KAxCGPm84FhVR\",\n \"object\": \"crypto.onramp_session\",\n\"client_secret\":\n\"cos_0MYvv9589O8KAxCGPm84FhVR_secret_IGBYKVlTlnJL8UGxji48pKxBO00deNcBuVc\",\n \"created\": 1675794575,\n \"livemode\": false,\n \"status\": \"initialized\",\n \"transaction_details\": {\n \"destination_currency\": \"eth\",\n \"destination_amount\": null,\n \"destination_network\": \"ethereum\",\n \"fees\": null,\n \"lock_wallet_address\": false,\n \"source_currency\": \"usd\",\n \"source_amount\": null,\n \"destination_currencies\": [\n \"eth\"\n ],\n \"destination_networks\": [\n \"ethereum\"\n ],\n \"transaction_id\": null,\n \"wallet_address\": null,\n \"wallet_addresses\": {\n \"bitcoin\": null,\n \"ethereum\": \"0xB00F0759DbeeF5E543Cc3E3B07A6442F5f3928a2\",\n \"polygon\": null,\n \"solana\": null,\n \"stellar\": null,\n \"destination_tags\": null\n }\n }\n }\n }\n}\n```\n\n### Frontend events\n\nHere is the list of frontend events that you can subscribe to:\n\n```\n// when the onramp UI is rendered\n{\n type: 'onramp_ui_loaded',\n payload: {session: OnrampSession},\n}\n// when the onramp session object is updated\n{\n type: 'onramp_session_updated',\n payload: {session: OnrampSession},\n}\n\n// for modal overlay render mode only\n{\n type: 'onramp_ui_modal_opened',\n payload: {session: OnrampSession},\n}\n{\n type: 'onramp_ui_modal_closed',\n payload: {session: OnrampSession},\n}\n```\n\nAs shown above, events can be subscribed to and unsubscribed to using the\nstandard `addEventListener/removeEventListener` functions over OnrampSession.\nYou can use `'*'` to match all events.\n\n### Session persistence\n\nYou can use session persistence to help you provide notifications and keep users\nengaged with the onramp after fulfilling their purchase.\n\n#### Advantages of session persistence\n\nYou might want to persist an onramp session across user visits in some\ninstances. For example, when a user’s onramp session is disrupted or dropped,\nyou could prompt them and provide ways to resume the onramp session later. Or if\na user refreshes the page after completing the payment, you can retain the\nability to notify them when a previous onramp purchase was fulfilled. For this\nreason, the OnrampSession object is stateful and stored as a server side\nresource. By initializing the onramp UI using a previously used OnrampSession\nclient secret, users return to where they left off.\n\n#### Session persistence configuration\n\nA client secret is a unique identifier for the onramp session that stores the\nlifecycle of a session without leaking sensitive payment information. However,\nit exposes private information such as wallet addresses. Don’t log it, embed it\nin URLs, or expose it to anyone other than the customer. Make sure that you have\nTLS on any page that includes the client secret. If you have a Web2-like account\nstructure, you could link OnrampSession to your user object and fetch it upon\nauthentication. For an account-less Web3 application, it would add user friction\nto require the use of message signing for authentication. Privacy-preserving\nlocal storage yields an acceptable user experience.\n\n## Links\n\n- [onramp\napplication](https://dashboard.stripe.com/register?redirect=%2Fcrypto-onramp%2Fapplication)\n- [onboard](https://dashboard.stripe.com/crypto-onramp/onboarding)\n- [Dashboard](https://dashboard.stripe.com/apikeys)\n- [secret](https://docs.stripe.com/keys#obtain-api-keys)\n- [frontend\nevents](https://docs.stripe.com/crypto/onramp/api-reference#frontend-events)\n- [https://js.stripe.com/v3/](https://js.stripe.com/v3/)\n-\n[https://crypto-js.stripe.com/crypto-onramp-outer.js](https://crypto-js.stripe.com/crypto-onramp-outer.js)\n- [branding\nsettings](https://docs.stripe.com/payments/checkout/customization/appearance#branding)\n-\n[https://etherscan.io/tx/0xc2573af6b3a18e6f7c0e1cccc187a483f61d72cbb421f7166970d3ab45731a95](https://etherscan.io/tx/0xc2573af6b3a18e6f7c0e1cccc187a483f61d72cbb421f7166970d3ab45731a95)\n- [API key](https://docs.stripe.com/keys)\n- [Dashboard](https://dashboard.stripe.com/settings/public/)\n- [list endpoint](https://docs.stripe.com/api/crypto/onramp_sessions/list)\n- [configure webhooks](https://docs.stripe.com/webhooks)",
  "metadata": {
    "title": "Onramp API reference | Stripe Documentation",
    "description": "Use the onramp API reference as you build the embeddable onramp.",
    "sourceURL": "https://docs.stripe.com/crypto/onramp/api-reference"
  }
}