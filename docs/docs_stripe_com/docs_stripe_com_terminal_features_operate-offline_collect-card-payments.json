{
  "content": "# Collect card payments while offlinePublic preview\n\n## Collect card payments with intermittent, limited, or no internet connectivity.\n\nBluetooth readersInternet readersiOSAndroidReact Native\nThe Terminal SDK allows your application to continue collecting payments using a\nmobile reader without a network connection.\n\n#### Warning\n\nWhen operating offline, payment information is collected at the time of sale,\nand authorization is only attempted after connectivity is restored and the\npayment is forwarded. You, as the user, assume all decline risk of the\ntransaction. If the issuer declines the offline transaction, there’s no way to\nrecover the funds, and you might not receive payment from the customer for goods\nor services already provided.\n\nTo reduce the chances of an issuer decline, you’re encouraged to:\n\n- Reestablish internet connectivity as soon as possible to record the payments\nto Stripe.\n- Restrict transactions if they exceed a certain amount.\n- [Fail all offline\npayments](https://docs.stripe.com/terminal/features/operate-offline/collect-card-payments#managing-risk-while-offline)\nif the SDK has stored a set of transactions whose sum exceeds a certain amount.\n\n## Collect payments while offline\n\nOffline payments follow the same steps as online payments: create, collect,\nprocess, and capture the payment. Your device can transition from online to\noffline at any step in the process.\n\n- [Enable offline\nmode](https://docs.stripe.com/terminal/features/operate-offline/collect-card-payments#enable-offline-mode)\n- [Connect to a reader while\noffline](https://docs.stripe.com/terminal/features/operate-offline/collect-card-payments#connect-while-offline)\n- [Handle offline\nevents](https://docs.stripe.com/terminal/features/operate-offline/collect-card-payments#handle-offline-events)\n- [Create a PaymentIntent while\noffline](https://docs.stripe.com/terminal/features/operate-offline/collect-card-payments#create-payment-intent)\n- [Collect a payment\nmethod](https://docs.stripe.com/terminal/features/operate-offline/collect-card-payments#collect-payment-method)\n- [Confirm the\npayment](https://docs.stripe.com/terminal/features/operate-offline/collect-card-payments#confirm-payment)\n- [Wait for payments to\nforward](https://docs.stripe.com/terminal/features/operate-offline/collect-card-payments#wait-for-forward)\n- [Capture the\npayment](https://docs.stripe.com/terminal/features/operate-offline/collect-card-payments#capture-payment)\n- [Examine offline\npayments](https://docs.stripe.com/terminal/features/operate-offline/collect-card-payments#examine-offline)\n[Enable offline\nmode](https://docs.stripe.com/terminal/features/operate-offline/collect-card-payments#enable-offline-mode)\nTo use offline mode, your application needs to consume version `3.3.0` or later\nof the Terminal iOS SDK.\n\nUse a [Configuration](https://docs.stripe.com/api/terminal/configuration) object\nto enable offline mode for the [BBPOS Chipper 2X\nBT](https://docs.stripe.com/terminal/readers/bbpos-chipper2xbt), [Stripe Reader\nM2](https://docs.stripe.com/terminal/readers/stripe-m2) or [BBPOS WisePad\n3](https://docs.stripe.com/terminal/payments/setup-reader/bbpos-wisepad3)\ndevices at your `Location`.\n\n```\ncurl https://api.stripe.com/v1/terminal/configurations \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d \"offline[enabled]\"=true\n```\n\nAfter you enable offline mode on a `Configuration` object, you can [assign\nit](https://docs.stripe.com/terminal/fleet/configurations-overview?dashboard-or-api=api#create-a-configuration-for-an-individual-location)\nto a `Location`. You can also enable offline mode by default for all `Locations`\nby updating the\n[default](https://docs.stripe.com/terminal/fleet/configurations-overview?dashboard-or-api=api#retrieve-the-account-default-configuration)\n`Configuration` object for your account. Configuration API changes can take\nseveral minutes to propagate to your SDK and reader, and require you to\ndisconnect from and reconnect to your reader to take effect.\n\n[Connect to a reader while\noffline](https://docs.stripe.com/terminal/features/operate-offline/collect-card-payments#connect-while-offline)\nThe SDK stores necessary `Location` information locally after connecting online.\nOn subsequent offline connections, it uses the stored configuration information\nfrom that `Location`.\n\nTo connect to a reader while offline, you must have previously connected to any\nmobile reader of the same type at the same `Location` while online within the\nlast 30 days, and have updated your reader’s software within that time. If you\nattempt to connect to a reader while offline without meeting these requirements,\nthe request fails with an error.\n\nErrorResolutionThe SDK isn’t connected to the internetMake sure the `Location`\nyou’re using is\n[configured](https://docs.stripe.com/terminal/features/operate-offline/collect-card-payments#enable-offline-mode)\nfor offline mode. Otherwise, if your `Location` is properly configured, your POS\nhasn’t previously connected to any readers while online. You should first\nconnect to any reader while online, and then connect to a reader of the same\ntype while offline.The selected reader requires a software update before it can\nbe used to collect payments offline.The reader’s software hasn’t been updated in\n30 days or more. Connect to the reader while online to update it.The selected\nreader must be paired online at this location before it can be used to collect\npayments offline.You’re attempting to connect to a reader type that your POS\nhasn’t previously connected to while online. You must first connect to this\nreader or any reader of the same type while online. Or, if you want to connect\nwhile offline, you can connect to a reader type that your POS previously\nconnected to while online.\nIf you reinstall the application or perform any operation that clears the disk\nstorage for the SDK, you lose any payments that the SDK has stored and not yet\nforwarded. Make sure there are no stored payments before you perform any\ndestructive action.\n\n[Handle offline\neventsClient-side](https://docs.stripe.com/terminal/features/operate-offline/collect-card-payments#handle-offline-events)\nImplement the `OfflineDelegate` protocol and pass it to Terminal to notify your\napplication of offline-related events. You must set `OfflineDelegate` before\ncollecting payments offline.\n\nYou can also query `Terminal.offlineStatus.sdk.networkStatus` to check the\ncurrent network status of the SDK.\n\nThe SDK attempts to forward payments even if the network status is offline. This\nmeans your connection token provider might receive a request to provide a\nconnection token, even if the SDK’s network status is offline. During payment\ncollection, the network status determines if the SDK processes the payment\nonline or immediately stores the payment.\n\n```\nimport StripeTerminal\n\nclass CustomOfflineDelegate: OfflineDelegate {\n\nfunc terminal(_ terminal: Terminal, didChangeOfflineStatus offlineStatus:\nOfflineStatus) {\n// Check the value of `offlineStatus` and update your UI accordingly. For\ninstance,\n// you can check the SDK's network status at `offlineStatus.sdk.networkStatus`.\n //\n // You can also check the SDK's current offline status using\n // `Terminal.shared.offlineStatus.sdk.networkStatus`.\n }\n\nfunc terminal(_ terminal: Terminal, didForwardPaymentIntent intent:\nPaymentIntent, error: Error?) {\n // The PaymentIntent was successfully forwarded, or an error occurred.\n// Reconcile any local state using the backend-generated\n`PaymentIntent.stripeId`\n // and the metadata you supplied when creating the PaymentIntent.\n //\n// Note that the `PaymentIntent.stripeId` may still be nil if creating the\n // PaymentIntent in the backend failed.\n }\n\n func terminal(_ terminal: Terminal, didReportForwardingError error: Error) {\n // A non-specific error occurred while forwarding a PaymentIntent.\n // Check the error message and your integration implementation to\n // troubleshoot.\n }\n}\n```\n\n```\nimport UIKit\nimport StripeTerminal\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions\nlaunchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -> Bool {\n Terminal.setTokenProvider(APIClient.shared)\n Terminal.shared.offlineDelegate = CustomOfflineDelegate()\n // ...\n return true\n }\n\n // ...\n\n}\n```\n\n[Create a PaymentIntent while\nofflineClient-side](https://docs.stripe.com/terminal/features/operate-offline/collect-card-payments#create-payment-intent)\nTo support operating offline, you must use the SDK’s `createPaymentIntent` to\ncreate PaymentIntent objects.\n\nWhile operating offline, `PaymentIntent` objects have a null `stripeId`. We\nrecommend adding a custom identifier to the PaymentIntent’s\n[metadata](https://docs.stripe.com/payments/payment-intents#storing-information-in-metadata)\nto help reconcile `PaymentIntent` objects created offline.\n\nWithin your `OfflineDelegate.didForwardPaymentIntent` callback, you can use your\nidentifier to correlate offline payments with payments that are successfully\nforwarded to Stripe.\n\n```\nimport UIKit\nimport StripeTerminal\n\nclass PaymentViewController: UIViewController {\n\n // Action for a \"Checkout\" button\n func checkoutAction() throws {\n // Populate the correct transaction amount from your application.\n let amount = UInt(10_00)\n\n // Build up parameters for creating a `PaymentIntent`\n let params = try PaymentIntentParametersBuilder(\n amount: amount,\n currency: \"usd\"\n )\n .setMetadata([\"offlineId\": UUID().uuidString])\n .build()\n\n// Your app might want to prevent offline payments for too large an amount.\n // Here, we block the payment if the amount is over 1000 usd.\n// Otherwise, we allow collecting offline if the network connection is\nunavailable.\n let offlineBehavior: SCPOfflineBehavior = {\n if amount > UInt(1_000_00) {\n return .requireOnline\n } else {\n return .preferOnline\n }\n }()\n\nlet createConfiguration = try\nCreateConfigurationBuilder().setOfflineBehavior(offlineBehavior).build()\nTerminal.shared.createPaymentIntent(params, createConfig: createConfiguration) {\ncreateResult, createError in\n if let error = createError {\n// Handle offline-specific errors in your application (for example,\n// `offlineBehavior` was set to `.requireOnline` and the SDK is offline).\n print(\"createPaymentIntent failed: \\(error)\")\n } else if let paymentIntent = createResult {\n print(\"createPaymentIntent succeeded\")\n// If the `PaymentIntent` was created offline, its `stripeId` field will be nil.\n if let onlineCreatedId = paymentIntent.stripeId {\n print(\"created online\");\n } else {\n print(\"created offline\")\n }\n }\n }\n }\n}\n```\n\n#### Managing risk while offline\n\nThe `Terminal.createPaymentIntent` accepts a `CreateConfiguration` parameter. By\ndefault, if you’re operating offline, the Terminal SDK stores all offline\npayments, then forwards them to Stripe’s backend when connectivity is restored.\nYou can pass a `CreateConfiguration` object with `offlineBehavior` set to\n`REQUIRE_ONLINE` to fail the current transaction if you’re operating offline.\nYou might want to disallow transactions above a certain amount or disallow all\noffline transactions if the SDK has stored a set of transactions whose sum\nexceeds a certain amount.\n\nThe SDK exposes two properties to help you manage risk:\n\n- `Terminal.offlineStatus.sdk.offlinePaymentsCount`\n- `Terminal.offlineStatus.sdk.offlinePaymentAmountsByCurrency`\n\n#### Managing latency while offline\n\nBy default, the Terminal SDK automatically determines whether to collect\npayments online or offline based on your network connectivity. However, you\nmight want to operate offline despite having an active network connection – for\nexample, if you need to collect transactions quickly and your network connection\nis slow. You can pass a `CreateConfiguration` object with `offlineBehavior` set\nto `FORCE_OFFLINE` to collect the payment offline regardless of connectivity.\nPayments collected offline while the Terminal SDK has an active network\nconnection are forwarded in the background.\n\n[Collect a payment\nmethodClient-side](https://docs.stripe.com/terminal/features/operate-offline/collect-card-payments#collect-payment-method)\nSwiping cards isn’t supported while offline. Tapping cards is also not supported\nin markets where [Strong Customer\nAuthentication](https://docs.stripe.com/strong-customer-authentication) is\nrequired.\n\nUse the `didRequestReaderInput` method to display the valid card presentment\noptions to the customer.\n\nUsing the `initWithUpdatePaymentIntent` parameter in `CollectConfiguration` is\ndisabled when offline mode is enabled unless the `offlineBehavior` is set to\n`REQUIRE_ONLINE`.\n\n#### Note\n\nPayment liability is your responsibility when operating your reader offline.\nBecause magnetic stripe data is easy to spoof, Stripe disallows this option\nwhile operating offline.\n\n```\nimport UIKit\nimport StripeTerminal\n\nclass PaymentViewController: UIViewController {\n\n // Action for a \"Checkout\" button\n func checkoutAction() {\nTerminal.shared.collectPaymentMethod(paymentIntent) { collectResult,\ncollectError in\n if let error = collectError {\n// Handle offline-specific errors in your application (for example,\n // unsupported payment method).\n print(\"collectPaymentMethod failed: \\(error)\")\n }\n else if let paymentIntent = collectResult {\n print(\"collectPaymentMethod succeeded\")\n // ... Confirm the payment\n }\n }\n }\n}\n```\n\n[Confirm\npaymentClient-side](https://docs.stripe.com/terminal/features/operate-offline/collect-card-payments#confirm-payment)\nThis step is similar to [confirming payments while\nonline](https://docs.stripe.com/terminal/payments/collect-card-payment#confirm-payment).\nThe primary difference is that your integration must handle offline-specific\nerror cases, such as when the transaction exceeds the Stripe-enforced offline\nmaximum of 10,000 USD or equivalent in your operating currency.\n\nIn some cases, the SDK might create a `PaymentIntent` online, but confirm it\nwhile offline. When this happens, the `PaymentIntent` might have a non-null\n`stripeId`. You can check if `offlineDetails` is defined to determine if it was\nconfirmed offline.\n\n```\nimport UIKit\nimport StripeTerminal\n\nclass PaymentViewController: UIViewController {\n\n // Action for a \"Checkout\" button\n func checkoutAction() {\n\nTerminal.shared.confirmPaymentIntent(paymentIntent) { confirmResult,\nconfirmError in\n if let error = confirmError {\n// Handle offline-specific errors in your application (for example,\n // unsupported payment method).\n print(\"confirmPaymentIntent failed: \\(error)\")\n } else if let confirmedPaymentIntent= confirmResult {\n print(\"confirmPaymentIntent succeeded\")\n if let offlineDetails = paymentIntent.offlineDetails {\n print(\"confirmed offline\");\n } else {\n print(\"confirmed online\")\n }\n }\n }\n }\n}\n```\n\n#### Providing receipts\n\nYou might require information about the card used to complete a payment while\noffline. For example, you might need to generate a receipt for customers who\nrequire one at the time of purchase.\n\nIf the PaymentIntent is confirmed offline, retrieve its\n[OfflineCardPresentDetails](https://stripe.dev/stripe-terminal-ios/docs/Classes/SCPOfflineCardPresentDetails.html)\nfrom the `paymentIntent.offlineDetails.offlineCardPresentDetails` property.\n\nThis hash contains a\n[ReceiptDetails](https://stripe.dev/stripe-terminal-ios/docs/Classes/SCPReceiptDetails.html)\nproperty you can use to generate a receipt, as well as other card details like\nthe cardholder name and card brand.\n\nNot all receipt details are available while operating offline. [Prebuilt email\nreceipts](https://docs.stripe.com/terminal/features/receipts#prebuilt) are only\nsent after connectivity is restored and the payment is successfully captured.\n\n[Wait for payments to\nforwardClient-side](https://docs.stripe.com/terminal/features/operate-offline/collect-card-payments#wait-for-forward)\nWhen Internet access is restored, the SDK automatically begins forwarding the\nstored offline payments.\n\nIf you power off your POS device too soon, your payments might not be forwarded.\nYou can query `Terminal.offlineStatus.sdk.networkStatus` to make sure your POS\nis online and can forward payments, and\n`Terminal.offlineStatus.sdk.offlinePaymentsCount` to check how many payments the\nTerminal SDK has to be forwarded.\n\n[Capture\npayment](https://docs.stripe.com/terminal/features/operate-offline/collect-card-payments#capture-payment)\n#### Note\n\nWhile offline, you can create PaymentIntents with `captureMethod` set to\n`automatic`. Once you confirm these PaymentIntents, they have a `Succeeded`\nstatus instead of `RequiresCapture`. Stripe automatically captures the payments\nafter you forward them.\n\nPayments that are successfully forwarded and authorized require capture from\nyour backend or application:\n\n- To capture payments from your backend, use\n[webhooks](https://docs.stripe.com/webhooks) to listen for PaymentIntents with a\n`requires_capture` status.\n- To capture payments from your application, wait for your application to\nreceive calls to `OfflineDelegate.didForwardPayment` for each PaymentIntent as\nthe SDK forwards it. A PaymentIntent is ready to capture if its status is\n`RequiresCapture`.\n\nIf your application determines when to capture a PaymentIntent after\n`confirmPaymentIntent`, they’re ready to capture when the status is\n`RequiresCapture` , and the `offlineDetails` is null or has a `requiresUpload`\nvalue of `NO` .\n\nCapture a payment after `confirmPaymentIntent`, if it’s confirmed online:\n\n```\nTerminal.shared.confirmPaymentIntent(paymentIntent) { confirmResult,\nconfirmError in\n if let error = confirmError {\n // Handle offline-specific errors in your application (for example,\n // unsupported payment method).\n print(\"confirmPaymentIntent failed: \\(error)\")\n } else if let confirmedPaymentIntent = confirmResult {\n if intent.status == .requiresCapture {\n if let offlineDetails = confirmedPaymentIntent.offlineDetails(),\n offlineDetails.requiresUpload {\n// Offline payment, wait for `didForwardPaymentIntent` (see snippet below)\n } else {\n // Online payment, can be captured now\n }\n }\n // else, handle other intent.status results here\n }\n}\n```\n\nCapture an offline payment after the SDK forwards it in your OfflineDelegate’s\n`didForwardPaymentIntent`:\n\n```\nimport StripeTerminal\n\nclass CustomOfflineDelegate: OfflineDelegate {\n // ...\nfunc terminal(_ terminal: Terminal, didForwardPaymentIntent intent:\nPaymentIntent, error: Error?) {\n if let error = error {\n // Handle the error appropriate for your application\n return\n }\n\n if intent.status == .requiresCapture {\n // The intent is ready to be captured.\n } else {\n // Handle the intent.status as appropriate.\n }\n }\n // ...\n}\n```\n\n[Examine payments collected\noffline](https://docs.stripe.com/terminal/features/operate-offline/collect-card-payments#examine-offline)\nAfter authorization, you can use the\n[PaymentIntents](https://docs.stripe.com/payments/payment-intents) API to\nexamine offline details on a payment. Access the [payment method\ndetails](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-offline)\non the [latest\nCharge](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-latest_charge)\nobject on a `PaymentIntent` to determine if it was collected offline.\n\n## Links\n\n- [Fail all offline\npayments](https://docs.stripe.com/terminal/features/operate-offline/collect-card-payments#managing-risk-while-offline)\n- [Configuration](https://docs.stripe.com/api/terminal/configuration)\n- [BBPOS Chipper 2X\nBT](https://docs.stripe.com/terminal/readers/bbpos-chipper2xbt)\n- [Stripe Reader M2](https://docs.stripe.com/terminal/readers/stripe-m2)\n- [BBPOS WisePad\n3](https://docs.stripe.com/terminal/payments/setup-reader/bbpos-wisepad3)\n- [assign\nit](https://docs.stripe.com/terminal/fleet/configurations-overview?dashboard-or-api=api#create-a-configuration-for-an-individual-location)\n-\n[default](https://docs.stripe.com/terminal/fleet/configurations-overview?dashboard-or-api=api#retrieve-the-account-default-configuration)\n-\n[configured](https://docs.stripe.com/terminal/features/operate-offline/collect-card-payments#enable-offline-mode)\n- [OfflineDelegate\n(iOS)](https://stripe.dev/stripe-terminal-ios/docs/Protocols/SCPOfflineDelegate.html)\n- [NetworkStatus\n(iOS)](https://stripe.dev/stripe-terminal-ios/docs/Enums/SCPNetworkStatus.html)\n- [createPaymentIntent\n(iOS)](https://stripe.dev/stripe-terminal-ios/docs/Classes/SCPTerminal.html#/c:objc(cs)SCPTerminal(im)createPaymentIntent:completion:)\n- [CreateConfiguration\n(iOS)](https://stripe.dev/stripe-terminal-ios/docs/Classes/SCPCreateConfiguration.html)\n- [OfflineDetails\n(iOS)](https://stripe.dev/stripe-terminal-ios/docs/Classes/SCPOfflineDetails.html)\n-\n[metadata](https://docs.stripe.com/payments/payment-intents#storing-information-in-metadata)\n- [didRequestReaderInput\n(iOS)](https://stripe.dev/stripe-terminal-ios/docs/Protocols/SCPReaderDisplayDelegate.html#/c:objc(pl)SCPReaderDisplayDelegate(im)terminal:didRequestReaderInput:)\n- [CollectConfiguration\n(iOS)](https://stripe.dev/stripe-terminal-ios/docs/Classes/SCPCollectConfiguration.html)\n- [Strong Customer\nAuthentication](https://docs.stripe.com/strong-customer-authentication)\n- [confirming payments while\nonline](https://docs.stripe.com/terminal/payments/collect-card-payment#confirm-payment)\n-\n[OfflineCardPresentDetails](https://stripe.dev/stripe-terminal-ios/docs/Classes/SCPOfflineCardPresentDetails.html)\n-\n[ReceiptDetails](https://stripe.dev/stripe-terminal-ios/docs/Classes/SCPReceiptDetails.html)\n- [Prebuilt email\nreceipts](https://docs.stripe.com/terminal/features/receipts#prebuilt)\n- [webhooks](https://docs.stripe.com/webhooks)\n- [PaymentIntents](https://docs.stripe.com/payments/payment-intents)\n- [payment method\ndetails](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-offline)\n- [latest\nCharge](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-latest_charge)",
  "metadata": {
    "title": "Collect card payments while offline | Stripe Documentation",
    "description": "Collect card payments with intermittent, limited, or no internet connectivity.",
    "sourceURL": "https://docs.stripe.com/terminal/features/operate-offline/collect-card-payments"
  }
}