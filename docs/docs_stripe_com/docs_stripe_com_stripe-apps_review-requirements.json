{
  "content": "# Stripe App Marketplace review requirements\n\n## Understand the process and requirements to get your app approved for listing in the Stripe App Marketplace.\n\nStripe reviews all apps and app updates submitted to the Stripe App Marketplace\nto make sure they provide the best user experience in areas such as design,\nreliability, security, and trust. Make sure your app fulfills these requirements\nbefore submitting it for app review.\n\n## App review principles\n\nThree main principles guide the app review process:\n\n- **Quality**: Users require high-quality and useful apps. This encompasses\nelements of design, UX, performance, reliability, and so on.\n- **Security**: All apps must meet Stripe’s standards for the security and\nprivacy of user data and comply with all applicable laws.\n- **Trust**: App developers must adhere to a standard of trust that maintains\nthe integrity of our ecosystem. This extends to all communication, support, and\ncommunity behavior.\n\n## The app review process\n\nHere’s what you can expect when submitting your app for review:\n\n- From the Stripe Dashboard, create or update your app listing. Then submit your\napp and app listing for review. If your app requires an account or additional\ndata to function, you must submit a test plan and credentials that detail how to\ntest your app as part of the review process. For more information, see [example\ntest\ncredentials](https://docs.stripe.com/stripe-apps/review-requirements#test-plan-and-credentials)\nor see [Submit app for\nreview](https://docs.stripe.com/stripe-apps/publish-app#submit-app-for-review)\nfor instructions on this step.\n- A Stripe reviewer evaluates the app and listing against all relevant criteria.\nThis process might involve automated scans, live testing of the app, and human\nreview of all the information you provide.\n- If the app and listing meet all app review requirements, we approve this\nversion of your app and listing, and you can make the app visible on the\nmarketplace at your convenience. You must explicitly publish your approved app\nfor it to be available on the marketplace. See [Publish your\napp](https://docs.stripe.com/stripe-apps/publish-app#publish-app) for\ninstructions. However, if the app doesn’t meet all app review criteria, Stripe\nwill send you specific feedback on which criteria the app didn’t meet, and\nprovide you with guidance on ways to meet them.\n\nUpdates to apps and app listings go through the same process.\n\n## App review requirements\n\nTo pass review, your app must pass the requirements in this section. Test it\nend-to-end for bugs and edge cases before submitting it for review.\n\n### Transparent and consistent pricing\n\nYou must clearly state your app pricing up front, without hidden costs or fees.\nApp pricing must also be consistent with off-marketplace prices.\n\nDo Don’t- Price your service transparently and consistently with off-marketplace\nprices.\n- Offer useful free functionality for your users, if you so choose.\n- Have pricing that is different from outside the Stripe App Marketplace.\n- Advertise your service as free and then require users to pay for functionality\nafter they’ve installed the app.\n\n### App developer standards\n\nAs an app developer, you must clearly represent yourself and your business\npurpose. You can’t engage in any illegal or harmful activities online or\noffline.\n\nDo Don’t- Make sure you have a website that provides accurate information about\nyou, including contact information.\n- Check if your business purpose is listed in Stripe’s [Prohibited and\nRestricted Businesses](https://stripe.com/legal/restricted-businesses).\n- Expect additional review if your business falls under the restricted business\ncategory.\n- Engage in any illegal or harmful behaviors.\n- Misrepresent yourself or your purpose.\n\n### App listing page\n\nYour app listing helps businesses find your app and understand how it can help\nthem run their business. Make sure the content you add clearly describes your\napp features and addresses potential questions, allowing businesses to quickly\nevaluate if your app is right for them. See the [app listing\nguidelines](https://docs.stripe.com/stripe-apps/listing-guidelines) for more\ndetails.\n\n**Spelling and grammar**\n\nYour listing must use proper spelling and grammar. This includes being easy to\nread and understand for your target audience.\n\nDo Don’t- Proof for proper spelling and grammar.\n- Proof that links point to appropriate URLs.\n- Don’t submit with typos or grammatical errors.\n- Don’t include links to expired or unrelated content.\n\n**App name**\n\nDo Don’t- Provide the name only. For example: HelpTable\n- Use the same name in the app listing and in the app manifest.\n- Don’t use “Stripe”, “app”, “RAK”, “Generator”, “API Key”, “Authenticator”,\n“free” or “paid” in the app name. *For example: HelpTable app*\n- Don’t submit a listing with a different name from the app manifest.\n\n**Logo**\n\nDo Don’t- Upload your own distinct logo. Make sure it’s high quality and square.\n- Don’t use Stripe’s logo or name.\n- Don’t use the logo or name of any other company without explicit permission or\nin any way that would imply their endorsement of your app without their consent.\n- Don’t provide images that are degraded in quality, stretched, or cropped in a\nway that cuts off elements.\n\n**Subtitle**\n\nDo Don’t- Concisely summarize how your app works with Stripe. For example: View\nand edit customer support history from your Stripe Dashboard\n- Don’t use hyperbole, marketing jargon, keyword stuffing, or unprovable claims.\n*For example: The world’s best support product.*\n\n**Category**\n\nDo Don’t- Select the category that applies to the primary functionality of your\napp.\n- Don’t select categories that don’t apply to your app, or only apply\ntangentially.\n\n**Description**\n\nDo Don’t- Briefly describe what your company does, who your app is for, and the\nvalue it delivers. An ideal description includes a quick intro to your service,\nfollowed by a brief description of your Stripe app specifically. For example:\n\"HelpTable is a simple support management system designed for fast-moving\nstartups. After installing the HelpTable app, you’ll get easy access to any\ncustomer’s support history within Stripe. This allows your agents to get a full\npicture of customer’s experience with your products and services. Agents can\nalso view and manage support tickets, right within the Stripe Dashboard’\n- Describe any limitations that your app might have.\n- Don’t only talk about your company and omit app related functionality.\n\n**Feature highlights**\n\nDo Don’t- Spotlight 1-3 key features to help users quickly understand what your\napp does.\n- State the feature’s value using simple language in the feature title. For\nexample: Resolve tickets from Stripe\n- Describe how the feature works and benefits the user in the feature\ndescription.\n- Make sure your feature images are high quality.\n- Don’t highlight key features that aren’t available in your app.\n- Don’t use real customer data in screenshots and images.\n- Don’t provide images that are degraded in quality, stretched, skewed, or\ncropped in a way that cuts off elements.\n\n**Non-duplicate**\n\nEach app can only appear in the Marketplace once (no duplicates, even under a\ndifferent name). Submit new versions of an app from the same account as the\nprevious version. Contact [Stripe\nSupport](https://support.stripe.com/contact/login) if this isn’t possible and\nyou need assistance.\n\nDo Don’t- Check to be sure that neither you nor someone else have already\nuploaded this application.\n- Don’t submit the same app multiple times. This includes uploading the same\napplication under different names, in different categories, from different\naccounts, and so on.\n\n### UI extension for apps\n\nIf your app includes a UI extension, the app drawer is the main place where your\nusers see details about your app and take actions. Stripe users expect\nconsistency across their Stripe Dashboard, which includes engaging with your\napp. Make sure that completing workflows through your app feels intuitive and\nnatural. See the app design guidelines for examples of apps we think work well\nin the Stripe Dashboard.\n\n**App installation**\n\nIf your app requires authentication, clearly direct the appropriate users to\nauthenticate after installation. Your app must also provide a clear way to\nunauthenticate from within the Stripe Dashboard UI.\n\nDo Don’t- Provide clear directions for user authentication. When a user installs\nthe app, provide a clear prompt or trigger to complete authentication in the app\ndrawer.\n- Provide a clear path to unlink the Stripe account from the app platform from\neither the settings page or the app drawer.\n- Don’t guide admins to configure account-wide authentication in your app’s\nsettings.\n- Don’t provide a prompt for per-user authentication from the app drawer if your\napp authenticates users individually rather than account-wide.\n\n**Information and actions**\n\nYour app provides contextual information and actions, adding value to the user’s\nworkflow in Stripe.\n\nDo Don’t- Provide relevant information and actions pertaining to the user’s\nworkflow within Stripe.\n- Only provide deep links out to third-party services when it’s helpful to\nreference a deeper workflow.\n- Don’t use your App as a jumping off point to a third-party website, without\nproviding any tangible value to users within Stripe.\n\n****\n\nAt any point in the app drawer, the user needs to know where they are, where\nthey can go, and how to go back or exit.\n\nDo Don’t- Provide clear navigation components so the user can easily move\nthrough your app.\n- Make sure you don’t have dead-ends or looping. For example: don’t leave a user\nin the middle of a workflow without a Cancel or Go back button if they need to\nexit.\n- Don’t exclude navigation, trap your user, or overload your navigation. *For\nexample: If a user is in the middle of a workflow and needs to exit, but you\ndon’t provide a Cancel or Go back button.*\n\n**Buttons and links**\n\nMake sure the user can immediately understand what each button or link does\nwithout prior knowledge.\n\nDo Don’t- Provide clear labels for buttons and links.\n- Use the [external\nicon](https://docs.stripe.com/stripe-apps/components/icon#icon-reference) to\nindicate external links.\n- Don’t link the word “here”—make sure to disclose the location.\n\n**Notices and dialogs**\n\nOnly use notices and dialogs for critical or contextual information in your app.\n\nDo Don’t- Provide notices when critical information requires a user’s attention.\n- Provide confirmation dialogs for any costly or destructive actions that aren’t\neasily reversible.\n- Don’t show notices that are irrelevant or aim to upsell. These types of\nmessages might feel like spam and degrade the user’s preception of your app and\nStripe.\n- Don’t allow the user to take any costly actions without clear confirmation.\n\n**States**\n\nThe app needs to account for error states, loading states, and thoughtful\nsolutions for edge cases.\n\nDo Don’t- Provide error states, loading states, and thoughtful solutions for\nedge cases. For example: if a user is filling out a form in the app drawer,\nnotify them of any errors when they select Submit.\n- Clearly highlight an error message and directly explain how to fix it, such as\n“Select a country.”\n- Don’t account for the happy path only.\n- Don’t leave the user stranded or present error states that aren’t clear. *For\nexample: the user selects Next in a workflow, but nothing happens. The user has\nhit an error, but it’s not clear how to correct it because there’s no\nmessaging.*\n\n**UI error handling**\n\nThe app needs to gracefully handle errors and communicate clear and actionable\nerror messages to users. Monitor your app for problems.\n\nDo Don’t- Use the provided components and patterns to display error\nnotifications to users.\n- Make sure error messages clearly explain the issue, and provide the user with\nan actionable next step.\n- Monitor your app for errors so you know when your users are having problems.\n- Display a vague “something went wrong” error message.\n- Swallow errors silently with no message to the user.\n- Catch an error and log it to the console without any indication to a\nnon-technical user.\n\n### App settings\n\nUsers can navigate to your app settings within the Stripe Dashboard.\n\n**Authentication Settings**\n\nIf your app requires authentication to a service other than Stripe, or stores\ncredentials on behalf of the app user, your app must provide a way to\nreauthenticate or log out in your app’s settings.\n\nDo Don’t- If your app requires authentication to your service or a third-party,\nmake sure you provide a way to both reauthenticate and deauthenticate.\n- If your app authenticates with multiple services, make sure that each service\ncan deauthenticate and reauthenticate individually.\n- Provide one clear way for users to save changes.\n- Don’t omit the authentication setting if your app requires it.\n\n**Labels and descriptions**\n\nThe app settings must include labels and descriptions that make it easier for\nusers to navigate and understand the app.\n\nDo Don’t- Provide clear labels and descriptions for settings.\n- Don’t label settings in a manner that makes it difficult for users to\nunderstand.\n- Don’t exclude descriptions for settings.\n\n**Required and optional settings**\n\nThe app must clearly indicate which settings are required and which settings are\noptional.\n\nDo Don’t- Indicate which setting fields are required.\n- Don’t leave required fields unmarked, causing users to not understand why the\napp isn’t functioning properly.\n\n**Settings save**\n\nThe app settings must provide one clear way to save changes.\n\nDo Don’t- Provide one clear way for users to save changes.\n- Don’t omit the a way to save changes.\n- Don’t allow for multiple save patterns across the page.\n\n**Change confirmations**\n\nFollow app settings changes with a confirmation message after they’re saved.\n\nDo Don’t- Provide a confirmation when settings changes are saved.\n- Don’t omit confirmation messages.\n- Don’t allow changes to happen without confirmation messages.\n\n### Components\n\nUse Stripe’s UI components for your app, specifically across the expandable app\ndrawer and your app settings page. This makes using your app feel like part of\nthe Stripe Dashboard.\n\nDo Don’t- Build your app using the UI components.\n- Use only the provided fonts, icons, form fields, and color schemes to keep\nthem consistent with the Dashboard.\n- Don’t use stylized components from other design systems.\n- Don’t customize or brand components.\n\n**Visuals**\n\nUse icons, images and illustrations to make it simpler for users to understand\nthe flows and features of your app.\n\nDo Don’t- Use visuals (icons and illustrations) to support users in\nunderstanding how to use the app or a specific feature.\n- Use high quality visuals.\n- Don’t use visuals that are purely decorative.\n- Don’t use visuals that are degraded in quality.\n\n**Drawer icon**\n\nIf your app has a UI component, it displays in the app drawer in the Stripe\nDashboard after a user installs it. Make sure that the app icon correctly\ndisplays in that drawer by including a high quality app icon in your app\nmanifest.\n\nDo Don’t- Include a high quality icon in your app manifest.\n- Don’t omit the icon from your app manifest.\n- Don’t add a low quality icon to your app manifest.\n\n### App content\n\nProvide clear and consistent content throughout the app. Clearly address users\nwith voice, tone, and grammar that’s consistent with the rest of the dashboard.\n\n**Voice, tone, grammar, and style**\n\nDo Don’t- Write simply. Lean into compact, specific language. For example: “Try\nout the feature in your Dashboard.”\n- Use active voice. For example, “Order a card reader.”\n- Use simple verbs for calls to action (CTAs). For common actions where the\nobject is clear, you can include only the verb. For example: “Create\nsubscription”\n- Use numerals for efficiency and space. For example: “You have 3 tickets to\nreview.”\n- Don’t use corporate voice and jargon. *For example: “Utilize this programmed\nsoftware.”*\n- Don’t use passive voice. For example: “Card readers are available to order.”\n- Don’t include filler words like pronouns, adjectives, adverbs, or indefinite\narticles (like “a,” “an,” or “the”). *For example: don’t write “Create a\nsubscription” or “Create your subscription” but rather “Create subscription.”*\n- Don’t spell out numbers unless required to add emphasis. *For example: “there\nare two ways to fix this problem.”*\n\n**Sentence case**\n\nDo Don’t- Use sentence case for all content, including headings and buttons. For\nexample: “Add bank account”. For example: “Create subscription”\n- Use numerals for efficiency and space. For example: “You have 3 tickets to\nreview.”\n- Don’t add capitalized words that aren’t proper nouns, acronyms or the first\nword in a sentence. *For example: “Add Bank Account”.*\n\n**Punctuation**\n\nDo Don’t- Use periods in body text. This includes subheadings, descriptions,\nlegal text, and tooltips. The period goes inside quotation marks, not after\nthem.\n- Use periods for titles or headings, or for clickable elements like menu labels\nand buttons. *For example: Add a period after a “Learn more” link.*\n\n**Date format**\n\nDo Don’t- Format dates as follows: When abbreviating months, use the 3-letter\nabbreviation and no period. For example, “Jan, Feb, Mar, Apr, May, Jun”. When\nwriting out the month name, day, and year, use a comma between the day and the\nyear. For example, “January 3, 2021” or “Jan 3, 2021”. When only writing the\nmonth and year, don’t use a comma. For example, “January 2021” or “Jan 2021”.\n- Don’t include periods after abbreviating a month.\n- Don’t use ordinals (that is, 1st, 2nd, 3rd) for dates.\n\n**Time format**\n\nDo Don’t- Format time as follows: Use the 12-hour clock. Indicate ante meridian\n(AM) and post meridian (PM) with all caps and a space after the last number. Use\ntwo digits for minutes. For example,: “3:25 PM” or “10:00 AM”.\n- Don’t use a 24-hour clock.\n- Don’t omit AM and PM on a 12-hour clock.\n\n### App functionality\n\nYour app must be clear, useful, and reliable.\n\n**Usefulness**\n\nThe Stripe App Marketplace is a business-to-business (B2B) ecosystem. Apps in\nthe marketplace must provide functionality that clearly enables or enhances a\nStripe user’s business activities.\n\nDo Don’t- Provide an app that empowers users to conduct their business more\nefficiently and effectively.\n- Provide contextual information and actions. Make sure you’re adding value to\nthe user’s workflow in Stripe. Only provide deep links out to your service when\nit might be helpful to reference a deeper workflow.\n- Provide complementary, non-duplicative functionality. Your app should add new\nand unique capabilities that are useful to users and augment their workflows on\nStripe.\n- Don’t build consumer or social apps such as games, quizzes, and click bait.\n- Don’t merely use your app as a jumping off point to your own service, without\nproviding any tangible value to your users within Stripe. Deep links should be\nsecondary to contextual information or actions.\n\n**Accuracy of calculations and data visualization**\n\nAll calculations performed by your application must be accurate and trustworthy.\nAny data or visualizations presented by your app should be accurate and\ncomplete.\n\nDo Don’t- Present users with valuable calculated data only where you have all\nrelevant information and data necessary to give a financially accurate result.\nFor example: Accurate balance totals with all relevant information and data.\n- Don’t present users with unreliable information where you don’t have enough\ninformation to correctly compute the result. *For example: Computing tax amounts\nwithout proper tax classifications.*\n- Don’t present users with inaccurate information because you don’t have all of\nthe data you need for an accurate calculation.\n\n**Payment processing**\n\nUnless approved by Stripe in writing, you must process payments triggered by\ncore functionalities of your app on Stripe.\n\nDo Don’t- Use Stripe for any necessary payment processing in your app.\n- Don’t use external payment processors in your app to bypass Stripe\n\n#### Testing guidance and credentials\n\nDuring app review, Stripe uses your test guidance and credentials to review your\napp’s stability, component usage, and user experience. You must provide the\nfollowing:\n\n- **Testing guidance**: Include several user scenarios or use cases that cover\nall the key features of your app, including the onboarding process.\n- **Testing credentials of test accounts**: Include one or more sets of testing\ncredentials that Stripe can use to install and use your app. If your test\naccounts require specific data to use your app (such as a CSV file), you must\ninclude it with the account. Make sure that the test links you provide for app\nreview connect to Stripe through the app installation, not through Connect\nonboarding.\n\n#### Caution\n\nStripe **does not** permit you to use real (non-test) accounts for the app\nreview process. If you need other ways to provide us access to a specific\naccount for testing purposes, contact [Stripe\nSupport](https://support.stripe.com/contact/login) for assistance.\nDo Don’t- Provide the detailed steps required to test your app.\n- Provide details about the expected behavior Stripe will see.\n- Provide sample data as needed per test account.\n- Provide test credentials of accounts that accurately represent your business.\n- Provide test credentials for a paid account if any portion of your app\nrequires a paid account to test.\n- Provide test credentials for the highest role-based access within your app.\nFor example: “admin”.\n- Provide details about how different user roles in your system affect how\ndifferent elements render within the Stripe Dashboard UI. For example: “admin”\nor “view only”.\n- Provide detailed steps about how to connect your app with Stripe.\n- For apps that require data sync, provide detailed steps for how to both sync\nthe necessary data and to confirm that the data is accurate.\n- For apps that require live data (for example, transactions), provide detailed\nsteps for how to view this data.\n- For apps that are region specific or have geographical restrictions, provide\ndetails about which regions are supported, and test credentials for a Stripe\naccount with the latest version of your app installed.\n- Disable multi-factor authentication or provide instructions for reviewers to\npass it.\n- Don’t expect app reviewers to “figure it out.”\n\nExample test credentials for an example app like Stripe with Google Sheets:\n\nTest account nameUsernamePasswordGoogle\nSheets`teststripeapps@stripe.com``teststripeapps`Stripe`teststripeapps@stripe.com``teststripeapps`\nExample user scenario for an example app like Stripe with Google Sheets:\n\nUser scenario Step by step instructionsSign in as a user- Install the app from\nthe Stripe App Marketplace.\n- Open the app.\n- Click the **Sign in** button.\n- Enter the Google test credentials (provided for you below).\n- Give the app access to your Google account.\n- Return to the Stripe dashboard signed in to the app. You should be able to use\na service of Google Sheets in your app in the Dashboard.\nExport data from Stripe to Google Sheets- Navigate to either the Payments or\nCustomers Dashboard page.\n- Open the app in the Dashboard.\n- Click the button in the app drawer to export data.\n- Select a folder (optional).\n- Save the data. The data should be available as a CSV in your Google Drive\naccount.\n\n**No advertising**\n\nYour app may not contain display or banner advertisements.\n\nDo Don’t- Keep your app focused on the key value you’re providing to merchants.\n- Include ads of any sort (your own or from a display advertising service).\n- Include promises of future releases.\n\n**Fully-functional and bug-free**\n\nYour app must be complete, polished, and free from obvious bugs. This includes\nbroken links.\n\nDo Don’t- Publish your app when it’s functionally complete.\n- Perform end-to-end testing on your app under multiple scenarios.\n- Fix any bugs you find before submitting your app for review.\n- Make sure any links in your app point to valid URLs.\n- Don’t leave in buttons that do nothing, half-finished views, and so on.\n- Don’t attempt to publish the app with known bugs, crashes, and so on.\n- Don’t include links to non-existent pages (404) or pages that produce error\nmessages.\n\n**Permissions**\n\nYour app manifest must include the minimum necessary set of permissions required\nfor your app to operate. Your app won’t be permitted to attempt any API call\nthat it hasn’t requested permissions for.\n\nDo Don’t- Declare all necessary permissions for your app in your app’s manifest\nfile.\n- Don’t request permissions that your app doesn’t actively use.\n- Don’t attempt to make API calls that you haven’t requested permissions for.\n(Not only will the calls fail, it provides a bad user experience.)\n\n**Sandbox support**\n\nYour app manifest must declare if your app supports being installed in a\nsandbox. If you set this to false, your app won’t be installable in sandboxes.\n\nDo Don’t- Declare if your app has sandbox support in your app’s manifest file.\n- Don’t enable sandbox support unless you have validated it works as expected.\n\n**Breaking changes**\n\nMake sure that apps function seamlessly for users from version to version. Make\nsure your app doesn’t cause breaking changes that require user intervention when\nupgrading, because it can cause business disruptions. If any breaking changes\noccur, you must clearly message them to users through app release notes and\nother applicable channels.\n\nDo Don’t- Evolve your app in a way that version upgrades can be automatic, with\nno user intervention.\n- Make sure new functionality degrades gracefully if not configured.\n- Test your upgrade path from version-to-version so that you accurately reflect\nthe upgrade process for your users.\n- Don’t add mandatory new settings that break your app until they’re configured.\n\n### Privacy and security\n\n**Data usage**\n\nYour app may only leverage user data and APIs that are required for existing app\nfunctionality that you clearly communicate to users. You may not resell or\npublish any data obtained from Stripe users through your app.\n\nDo Don’t- Request well-scoped permissions for the data your app needs to\nfunction.\n- Inform users about how you will use their data.\n- Make sure that you use data consistently with your privacy policy.\n- Don’t request permissions for data that you plan to use in the future.\n- Don’t have “hidden” features or request permission for data that powers a\n“hidden” feature in your app.\n- Don’t collect data from users for a specific app feature and then use that\ndata for other purposes without disclosing that usage.\n- Don’t compile and sell data sets containing data obtained through your app.\n\n**Code readability**\n\nDon’t submit UI extensions with obfuscated source code—this is a common way to\nattempt to disguise malicious code. Minification is acceptable and recommended.\n\nDo Don’t- Write your code in a straightforward manner.\n- Minify your code during the build process.\n- Don’t run your code through obfuscation tools during the build process.\n\n**External endpoints**\n\nIf your app has a UI Extension, you must declare all external endpoints that the\nUI Extension communicates with in your app manifest. Don’t allow your app to\ncommunicate with any external endpoints not declared in the manifest.\n\nDo Don’t- Declare all your external endpoints in the manifest file.\n- Don’t attempt to make API calls or load resources from endpoints you haven’t\ndeclared in the manifest file. (The request fails and we monitor apps for\nsimilar activity.)\n\n**Secrets**\n\nYou must properly store secret materials required by UI extensions using the\n[Secret Store API](https://docs.stripe.com/api/secret_management). This includes\nOAuth tokens, other credentials, and any app secrets required for operation of\nyour app’s UI Extension. Don’t use the Secret Store API for general data\nstorage.\n\nDo Don’t- Store your users’ OAuth tokens in the Secret Store for secure\ncross-browser persistent authentication with your service.\n- Don’t use cookies, local storage, or Stripe metadata for storing sensitive\ndata.\n- Don’t store non-secret data like user preferences using the Secret Store API.\n\n### Performance and reliability\n\n**API call success rates**\n\nYour app must make consistently reliable and successful API calls. Stripe\nmonitors the API success rates for all installed apps.\n\n**API call latency**\n\nAPI calls made by your app need to have consistently low latency. Stripe\nmonitors the API call latency for all installed apps.\n\n### Help and support\n\n**Documentation**\n\nYou must provide reasonably complete documentation for your app, accessible from\nthe public internet.\n\nDo Don’t- Write thorough documentation that helps users understand and be\nsuccessful with your app.\n- Host your documentation on your website.\n- Direct users to your documentation for help and support.\n- Don’t link to a documentation page that says “coming soon.”\n- Don’t link to a documentation page that fails to describe major portions of\nthe app’s functionality.\n\n**Support**\n\nYou must provide clear and easily accessible support channels for users. At a\nminimum, you must provide an email address for support inquiries and an\nindication of the response time users should expect.\n\nDo Don’t- Provide a support email address with an explicit SLA.\n- Provide additional support channels such as chat, forums, and so on.\n- Don’t provide a “black hole” email address for support.\n- Don’t check support inquiries infrequently and take days or weeks to respond.\n\n### Legal compliance\n\n**Intellectual property**\n\nOnly include assets and works that you have permission to use. Don’t infringe on\nthe intellectual property rights of others.\n\nDo Don’t- Use code, images, and other assets that you’ve created or have\nobtained commercial licenses for.\n- Don’t copy code from others without proper credit or permission.\n- Don’t use open source code in a manner inconsistent with its license.\n- Don’t use photos from the internet without permission.\n\n**Data locality**\n\nYou’re responsible for complying with all data locality controls and any\napplicable jurisdictional laws. Refer to the [Stripe Developer Terms of\nService](http://stripe.com/legal/app-developer-agreement) and [Stripe App\nMarketplace Terms of Service](http://stripe.com/legal/app-marketplace-agreement)\nfor more information.\n\n**Anti-spam**\n\nDon’t send spam. Our anti-spam policy means you’re responsible for making sure\nall communications with users are opt-in, relevant, and compliant with all\napplicable email communications laws. You may not sell Stripe user contact\ninformation to any third parties.\n\n**Export controls and cryptographic functions**\n\nYour app code must abide by all relevant export control laws. In particular,\nyour app must not contain any custom cryptographic functions. These are covered\nunder the [International Traffic in Arms\nRegulations](https://www.ecfr.gov/cgi-bin/text-idx?SID=8870638858a2595a32dedceb661c482c&mc=true&tpl=/ecfrbrowse/Title22/22CIsubchapM.tpl)\n(ITAR), and export of these functions outside of the United States can incur\nserious penalties.\n\nDo Don’t- Use built-in cryptographic functions from standard libraries.\n- Use properly-vetted cryptographic functions from well-known open source\nlibraries.\n- Don’t write your own novel cryptographic function and include it in your UI\nExtension’s source code.\n\n**Fraudulent activities**\n\nYour app must not engage in or promote any sort of fraudulent activities.\n\n**Restricted businesses and apps**\n\nApps that engage in activities that fall under Stripe’s [Prohibited and\nRestricted\nBusinesses](https://stripe.com/legal/restricted-businesses#restricted-businesses)\nand apps that offer services in licensed or regulated industries need to be\nreviewed to determine whether Stripe can support your use case. If we determine\nyour app falls into one of these categories, we’ll notify you during app review\nand work with you to complete the review process.\n\nDo Don’t- Review [Prohibited and Restricted\nBusinesses](https://stripe.com/legal/restricted-businesses#restricted-businesses)\nto determine whether it applies to your business or app.\n- If Stripe considers your business or app a restricted business, or your app is\nassociated with an industry where licensing is required or your business is\nregulated, contact [Stripe Support](https://support.stripe.com/contact/email) to\nbegin the enhanced review process.\n- Ensure your business meets all regulatory requirements to operate in your\njurisdiction.\n- Submit your app for review and work with Stripe to complete the review\nprocess.\n- Try to submit an app if your business operates in a regulated industry without\nthe necessary licenses or approvals.\n- Submit an app with functionality related to a restricted business without\nhaving the necessary licenses or approvals.\n- Create a Stripe account to develop an app using information unrelated to your\nbusiness.\n\n**Prohibited businesses**\n\nYour company or you as a developer can’t engage in one or more types of business\nthat are prohibited by our [Terms of\nServices](https://stripe.com/legal/restricted-businesses#restricted-businesses).\n\n**Sanctioned countries**\n\nYour company or you as a developer can’t be based in a country Stripe cannot\nengage with due to [embargo or other\nrestrictions](https://support.stripe.com/questions/understanding-sanctions).\n\n## See also\n\n- [Publish your app](https://docs.stripe.com/stripe-apps/publish-app)\n- [App listing\nguidelines](https://docs.stripe.com/stripe-apps/listing-guidelines)\n\n## Links\n\n- [example test\ncredentials](https://docs.stripe.com/stripe-apps/review-requirements#test-plan-and-credentials)\n- [Submit app for\nreview](https://docs.stripe.com/stripe-apps/publish-app#submit-app-for-review)\n- [Publish your\napp](https://docs.stripe.com/stripe-apps/publish-app#publish-app)\n- [Prohibited and Restricted\nBusinesses](https://stripe.com/legal/restricted-businesses)\n- [app listing\nguidelines](https://docs.stripe.com/stripe-apps/listing-guidelines)\n- [Stripe Support](https://support.stripe.com/contact/login)\n- [external\nicon](https://docs.stripe.com/stripe-apps/components/icon#icon-reference)\n- [Secret Store API](https://docs.stripe.com/api/secret_management)\n- [Stripe Developer Terms of\nService](http://stripe.com/legal/app-developer-agreement)\n- [Stripe App Marketplace Terms of\nService](http://stripe.com/legal/app-marketplace-agreement)\n- [International Traffic in Arms\nRegulations](https://www.ecfr.gov/cgi-bin/text-idx?SID=8870638858a2595a32dedceb661c482c&mc=true&tpl=/ecfrbrowse/Title22/22CIsubchapM.tpl)\n- [Prohibited and Restricted\nBusinesses](https://stripe.com/legal/restricted-businesses#restricted-businesses)\n- [Stripe Support](https://support.stripe.com/contact/email)\n- [embargo or other\nrestrictions](https://support.stripe.com/questions/understanding-sanctions)\n- [Publish your app](https://docs.stripe.com/stripe-apps/publish-app)",
  "metadata": {
    "title": "Stripe App Marketplace review requirements | Stripe Documentation",
    "description": "Understand the process and requirements to get your app approved for listing in the Stripe App Marketplace.",
    "sourceURL": "https://docs.stripe.com/stripe-apps/review-requirements"
  }
}