{
  "content": "# Issuing and Treasury sample app\n\n## Use the Stripe Next.js sample app to start your own Issuing and Treasury integration.\n\nIn addition to a full suite of documentation and SDKs for Stripe Issuing and\nTreasury, we offer a Next.js sample app.\n\nSee a demo of our sample app at [baas.stripe.dev](https://baas.stripe.dev/), or\ncheck out the [GitHub\nrepository](https://github.com/stripe-samples/issuing-treasury).\n\n## Accessing code\n\nThe sample app is a Next.js app that leverages TypeScript, React, and Material\nUI. You can fork the project from the [Stripe samples GitHub\nrepository](https://github.com/stripe-samples/issuing-treasury) and use the\nincluded components as a starting point for your own app.\n\n## App features\n\nThe app provides many how-to examples, including:\n\n- Leverage Stripe Connect Onboarding to collect Know Your Customer (KYC)\ninformation for onboarding connected accounts compliantly\n- Display account information and balance\n- Display transactions on the Treasury Financial Account\n- Simulate sending funds to an external account using ACH or wire\n- Simulate receiving an ACH credit\n- Visualize the volume of inbound and outbound money flows using\n[ApexCharts](https://github.com/apexcharts/apexcharts.js)\n- Create cardholders compliantly\n- Create cards using the Treasury Financial Account as an issuable balance\n- Show sensitive card numbers in a PCI-compliant way\n- Simulate card authorizations\n- Get paid through a payment link, then transfer funds from your Stripe payments\nbalance to the Financial Account\n- Use test helpers to simulate actions impacting the account\n\n## Component breakdown\n\nThe following sections provide an overview of how each component in the sample\napp works.\n\nYou can learn more about [Issuing APIs and\nfeatures](https://docs.stripe.com/issuing) or [Treasury\nAPIs](https://docs.stripe.com/api/treasury/financial_accounts) and\n[features](https://docs.stripe.com/treasury).\n\n### Account creation\n\nThe account creation flow consists of four steps:\n\n- Create a [connected\naccount](https://docs.stripe.com/treasury/account-management/connected-accounts)\nwith the following capabilities: `transfers`, `card_issuing`, and `treasury`.\n\n```\nconst account = await stripe.accounts.create({\n country: 'US',\n email: email,\n capabilities: {\n transfers: {requested: true},\n treasury: {requested: true},\n card_issuing: {requested: true},\n },\n controller: {\n dashboard: {type: \"none\"},\n losses: {payments: \"application\"},\n requirement_collection: \"application\",\n fees: {payer: \"application\"}\n },\n});\n```\n\n- Create a Stripe Treasury [Financial\nAccount](https://docs.stripe.com/treasury/account-management/financial-accounts).\n\n```\nconst financialAccount = await stripe.treasury.financialAccounts.create(\n {\n supported_currencies: ['usd'],\n features: {\n card_issuing: {requested: true},\n deposit_insurance: {requested: true},\n financial_addresses: {aba: {requested: true}},\n inbound_transfers: {ach: {requested: true}},\n intra_stripe_flows: {requested: true},\n outbound_payments: {\n ach: {requested: true},\n us_domestic_wire: {requested: true},\n },\n outbound_transfers: {\n ach: {requested: true},\n us_domestic_wire: {requested: true},\n },\n },\n },\n {stripeAccount: account.id},\n);\n```\n\n- Create a Connect Onboarding link and use it to redirect new connected accounts\nto collect the necessary profile information for the requested capabilities.\n\n```\nconst { url } = await stripe.accountLinks.create({\n type: 'account_onboarding',\n account: accountId,\n refresh_url: host + '/onboard',\n return_url: host + '/onboard',\n collect: 'eventually_due',\n});\n```\n\n### Account balance\n\nThe account balance card uses only the `stripe.treasury.financialAccounts.list`\nAPI.\n\n```\nconst financialAccounts = await stripe.treasury.financialAccounts.list({\n stripeAccount: StripeAccountID,\n});\nconst financialAccount = financialAccounts.data[0];\n```\n\nThe payload of the above command contains a balance object consisting of the\ncurrent\n[balance](https://docs.stripe.com/treasury/account-management/working-with-balances-and-transactions)\n(cash) and outbound funds.\n\n```\n{\n \"id\": \"fa_...\",\n ...\n \"balance\": {\n \"cash\": { \"usd\": 534214 },\n \"inbound_pending\": { \"usd\": 0 },\n \"outbound_pending\": { \"usd\": 2200 }\n },\n ...\n \"supported_currencies\": [ \"usd\" ]\n}\n```\n\n### Funds in and funds out chart\n\nThe funds movement chart uses only the `stripe.treasury.transactions.list` API.\n\n```\nconst fa_transactions = await stripe.treasury.transactions.list(\n {\n financial_account: financialAccount.id,\n order_by: 'created',\n limit: 100,\n },\n {stripeAccount: StripeAccountID},\n);\n```\n\nThe responses are grouped by positive or negative balances and creation date.\nThe data is then ported into\n[ApexCharts](https://github.com/apexcharts/apexcharts.js) to create a dynamic\ndisplay of the funds flow.\n\n```\n{\n \"id\": \"{{TRANSACTION_ID}}\",\n \"object\": \"treasury.transaction\",\n \"created\": \"{{T}}\",\n ...\n \"flow\": \"{{OUTBOUND_PAYMENT_ID}}\",\n \"flow_type\": \"outbound_payment\",\n \"status\": \"open\",\n \"amount\": -1000,\n \"currency\": \"usd\",\n \"balance_impact\": {\n \"cash\": -1000,\n \"inbound_pending\": 0,\n \"outbound_pending\": 1000,\n },\n \"entries\": {\n \"data\": [\n {\n \"id\": \"{{TRANSACTION_ENTRY_ID}}\",\n \"object\": \"treasury.transaction_entry\",\n ...\n \"created\": \"{{T}}\",\n \"effective_at\": \"{{T}}\",\n \"currency\": \"usd\",\n \"balance_impact\": {\n \"cash\": -1000,\n \"inbound_pending\": 0,\n \"outbound_pending\": 1000,\n }\n }\n ],\n \"has_more\": false,\n \"object\": \"list\",\n\"url\":\n\"/v1/treasury/transaction_entries?financial_account={{FINANCIAL_ACCOUNT_ID}}&transaction={{TRANSACTION_ID}}\"\n }\n}\n```\n\n### Transaction list\n\nThe transaction list uses the `stripe.treasury.transactions.list` API.\n\n```\nconst fa_transactions = await stripe.treasury.transactions.list(\n {\n financial_account: financialAccount.id,\n order_by: 'created',\n limit: 100,\n },\n {stripeAccount: StripeAccountID},\n);\n```\n\nThe columns in the transactions table are parsed from the `transaction` object\nusing the following mapping:\n\n- `created` → Date\n- `amount` → Amount / Currency\n- `flow_type` → Type\n- `status` → Status\n- `description` → Description\n\n### Send money interface\n\nThe money sending feature in the sample app uses the Stripe Treasury\n`OutboundPayment` feature. You can use\n[OutboundPayments](https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/outbound-payments)\nto send money to a third party’s external account.\n\n```\nconst outboundPayment = await stripe.treasury.outboundPayments.create(\n {\n financial_account: financialAccount.id,\n amount: amount,\n currency: 'usd',\n statement_descriptor: req.descriptor,\n destination_payment_method_data: {\n type: 'us_bank_account',\n us_bank_account: {\n account_holder_type: 'individual',\n routing_number: '110000000',\n account_number: '000000000009',\n }\n }\n },\n {\n stripeAccount: StripeAccountId\n },\n);\n```\n\n### Issuing cardholder creation\n\nYou must create a `Cardholder` before you can issue a card using Stripe Issuing\nto spend funds from the Treasury Financial Account. Use the\n`stripe.issuing.cardholders.create` API to create cardholders.\n\n```\nconst cardholder = await stripe.issuing.cardholders.create(\n {\n type: 'individual',\n name: firstName + ' ' + lastName,\n email: email,\n individual: {\n first_name: firstName,\n last_name: lastName,\n dob: {day: day, month: month, year: year}\n },\n billing: {\n address: {\n city: city,\n line1: address1,\n state: state,\n postal_code: postalCode,\n country: country,\n },\n },\n },\n {\n stripeAccount: StripeAccountId,\n }\n);\n```\n\n### Issuing cards\n\nAfter you create a `Cardholder`, you can issue a card to the `Cardholder` using\nthe `stripe.issuing.cards.create` API.\n\n```\nconst card = await stripe.issuing.cards.create(\n {\n cardholder: req.body.cardholderid,\n financial_account: financialAccount.id,\n currency: 'usd',\n type: 'virtual',\n status: 'active',\n },\n {stripeAccount: StripeAccountId},\n);\n```\n\n### Cards list\n\nThe cards list renders using data from the `stripe.issuing.cards.list` API.\n\n```\nconst cards = await stripe.issuing.cards.list(\n {limit: 10},\n {stripeAccount: StripeAccountID},\n);\n```\n\n### Card authorization list\n\nUse the `stripe.issuing.authorizations.list` API to retrieve authorizations for\na specific card. The following example limits the list to the 10 most recent\nauthorizations.\n\n```\nconst card_authorizations = await stripe.issuing.authorizations.list(\n {\n card: cardId,\n limit: 10,\n },\n {stripeAccount: StripeAccountID},\n);\n```\n\nThe columns in the authorization table are parsed from the response object using\nthe following mapping:\n\n- `created` → Date\n- `amount` → Amount / Amount Currency\n- `card.cardholder.name` → Name on Card\n- `card.last4` → Last 4\n- `approved` → Approved\n- `status` → Status\n- `merchant_data.name` → Merchant\n- `merchant_data.category` → Merchant Category\n\n## Test mode helpers\n\nThe sample app features test mode helpers that enable you to perform certain\nactions, such as funding your account, creating a payment link to collect funds\nin a connected account, and paying out funds to the Financial Account. You can\naccess most of the test helpers by clicking the **Generate Test Data** button or\nclicking **Test Data**.\n\n### Received Credit test helper\n\nIn test mode, you can add funds to a Treasury Financial Account using the\n[ReceivedCredit Test\nHelpers](https://docs.stripe.com/api/treasury/received_credits/test_mode_create).\nThis test helper simulates receiving a transfer from an external bank account\ninto your Financial Account.\n\n```\nconst receivedCredit = await stripe.testHelpers.treasury.receivedCredits.create(\n {\n amount: 50000,\n currency: 'usd',\n financial_account: financialAccount.id,\n network: 'ach',\n },\n {stripeAccount: StripeAccountId},\n);\n```\n\n### Payment links and payouts\n\nYou can use payment links to add funds to the connected account that’s\nassociated with a Financial Account:\n\n- Create a `Price` that determines the amount deposited into the connected\naccount after completion of payment.\n\n```\nconst prices = await stripe.prices.list(\n {\n limit: 1,\n active: true,\n type: 'one_time',\n },\n {stripeAccount: StripeAccountId,},\n);\n\nlet price;\n\nif (prices.data.length < 1) {\n price = await stripe.prices.create(\n {\n unit_amount: 1000,\n currency: 'usd',\n product_data:\n {\n name: 'Unit',\n },\n },\n {stripeAccount: StripeAccountId,},\n );\n} else {\n price = prices.data[0];\n}\n```\n\n- After obtaining the price, Stripe creates a `PaymentLink`, and you redirect\nthe customer to complete the payment. Use the `Price` `id` from the previous\nstep to set the value for the `price` parameter. Alternatively, you can exclude\nthe parameter to use a default value instead.\n\n```\nconst paymentLink = await stripe.paymentLinks.create(\n {\n line_items: [\n {\n price: price.id,\n quantity: 1,\n adjustable_quantity: {enabled: true},\n },\n ],\n },\n {stripeAccount: StripeAccountId,},\n);\n```\n\n### Payout from the connected account payments balance\n\n[Payouts](https://docs.stripe.com/treasury/moving-money/payouts#payouts) can\nsend funds from a connected account’s payments balance to their Treasury\nFinancial Account. Do the following to execute a payout:\n\n- Check if there’s an external account configured for the connected account. To\ndo so, use the\n[accounts.retrieve](https://docs.stripe.com/api/accounts/retrieve) API to obtain\nthe [account object](https://docs.stripe.com/api/accounts/object) and verify if\nthe `external_account` property is populated.\n\n```\nconst responseAccount = await stripe.accounts.retrieve(StripeAccountID);\nconst accountExternalAccount = responseAccount.external_accounts.data[0];\n\nlet hasExternalAccount = false;\n\nif (accountExternalAccount) {\n hasExternalAccount = true;\n}\n```\n\n- If the connected account doesn’t have an external account, they can set up the\nTreasury Financial Account as their external account.\n\n```\nconst financialAccounts = await stripe.treasury.financialAccounts.list(\n {expand: ['data.financial_addresses.aba.account_number']},\n {\n stripeAccount: StripeAccountId,\n },\n);\n\nconst financialAccount = financialAccounts.data[0];\n\nawait stripe.accounts.createExternalAccount(StripeAccountId, {\n external_account: {\n object: 'bank_account',\n country: 'US',\n currency: 'usd',\n account_number:\n financialAccount.financial_addresses[0].aba.account_number,\n routing_number:\n financialAccount.financial_addresses[0].aba.routing_number,\n },\n});\n```\n\n- Initiate a payout to the connected account’s external account. In this case,\nthe external account is the Treasury Financial Account.\n\n```\nconst balance = await stripe.balance.retrieve({\n stripeAccount: StripeAccountId,\n});\n\nconst payout = await stripe.payouts.create(\n {\n amount: balance.available[0].amount,\n currency: 'usd',\n },\n {stripeAccount: StripeAccountId},\n);\n```\n\n## Links\n\n- [baas.stripe.dev](https://baas.stripe.dev)\n- [GitHub repository](https://github.com/stripe-samples/issuing-treasury)\n- [ApexCharts](https://github.com/apexcharts/apexcharts.js)\n- [Issuing APIs and features](https://docs.stripe.com/issuing)\n- [Treasury APIs](https://docs.stripe.com/api/treasury/financial_accounts)\n- [features](https://docs.stripe.com/treasury)\n- [connected\naccount](https://docs.stripe.com/treasury/account-management/connected-accounts)\n- [Financial\nAccount](https://docs.stripe.com/treasury/account-management/financial-accounts)\n-\n[balance](https://docs.stripe.com/treasury/account-management/working-with-balances-and-transactions)\n-\n[OutboundPayments](https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/outbound-payments)\n- [ReceivedCredit Test\nHelpers](https://docs.stripe.com/api/treasury/received_credits/test_mode_create)\n- [Payouts](https://docs.stripe.com/treasury/moving-money/payouts#payouts)\n- [accounts.retrieve](https://docs.stripe.com/api/accounts/retrieve)\n- [account object](https://docs.stripe.com/api/accounts/object)",
  "metadata": {
    "title": "Issuing and Treasury sample app | Stripe Documentation",
    "description": "Use the Stripe Next.js sample app to start your own Issuing and Treasury integration.",
    "sourceURL": "https://docs.stripe.com/treasury/examples/sample-app"
  }
}