{
  "content": "To accept other payment methods, use the Payment Element. Learn more about\n[migrating to the Payment\nElement](https://docs.stripe.com/payments/payment-element/migration).\n\nDownload full appDon't code? Use Stripe’s [no-code\noptions](https://docs.stripe.com/no-code) or get help from [our\npartners](https://stripe.partners/).1 Set up the server\n### Install the Stripe Ruby library\n\nInstall the Stripe ruby gem and require it in your code. Alternatively, if\nyou’re starting from scratch and need a Gemfile, download the project files\nusing the link in the code editor.\n\nTerminalBundlerGitHub\nInstall the gem:\n\n`gem install stripe`Server\n### Create a PaymentIntent\n\nAdd an endpoint on your server that creates a\n[PaymentIntent](https://docs.stripe.com/api/payment_intents). A PaymentIntent\ntracks the customer’s payment lifecycle, keeping track of any failed payment\nattempts and ensuring the customer is only charged once. Return the\nPaymentIntent’s client secret in the response to finish the payment on the\nclient.\n\nServer2 Build a checkout page on the client\n### Load Stripe.js\n\nUse Stripe.js to remain PCI compliant by ensuring that card details are sent\ndirectly to Stripe without hitting your server. Always load Stripe.js from\njs.stripe.com to remain compliant. Do not include the script in a bundle or host\nit yourself.\n\nClient\n### Define the payment form\n\nAdd an empty placeholder `div` to your checkout form. Stripe inserts an iframe\ninto this `div` that securely collects card information.\n\nClient\n### Initialize Stripe.js\n\nInitialize Stripe.js with your publishable API keys. You will use Stripe.js to\ncreate the card input field and complete the payment on the client.\n\nClient\n### Fetch a PaymentIntent\n\nImmediately make a request to the endpoint on your server to create a new\nPaymentIntent as soon as the page loads.\n\nClient\n### Initialize Stripe Elements\n\nInitialize the [Stripe Elements UI\nlibrary](https://docs.stripe.com/js/elements_object/create_without_intent).\nElements manages the UI components you need to collect card details.\n\nIf you’re a Connect user and you specified the\n[on_behalf_of](https://docs.stripe.com/connect/charges#on_behalf_of) property\nwhen creating your Payment or Setup intent, you must pass the same value to the\nElements group using the\n[onBehalfOf](https://docs.stripe.com/js/elements_object/create_without_intent#stripe_elements_no_intent-options-onBehalfOf)\noption.\n\nClient\n### Create the Card Element\n\nCreate a Card Element and mount it to the placeholder `'<div'>` in your payment\nform. This creates a single input that collects the card number, expiry date,\nCVC, and postal code. Stripe Elements displays localized placeholder text of the\npostal code field based on your customer’s [browser\nlocale](https://docs.stripe.com/js/elements_object/create_without_intent#stripe_elements_no_intent-options-locale)\n(for example, showing “ZIP” for US cardholders, “Postcode” for U.K.\ncardholders).\n\nClient\n### Listen for load errors\n\nListen to [load errors](https://docs.stripe.com/js/element/events/on_loaderror)\nthat trigger if the `Element` fails to load.\n\nClient\n### Optional: Style the card input\n\nStripe embeds an iframe to securely collect card details. Customize the iframe\nby passing a [style](https://docs.stripe.com/js/appendix/style) object. Use your\ncompany’s color scheme and font to make it match the rest of your checkout page.\nUse custom fonts (for example, from Google Fonts) by initializing Elements with\na [font\nset](https://docs.stripe.com/js/elements_object/create_without_intent#stripe_elements_no_intent-options-fonts).\n\nClient\n### Initialize Stripe Elements\n\nInitialize the [Stripe Elements UI\nlibrary](https://docs.stripe.com/js/elements_object/create). Elements manages\nthe UI components you need to collect card details.\n\nClient\n### Create the Card Element\n\nCreate a Card Element and mount it to the placeholder `'<div'>` in your payment\nform. This creates a single input that collects the card number, expiry date,\nCVC, and postal code. Stripe Elements displays localized placeholder text of the\npostal code field based on your customer’s [browser\nlocale](https://docs.stripe.com/js/elements_object/create#stripe_elements-options-locale)\n(for example, showing “ZIP” for US cardholders, “Postcode” for U.K.\ncardholders).\n\nClient\n### Optional: Style the card input\n\nStripe embeds an iframe to securely collect card details. Customize the iframe\nby passing a [style](https://docs.stripe.com/js/appendix/style) object. Use your\ncompany’s color scheme and font to make it match the rest of your checkout page.\nUse custom fonts (for example, from Google Fonts) by initializing Elements with\na [font\nset](https://docs.stripe.com/js/elements_object/create#stripe_elements-options-fonts).\n\nClient\n### Optional: Expose card errors\n\nListen to changes on the Card Element to immediately expose card errors (for\nexample, the expiry date is in the past) and disable the button if the Element\nis empty.\n\nClient3 Complete the payment on the client\n### Handle the submit event\n\nListen to the form’s submit event to know when to confirm the payment through\nthe Stripe API.\n\nClient\n### Complete the payment\n\nCall `confirmCardPayment()` passing along the client secret and Card Element, to\ncomplete the payment. Stripe automatically displays a modal if the card\n[requires authentication](https://www.youtube.com/watch?v=2kc-FjU2-mY) like 3D\nSecure, where the customer must enter a passcode or other piece of identifying\ninformation to finalize the purchase.\n\nClient\n### Handle the API response\n\nIf no error occurred, tell your customer the payment was successful! For any\nimportant post-payment actions (such as shipping packages, sending email\nreceipts) we recommend [setting up a\nwebhook](https://docs.stripe.com/payments/handling-payment-events). If your\ncustomer’s card is declined, Stripe.js returns an error. Show that error message\nto your customer so they can try again with a different card\n\nClient4 Test the integration\n### Run the application\n\nRun the server and go to the checkout page.\n\nServer\n### Make a test payment\n\nUse a test card number to try your integration. These card numbers work in test\nmode with any CVC, postal code, and future expiry date. Stripe also has a set of\n[international test cards](https://docs.stripe.com/testing#international-cards)\nto test specific postal code formats (for example, only allow numerical values\nfor US zip codes).\n\nPayment succeeds4242 4242 4242 4242Payment requires authentication4000 0025 0000\n3155Payment is declined4000 0000 0000 9995\n## Congratulations!\n\nYou’re ready to accept payments with Stripe. Continue with the steps below to\nadd more features.\n\n### Send an email receipt\n\nStripe can send an email receipt to your customer using your brand logo and\ncolor theme, configurable in [the\nDashboard](https://dashboard.stripe.com/settings/branding).\n\n### Save card after payment\n\nSaaS or e-commerce businesses often save card details for recurring customers.\n\n## See also\n\n#### [Payouts](https://docs.stripe.com/payouts)\n\nLearn how to move funds out of your Stripe account into your bank account.\n\n#### [Refunds](https://docs.stripe.com/refunds)\n\nHandle requests for refunds by using the Stripe API or Dashboard.\n\n#### [Fulfillment](https://docs.stripe.com/webhooks/quickstart)\n\nSet up a webhook to fulfill orders after a payment succeeds. Webhooks are the\nmost reliable way to handle business-critical events.\n\nPreviewPay nowMake a test\npaymentserver.rbcheckout.htmlstyle.cssclient.jsDownload\n```\nrequire 'sinatra'require 'stripe'# This is a public sample test API key.# Don’t\nsubmit any personally identifiable information in requests made with this key.#\nSign in to see your own test API key embedded in code samples.Stripe.api_key =\n'sk_test_BQokikJOvBiI2HlWgH4olfQ2'\nset :static, trueset :port, 4242\ndef calculate_order_amount(_items) # Replace this constant with a calculation of\nthe order's amount # Calculate the order total on the server to prevent # people\nfrom directly manipulating the amount on the client 1400end\n# An endpoint to start the payment processpost '/create-payment-intent' do content_type 'application/json' data = JSON.parse(request.body.read)\n# Create a PaymentIntent with amount and currency payment_intent =\nStripe::PaymentIntent.create( amount: calculate_order_amount(data['items']),\ncurrency: 'usd' )\n { clientSecret: payment_intent['client_secret'], }.to_jsonend\n```\n\n## Links\n\n- [text version of this\nguide](https://docs.stripe.com/payments/accept-a-payment)\n- [Payment Element](https://docs.stripe.com/payments/quickstart)\n- [the Card Element and Payment\nElement](https://docs.stripe.com/payments/payment-card-element-comparison)\n- [migrating to the Payment\nElement](https://docs.stripe.com/payments/payment-element/migration)\n- [no-code options](https://docs.stripe.com/no-code)\n- [our partners](https://stripe.partners)\n- [PaymentIntent](https://docs.stripe.com/api/payment_intents)\n- [Stripe Elements UI\nlibrary](https://docs.stripe.com/js/elements_object/create_without_intent)\n- [on_behalf_of](https://docs.stripe.com/connect/charges#on_behalf_of)\n-\n[onBehalfOf](https://docs.stripe.com/js/elements_object/create_without_intent#stripe_elements_no_intent-options-onBehalfOf)\n- [browser\nlocale](https://docs.stripe.com/js/elements_object/create_without_intent#stripe_elements_no_intent-options-locale)\n- [load errors](https://docs.stripe.com/js/element/events/on_loaderror)\n- [style](https://docs.stripe.com/js/appendix/style)\n- [font\nset](https://docs.stripe.com/js/elements_object/create_without_intent#stripe_elements_no_intent-options-fonts)\n- [Stripe Elements UI\nlibrary](https://docs.stripe.com/js/elements_object/create)\n- [browser\nlocale](https://docs.stripe.com/js/elements_object/create#stripe_elements-options-locale)\n- [font\nset](https://docs.stripe.com/js/elements_object/create#stripe_elements-options-fonts)\n- [requires authentication](https://www.youtube.com/watch?v=2kc-FjU2-mY)\n- [setting up a\nwebhook](https://docs.stripe.com/payments/handling-payment-events)\n- [international test\ncards](https://docs.stripe.com/testing#international-cards)\n- [the Dashboard](https://dashboard.stripe.com/settings/branding)\n- [Payouts](https://docs.stripe.com/payouts)\n- [Refunds](https://docs.stripe.com/refunds)\n- [Fulfillment](https://docs.stripe.com/webhooks/quickstart)",
  "metadata": {
    "title": "Card Element quickstart | Stripe Documentation",
    "description": "",
    "sourceURL": "https://docs.stripe.com/payments/card-element"
  }
}