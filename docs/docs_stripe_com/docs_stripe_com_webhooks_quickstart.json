{
  "content": "you’re starting from scratch and need a Gemfile, download the project files\nusing the link in the code editor.\n\nTerminalBundlerGitHub\nInstall the gem:\n\n`gem install stripe`Server\n### Create a new endpoint\n\nA [webhook endpoint](https://docs.stripe.com/webhooks) is a destination on your\nserver that receives requests from Stripe, notifying you about events that\nhappen on your account such as a customer disputing a charge or a successful\nrecurring payment. Add a new endpoint to your server and make sure it’s publicly\naccessible so we can send unauthenticated POST requests.\n\nServer2 Handle requests from Stripe\n### Read the event data\n\nStripe sends the event data in the request body. Each event is structured as an\n[Event object](https://docs.stripe.com/api/events) with a `type`, `id`, and\nrelated Stripe resource nested under `data`.\n\nServer\n### Handle the event\n\nAs soon as you have the event object, check the\n[type](https://docs.stripe.com/api/events/types) to know what kind of event\nhappened. You can use one webhook to handle several different event types at\nonce, or set up individual endpoints for specific events.\n\nServer\n### Return a 200 response\n\n[Send a successful 200\nresponse](https://docs.stripe.com/webhooks#handle-events-asynchronously) to\nStripe as quickly as possible because Stripe retries the event if a response\nisn’t sent within a reasonable time. Write any long-running processes as code\nthat can run asynchronously outside the webhook endpoint.\n\nServer3 Test the webhook\n### Run the server\n\nBuild and run your server to test the endpoint at\n`http://localhost:4242/webhook`.\n\n`ruby server.rb`Server\n### Download the CLI\n\nUse the Stripe CLI to test your webhook locally. [Download the\nCLI](https://docs.stripe.com/stripe-cli) and log in with your Stripe account.\nAlternatively, use a service like ngrok to make your local endpoint publicly\naccessible.\n\n`stripe login`Run in the Stripe ShellServer\n### Forward events to your webhook\n\nSet up [event forwarding](https://docs.stripe.com/webhooks#test-webhook) with\nthe CLI to send all Stripe events in test mode to your local webhook endpoint.\n\n`stripe listen --forward-to localhost:4242/webhook`Run in the Stripe ShellServer\n### Simulate events\n\nUse the CLI to [simulate specific events](https://docs.stripe.com/cli/trigger)\nthat test your webhook application logic by sending a POST request to your\nwebhook endpoint with a mocked Stripe event object.\n\n`stripe trigger payment_intent.succeeded`Run in the Stripe ShellServer4 Secure\nyour webhook\n### Secure your webhook\n\nVerify the source of a webhook request to prevent bad actors from sending fake\npayloads or injecting SQL that modify your backend systems. Secure your webhook\nwith a client signature to validate that Stripe generated a webhook request and\nthat it didn’t come from a server acting like Stripe.\n\nServer\n### Add the endpoint signing secret\n\nEach webhook endpoint has a unique signing secret. Find the secret in the\n[webhooks](https://dashboard.stripe.com/webhooks) section of the Dashboard, or,\nif you’re testing locally with the Stripe CLI, from the CLI output with the\ncommand `stripe listen`.\n\nServer\n### Verify the event\n\nUse the Stripe library to verify and construct the event from Stripe. You need\nthe endpoint secret, the request headers, and the raw request body to properly\nverify the event. Alternatively, you can [manually\nverify](https://docs.stripe.com/webhooks?verify=verify-manually#verify-manually)\nthe signature without having to use the Stripe library.\n\nServer\n### Read the request signature\n\nEach request from Stripe contains a `Stripe-Signature` header. Store a reference\nto this header value for later use.\n\nServer\n### Verify the request\n\nUse the Stripe library to verify that the request came from Stripe. Pass the raw\nrequest body, `Stripe-Signature` header, and endpoint secret to construct an\n[Event](https://docs.stripe.com/api/events/object).\n\nServer\n### Handle errors\n\nChecking for errors helps catch improperly configured webhooks or malformed\nrequests from non-Stripe services. Common errors include using the wrong\nendpoint secret, passing a parsed representation (for example, JSON) of the\nrequest body, or reading the wrong request header.\n\nServer\n### Test the endpoint\n\nTest your secured endpoint by using the Stripe CLI, which sends the proper\nsignature header in each test event.\n\nServer\n## Next steps\n\n#### [Going live](https://docs.stripe.com/webhooks#register-webhook)\n\nLearn how to deploy your webhook endpoint to production and handle events at\nscale by only sending the specific events you need.\n\n#### [Best practices](https://docs.stripe.com/webhooks#best-practices)\n\nUnderstand best practices for maintaining your endpoint, such as managing\nretries or duplicate events.\n\n#### [Stripe CLI](https://docs.stripe.com/stripe-cli)\n\nThe Stripe CLI has several commands that can help test your Stripe application\nbeyond webhooks.\n\nserver.rbDownload\n```\n# Build a webhook endpoint\nBuild a simple webhook endpoint to listen to events from Stripe. Included are\nsome basic build and run scripts you can use to start up the application.\n## Running the sample\n1. Build the server\n~~~bundle install~~~\n2. Run the server\n~~~ruby server.rb -o 0.0.0.0~~~\n\n## Testing the webhook\nThe easiest way to test your webhook locally is with the Stripe CLI. Download\n[the CLI](https://github.com/stripe/stripe-cli) and log in with your Stripe\naccount. Alternatively, use a service like ngrok to make your local endpoint\npublicly accessible.\nSet up event forwarding with the CLI to send all Stripe events in test mode to\nyour local webhook endpoint.\n~~~stripe listen --forward-to localhost:4242/webhook~~~\nUse the CLI to simulate specific events that test your webhook application logic\nby sending a POST request to your webhook endpoint with a mocked Stripe event\nobject.\n~~~stripe trigger payment_intent.succeeded~~~\n```\n\n## Links\n\n- [text version of this guide](https://docs.stripe.com/webhooks)\n- [no-code options](https://docs.stripe.com/no-code)\n- [our partners](https://stripe.partners)\n- [Event object](https://docs.stripe.com/api/events)\n- [type](https://docs.stripe.com/api/events/types)\n- [Send a successful 200\nresponse](https://docs.stripe.com/webhooks#handle-events-asynchronously)\n- [Download the CLI](https://docs.stripe.com/stripe-cli)\n- [event forwarding](https://docs.stripe.com/webhooks#test-webhook)\n- [simulate specific events](https://docs.stripe.com/cli/trigger)\n- [webhooks](https://dashboard.stripe.com/webhooks)\n- [manually\nverify](https://docs.stripe.com/webhooks?verify=verify-manually#verify-manually)\n- [Event](https://docs.stripe.com/api/events/object)\n- [Going live](https://docs.stripe.com/webhooks#register-webhook)\n- [Best practices](https://docs.stripe.com/webhooks#best-practices)",
  "metadata": {
    "title": "Set up and deploy a webhook | Stripe Documentation",
    "description": "Learn how to set up and deploy a webhook to listen to events from Stripe.",
    "sourceURL": "https://docs.stripe.com/webhooks/quickstart"
  }
}