{
  "content": "# Tour of the API\n\n## See how Stripe API objects fit together and learn best practices for combining them.\n\nThe Stripe APIs are powerful and flexible if you know how to use them. This tour\nof the API covers key information to help you understand the APIs more deeply:\n\n- The core concepts we use across the APIs\n- The path a successful payment takes\n- The objects that play a role and how to determine when they’re needed\n- Common patterns and best practices for using those objects together\n\nUnderstanding these patterns helps you move beyond the pre-written code in\nStripe tutorials. You can migrate old integrations to use more modern patterns,\ncombine simple patterns in novel ways, and plan for future growth.\n\n## Core concepts\n\n### Everything is an object\n\nEverything in your Stripe account is an object, whether you create it with the\nAPI or not. Your balance corresponds to a\n[Balance](https://docs.stripe.com/api/balance) object, you track customers with\n[Customer](https://docs.stripe.com/api/customers) objects, you store payment\ndetails in [PaymentMethod](https://docs.stripe.com/api/payment_methods) objects,\nand so on.\n\nEven low-code and no-code integrations produce these objects. So do actions you\nperform in the Dashboard. For instance, when you manually create a customer in\nthe Dashboard, it still creates a Customer object.\n\n### Objects have lives\n\nStripe integrations handle complicated processes.\n\nThe API uses a single object to track each process. You create the object at the\nstart of the process, and after every step you can check its `status` to see\nwhat needs to happen next—This is sometimes referred to as a *state machine*.\n\nFor instance, while completing a payment, a customer might try several payment\nmethods. If one payment method fails, a `status` of `requires_payment_method`\nlets you know to prompt the customer for another.\n\n### An integration is made out of cooperating objects\n\nTo accept a payment, a system needs to create several core objects and manage\nthem through several states.\n\nYour Stripe integration is a system that handles this creation and management by\ncommunicating with Stripe.\n\nSome integrations do a lot more than that: track customers, manage\nsubscriptions, etc. But their core payment functionality still comes from the\nsame objects and steps, with more objects added around that core.\n\n## Payment objects\n\nStripe uses a variety of related objects to facilitate payments. Before you can\nbuild an integration that suits your specific needs, you must familiarize\nyourself with how these objects work together.\n\nCheck out this video for an overview of payment object roles and capabilities.\n\nTo learn more about Stripe’s payment integration options, see the following\nguides:\n\n- [Payment Links](https://docs.stripe.com/payment-links)\n- [Checkout](https://docs.stripe.com/payments/checkout)\n- [Subscriptions](https://docs.stripe.com/billing)\n- [Invoicing](https://docs.stripe.com/invoicing)\n- [Payment Intents](https://docs.stripe.com/payments/payment-intents)\n\n## The path to a payment\n\nIn a modern Stripe integration, every payment uses an object called a\n[PaymentIntent](https://docs.stripe.com/api/payment_intents). As its name\nsuggests, it represents your *intent* to collect a payment. This object tracks\nthe steps you go through along the way to fulfilling that intent.\n\nFor instance, suppose a customer clicks a **Check out** button with a 100 USD\nitem in their cart. They haven’t bought it yet, and they might never buy it\n(maybe at some point they abandon the payment flow, or their card issuer\ndeclines the payment). But clicking **Check out** indicates their *intent* to\nbuy—and you intend to help them. At that point, an integration creates a\n`PaymentIntent` object in the amount of 100 USD to track the rest of the\nprocess.\n\nThe `PaymentIntent`’s path to success goes through [several\nstatuses](https://docs.stripe.com/payments/paymentintents/lifecycle)—here’s a\nsimplified version:\n\n`requires_payment_method`\n\n`requires_confirmation`\n\n`processing`\n\n`succeeded`\n\n`canceled`\n\nretryShows the status of a PaymentIntent changing from requires_payment_method\nto requires_confirmation to processing which either ends in a state of succeeded\nor canceled\n### Payment methods\n\nA PaymentIntent starts with the status `requires_payment_method`. To move it\nforward, Stripe needs details about the customer’s payment method—either a card\nnumber or credentials for some other payment system.\n\nAn integration represents these details using an API object called a\n[PaymentMethod](https://docs.stripe.com/api/payment_methods). In some\nintegrations, you write the code that creates that object and attaches it to the\nPaymentIntent. In others, Stripe gathers the details and does the work for you.\nYou can also create and save a payment method for use with future PaymentIntents\n[using the Setup Intents API](https://docs.stripe.com/payments/setup-intents).\n\n### Confirmation\n\nThe next status is `requires_confirmation`. In an interactive payment flow, the\ncustomer must confirm that they intend to pay—and that they intend to do it\nusing the method they provided. In a one-time online payment, this usually\nhappens when they click the **Pay** button.\n\nWhen the customer clicks **Pay** or otherwise confirms their intent, an\nintegration notifies Stripe with an API call. In some integrations, you write\nthe code that makes this call. Stripe provides drop-in UI elements, called\n[Stripe Elements](https://docs.stripe.com/payments/elements), to enable this\nwhile still providing flexibility to build a custom integration. In other\nintegrations, like a [Stripe\nCheckout](https://docs.stripe.com/payments/checkout) or [Payment\nLinks](https://docs.stripe.com/payment-links) integration, Stripe makes the call\nand handles the next steps. There are many ways to integrate Stripe and combine\ndifferent objects to handle your use case. [Learn more about integration options\nfor online payments.](https://docs.stripe.com/payments/online-payments)\n\nIn most cases a [Charge](https://docs.stripe.com/api/charges) will be created\nwhen a PaymentIntent is confirmed to represent that specific attempt to move\nmoney. The Charge might succeed or fail. If it fails the payment can be retried\nby confirming the PaymentIntent again, usually with new payment details.\nAllowing retries immediately, without the need to create a new PaymentIntent,\ntends to increase conversion rates.\n\n### Processing and success\n\nThe intent’s state is now `processing`, and at this point Stripe attempts to\nprocess the payment.\n\nStripe always does this part for you—and it can have several steps. (For credit\ncards, these steps are part of [how cards\nwork](https://docs.stripe.com/payments/cards/overview).) As we work through the\nsteps, we update the intent’s state with the outcome: either `succeeded` or back\nto `requires_payment_method` if it fails.\n\nWhen we’re done, one last object comes into play: the\n[Event](https://docs.stripe.com/api/events). We use `Event` objects to represent\nactivity. In this case, the activity might be “the charge succeeded” or “the\ncharge failed.” In some integrations, you write custom code to respond to events\nusing [webhook endpoints](https://docs.stripe.com/webhooks). In others, such as\n[Checkout](https://docs.stripe.com/payments/checkout) or [Payment\nLinks](https://docs.stripe.com/payment-links) integrations, Stripe listens for\nthe event and provides a pre-written response.\n\n## Links\n\n- [Balance](https://docs.stripe.com/api/balance)\n- [Customer](https://docs.stripe.com/api/customers)\n- [PaymentMethod](https://docs.stripe.com/api/payment_methods)\n- [Payment Links](https://docs.stripe.com/payment-links)\n- [Checkout](https://docs.stripe.com/payments/checkout)\n- [Subscriptions](https://docs.stripe.com/billing)\n- [Invoicing](https://docs.stripe.com/invoicing)\n- [Payment Intents](https://docs.stripe.com/payments/payment-intents)\n- [PaymentIntent](https://docs.stripe.com/api/payment_intents)\n- [several statuses](https://docs.stripe.com/payments/paymentintents/lifecycle)\n- [using the Setup Intents API](https://docs.stripe.com/payments/setup-intents)\n- [Stripe Elements](https://docs.stripe.com/payments/elements)\n- [Learn more about integration options for online\npayments.](https://docs.stripe.com/payments/online-payments)\n- [Charge](https://docs.stripe.com/api/charges)\n- [how cards work](https://docs.stripe.com/payments/cards/overview)\n- [Event](https://docs.stripe.com/api/events)\n- [webhook endpoints](https://docs.stripe.com/webhooks)",
  "metadata": {
    "title": "Tour of the API | Stripe Documentation",
    "description": "See how Stripe API objects fit together and learn best practices for combining them.",
    "sourceURL": "https://docs.stripe.com/payments-api/tour"
  }
}