{
  "content": "Install the Stripe ruby gem and require it in your code. Alternatively, if\nyou’re starting from scratch and need a Gemfile, download the project files\nusing the link in the code editor.\n\nTerminalBundlerGitHub\nInstall the gem:\n\n`gem install stripe`Server\n### Create a Checkout Session\n\nAdd an endpoint on your server that creates a [Checkout\nSession](https://docs.stripe.com/api/checkout/sessions). A Checkout Session\ncontrols what your customer sees on the payment page such as line items, the\norder amount and currency, and acceptable payment methods. We enable cards and\nother common payment methods for you by default, and you can enable or disable\npayment methods directly in the [Stripe\nDashboard](https://dashboard.stripe.com/settings/payment_methods).\n\nServer\n### Define a product to sell\n\nAlways keep sensitive information about your product inventory, such as price\nand availability, on your server to prevent customer manipulation from the\nclient. Define product information when you create the Checkout Session using\n[predefined price\nIDs](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted#create-product-prices-upfront)\nor on the fly with\n[price_data](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items-price_data).\n\nServer\n### Choose a mode\n\nTo handle different transaction types, adjust the `mode` parameter. For one-time\npayments, use `payment`. To initiate recurring payments with\n[subscriptions](https://docs.stripe.com/billing/subscriptions/build-subscriptions?platform=web&ui=stripe-hosted),\nswitch the `mode` to `subscription`. And for [setting up future\npayments](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=stripe-hosted),\nset the `mode` to `setup`.\n\nServer\n### Supply success and cancel URLs\n\nSpecify URLs for success and cancel pages—make sure they’re publicly accessible\nso Stripe can redirect customers to them. You can also handle both the success\nand canceled states with the same URL.\n\nServer\n### Redirect to Checkout\n\nAfter creating the session, redirect your customer to the URL for the Checkout\npage returned in the response.\n\nServer2 Build your checkout\n### Add a success page\n\nCreate a success page for the URL you provided as the Checkout Session\n`success_url` to display order confirmation messaging or order details to your\ncustomer. Stripe redirects to this page after the customer successfully\ncompletes the checkout.\n\nClient\n### Add a canceled page\n\nAdd another page for `cancel_url`. Stripe redirects to this page when the\ncustomer clicks the back button in Checkout.\n\nClient\n### Add an order preview page\n\nFinally, add a page to show a preview of the customer’s order. Allow them to\nreview or modify their order—as soon as they’re sent to the Checkout page, the\norder is final and they can’t modify it without creating a new Checkout Session.\n\nClient\n### Add a checkout button\n\nAdd a button to your order preview page. When your customer clicks this button,\nthey’re redirected to the Stripe-hosted payment page.\n\nClient3 Test your page\n### Run the application\n\nStart your server and navigate to\n[http://localhost:4242/checkout.html](http://localhost:4242/checkout.html)\n\n`ruby server.rb`Client\n### Try it out\n\nClick the checkout button to be redirected to the Stripe Checkout page. Use any\nof these test cards to simulate a payment.\n\nPayment succeeds4242 4242 4242 4242Payment requires authentication4000 0025 0000\n3155Payment is declined4000 0000 0000 9995\n## Congratulations!\n\nYou have a basic Checkout integration working. Now learn how to customize the\nappearance of your checkout page and automate tax collection.\n\n### Customize the checkout page\n\nCustomize the appearance of the hosted Checkout page by:\n\n- Adding your logo and color theme in your [branding\nsettings](https://dashboard.stripe.com/settings/branding).\n- Using the [Checkout Sessions\nAPI](https://docs.stripe.com/api/checkout/sessions/create) to activate\nadditional features, like collecting addresses or prefilling customer data.\n\n### Automate tax collection\n\nCalculate and collect the right amount of tax on your Stripe transactions. Learn\nmore about [Stripe Tax](https://docs.stripe.com/tax) and how to [add it to\nCheckout](https://docs.stripe.com/tax/checkout).\n\n## Next steps\n\n#### [Fulfill orders](https://docs.stripe.com/checkout/fulfillment)\n\nSet up an event destination to fulfill orders after a payment succeeds and to\nhandle other critical events.\n\n#### [Receive payouts](https://docs.stripe.com/payouts)\n\nLearn how to move funds out of your Stripe account into your bank account.\n\n#### [Refund and cancel payments](https://docs.stripe.com/refunds)\n\nHandle requests for refunds by using the Stripe API or Dashboard.\n\n#### [Customer management](https://docs.stripe.com/customer-management)\n\nLet your customers self-manage their payment details, invoices, and\nsubscriptions.\n\n#### [Adaptive Pricing](https://docs.stripe.com/payments/checkout/adaptive-pricing)\n\nAutomatically present prices in your customer’s local currency.\n\nPreview\n### Stubborn Attachments\n\n##### $20.00\n\nCheckoutserver.rbcheckout.htmlsuccess.htmlcancel.htmlDownload\n```\nrequire 'stripe'require 'sinatra'\n# This test secret API key is a placeholder. Don't include personal details in requests with this key.# To see your test secret API key embedded in code samples, sign in to your Stripe account.# You can also find your test secret API key at https://dashboard.stripe.com/test/apikeys.Stripe.api_key = 'sk_test_BQokikJOvBiI2HlWgH4olfQ2'\nset :static, trueset :port, 4242\nYOUR_DOMAIN = 'http://localhost:4242'\npost '/create-checkout-session' do content_type 'application/json'\nsession = Stripe::Checkout::Session.create({ line_items: [{ # Provide the exact\nPrice ID (e.g. pr_1234) of the product you want to sell price: '{{PRICE_ID}}',\nquantity: 1, }], mode: 'payment', success_url: YOUR_DOMAIN + '/success.html',\ncancel_url: YOUR_DOMAIN + '/cancel.html', }) redirect session.url, 303end\n```\n\n## Links\n\n- [text version of this\nguide](https://docs.stripe.com/payments/accept-a-payment)\n- [View the text-based\nguide](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=checkout)\n- [Stripe Checkout](https://docs.stripe.com/payments/checkout)\n- [no-code options](https://docs.stripe.com/no-code)\n- [our partners](https://stripe.partners)\n- [Checkout Session](https://docs.stripe.com/api/checkout/sessions)\n- [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods)\n- [predefined price\nIDs](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted#create-product-prices-upfront)\n-\n[price_data](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items-price_data)\n-\n[subscriptions](https://docs.stripe.com/billing/subscriptions/build-subscriptions?platform=web&ui=stripe-hosted)\n- [setting up future\npayments](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=stripe-hosted)\n- [http://localhost:4242/checkout.html](http://localhost:4242/checkout.html)\n- [branding settings](https://dashboard.stripe.com/settings/branding)\n- [Checkout Sessions API](https://docs.stripe.com/api/checkout/sessions/create)\n- [Stripe Tax](https://docs.stripe.com/tax)\n- [add it to Checkout](https://docs.stripe.com/tax/checkout)\n- [Fulfill orders](https://docs.stripe.com/checkout/fulfillment)\n- [Receive payouts](https://docs.stripe.com/payouts)\n- [Refund and cancel payments](https://docs.stripe.com/refunds)\n- [Customer management](https://docs.stripe.com/customer-management)\n- [Adaptive Pricing](https://docs.stripe.com/payments/checkout/adaptive-pricing)",
  "metadata": {
    "title": "Stripe-hosted page | Stripe Documentation",
    "description": "",
    "sourceURL": "https://docs.stripe.com/checkout/quickstart"
  }
}