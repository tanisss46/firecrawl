{
  "content": "# Using roles in UI extensions\n\n## Learn how to include user roles in UI Extensions to tailor functionality to different roles.\n\nStripe Apps UI extensions can read the active user’s role in the Dashboard. Apps\ncan expose different functionality to different user roles.\n\nThe UI Extension SDK provides valuable information about the end user of your\napp. The `roles` field of the `userContext` object gives a list of the active\nuser’s roles. You can tailor the app’s content based on the user’s role, using\nthe roles in the user context.\n\n## How to determine the user’s Dashboard role\n\nExtensions have a `userContext` prop that’s populated with information about the\nactive Dashboard user. This object has a `roles` field, which is an array of\n`RoleDefinition` objects for each role that the active user is attributed to.\n\nA role definition has these fields:\n\nField nameTypeExampletype‘builtIn’ | ‘custom’builtInSpecifies the role type.\nCustom roles are only available to [private\napps](https://docs.stripe.com/stripe-apps/distribution-options#share-with-team-members).namestringDeveloperThe\nname of the user role.\nThe name field provides the name of the user role, and you can use it to modify\nthe functionality of your UI Extension.\n\n## Custom user roles (private apps only)\n\nEach role definition has a type field, which specifies the role type. The type\nfield can either be ‘builtIn’ or ‘custom’. Because custom roles are specific to\na given account, these roles are only available for private apps.\n\n## Tailoring content based on the Dashboard role\n\nA common use of this information is to conditionally display content based on\nthe user role. Below is an example app that shows content tailored to particular\nuser roles.\n\n```\nimport { Badge, Box, Inline, ContextView } from \"@stripe/ui-extension-sdk/ui\";\nimport type { ExtensionContextValue } from \"@stripe/ui-extension-sdk/context\";\n\nconst App = ({ userContext }: ExtensionContextValue) => {\nconst isAdmin = userContext?.roles?.some(role => role.name === 'Administrator');\nconst isDeveloper = !isAdmin && userContext?.roles?.some(role => role.name ===\n'Developer');\n const isaAnotherRole = !isDeveloper && !isAdmin;\n\n return (\n <ContextView\n title=\"Role based access\"\n >\n <Box>\n<Box css={{ paddingBottom: 'large'}}>Active user roles:\n{userContext?.roles?.map(role => <Badge\nkey={role.name}>{role.name}</Badge>)}</Box>\n\n{ isAdmin && (<Box>Only <Inline css={{ fontWeight: 'semibold' }}>admin</Inline>\nusers can see this message.</Box>) }\n{ isDeveloper && (<Box>Only <Inline css={{ fontWeight: 'semibold'\n}}>developers</Inline> users can see this message.</Box>) }\n{ isaAnotherRole && (<Box>Only users who are not admins or developers can see\nthis message.</Box>) }\n </Box>\n </ContextView>\n );\n};\n\nexport default App;\n\n```\n\n![A screenshot of the result of the example code above for an Administrator\nuser](https://b.stripecdn.com/docs-statics-srv/assets/roles-example.7fb1048ac4656aee8a39a33d9179ad26.png)\n\nThe result of the example app when viewing the app as an Administrator user\n\n## See also\n\n- [Build a UI](https://docs.stripe.com/stripe-apps/build-ui)\n- [Extension SDK API\nreference](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api)\n- [User roles](https://docs.stripe.com/get-started/account/teams/roles)\n\n## Links\n\n- [private\napps](https://docs.stripe.com/stripe-apps/distribution-options#share-with-team-members)\n- [Build a UI](https://docs.stripe.com/stripe-apps/build-ui)\n- [Extension SDK API\nreference](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api)\n- [User roles](https://docs.stripe.com/get-started/account/teams/roles)",
  "metadata": {
    "title": "Using roles in UI extensions | Stripe Documentation",
    "description": "Learn how to include user roles in UI Extensions to tailor functionality to different roles.",
    "sourceURL": "https://docs.stripe.com/stripe-apps/using-roles-in-ui-extensions"
  }
}