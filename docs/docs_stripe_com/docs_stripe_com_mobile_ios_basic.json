{
  "content": "# iOS basic integrationDeprecated\n\n## Accept cards and Apple Pay with the iOS SDK's prebuilt UI.\n\n#### Note\n\nWe created an improved [payments\nUI](https://docs.stripe.com/payments/accept-a-payment?platform=ios) for mobile\napps with features such as additional payment methods and SwiftUI support. We\nrecommend using it for your integration instead of this one.\n\nIf you want to migrate but are unable to, please [let us\nknow](https://github.com/stripe/stripe-ios/issues).\n\nUse this integration if you want a prebuilt UI that:\n\n- Accepts credit cards and Apple Pay\n- Saves and displays cards for reuse\n- Supports [limited\ncustomization](https://docs.stripe.com/mobile/ios/basic#theming) of fonts and\ncolors\n- Displays full-screen view controllers to collect payment details, shipping\naddress, and shipping method:\n\n![STPPaymentOptionsViewController](https://b.stripecdn.com/docs-statics-srv/assets/payment-options.2b2fc48bc62666a77af952501ae6e014.png)\n\n[STPPaymentOptionsViewController](https://stripe.dev/stripe-ios/docs/Classes/STPPaymentOptionsViewController.html)\n\n![STPAddCardViewController](https://b.stripecdn.com/docs-statics-srv/assets/add-card-vc.b44c275bc80072cf98eb0658bb8f5c51.png)\n\n[STPAddCardViewController](https://stripe.dev/stripe-ios/docs/Classes/STPAddCardViewController.html)\n\n![STPShippingAddressViewController](https://b.stripecdn.com/docs-statics-srv/assets/shipping-address.13f3a4bed7bcf89f36dd74e43b78986f.png)\n\n[STPShippingAddressViewController](https://stripe.dev/stripe-ios/docs/Classes/STPShippingAddressViewController.html)\n\nThese view controllers are also available to use individually—see the steps\nbelow for more details. This integration requires both server and client-side\nsteps to implement.\n\n#### Note\n\nCheck out the example [Basic Integration\napp](https://github.com/stripe/stripe-ios/tree/master/Example) and\n[backend](https://github.com/stripe/example-mobile-backend/blob/master/web.rb)\nfor a full implementation of this guide.\n\n[Set up\nStripeClient-sideServer-side](https://docs.stripe.com/mobile/ios/basic#setup-ios)\nFirst, you need a Stripe account. [Register\nnow](https://dashboard.stripe.com/register).\n\n### Server-side\n\nThis integration requires endpoints on your server that talk to the Stripe API.\nUse our official libraries for access to the Stripe API from your server:\n\n```\n# Available as a gem\nsudo gem install stripe\n```\n\n```\n# If you use bundler, you can add this line to your Gemfile\ngem 'stripe'\n```\n\n### Client-side\n\nThe [Stripe iOS SDK](https://github.com/stripe/stripe-ios) is open source,\n[fully documented](https://stripe.dev/stripe-ios/index.html), and compatible\nwith apps supporting iOS 13 or above.\n\nSwift Package ManagerCocoaPodsCarthageManual Framework\nTo install the SDK, follow these steps:\n\n- In Xcode, select **File** > **Add Package Dependencies…** and enter\n`https://github.com/stripe/stripe-ios-spm` as the repository URL.\n- Select the latest version number from our [releases\npage](https://github.com/stripe/stripe-ios/releases).\n- Add the **Stripe** product to the [target of your\napp](https://developer.apple.com/documentation/swift_packages/adding_package_dependencies_to_your_app).\n\n#### Note\n\nFor details on the latest SDK release and past versions, see the\n[Releases](https://github.com/stripe/stripe-ios/releases) page on GitHub. To\nreceive notifications when a new release is published, [watch\nreleases](https://help.github.com/en/articles/watching-and-unwatching-releases-for-a-repository#watching-releases-for-a-repository)\nfor the repository.\n\nConfigure the SDK with your Stripe [publishable\nkey](https://dashboard.stripe.com/test/apikeys) on app start. This enables your\napp to make requests to the Stripe API.\n\n```\nimport UIKit\nimport Stripe\n\n@main\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions\nlaunchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n StripeAPI.defaultPublishableKey = \"pk_test_TYooMQauvdEDq54NiTphI7jx\"\n // do any other necessary launch configuration\n return true\n }\n}\n```\n\n#### Note\n\nUse your [test mode](https://docs.stripe.com/keys#obtain-api-keys) keys while\nyou test and develop, and your [live\nmode](https://docs.stripe.com/keys#test-live-modes) keys when you publish your\napp.\n\n[Set up an ephemeral\nkeyClient-sideServer-side](https://docs.stripe.com/mobile/ios/basic#ephemeral-key)\nIn order for the SDK to save and retrieve credit cards for later use, create a\nsingle Stripe [Customer](https://docs.stripe.com/api/customers) object for each\nof your users. When you create a new user or account on your server, create a\ncorresponding Customer object at the same time, even if you don’t collect\npayment information from your users when they sign up. This ensures that your\napplication has a matching Customer for each user.\n\nFor security, the Customer API is not directly accessible from the client.\nInstead, your server provides the SDK with an ephemeral key—a short-lived API\nkey with restricted access to the Customer API. You can think of an ephemeral\nkey as a session, authorizing the SDK to retrieve and update a specific Customer\nobject for the duration of the session.\n\n### Server-side\n\nTo provide an ephemeral key to the SDK, you’ll need to expose a new API endpoint\non your backend. This endpoint should create an ephemeral key for the current\nStripe customer, and return the key’s unmodified response as JSON. When the SDK\nrequests an ephemeral key, it will specify the version of the Stripe API that it\nexpects the response to come from. Your endpoint must accept an `api_version`\nparameter, and use the specified API version when creating the ephemeral key.\nThis ensures that the SDK always receives the correct ephemeral key response\nfrom your backend. Consult our [Example\nBackend](https://github.com/stripe/example-mobile-backend/blob/9ac448f8b5d49175d26c7b77fd6bd3c88703e838/web.rb#L25-L40)\nto see this in practice.\n\n```\ncurl https://api.stripe.com/v1/ephemeral_keys \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"customer\"=\"{{CUSTOMER_ID}}\" \\\n -H \"Stripe-Version: {{API_VERSION}}\"\n```\n\n### Client-side\n\nIn your app, conform to the\n[STPCustomerEphemeralKeyProvider](https://stripe.dev/stripe-ios/docs/Protocols/STPCustomerEphemeralKeyProvider.html)\nprotocol by implementing its\n[createCustomerKeyWithAPIVersion](https://stripe.dev/stripe-ios/docs/Protocols/STPCustomerEphemeralKeyProvider.html#/c:objc(pl)STPCustomerEphemeralKeyProvider(im)createCustomerKeyWithAPIVersion:completion:)\nmethod. This method requests an ephemeral key from the endpoint you created on\nthe backend.\n\nWhen implementing this method, be sure to pass the `apiVersion` parameter along\nto your ephemeral keys endpoint. Consult the [API\nclient](https://github.com/stripe/stripe-ios/tree/master/Example/Basic%20Integration/Basic%20Integration/MyAPIClient.swift)\nin our example app to see this in practice.\n\n```\nimport Stripe\n\nclass MyAPIClient: NSObject, STPCustomerEphemeralKeyProvider {\n\nfunc createCustomerKey(withAPIVersion apiVersion: String, completion: @escaping\nSTPJSONResponseCompletionBlock) {\n let url = self.baseURL.appendingPathComponent(\"ephemeral_keys\")\nvar urlComponents = URLComponents(url: url, resolvingAgainstBaseURL: false)!\nurlComponents.queryItems = [URLQueryItem(name: \"api_version\", value:\napiVersion)]\n var request = URLRequest(url: urlComponents.url!)\n request.httpMethod = \"POST\"\nlet task = URLSession.shared.dataTask(with: request, completionHandler: { (data,\nresponse, error) in\n guard let response = response as? HTTPURLResponse,\n response.statusCode == 200,\n let data = data,\nlet json = ((try? JSONSerialization.jsonObject(with: data, options: []) as?\n[String : Any]) as [String : Any]??) else {\n completion(nil, error)\n return\n }\n completion(json, nil)\n })\n task.resume()\n }\n}\n```\n\n[Set up an\nSTPCustomerContextClient-side](https://docs.stripe.com/mobile/ios/basic#set-up-customer-context)\nNext, initialize an\n[STPCustomerContext](http://stripe.dev/stripe-ios/docs/Classes/STPCustomerContext.html)\nwith the `STPCustomerEphemeralKeyProvider` you created in the previous step.\n\nA `CustomerSession` talks to your backend to retrieve an ephemeral key for your\nCustomer with its `STPCustomerEphemeralKeyProvider`, and uses that key to manage\nretrieving and updating the Customer’s payment methods on your behalf.\n\n```\n// MyAPIClient implements STPCustomerEphemeralKeyProvider (see above)\nlet customerContext = STPCustomerContext(keyProvider: MyAPIClient())\n```\n\nTo reduce load times, preload your customer’s information by initializing\n`STPCustomerContext` before they enter your payment flow.\n\nIf your current user logs out of the app and a new user logs in, create a new\ninstance of `STPCustomerContext` or clear the cached customer using the provided\n[clearCachedCustomer](https://stripe.dev/stripe-ios/docs/Classes/STPCustomerContext.html#/c:objc(cs)STPCustomerContext(im)clearCache)\nmethod. On your backend, create and return a new ephemeral key for the Customer\nobject associated with the new user.\n\n[Set up an\nSTPPaymentContextClient-side](https://docs.stripe.com/mobile/ios/basic#initialize-payment-context)\nOnce you’ve set up your customer context, you can use it to initialize\n[STPPaymentContext](https://stripe.dev/stripe-ios/docs/Classes/STPPaymentContext.html),\nthe core class of the integration. Conform a class to\n[STPPaymentContextDelegate](https://stripe.dev/stripe-ios/docs/Protocols/STPPaymentContextDelegate.html)\nand assign it to the payment context’s `delegate` and `hostViewController`\nproperties. We recommend using your app’s checkout screen `UIViewController`. In\nthe next steps, you will implement the `STPPaymentContext` delegate methods.\n\nYou should also set the payment context’s `paymentAmount` property, which will\nbe displayed to your user in the Apple Pay dialog (you can change this later, if\nthe amount of the user’s purchase changes).\n\n```\ninit() {\n self.paymentContext = STPPaymentContext(customerContext: customerContext)\n super.init(nibName: nil, bundle: nil)\n self.paymentContext.delegate = self\n self.paymentContext.hostViewController = self\nself.paymentContext.paymentAmount = 5000 // This is in cents, that is, 50 USD\n}\n```\n\n[Handle the user's payment\nmethodClient-side](https://docs.stripe.com/mobile/ios/basic#handle-payment-method)\nIn your checkout screen, add a button to let the customer enter or change their\npayment method. When tapped, use `STPPaymentContext` to push or present an\n[STPPaymentOptionsViewController](https://stripe.dev/stripe-ios/docs/Classes/STPPaymentOptionsViewController.html)\non the payment context’s `hostViewController`.\n\n```\n// If you prefer a modal presentation\nfunc choosePaymentButtonTapped() {\n self.paymentContext.presentPaymentOptionsViewController()\n}\n\n// If you prefer a navigation transition\nfunc choosePaymentButtonTapped() {\n self.paymentContext.pushPaymentOptionsViewController()\n}\n```\n\n![STPPaymentOptionsViewController](https://b.stripecdn.com/docs-statics-srv/assets/payment-options.2b2fc48bc62666a77af952501ae6e014.png)\n\n[STPPaymentOptionsViewController](https://stripe.dev/stripe-ios/docs/Classes/STPPaymentOptionsViewController.html)\n\n![STPAddCardViewController](https://b.stripecdn.com/docs-statics-srv/assets/add-card-vc.b44c275bc80072cf98eb0658bb8f5c51.png)\n\n[STPAddCardViewController](https://stripe.dev/stripe-ios/docs/Classes/STPAddCardViewController.html)\n\n`STPPaymentOptionsViewController` uses `STPCustomerContext` to display a\nCustomer’s payment methods. If there are no stored payment methods or the **Add\nNew Card** button is tapped, `STPAddCardViewController` is displayed. You can\nalso initialize and display these view controllers without using\n`STPPaymentContext`.\n\n### - paymentContextDidChange:\n\nThis [STPPaymentContext delegate\nmethod](https://stripe.dev/stripe-ios/docs/Protocols/STPPaymentContextDelegate.html#/c:objc(pl)STPPaymentContextDelegate(im)paymentContextDidChange:)\ntriggers when the content of the payment context changes, like when the user\nselects a new payment method or enters shipping information. This is a good\nplace to update your UI:\n\n```\nfunc paymentContextDidChange(_ paymentContext: STPPaymentContext) {\n self.activityIndicator.animating = paymentContext.loading\n self.paymentButton.enabled = paymentContext.selectedPaymentOption != nil\n self.paymentLabel.text = paymentContext.selectedPaymentOption?.label\n self.paymentIcon.image = paymentContext.selectedPaymentOption?.image\n}\n```\n\n[Handle the user's shipping\ninfoClient-side](https://docs.stripe.com/mobile/ios/basic#handle-shipping-info)\nIf your user needs to enter or change their shipping address and shipping\nmethod, `STPPaymentContext` can do this for you automatically.\n`STPPaymentContext` will save shipping info to the Stripe customer when your\nuser updates their information, and automatically prefill the shipping view\ncontroller for future purchases. Note that you should not rely on the shipping\ninformation stored on the Stripe customer for order fulfillment, as your user\nmay change this information if they make multiple purchases. We recommend adding\nshipping information when you create a\n[PaymentIntent](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-shipping)\nobject (which can also help prevent fraud), or when saving it to your own\ndatabase. When presenting the shipping view controller, you can specify whether\nyou’d like it presented modally, or pushed onto a `UIController`\nstack:\n\n```\n// If you prefer a modal presentation\nfunc shippingButtonTapped() {\n self.paymentContext.presentShippingViewController()\n}\n\n// If you prefer a navigation transition\nfunc shippingButtonTapped() {\n self.paymentContext.pushShippingViewController()\n}\n```\n\nThis sets up and presents an\n[STPShippingAddressViewController](http://stripe.dev/stripe-ios/docs/Classes/STPShippingAddressViewController.html)\non the payment context’s `hostViewController`. Once the user enters a valid\nshipping address, they’re taken to an\n[STPShippingMethodsViewController](http://stripe.dev/stripe-ios/docs/Classes/STPShippingMethodsViewController.html).\nAfter they select a shipping method, both view controllers are dismissed or\npopped off the `hostViewController`’s stack.\n\n![STPShippingAddressViewController](https://b.stripecdn.com/docs-statics-srv/assets/shipping-address.13f3a4bed7bcf89f36dd74e43b78986f.png)\n\n[STPShippingAddressViewController](https://stripe.dev/stripe-ios/docs/Classes/STPShippingAddressViewController.html)\n\n[STPShippingMethodsViewController](https://stripe.dev/stripe-ios/docs/Classes/STPShippingMethodsViewController.html)\n\n### - paymentContext:didUpdateShippingAddress:completion:\n\nThis method is called after your user enters a shipping address. Validate the\nreturned `address` and determine the shipping methods available for that\naddress.\n\nIf the address is valid, call the provided `completion` block with a status of\n`STPShippingStatusValid`, `nil` for the error argument, an array of shipping\nmethods, and a selected shipping method. If you don’t need to collect a shipping\nmethod, pass `nil` for the shipping methods and selected shipping method. If the\naddress is invalid, call the `completion` block with a status of\n`STPShippingStatusInvalid`, an error object describing the issue with the\naddress, and `nil` for the shipping methods and selected shipping method. Note\nthat providing an error object is optional—if you omit it, the user sees an\nalert with the message “Invalid Shipping Address.”\n\n```\nfunc paymentContext(_ paymentContext: STPPaymentContext,\ndidUpdateShippingAddress address: STPAddress, completion: @escaping\nSTPShippingMethodsCompletionBlock) {\n let upsGround = PKShippingMethod()\n upsGround.amount = 0\n upsGround.label = \"UPS Ground\"\n upsGround.detail = \"Arrives in 3-5 days\"\n upsGround.identifier = \"ups_ground\"\n let fedEx = PKShippingMethod()\n fedEx.amount = 5.99\n fedEx.label = \"FedEx\"\n fedEx.detail = \"Arrives tomorrow\"\n fedEx.identifier = \"fedex\"\n\n if address.country == \"US\" {\n completion(.valid, nil, [upsGround, fedEx], upsGround)\n }\n else {\n completion(.invalid, nil, nil, nil)\n }\n}\n```\n\n[Submit the\npaymentClient-sideServer-side](https://docs.stripe.com/mobile/ios/basic#submit-payment)\nWhen your user is ready to pay (for example, they tap the **Buy** button) call\n`requestPayment` on your payment context. It displays any required UI (such as\nthe Apple Pay dialog) and calls the appropriate methods on its delegate as your\nuser finishes their payment.\n\n```\nfunc payButtonTapped() {\n self.paymentContext.requestPayment()\n}\n```\n\n### - paymentContext:didCreatePaymentResult:completion:\n\nThis method is called when the customer has successfully selected a payment\nmethod. Submit the payment to Stripe using a [Payment\nIntent](https://docs.stripe.com/payments/payment-intents). Stripe uses this\npayment object to track and handle all the states of the payment until the\npayment completes.\n\n### Server-side\n\nOn your server, make an endpoint that creates a `PaymentIntent` with an amount\nand currency and returns its [client\nsecret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret)\nto your client.\n\nAlways decide how much to charge on the server side, a trusted environment, as\nopposed to the client. This prevents malicious customers from being able to\nchoose their own prices.\n\n```\ncurl https://api.stripe.com/v1/payment_intents \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"amount\"=1099 \\\n -d \"currency\"=\"usd\"\n```\n\n### Client-side\n\nOn the client, implement this delegate method to:\n\n- Request a `PaymentIntent` from your server.\n- Assemble a\n[STPPaymentIntentParams](https://stripe.dev/stripe-ios/stripe-payments/Classes/STPPaymentIntentParams.html)\nobject with the `PaymentIntent` client secret from your server and the\n[paymentMethod](https://stripe.dev/stripe-ios/docs/Classes/STPPaymentResult.html#/c:objc(cs)STPPaymentResult(py)paymentMethod)\nprovided by the delegate method.\n- Call the [STPPaymentHandler\nconfirmPayment](https://stripe.dev/stripe-ios/stripe-payments/Classes/STPPaymentHandler.html#/c:@M@StripePayments@objc(cs)STPPaymentHandler(im)confirmPayment:withAuthenticationContext:completion:)\nmethod to [confirm](https://docs.stripe.com/api/payment_intents/confirm) the\npayment, passing the `STPPaymentContext` as the\n[authenticationContext](https://stripe.dev/stripe-ios/stripe-payments/Protocols/STPAuthenticationContext.html).\n\n```\nfunc paymentContext(_ paymentContext: STPPaymentContext,\n didCreatePaymentResult paymentResult: STPPaymentResult,\n completion: @escaping STPErrorBlock) {\n // Request a PaymentIntent from your backend\nMyAPIClient.sharedClient.createPaymentIntent(products: self.products,\nshippingMethod: paymentContext.selectedShippingMethod) { result in\n switch result {\n case .success(let clientSecret):\n // Assemble the PaymentIntent parameters\nlet paymentIntentParams = STPPaymentIntentParams(clientSecret: clientSecret)\npaymentIntentParams.paymentMethodId = paymentResult.paymentMethod.stripeId\n\n // Confirm the PaymentIntent\nSTPPaymentHandler.shared().confirmPayment(paymentIntentParams, with:\npaymentContext) { status, paymentIntent, error in\n switch status {\n case .succeeded:\n// Your backend asynchronously fulfills the customer's order, for example, via\nwebhook\n completion(.success, nil)\n case .failed:\n completion(.error, error) // Report error\n case .canceled:\n completion(.userCancellation, nil) // Customer canceled\n @unknown default:\n completion(.error, nil)\n }\n }\n case .failure(let error):\n completion(.error, error) // Report error from your API\n break\n }\n }\n}\n```\n\nYou must call the provided `completion` block with the appropriate\n`STPPaymentStatus` (`.success`, `.error`, or .`userCancellation`) when the\ncustomer’s payment is finished.\n\n### - paymentContext:didFinishWithStatus:error:\n\nThis method is called after the previous method, when any auxiliary UI that has\nbeen displayed (such as the Apple Pay dialog) has been dismissed. You should\ninspect the returned `status` and show an appropriate message to your user. For\nexample:\n\n```\nfunc paymentContext(_ paymentContext: STPPaymentContext,\n didFinishWithStatus status: STPPaymentStatus,\n error: Error?) {\n\n switch status {\n case .error:\n self.showError(error)\n case .success:\n self.showReceipt()\n case .userCancellation:\n return // Do nothing\n }\n}\n```\n\n### - paymentContext:didFailToLoadWithError:\n\nThis method is called in the rare case that the payment context’s initial\nloading call fails, usually due to lack of internet connectivity. You should\ndismiss your checkout page when this occurs and invite the user to try again.\nYou can also optionally attempt to try again by calling `retryLoading` on the\npayment context.\n\n```\nfunc paymentContext(_ paymentContext: STPPaymentContext,\n didFailToLoadWithError error: Error) {\n self.navigationController?.popViewController(animated: true)\n // Show the error to your user, and so on\n}\n```\n\n[Test the integration](https://docs.stripe.com/mobile/ios/basic#test)\n​​Several test cards are available for you to use in a sandbox to make sure this\nintegration is ready. Use them with any CVC and an expiration date in the\nfuture.\n\nNumberDescription4242424242424242Succeeds and immediately processes the\npayment.4000002500003155Requires authentication. Stripe triggers a modal asking\nfor the customer to authenticate.4000000000009995Always fails with a decline\ncode of `insufficient_funds`.\nFor the full list of test cards see our guide on\n[testing](https://docs.stripe.com/testing).\n\n[OptionalHandle post-payment\nevents](https://docs.stripe.com/mobile/ios/basic#fulfillment)[OptionalSet up\nApple\nPayClient-side](https://docs.stripe.com/mobile/ios/basic#set-up-apple-pay)[OptionalCustomize\nthe UIClient-side](https://docs.stripe.com/mobile/ios/basic#theming)\n## See also\n\n- [About Stripe payments](https://docs.stripe.com/payments/about)\n- [The Payment Intents API](https://docs.stripe.com/payments/payment-intents)\n- [Stripe iOS SDK Reference](https://stripe.dev/stripe-ios/)\n\n## Links\n\n- [payments UI](https://docs.stripe.com/payments/accept-a-payment?platform=ios)\n- [let us know](https://github.com/stripe/stripe-ios/issues)\n-\n[STPPaymentOptionsViewController](https://stripe.dev/stripe-ios/docs/Classes/STPPaymentOptionsViewController.html)\n-\n[STPAddCardViewController](https://stripe.dev/stripe-ios/docs/Classes/STPAddCardViewController.html)\n-\n[STPShippingAddressViewController](https://stripe.dev/stripe-ios/docs/Classes/STPShippingAddressViewController.html)\n- [Basic Integration\napp](https://github.com/stripe/stripe-ios/tree/master/Example)\n- [backend](https://github.com/stripe/example-mobile-backend/blob/master/web.rb)\n- [Register now](https://dashboard.stripe.com/register)\n- [Stripe iOS SDK](https://github.com/stripe/stripe-ios)\n- [fully documented](https://stripe.dev/stripe-ios/index.html)\n- [releases page](https://github.com/stripe/stripe-ios/releases)\n- [target of your\napp](https://developer.apple.com/documentation/swift_packages/adding_package_dependencies_to_your_app)\n- [watch\nreleases](https://help.github.com/en/articles/watching-and-unwatching-releases-for-a-repository#watching-releases-for-a-repository)\n- [publishable key](https://dashboard.stripe.com/test/apikeys)\n- [test mode](https://docs.stripe.com/keys#obtain-api-keys)\n- [live mode](https://docs.stripe.com/keys#test-live-modes)\n- [Customer](https://docs.stripe.com/api/customers)\n- [Example\nBackend](https://github.com/stripe/example-mobile-backend/blob/9ac448f8b5d49175d26c7b77fd6bd3c88703e838/web.rb#L25-L40)\n-\n[STPCustomerEphemeralKeyProvider](https://stripe.dev/stripe-ios/docs/Protocols/STPCustomerEphemeralKeyProvider.html)\n-\n[createCustomerKeyWithAPIVersion](https://stripe.dev/stripe-ios/docs/Protocols/STPCustomerEphemeralKeyProvider.html#/c:objc(pl)STPCustomerEphemeralKeyProvider(im)createCustomerKeyWithAPIVersion:completion:)\n- [API\nclient](https://github.com/stripe/stripe-ios/tree/master/Example/Basic%20Integration/Basic%20Integration/MyAPIClient.swift)\n- [View full\nsample](https://github.com/stripe/stripe-ios/blob/21.4.0/Example/Basic%20Integration/Basic%20Integration/MyAPIClient.swift#L77-L101)\n-\n[STPCustomerContext](http://stripe.dev/stripe-ios/docs/Classes/STPCustomerContext.html)\n-\n[clearCachedCustomer](https://stripe.dev/stripe-ios/docs/Classes/STPCustomerContext.html#/c:objc(cs)STPCustomerContext(im)clearCache)\n-\n[STPPaymentContext](https://stripe.dev/stripe-ios/docs/Classes/STPPaymentContext.html)\n-\n[STPPaymentContextDelegate](https://stripe.dev/stripe-ios/docs/Protocols/STPPaymentContextDelegate.html)\n- [STPPaymentContext delegate\nmethod](https://stripe.dev/stripe-ios/docs/Protocols/STPPaymentContextDelegate.html#/c:objc(pl)STPPaymentContextDelegate(im)paymentContextDidChange:)\n-\n[PaymentIntent](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-shipping)\n-\n[STPShippingAddressViewController](http://stripe.dev/stripe-ios/docs/Classes/STPShippingAddressViewController.html)\n-\n[STPShippingMethodsViewController](http://stripe.dev/stripe-ios/docs/Classes/STPShippingMethodsViewController.html)\n-\n[STPShippingMethodsViewController](https://stripe.dev/stripe-ios/docs/Classes/STPShippingMethodsViewController.html)\n- [Payment Intent](https://docs.stripe.com/payments/payment-intents)\n- [client\nsecret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret)\n-\n[STPPaymentIntentParams](https://stripe.dev/stripe-ios/stripe-payments/Classes/STPPaymentIntentParams.html)\n-\n[paymentMethod](https://stripe.dev/stripe-ios/docs/Classes/STPPaymentResult.html#/c:objc(cs)STPPaymentResult(py)paymentMethod)\n- [STPPaymentHandler\nconfirmPayment](https://stripe.dev/stripe-ios/stripe-payments/Classes/STPPaymentHandler.html#/c:@M@StripePayments@objc(cs)STPPaymentHandler(im)confirmPayment:withAuthenticationContext:completion:)\n- [confirm](https://docs.stripe.com/api/payment_intents/confirm)\n-\n[authenticationContext](https://stripe.dev/stripe-ios/stripe-payments/Protocols/STPAuthenticationContext.html)\n- [testing](https://docs.stripe.com/testing)\n- [About Stripe payments](https://docs.stripe.com/payments/about)\n- [Stripe iOS SDK Reference](https://stripe.dev/stripe-ios/)",
  "metadata": {
    "title": "iOS basic integration | Stripe Documentation",
    "description": "Accept cards and Apple Pay with the iOS SDK's prebuilt UI.",
    "sourceURL": "https://docs.stripe.com/mobile/ios/basic"
  }
}