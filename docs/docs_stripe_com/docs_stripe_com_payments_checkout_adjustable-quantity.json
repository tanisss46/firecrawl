{
  "content": "# Make line item quantities adjustable\n\n## Enable your customers to adjust the quantity of items during checkout.\n\nStripe-hosted pageEmbedded formEmbedded componentsPublic preview\nThe line items for each [Checkout\nSession](https://docs.stripe.com/api/checkout/sessions) keep track of what your\ncustomer is purchasing. You can configure the Checkout Session so customers can\nadjust line item quantities during checkout.\n\n## Create a Checkout Session with an adjustable quantity\n\nSet `adjustable_quantity` on your `line_items` when creating a Checkout Session\nto enable your customers to update the quantity of an item during checkout.\n\nYou can customize the default settings for the minimum and maximum quantities\nallowed by setting `adjustable_quantity.minimum` and\n`adjustable_quantity.maximum`. By default, an item’s minimum adjustable quantity\nis `0` and the maximum adjustable quantity is `99`. You can specify a value of\nup to `999999` for `adjustable_quantity.maximum`.\n\nWhen using adjustable quantities with a `line_items[].quantity` value greater\nthan `99` (the default adjustable maximum), set `adjustable_quantity.maximum` to\nbe greater than or equal to that item’s quantity.\n\nIf you use adjustable quantities, change your configuration so that it uses\n`adjustable_quantity.maximum` when creating the Checkout Session to reserve\ninventory quantity instead of the `line_items` quantity.\n\nCheckout prevents the customer from removing an item if it is the only item\nremaining.\n\n```\ncurl https://api.stripe.com/v1/checkout/sessions \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d \"line_items[0][price_data][currency]\"=usd \\\n -d \"line_items[0][price_data][product_data][name]\"=T-shirt \\\n -d \"line_items[0][price_data][unit_amount]\"=2000 \\\n -d \"line_items[0][price_data][tax_behavior]\"=exclusive \\\n -d \"line_items[0][adjustable_quantity][enabled]\"=true \\\n -d \"line_items[0][adjustable_quantity][minimum]\"=1 \\\n -d \"line_items[0][adjustable_quantity][maximum]\"=10 \\\n -d \"line_items[0][quantity]\"=1 \\\n -d \"automatic_tax[enabled]\"=true \\\n -d mode=payment \\\n --data-urlencode success_url=\"https://example.com/success\" \\\n --data-urlencode cancel_url=\"https://example.com/cancel\"\n```\n\n## Handle completed transactions\n\nAfter the payment completes, you can make a request for the finalized [line\nitems](https://docs.stripe.com/api/checkout/sessions/line_items) and their\nquantities. If your customer removes a line item, it is also removed from the\nline items response. See the [Fulfillment\nguide](https://docs.stripe.com/checkout/fulfillment) to learn how to create an\nevent handler to handle completed Checkout Sessions.\n\n#### Note\n\nTo test your event handler, [install the Stripe\nCLI](https://docs.stripe.com/stripe-cli) and use `stripe listen --forward-to\nlocalhost:4242/webhook` to [forward events to your local\nserver](https://docs.stripe.com/webhooks#test-webhook).\n\n```\n# Set your secret key. Remember to switch to your live secret key in production!\n# See your keys here: https://dashboard.stripe.com/apikeys\nStripe.api_key = \"sk_test_BQokikJOvBiI2HlWgH4olfQ2\"\n\nrequire 'sinatra'\n\n# You can find your endpoint's secret in your webhook settings\nendpoint_secret = 'whsec_...'\n\npost '/webhook' do\n event = nil\n\n # Verify webhook signature and extract the event\n # See https://stripe.com/docs/webhooks#verify-events for more information.\n begin\n sig_header = request.env['HTTP_STRIPE_SIGNATURE']\n payload = request.body.read\nevent = Stripe::Webhook.construct_event(payload, sig_header, endpoint_secret)\n rescue JSON::ParserError => e\n # Invalid payload\n return status 400\n rescue Stripe::SignatureVerificationError => e\n # Invalid signature\n return status 400\n end\n\n if event['type'] == 'checkout.session.completed'\n checkout_session = event['data']['object']\n\nline_items = Stripe::Checkout::Session.list_line_items(checkout_session['id'],\n{limit: 100})\n\n # Fulfill the purchase...\n begin\n fulfill_order(checkout_session, line_items)\n rescue NotImplementedError => e\n return status 400\n end\n end\n\n status 200\nend\n\ndef fulfill_order(checkout_session, line_items)\n # TODO: Remove error and implement...\n raise NotImplementedError.new(<<~MSG)\nGiven the Checkout Session \"#{checkout_session.id}\" load your internal order\nfrom the database here.\nThen you can reconcile your order's quantities with the final line item quantity\npurchased. You can use `checkout_session.metadata` and `price.metadata` to store\nand later reference your internal order and item ids.\n MSG\nend\n```\n\n## Links\n\n- [Checkout Session](https://docs.stripe.com/api/checkout/sessions)\n- [https://example.com/success](https://example.com/success)\n- [https://example.com/cancel](https://example.com/cancel)\n- [line items](https://docs.stripe.com/api/checkout/sessions/line_items)\n- [Fulfillment guide](https://docs.stripe.com/checkout/fulfillment)\n- [install the Stripe CLI](https://docs.stripe.com/stripe-cli)\n- [forward events to your local\nserver](https://docs.stripe.com/webhooks#test-webhook)\n- [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys)\n-\n[https://stripe.com/docs/webhooks#verify-events](https://stripe.com/docs/webhooks#verify-events)",
  "metadata": {
    "title": "Make line item quantities adjustable | Stripe Documentation",
    "description": "Enable your customers to adjust the quantity of items during checkout.",
    "sourceURL": "https://docs.stripe.com/payments/checkout/adjustable-quantity"
  }
}