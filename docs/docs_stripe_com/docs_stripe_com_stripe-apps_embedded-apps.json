{
  "content": "# Embedded Stripe Apps integration guidePrivate preview\n\n## Use embedded components for Stripe Apps to allow your customers to manage payments data in third party applications.\n\nCustomers expect their payments data to be readily available in the tools\nthey’re already using to complete their business workflows. Embedded components\nfor Apps allow your customers to use third party applications in Stripe.\n\nWith embedded components for Apps, you can embed integrations built for Stripe\ninto your platform, and allow your customers to use their preferred third party\napplications without leaving Stripe. Use prebuilt UI components that sync data\ndirectly with applications such as QuickBooks and Xero.\n\n[Integrate with Connect embedded\ncomponents](https://docs.stripe.com/stripe-apps/embedded-apps#integrate-connect-js)\n[Set up\nConnect.js](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions)\nto enable the ability to add connected account dashboard functionality to your\nwebsite.\n\n[Select the app to\nintegrate](https://docs.stripe.com/stripe-apps/embedded-apps#app-select)\nStripe supports the following app integrations.\n\nApp integrationApp ID[QuickBooks Sync by\nAcodei](https://docs.stripe.com/stripe-apps/embedded-apps/accounting-integrations#quickbooks-sync-by-acodei)com.example.acodeistripeapp[Xero\nsync by\nXero](https://docs.stripe.com/stripe-apps/embedded-apps/accounting-integrations#xero)com.xero.stripeapp[Mailchimp](https://docs.stripe.com/stripe-apps/embedded-apps/marketing-integrations#mailchimp)mailchimp[Set\nup app\ninstallation](https://docs.stripe.com/stripe-apps/embedded-apps#app-install)\nRender the app install embedded component for your selected app. App\ninstallation grants permission for the third party app to access your users’\nStripe data, creating a connection between your platform, Stripe, and the third\nparty app. The component has two states: `uninstalled` and `installed`. Listen\nto install event triggers to build your custom UX flow or make updates in your\nown back end.\n\nWhen [creating an Account\nSession](https://docs.stripe.com/api/account_sessions/create), enable app\ninstallation and rendering by specifying `app_install`, and `app_viewport` in\nthe `components` parameter. You must enable the app you want to render by\nspecifying the `features` parameter under `allowed_apps`.\n\n```\ncurl https://api.stripe.com/v1/account_sessions \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -H \"Stripe-Version: 2025-02-24.acacia; embedded_connect_beta=v2;\" \\\n -d account={{CONNECTED_ACCOUNT_ID}} \\\n -d \"components[app_install][enabled]\"=true \\\n -d \"components[app_install][features][allowed_apps][]\"=APP_ID \\\n -d \"components[app_viewport][enabled]\"=true \\\n -d \"components[app_viewport][features][allowed_apps][]\"=APP_ID\n```\n\nAfter creating the account session and [initializing\nConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions),\nyou can render the App install component in the front end:\n\n```\nconst appInstall = stripeConnectInstance.create('app-install');\nappViewport.setApp('{{APP_ID}}');\ncontainer.appInstall(appViewport);\n```\n\nThis embedded component supports the following parameters:\n\nHTML + JSReactMethodTypeDescription`setApp``string`Sets the ID of the App your\nconnected account can install. See the list of [available\napps](https://docs.stripe.com/stripe-apps/embedded-apps#app-select).\nYou can configure custom behavior based on the current or updated state of an\ninstall. To do so, set a custom callback function using the following methods:\n\nHTML + JSReactMethodDescriptionVariables`setOnAppInstallStateFetched`Allows\nusers to specify custom behavior in a callback function on install fetch.-\n`response.appId`: The app installed\n- `response.state`: The state of the install `INSTALLED | UNINSTALLED`\n`setOnAppInstallStateChanged`Allows users to specify custom behavior in a\ncallback function when the install state has changed.- `response.appId`: The app\ninstalled\n- `response.state`: The state of the install `INSTALLED | UNINSTALLED`\n[Set up app\nsettings](https://docs.stripe.com/stripe-apps/embedded-apps#app-viewport)\nRender the app viewport embedded component for your selected app to enable core\napp functionality, including connection to the app’s software account with\nOAuth, onboarding, settings, and configuration for the service and\nsynchronization states of transactions. Pass the `user_id` (business represented\non your platform) as an optional HTML attribute that third party apps can use to\nbuild a dynamic URL that redirects back to your user dashboard after OAuth.\n\n```\nconst appViewport = stripeConnectInstance.create('app-viewport');\nappViewport.setApp('{{APP_ID}}');\nappViewport.setAppData({userId: '{{PLATFORM_USER_ID}}'});\ncontainer.appendChild(appViewport);\n```\n\nThis embedded component supports the following parameters:\n\nHTML + JSReactMethodTypeDescription`setApp``string`Sets the ID of the App your\nconnected account can render. See available apps in the [Embedded Stripe Apps\nintegration\nguide](https://docs.stripe.com/stripe-apps/embedded-apps#app-select).`setAppData``Record<String,\nString>`Sets data pertaining to your platform consumed by the App.[Customize for\nConnect destination on behalf of\n(OBO)](https://docs.stripe.com/stripe-apps/embedded-apps#destination-obo)\nPass required and optional transaction data to your selected app by updating the\ndestination charge on the connected account using the data standardized data\nschema below. You must pass a\n[Customer](https://docs.stripe.com/api/customers/object) object to the\ndestination charge. You have three scenarios that require you to update your\ndestination charge:\n\n- One-time payment complete\n- Recurring payment complete\n- Payment refunded\nAccountingMarketingField or key nameFormat (standard CSV rules\napply)DescriptionRequired[charges.customer](https://docs.stripe.com/api/charges/object#charge_object-customer)String\n(ID)Stripe Customer ID (belonging to the connected account) attached to a\ndestination `Charge` object. Transactions don’t sync to apps (such as Xero and\nQBO) if this field isn’t\npresent.Required[customer.name](https://docs.stripe.com/api/customers/object#customer_object-name)StringCustomer’s\nfull\nname[customer.email](https://docs.stripe.com/api/customers/object#customer_object-email)StringCustomer’s\nemail\naddress[customer.address.<>](https://docs.stripe.com/api/customers/object#customer_object-address)String\n(multi-field)Customer’s physical address (can be used for both billing and\nshipping)`charges.metadata.[refund_amount]`String (cents integer)Mirroring\n[charges.amount_refunded](https://docs.stripe.com/api/charges/object#charge_object-amount_refunded)\nin base currency sub-units (‘350’ = 3.50 USD)Required by Quickbooks Online sync\nby Acodei`charges.metadata.[refund_reason]`stringReason for the\nrefund`charges.metadata.[currency_converted]``true` | `false` | `null`Set to\n`true` if currency has been converted, for example, if the presentment currency\ndiffers from the settlement currencyRequired by Quickbooks Online sync by Acodei\nif using fees_names\nmetadata`customer.metadata.[platform_customer_ID]`StringCustomer ID as recorded\nin the platform’s system*`charges.metadata.[platform_product_ID]`String, CSV\nmultiple productsProduct IDs as recorded in the platform’s\nsystem`charges.metadata.[platform_product_name]`String, CSV multiple\nproductsProduct name as recorded in the platform’s\nsystem`charges.metadata.[platform_product_quantity]`String, CSV multiple\nproductsQuantity of each product corresponding to the ID and name\narray`charges.metadata.[platform_product_value]`Integer, CSV multiple\nproductsThe individual product value (price or cost) corresponding to the\nProduct ID and name. Base currency sub-units (‘350’ = 3.50\nUSD)`charges.metadata.[platform_product_tag]`String, CSV multiple\nproductsProduct tag or category corresponding to the ID and name\narray`charges.metadata.[platform_order_ID]`StringOrder ID as recorded in the\nplatform’s system`charges.metadata.[platform_charge_ID]`StringCharge or\ntransaction ID as recorded in the platform’s system and visible to the\nbusiness`charges.metadata.[fees_names]`String, CSV multiple feesName of fees the\nuser is paying (expense) of any kind related to the transaction that aren’t\ncaptured in the Charge (for example, credit processing fee or platform fee) If\nthis field is populated, the charges.application_fee is\nignored.`charges.metadata.[fees_values]`Integer, CSV multiple feesValues of fees\nthe user is paying (expense) of any kind related to the transaction that aren’t\ncaptured in the charge—for example, the credit processing fee or platform fee.\nBase currency sub-units (‘350’ = 350\nUSD)`charges.metadata.[revenues_names]`String, CSV multiple revenuesFees\n(revenues) collected by the business related to this transaction (charge) that\naren’t captured in the charge (for example, a convenience fee or\ntips)`charges.metadata.[revenues_values]`Integer, CSV multiple revenuesValues of\nfees (revenues) collected by the business related to this transaction (charge).\nBase currency sub-units (‘350’ = 3.50\nUSD)`charges.metadata.[total_tax]`IntegerTotal taxes associated with this\ntransaction (charge). Base currency sub-units (‘350’ = 3.50\nUSD)`charges.metadata.[tax_names]`String, CSV multiple taxesTax type names\napplied on a transaction allowing for multiple tax types, using an array (for\nexample ‘GST’ or ‘sales’)`charges.metadata.[tax_rates]`Float, CSV multiples\ntaxesTax rates applied on a transaction corresponding to specified tax types as\na percentage (for example, ‘3’ or ‘1.5’ corresponds to 3% GST and 1.5% sales\ntax)`charges.metadata.[tax_values]`string, CSV multiple taxesTax values applied\non a transaction corresponding to specified tax types. Base currency sub-units\n(‘350’ = 3.50 USD)\nQuickBooks Sync by Acodei also requires charge updates with refund amounts\nwritten to metadata.\n\nThe following code snippet example traverses to the target destination charge\nand shows how to update per schema.\n\n- Trace from the Transaction to the destination charge\n\n```\nconst paymentOnPlatform = await StripeClient.paymentIntents.retrieve(\n \"pi_3N6JL7LirQdaQn8E1Lpn7Dui\",\n);\n\nconst latestCharge = await StripeClient.charges.retrieve(\n paymentOnPlatform.latest_charge as string,\n);\n\nconst transfer = await StripeClient.transfers.retrieve(\n latestCharge.transfer as string,\n);\n\nconst payment = await StripeClient.charges.retrieve(\n transfer.destination_payment as string,\n undefined,\n {\n stripeAccount: transfer.destination as string,\n },\n );\n```\n\n- Create a customer and then update the charge with the relevant customer ID and\nmetadata. The customer must belong to the connected account and not the platform\nfor the data to pass, and apps to synchronize.\n\n```\nconst customer = await StripeClient.customers.create(\n {\n email: `jenny.rosen@example.com`,\n name: \"Jenny Rosen\",\n\t address.city: \"Brothers\"\n\t Address.state: \"Oregon\"\n\t address.country: \"USA\"\n\t address.line1: \"27 Fredrick Ave\"\n\t address.postal_code: \"97712\"\n \t metadata: {\n \t platform_customer_ID: \"K-123456\"\n\t },\n },\n {\n stripeAccount: accountId,\n },\n );\n const payment = await StripeClient.charges.update(\n id,\n {\n customer: customer.id,\n metadata: {\n product_name: \"Creative writing course for PMs\",\n platform_product_ID: \"P-123456\"\n platform_order_ID: \"O-123456\"\n },\n },\n {\n stripeAccount: accountId,\n },\n );\n```\n\n[Direct\ncharges](https://docs.stripe.com/stripe-apps/embedded-apps#direct-charges)\nThe embedded integrations accesses all payment, customer, and product data\nstored with Stripe. You can pass optional platform-specific data to the App\nusing the below metadata schema.\n\nField or key nameFormat (standard CSV rules\napply)Description`customer.metadata.[platform_customer_ID]`stringCustomer ID as\nrecorded in the platform’s system`payment.metadata.[platform_product_ID]`string,\nCSV multiple productsProduct IDs as recorded in the platform’s system, related\nto this transaction (if different than the Stripe product\nID)`payment.metadata.[platform_product_name]`string, CSV multiple\nproductsProduct or service names as recorded in the platforms’ system, related\nto this transaction (if different than the Stripe product\nname)`payment.metadata.[platform_product_value]`string, CSV multiple productsThe\nindividual product value (price or cost) corresponding to the ID and name array\n(if different than the Stripe product\nvalue)`payment.metadata.[platform_order_ID]`stringOrder ID as recorded in the\nplatform’s system, related to this transaction\n(charge)`payment.metadata.[platform_charge_ID]`stringCharge or transaction ID as\nrecorded on the platform and visible to the user (if different than the Stripe\npayment ID)\n## Interested in the preview of embedded components for Apps?\n\nEnter your email address below to provide feedback, request other software\nintegrations, and request early access to embedded components for Apps.\n\nCollect EmailSign upRead our [privacy policy](https://stripe.com/privacy).\n\n## Links\n\n- [Set up\nConnect.js](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions)\n- [QuickBooks Sync by\nAcodei](https://docs.stripe.com/stripe-apps/embedded-apps/accounting-integrations#quickbooks-sync-by-acodei)\n- [Xero sync by\nXero](https://docs.stripe.com/stripe-apps/embedded-apps/accounting-integrations#xero)\n-\n[Mailchimp](https://docs.stripe.com/stripe-apps/embedded-apps/marketing-integrations#mailchimp)\n- [creating an Account\nSession](https://docs.stripe.com/api/account_sessions/create)\n- [available apps](https://docs.stripe.com/stripe-apps/embedded-apps#app-select)\n- [Customer](https://docs.stripe.com/api/customers/object)\n-\n[charges.customer](https://docs.stripe.com/api/charges/object#charge_object-customer)\n-\n[customer.name](https://docs.stripe.com/api/customers/object#customer_object-name)\n-\n[customer.email](https://docs.stripe.com/api/customers/object#customer_object-email)\n-\n[customer.address.<>](https://docs.stripe.com/api/customers/object#customer_object-address)\n-\n[charges.amount_refunded](https://docs.stripe.com/api/charges/object#charge_object-amount_refunded)\n- [privacy policy](https://stripe.com/privacy)",
  "metadata": {
    "title": "Embedded Stripe Apps integration guide | Stripe Documentation",
    "description": "Use embedded components for Stripe Apps to allow your customers to manage payments data in third party applications.",
    "sourceURL": "https://docs.stripe.com/stripe-apps/embedded-apps"
  }
}