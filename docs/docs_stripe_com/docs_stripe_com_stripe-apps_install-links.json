{
  "content": "# Using install linksPublic preview\n\n## Allow users to install your app outside the Stripe App Marketplace.\n\nInstall links allow users to install public apps outside of the Stripe App\nMarketplace. With one integrated flow, you can pass state from your application,\ncomplete the installation of the Stripe App, and redirect to your application or\nsite.\n\n![The install link page showing app\npermissions](https://b.stripecdn.com/docs-statics-srv/assets/oauth-permissions.9f11ce1ba29fdd77c9d4fa9ee2944222.png)\n\nThe install link page\n\n## Overview\n\nWith the following steps, a user can install an app using an install link:\n\n- On your site, the user clicks a link that redirects them to Stripe, passing\nalong the `app_id`.\n- On Stripe, the user selects the appropriate account and accepts permissions\nfor installing the app.\n- After installation, the user [redirects to your\nsite](https://docs.stripe.com/stripe-apps/install-links#redirect), along with\nthe Stripe account for the given user.\n- Your app can now make authenticated account requests.\n[Create an install\nlink](https://docs.stripe.com/stripe-apps/install-links#create-install-link)\nSet your `allowed_redirect_uris` in your app manifest. These are the URLs that\nusers are redirected to after installing your app. You must specify all redirect\nURLs in your app settings.\n\nAfter you’ve set `allowed_redirect_uris`, [upload a new\nversion](https://docs.stripe.com/stripe-apps/upload-install-app) of your app.\n\n```\n{\n \"id\": \"com.invoicing.[YOUR_APP]\",\n \"version\": \"1.2.3\",\n \"name\": \"[YOUR APP] Shipment Invoicing\",\n \"icon\": \"./[YOUR_APP]_icon_32.png\",\n \"permissions\": [],\n \"app_backend\": {},\n \"ui_extension\": {},\n \"allowed_redirect_uris\": [\n \"https://example.com/callback/stripe\"\n ]\n}\n```\n\n[Test your install\nlink](https://docs.stripe.com/stripe-apps/install-links#test-install-link)\nYou can use [external testing](https://docs.stripe.com/stripe-apps/test-app)\nwith the following steps to test the install link before submitting it for\nreview:\n\n- [Create an external test](https://docs.stripe.com/stripe-apps/test-app) for\nyour app using the version with `allowed_redirect_uris` defined in the app\nmanifest. You can update the testing version to the desired one if a test\nalready exists.\n- The **External test** tab shows a test install link and displays the allowed\nredirects in a table.\n- When you’re ready to publish, make sure that you upload a new version with any\ntesting URIs and values replaced with the values you intend to use in\nproduction.\n\n![The external test tab showing install\nlinks](https://b.stripecdn.com/docs-statics-srv/assets/external-test.8df1fb2e4ac4df4c934d4acca85ed2de.png)\n\n[Using an install\nlink](https://docs.stripe.com/stripe-apps/install-links#use-install-link)\nWhen you’ve finished testing, you can make it available for all users with the\nfollowing steps:\n\n- [Publish a new version](https://docs.stripe.com/stripe-apps/publish-app) of\nyour app that defines `allowed_redirect_uris`.\n- Click the **Settings** tab. The install link is shown here, and you can copy\nit. The link looks like this:\n`https://marketplace.stripe.com/apps/install/link/{id}?redirect_uri=https://example.com`.\n- Recommended To prevent CSRF attacks, you can add the recommended `state`\nparameter and pass along a unique token as the value. We’ll include the `state`\nyou provided when redirecting users to your site. Your site can confirm that the\n`state` parameter hasn’t been modified.\n- After a user clicks the install link, Stripe opens the following page where\nthey can select an account, review app details, and proceed with the\ninstallation.\n\n![Selecting an account to install the app\non](https://b.stripecdn.com/docs-statics-srv/assets/account-selection.13dde83d3b3b16c9d0faee76b98e584b.png)\n\nInstall link account selection\n\n[Redirecting to your\nsite](https://docs.stripe.com/stripe-apps/install-links#redirect)\nAfter the user installs your app, they’re redirected to the `redirect_uri` URL\nparameter that matches a defined redirect in `allowed_redirect_uris` in your app\nmanifest.\n\n### Successful installation\n\nFor successful installations, the URL includes:\n\n- The `user_id` value. The ID of the Stripe user that initiated the install.\n- The `account_id` value. The ID of the Stripe account that installed your app.\n- The `state` value, if provided\n- The `install_signature` value. This a hash of the above values that’s\ngenerated using your app’s [signing\nsecret](https://docs.stripe.com/stripe-apps/build-backend#expire-and-create-secrets).\n- If the app is installed into test mode, a `livemode=false` value is appended\nto the redirect URL.\n\n*An example of a live mode redirect:*\n\n```\n\nhttps://example.com/callback/stripe?user_id={USER_ID}&account_id={CONNECTED_ACCOUNT_ID}&state={STATE}&install_signature={INSTALL_SIGNATURE}\n```\n\n*An example of a test mode redirect:*\n\n```\n\nhttps://example.com/callback/stripe?user_id={USER_ID}&account_id={CONNECTED_ACCOUNT_ID}&state={STATE}&install_signature={INSTALL_SIGNATURE}&livemode=false\n```\n\n### Installation failure\n\nIf the user cancels the installation, they will still be redirected to your\nsite, but the URL includes an error instead:\n\n```\n\nhttps://example.com/callback/stripe?error=access_denied&error_description=The%20user%20denied%20your%20request\n```\n\nThe user is now connected to your app. Store the `stripe_user_id` in your\ndatabase—this is the user’s Stripe account ID. You’ll use this value to\n[authenticate as the connected\naccount](https://docs.stripe.com/connect/authentication) by passing it into\nrequests in the `Stripe-Account` header.\n\n### Verify app installs with install_signature Recommended\n\nIt’s important to verify that your app’s user was authorized to install the app\nfor the account provided in the redirect URL. An `install_signature` is included\nfor this reason. This signature is generated from your app’s [signing\nsecret](https://docs.stripe.com/stripe-apps/build-backend#expire-and-create-secrets)\nand the `user_id` and `account_id` that completed the install. The signature\nalso includes the passed `state`, if provided. The signature can’t be replicated\nwithout access to the signing secret, which is only available internally to\nStripe and to your app’s backend. Because of this, bad actors can’t replicate\nthe hash if they were to try and spoof the redirect URL. By verifying the app\nsignature, you can trust that the account is associated with your app user.\n\nTo verify the signature, follow these steps:\n\n- [Create your app’s signing\nsecret](https://docs.stripe.com/stripe-apps/build-backend#expire-and-create-secrets)\nif you haven’t done so already.\n- [Setup an app\nbackend](https://docs.stripe.com/stripe-apps/build-backend#send-a-signed-request)\nto verify the `install_signature`.\n\n#### Sample backend verifying the install:\n\nThe order and naming of the payload fields matter when performing signature\nverification. The `state` precedes the `user_id`, which precedes the\n`account_id`. The resulting object should be `{ state, user_id, account_id }`.\n\n```\nrequire 'stripe'\nrequire 'sinatra'\nrequire 'json'\n\nStripe.api_key = 'API_KEY'\n\nget '/' do\n 'Install Links verification example'\nend\n\nget '/verify' do\n user_id = params[:user_id]\n account_id = params[:account_id]\n state = params[:state]\n install_signature = params[:install_signature]\n\n payload = JSON.dump({\n state: state,\n user_id: user_id,\n account_id: account_id\n })\n\n begin\n Stripe::Webhook::Signature.verify_header(\n payload,\n install_signature,\n 'STRIPE_APP_SECRET'\n )\n rescue Stripe::SignatureVerificationError => e\n return e.message, 400\n end\n\n { success: true }.to_json\nend\n\nset :port, 3000\n```\n\nAfter it’s verified, you can [make API\ncalls](https://docs.stripe.com/stripe-apps/build-backend#using-stripe-apis) on\nbehalf of the installed account.\n\n[Make authenticated\nrequests](https://docs.stripe.com/stripe-apps/install-links#authenticated-requests)\nFor server-side API calls, you can make requests as connected accounts using the\nspecial header `Stripe-Account` with the Stripe account identifier (it starts\nwith the prefix `acct_`) of your platform user. Here’s an example that shows how\nto [Create a PaymentIntent](https://docs.stripe.com/api/payment_intents/create)\nwith your platform’s [API secret key](https://docs.stripe.com/keys) and your\nuser’s [Account](https://docs.stripe.com/api/accounts) identifier.\n\n```\ncurl https://api.stripe.com/v1/payment_intents \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -H \"Stripe-Account: {{CONNECTED_ACCOUNT_ID}}\" \\\n -d amount=1000 \\\n -d currency=usd \\\n -d \"payment_method_types[]\"=card\n```\n\nThe `Stripe-Account` header approach is implied in any API request that includes\nthe Stripe account ID in the URL. Here’s an example that shows how to [Retrieve\nan account](https://docs.stripe.com/api/accounts/retrieve) with your user’s\n[Account](https://docs.stripe.com/api/accounts) identifier in the URL.\n\n```\ncurl https://api.stripe.com/v1/accounts/{{CONNECTED_ACCOUNT_ID}} \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\"\n```\n\nSee more examples of making an [authenticated request\nhere](https://docs.stripe.com/connect/authentication).\n\n## Customize links with URL parameters\n\nYou can change the behavior of the app installation by including additional URL\nparameters in the install link.\n\n### Supported URL parameters\n\nParameterDescription`redirect_uri`The URL that users are redirected to after\ninstalling your app. If provided, this must exactly match one of the\ncomma-separated `redirect_uris` values in your [app\nmanifest](https://docs.stripe.com/stripe-apps/reference/app-manifest). To\nprotect yourself from certain man-in-the-middle attacks, the live mode\n`redirect_uri` must use a secure HTTPS connection.`state`RecommendedAn arbitrary\nstring value we pass back to you, which is recommended for CSRF protection.\n### Prevent CSRF attacks with the state parameter\n\nTo prevent cross-site request forgery (CSRF) attacks, you can use the `state`\nparameter. This parameter accepts any string value and returns it unmodified\nupon redirecting the installer back to your application or platform. To use this\nparameter, pass a unique and non-guessable value when you initiate an install\nusing an install link. Save the value to use it for verification later.\n\nAfter the user installs and is redirected back to your application, verify\nwhether the value of the state parameter provided matches the value present in\nthe initial install link. This verification process provides a high-level of\nconfidence to confirm that the `stripe_user_id` returned belongs to the user who\ninitiated the install and safeguard against potential forgeries.\n\n## Revoking access\n\nAn `account.application.deauthorized`\n[event](https://docs.stripe.com/api#list_events) occurs when a user disconnects\nyour app from their account. You can perform any necessary cleanup on your\nservers by watching for this event with\n[webhooks](https://docs.stripe.com/connect/webhooks).\n\n## See also\n\n- [How Stripe Apps\nwork](https://docs.stripe.com/stripe-apps/how-stripe-apps-work)\n- [Full API reference](https://docs.stripe.com/api)\n\n## Links\n\n- [upload a new version](https://docs.stripe.com/stripe-apps/upload-install-app)\n- [https://example.com/callback/stripe](https://example.com/callback/stripe)\n- [external testing](https://docs.stripe.com/stripe-apps/test-app)\n- [Publish a new version](https://docs.stripe.com/stripe-apps/publish-app)\n- [signing\nsecret](https://docs.stripe.com/stripe-apps/build-backend#expire-and-create-secrets)\n-\n[https://example.com/callback/stripe?user_id={USER_ID}&account_id={CONNECTED_ACCOUNT_ID}&state={STATE}&install_signature={INSTALL_SIGNATURE}](https://example.com/callback/stripe?user_id={USER_ID}&account_id={CONNECTED_ACCOUNT_ID}&state={STATE}&install_signature={INSTALL_SIGNATURE})\n-\n[https://example.com/callback/stripe?user_id={USER_ID}&account_id={CONNECTED_ACCOUNT_ID}&state={STATE}&install_signature={INSTALL_SIGNATURE}&livemode=false](https://example.com/callback/stripe?user_id={USER_ID}&account_id={CONNECTED_ACCOUNT_ID}&state={STATE}&install_signature={INSTALL_SIGNATURE}&livemode=false)\n-\n[https://example.com/callback/stripe?error=access_denied&error_description=The%20user%20denied%20your%20request](https://example.com/callback/stripe?error=access_denied&error_description=The%20user%20denied%20your%20request)\n- [authenticate as the connected\naccount](https://docs.stripe.com/connect/authentication)\n- [Setup an app\nbackend](https://docs.stripe.com/stripe-apps/build-backend#send-a-signed-request)\n- [make API\ncalls](https://docs.stripe.com/stripe-apps/build-backend#using-stripe-apis)\n- [Create a PaymentIntent](https://docs.stripe.com/api/payment_intents/create)\n- [API secret key](https://docs.stripe.com/keys)\n- [Account](https://docs.stripe.com/api/accounts)\n- [Retrieve an account](https://docs.stripe.com/api/accounts/retrieve)\n- [app manifest](https://docs.stripe.com/stripe-apps/reference/app-manifest)\n- [event](https://docs.stripe.com/api#list_events)\n- [webhooks](https://docs.stripe.com/connect/webhooks)\n- [How Stripe Apps\nwork](https://docs.stripe.com/stripe-apps/how-stripe-apps-work)\n- [Full API reference](https://docs.stripe.com/api)",
  "metadata": {
    "title": "Using install links | Stripe Documentation",
    "description": "Allow users to install your app outside the Stripe App Marketplace.",
    "sourceURL": "https://docs.stripe.com/stripe-apps/install-links"
  }
}