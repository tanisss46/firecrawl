{
  "content": "[subscriptions](https://docs.stripe.com/billing/subscriptions/build-subscriptions?ui=elements),\nand other Stripe products, [compare payment\nintegrations](https://docs.stripe.com/payments/online-payments#compare-features-and-availability).\n\n#### Interested in using Stripe Tax, discounts, shipping, or currency conversion?\n\nWe’re developing a Payment Element integration that manages tax, discounts,\nshipping, and currency conversion. Read the [Build a checkout\npage](https://docs.stripe.com/checkout/custom/quickstart) guide to learn more.\n\nDownload full appDon't code? Use Stripe’s [no-code\noptions](https://docs.stripe.com/no-code) or get help from [our\npartners](https://stripe.partners/).1Set up the server\n### Install the Stripe Ruby library\n\nInstall the Stripe ruby gem and require it in your code. Alternatively, if\nyou’re starting from scratch and need a Gemfile, download the project files\nusing the link in the code editor.\n\nTerminalBundlerGitHub\nInstall the gem:\n\n`gem install stripe`Server\n### Create a PaymentIntent\n\nAdd an endpoint on your server that creates a\n[PaymentIntent](https://docs.stripe.com/api/payment_intents). A PaymentIntent\ntracks the customer’s payment lifecycle, keeping track of any failed payment\nattempts and ensuring the customer is only charged once. Return the\nPaymentIntent’s [client\nsecret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret)\nin the response to finish the payment on the client.\n\nServer\n### Configure payment methods\n\nStripe enables cards and other common payment methods by default with [dynamic\npayment\nmethods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods).\nYou can update and configure payment methods from the\n[Dashboard](https://dashboard.stripe.com/settings/payment_methods) with no code\nrequired. Stripe filters payment methods based on eligibility and payment method\npreferences, then orders and displays them by probability based on factors\nincluding amount, currency, and buyer location.\n\nServer2Build a checkout screen on the client\n### Install the SDK\n\nThe Stripe Android SDK is [open\nsource](https://github.com/stripe/stripe-android) and [fully\ndocumented](https://stripe.dev/stripe-android/) and compatible with devices\nrunning Android 5.0 (API level 21) and above.\n\nTo install the SDK, add `stripe-android` to the dependencies block of your\n`build.gradle` file:\n\n```\nimplementation 'com.stripe:stripe-android:21.6.0'\n```\n\n#### Note\n\nFor details on the latest SDK release and past versions, see the [Releases\npage](https://github.com/stripe/stripe-android/releases) on GitHub.\n\nClient\n### Setup the SDK\n\nConfigure the Stripe SDK with your Stripe [publishable API\nkey](https://docs.stripe.com/keys#obtain-api-keys). Hardcoding the publishable\nAPI key in the SDK is for demonstration only. In a production app, you must\nretrieve the API key from your server.\n\nClient\n### Fetch a PaymentIntent\n\nMake a request to your server for a PaymentIntent as soon as the view loads.\nStore a reference to the PaymentIntent’s [client\nsecret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret)\nreturned by the server; the Payment Sheet uses this secret to complete the\npayment later.\n\nClient3Complete the payment on the client\n### Configure and present the Payment Sheet\n\nCreate a `PaymentSheet` instance using the client secret retrieved earlier, and\npresent it from your view controller.\n\nUse the `PaymentSheet.Configuration` struct for\n[customizing](https://stripe.dev/stripe-ios/stripe-paymentsheet/Classes/PaymentSheet/Configuration.html)\nthe Payment Sheet.\n\nClient\n### Handle the payment result\n\nUse the completion block for handling the payment result.\n\nIf payment fails with an [error](https://docs.stripe.com/error-codes), display\nthe appropriate message to your customer so they can take action and try again.\nIf no error has occurred, tell your customer that the payment was successful.\n\nClient4Test the integration\n### Make a test payment\n\nTo verify that your integration works, make a test payment using [test payment\ndetails](https://docs.stripe.com/payments/accept-a-payment?platform=android#android-test-the-integration).\n\n### See your payment in the Dashboard\n\nNavigate to the [Stripe Dashboard](https://dashboard.stripe.com/test/payments)\nto see your test payment.\n\n## Accept payments and enhance your integration\n\nYou’re ready to accept payments with Stripe. Continue with the steps below to\nadd more features.\n\n### Automate tax collection\n\nCalculate and collect the right amount of tax on your Stripe transactions.\nBefore using Stripe Tax, you need to activate it in the\n[Dashboard](https://dashboard.stripe.com/settings/tax/activate). Learn more\nabout [Stripe Tax](https://docs.stripe.com/tax) and [how to add it to your\nPayments integration](https://docs.stripe.com/tax/custom).\n\n### Allow delayed payment methods\n\nSome payment methods can’t guarantee that you’ll receive funds from your\ncustomer at the end of the check out because they take time to settle (for\nexample, most bank debits, such as SEPA or ACH) or require customer action to\ncomplete (for example, OXXO, Konbini, Boleto). Use this flag to enable delayed\npayment methods.\n\nIf you enable this feature, make sure your server integration listens to\n[webhooks](https://docs.stripe.com/payments/payment-methods#payment-notification)\nfor notifications on whether payment has succeeded or not.\n\n### Add Google Pay support\n\n### Customize the primary button color\n\nConsider using a custom color for the primary button that better matches your\nbrand or app’s visual identity.\n\n### Enable card scanning\n\nCard scanning can help increase your conversion rate by removing the friction of\nmanual card entry. To enable card scanning, add `stripecardscan` to the\n`dependencies` block of your\n[app/build.gradle](https://developer.android.com/studio/build/dependencies)\nfile:\n\n```\nimplementation 'com.stripe:stripecardscan:21.6.0'\n```\n\n### Save payment details after payment\n\nOften used by SaaS or e-commerce businesses with recurring customers.\n\n### Collect addresses using the Address Element\n\nCollect local and international shipping or billing addresses from your\ncustomers.\n\nIf you use the Address Element, you can optionally use the [Google Places\nSDK](https://developers.google.com/maps/documentation/places/android-sdk/overview)\nto fetch address autocomplete suggestions. To enable autocomplete suggestions,\nadd `places` to the dependency block of your\n[app/build.gradle](https://developer.android.com/studio/build/dependencies)\nfile:\n\n```\nimplementation 'com.google.android.libraries.places:places:2.6.0'\n```\n\n## Next steps\n\n#### [Payouts](https://docs.stripe.com/payouts)\n\nLearn how to move funds out of your Stripe account into your bank account.\n\n#### [Refunds](https://docs.stripe.com/refunds)\n\nHandle requests for refunds by using the Stripe API or Dashboard.\n\n#### [Fulfillment](https://docs.stripe.com/webhooks/quickstart)\n\nCreate an event destination to send events to your webhook endpoint to fulfill\norders after a payment succeeds, and to handle other critical events.\n\nserver.rbMyApp.ktCheckoutActivity.ktDownload\n```\nrequire 'sinatra'require 'stripe'# This is a public sample test API key.# Don’t\nsubmit any personally identifiable information in requests made with this key.#\nSign in to see your own test API key embedded in code samples.Stripe.api_key =\n'sk_test_BQokikJOvBiI2HlWgH4olfQ2'\nset :static, trueset :port, 4242\n# Securely calculate the order amountdef calculate_order_amount(_items) # Calculate the order total on the server to prevent # people from directly manipulating the amount on the client _items.sum {|h| h['amount']}end\n# An endpoint to start the payment processpost '/create-payment-intent' do content_type 'application/json' data = JSON.parse(request.body.read)\n# Create a PaymentIntent with amount and currency payment_intent =\nStripe::PaymentIntent.create( amount: calculate_order_amount(data['items']),\ncurrency: 'usd', # In the latest version of the API, specifying the\n`automatic_payment_methods` parameter is optional because Stripe enables its\nfunctionality by default. automatic_payment_methods: { enabled: true, }, )\n { clientSecret: payment_intent.client_secret, }.to_jsonend\n\n```\n\n## Links\n\n- [text version of this\nguide](https://docs.stripe.com/payments/accept-a-payment)\n- [View the text-based\nguide](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=elements)\n- [Web](https://docs.stripe.com/payments/elements)\n- [Mobile](https://docs.stripe.com/payments/mobile)\n- [Accept a\npayment](https://docs.stripe.com/payments/accept-a-payment?&ui=elements)\n-\n[subscriptions](https://docs.stripe.com/billing/subscriptions/build-subscriptions?ui=elements)\n- [compare payment\nintegrations](https://docs.stripe.com/payments/online-payments#compare-features-and-availability)\n- [Build a checkout page](https://docs.stripe.com/checkout/custom/quickstart)\n- [no-code options](https://docs.stripe.com/no-code)\n- [our partners](https://stripe.partners)\n- [PaymentIntent](https://docs.stripe.com/api/payment_intents)\n- [client\nsecret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret)\n- [dynamic payment\nmethods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods)\n- [Dashboard](https://dashboard.stripe.com/settings/payment_methods)\n- [open source](https://github.com/stripe/stripe-android)\n- [fully documented](https://stripe.dev/stripe-android/)\n- [Releases page](https://github.com/stripe/stripe-android/releases)\n- [publishable API key](https://docs.stripe.com/keys#obtain-api-keys)\n-\n[customizing](https://stripe.dev/stripe-ios/stripe-paymentsheet/Classes/PaymentSheet/Configuration.html)\n- [error](https://docs.stripe.com/error-codes)\n- [test payment\ndetails](https://docs.stripe.com/payments/accept-a-payment?platform=android#android-test-the-integration)\n- [Stripe Dashboard](https://dashboard.stripe.com/test/payments)\n- [Dashboard](https://dashboard.stripe.com/settings/tax/activate)\n- [Stripe Tax](https://docs.stripe.com/tax)\n- [how to add it to your Payments\nintegration](https://docs.stripe.com/tax/custom)\n-\n[webhooks](https://docs.stripe.com/payments/payment-methods#payment-notification)\n- [app/build.gradle](https://developer.android.com/studio/build/dependencies)\n- [Google Places\nSDK](https://developers.google.com/maps/documentation/places/android-sdk/overview)\n- [Payouts](https://docs.stripe.com/payouts)\n- [Refunds](https://docs.stripe.com/refunds)\n- [Fulfillment](https://docs.stripe.com/webhooks/quickstart)",
  "metadata": {
    "title": "Build an advanced integration | Stripe Documentation",
    "description": "Learn how to embed a custom Stripe payment form in your website or application. Build a checkout form with Elements to complete a payment using various payment methods.",
    "sourceURL": "https://docs.stripe.com/payments/quickstart?platform=android"
  }
}