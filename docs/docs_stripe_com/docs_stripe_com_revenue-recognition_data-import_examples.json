{
  "content": "# Data import examples\n\n## Learn how to apply data import to common use cases.\n\n## Adding a service period to a Stripe payment\n\nIn this example, you use Stripe as a payment processor, but have your own\nrecurring payment solution. You have payments in Stripe, but your separate\nsystem keeps the service period for these payments.\n\nSuppose you have a payment in Stripe with the ID `py_1234` of 120 USD on January\n1, 2020 that represents a yearly\n[subscription](https://docs.stripe.com/billing/subscriptions/creating) from\nFebruary 1, 2020 to January 31, 2021. To add this data to Stripe, you can import\na CSV with the following fields:\n\nsourcetransaction_idsplit_transaction_idbooked_daterecognition_start_daterecognition_end_dateamountcurrencydescriptionStripepy_12342020-02-012021-01-31\nStripe already has data on the booked date, amount, and currency, so you can\nleave these fields blank.\n\n## Adding or overriding a service period on an invoice line item\n\nIn this example, you use [Stripe Invoicing](https://docs.stripe.com/invoicing),\nbut you have your own recurring payment solution. You may have missing or\nincorrect service periods on your\n[invoice](https://docs.stripe.com/api/invoices) line items.\n\nSuppose you manually generated an invoice for a large enterprise customer and\nfinalized this invoice on April 1, 2020. The invoice has the ID `in_1234` and\nhas several line items, some of which are physical goods, and some of which are\nsubscriptions for other products. In your [Revenue Recognition report by line\nitem](https://docs.stripe.com/revenue-recognition/reports#csv-reports), you\nnotice:\n\n- An unexpected increase in April revenue in your report. The line item for one\nsubscription (`il_5678`) has no service period, and so all of the revenue for\nthat line item books into April.\n- Another line item for another subscription (`il_7890`) has an incorrect\nservice period of April 1, 2020 to April 15, 2020, resulting in revenue\nrecognized in April.\n\nYou want to recognize revenue for `il_5678` from May 1, 2020 to June 1, 2020,\nand recognize the revenue for `il_7890` from June 1, 2020 to September 1, 2020.\n\nsourcetransaction_idsplit_transaction_idbooked_daterecognition_start_daterecognition_end_dateamountcurrencydescriptionStripein_1234il_56782020-05-012021-06-01Stripein_1234il_78902020-06-012021-09-01\nStripe already has data on the booked date from the invoice finalization date,\namount, and currency, so you can leave these fields blank.\n\n## Splitting Stripe payments with additional data\n\nIn this example, you use Stripe as your payment processor. You have payments in\nStripe, but these payments may represent multiple different goods and services\nthat you want to have custom revenue recognition schedules for.\n\nSuppose you have a payment in Stripe of 100 USD with the ID `py_1234` that\nrepresents two separate goods and services:\n\n- A 74.99 USD subscription recognized from February 1, 2020 to May 31, 2020.\n- A 25.01 USD shipment of materials recognized immediately on a shipment date of\nJanuary 1, 2020.\n\nTo split this Stripe payment, you could provide the following data:\n\nsourcetransaction_idsplit_transaction_idbooked_daterecognition_start_daterecognition_end_dateamountcurrencydescriptionStripepy_1234subscription2020-02-012021-05-3174.99USDThe\nsubscription part of the\npaymentStripepy_1234shipment2020-01-012021-01-0125.01USDThe material shipment\npart of the payment\nYou must specify a unique **Split transaction ID** for each part of the\ntransactions. This helps us differentiate different parts of a payment with the\nsame ID. The only requirement is that each **Split transaction ID** is unique.\n\nStripe already has data on the booked date and currency, so you can leave these\nfields blank, or fill them in with the correct values. We’ll check that the\namounts of each component of the payment add up to the original payment amount,\nand that the currencies (if specified) stay the same. The descriptions are\noptional.\n\n## Importing external transactions\n\nIn this example, you’re migrating to Stripe from a different payment processor\nor have a multiple payment processor solution.\n\nSuppose you’re migrating your subscriptions to Stripe, and all of them have\nalready been paid for. One of these subscriptions is a yearly subscription from\nJanuary 1, 2020 to December 31, 2020 paid for in advance on December 15, 2019\nfor a price of 100 USD. To import this data into Stripe for revenue recognition\npurposes, you can provide the following data:\n\nsourcetransaction_idsplit_transaction_idbooked_daterecognition_start_daterecognition_end_dateamountcurrencydescriptionMy\nprevious systemTransaction 12342019-12-152020-01-012020-12-31100USDA yearly\nsubscription\nBecause Stripe doesn’t have any data on this transaction, you must provide every\nfield except **Split transaction ID** and the always optional **Description**.\nYou can also provide a **Split transaction ID** if that best represents your\ndata.\n\nThe currency must be a [currency supported on your\naccount](https://docs.stripe.com/currencies) in Stripe, but otherwise the data\nin any of the other fields has no restrictions.\n\n## Correcting imported data\n\nIf you make a mistake when importing data, you can [delete the transaction in\nthe\nDashboard](https://docs.stripe.com/revenue-recognition/data-import/manage-imported-data#transactions-deletion),\nand re-import the correct data to correct the errors. Alternatively, you can\nupload a new CSV, and any rows with the corresponding **Source**, **Transaction\nID**, and **Split transaction ID** to replace the old imported data.\n\nSuppose you have an import like the one below, but want to remove the\nrecognition start and end dates and change the booked date to March 1, 2022.\n\nsourcetransaction_idsplit_transaction_idbooked_daterecognition_start_daterecognition_end_dateamountcurrencydescriptionStripepy_12342020-02-012021-01-31\nYou can import another CSV with the following format, and it completely replaces\nthe previous row:\n\nsourcetransaction_idsplit_transaction_idbooked_daterecognition_start_daterecognition_end_dateamountcurrencydescriptionStripepy_12342022-03-01\nThe blank fields for **Recognition start date** and **Recognition end date**\nsignal that we use the recognition start and end dates for the existing payment,\n`py_1234`. The previous incorrect recognition start and end date for the import\nare no longer used.\n\n## Excluding transactions from revenue\n\nYou might want to exclude certain transactions from your revenue recognition\nprocess because they were erroneously generated due to incorrect settings or are\ntest transactions.\n\nFor example, you have five transactions to exclude from your revenue:\n\n- in_1234 – test invoice\n- ii_1234 – invoice item incorrectly generated from a subscription update\n- in_5678 – invoice that includes multiple line items, of which il_1234 was\nmistakenly added\n- py_1234 – standalone payment created by a problematic integration\n- ch_1234 – test standalone charge\n\nTo exclude these transactions, [download the CSV template for Exclusion\nImport](https://dashboard.stripe.com/revenue-recognition/data-import) and fill\nin the IDs as follows:\n\ntransaction_idin_1234ii_1234il_1234py_1234ch_1234\n\n## Links\n\n- [subscription](https://docs.stripe.com/billing/subscriptions/creating)\n- [Stripe Invoicing](https://docs.stripe.com/invoicing)\n- [invoice](https://docs.stripe.com/api/invoices)\n- [Revenue Recognition report by line\nitem](https://docs.stripe.com/revenue-recognition/reports#csv-reports)\n- [currency supported on your account](https://docs.stripe.com/currencies)\n- [delete the transaction in the\nDashboard](https://docs.stripe.com/revenue-recognition/data-import/manage-imported-data#transactions-deletion)\n- [download the CSV template for Exclusion\nImport](https://dashboard.stripe.com/revenue-recognition/data-import)",
  "metadata": {
    "title": "Data import examples | Stripe Documentation",
    "description": "Learn how to apply data import to common use cases.",
    "sourceURL": "https://docs.stripe.com/revenue-recognition/data-import/examples"
  }
}