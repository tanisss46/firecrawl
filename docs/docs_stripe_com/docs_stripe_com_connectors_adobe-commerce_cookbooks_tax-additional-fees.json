{
  "content": "# Integrate a custom fee to the tax calculation\n\n## Add additional taxable fees to sold products.\n\nYou might need to add additional fees to products when calculating tax and\ncalculate tax for those fees.\n\n## Add a custom fee\n\nThe Stripe Tax module creates requests at the point of order, invoice, and\ncredit memo creation and sends them to the [Stripe Tax calculation\nAPI](https://docs.stripe.com/api/tax/calculations). The module runs through the\nitems of the quote, invoice, or credit memo to add the details of the items or\nthe entire order to the calculation request.\n\nIf you add a custom fee that requires tax calculation, you need to provide the\ndetails to the Stripe Tax module so the tax calculation request can add it.\n\nIn this integration, the developer of the custom fee provides the total value of\nthe custom fee through an observer, and it’s added to the Tax calculation API\nrequest and sent to Stripe to be calculated.\n\n# How the Stripe Tax module works\n\nThe Stripe Tax module adds the additional fees based on where the fees occur:\n\n- At the item level (the tax is applied to each item of the quote, invoice, and\ncredit memo)\n- At the quote, order, invoice, or credit memo level (the tax is set for the\nwhole basket and further)\n\nThe third party developer needs to send the following three details:\n\n- The total price of the custom fee (if an item has a custom tax of 3, and the\nquantity of the item is 2, the value sent is 6)\n- The tax class for the custom fee\n- The code of the custom fee\n\nThese three components will be sent forward in an array with the following\nstructure:\n\n```\n$details = [\n 'amount' => $amountValue, // generic value—provide your own when developing\n'tax_class_id' => $classId, // generic value—provide your own when developing\n 'code' => 'custom_fee' // generic value—provide your own when developing\n];\n```\n\nYou need to send this array structure based on the action being performed (quote\ncalculation, invoice creation, or credit memo creation) and where the custom fee\napplies (item, quote, invoice, or credit memo level).\n\nThe observer sends this information to the Tax module, and provides an object\nthat the information is added to. The observer needs to listen to one of the\nfollowing six events, depending on the stage of the order process and where the\ncustom fee needs to be applied:\n\n- `stripe_tax_additional_fee_item` applies to the items on an order\n- `stripe_tax_additional_fee_quote` applies to the quote\n- `stripe_tax_additional_fee_invoice_item` applies to invoice items\n- `stripe_tax_additional_fee_invoice` applies to the whole invoice\n- `stripe_tax_additional_fee_creditmemo_item` applies to credit memo items\n- `stripe_tax_additional_fee_creditmemo` applies to the whole credit memo\n\nEach of the events contains a Magento data object called\n`additional_fees_container` where you can add the details of what needs to be\ncalculated by the Stripe Tax module. To add the details of the tax calculation,\ncall the method `->addAdditionalFee()` with the details array as a parameter:\n\n```\n$additionalFees = $observer->getAdditionalFeesContainer();\n\n// other operations to get the values to send forward\n\n$details = [\n 'amount' => $amountValue, // generic value—provide your own when developing\n'tax_class_id' => $classId, // generic value—provide your own when developing\n 'code' => 'custom_fee' // generic value—provide your own when developing\n];\n\n$additionalFees->addAdditionalFee($details);\n}\n```\n\nFor cases when these additional fees might be added either on a parent or child\nitem (for example, a bundled dynamic product), we send events for both the\nbundled product and the products within it.\n\nWhen using bundled products or other types of products where you can specify the\nquantity of the top-level product and sub-product separately, send the amount of\nthe additional fee and consider the quantity of both the parent and child items.\nqty of the parent and the child items.\n\nAfter Stripe calculates the tax for the invoices, you receive an array of the\ntax and the base tax. You can use this information to set custom fields in the\ndatabase if you require it. The array contains the fee code as a key and the\ncalculated values that are set for it. You can access it through the\n`getAdditionalFeesTax()` method called in the item or on the invoice.\n\n### Example for applying tax on the item at the quote level\n\nInside your events file (`app/code/Vendor/YourModule/etc/events.xml`), add the\nfollowing event:\n\n```\n<event name=\"stripe_tax_additional_fee_item\">\n<observer name=\"your_custom_observer_name\"\ninstance=\"Vendor\\YourModule\\Observer\\AddAdditionalFeeForQuoteItem\" />\n</event>\n```\n\nThe data provided to the event in addition to the `additional_fees_container`\nis:\n\n- `item`: The item the tax is calculated for\n- `quote`: The quote the item belongs to\n\nInside your observer file\n(`app/code/Vendor/YourModule/Observer/AddAdditionalFeeForQuoteItem.php`), add\nthe code for creating the details for the calculation as in the following\nexample:\n\n```\n<?php\n\nnamespace Vendor\\YourModule\\Observer;\n\nuse \\Magento\\Framework\\Event\\ObserverInterface;\nuse \\Magento\\Framework\\Event\\Observer;\n\nclass AddAdditionalFeeForQuoteItem implements ObserverInterface\n{\n\n public function execute(Observer $observer)\n {\n $additionalFees = $observer->getAdditionalFeesContainer();\n $item = $observer->getItem();\n $quote = $observer->getQuote();\n\n// Calculations where you determine that the item has an additional tax and the\ntax needs to be calculated\n// After the calculations are complete and you have the values, add them to the\ndetails array and send the array forward\n\n $itemDetails = [\n'amount' => $amount, // generic value determined from previous\ncalculations—provide your own when developing\n'tax_class_id' => $taxClassId, // generic value determined from previous\ncalculations—provide your own when developing\n'code' => 'custom_fee' // generic value—provide your own when developing\n ];\n\n $additionalFees->addAdditionalFee($itemDetails);\n }\n}\n```\n\n### Example for applying tax at the quote level\n\nInside your events file (`app/code/Vendor/YourModule/etc/events.xml`), add the\nfollowing event:\n\n```\n<event name=\"stripe_tax_additional_fee_quote\">\n<observer name=\"stripe_tax_additional_fee_quote\"\ninstance=\"Vendor\\YourModule\\Observer\\AddAdditionalFeeForQuote\" />\n</event>\n```\n\nThe data provided to the event in addition to the `additional_fees_container`\nis:\n\n- `quote`: The quote the tax is calculated for\n- `total`: The collected totals up to this point\n\nInside your observer file\n`app/code/Vendor/YourModule/Observer/AddAdditionalFeeForQuote.php` add the code\nfor creating the details for the calculation as in the following example:\n\n```\n<?php\n\nnamespace Vendor\\YourModule\\Observer;\n\nuse \\Magento\\Framework\\Event\\ObserverInterface;\nuse \\Magento\\Framework\\Event\\Observer;\n\nclass AddAdditionalFeeForQuote implements ObserverInterface\n{\n\n public function execute(Observer $observer)\n {\n $additionalFees = $observer->getAdditionalFeesContainer();\n $quote = $observer->getQuote();\n $total = $observer->getTotal();\n\n// Calculations where you determine that the quote has an additional tax and the\ntax needs to be calculated\n// After the calculations are done and you have the values, add them to the\ndetails array and send the array forward\n\n $details = [\n'amount' => $amount, // generic value determined from previous\ncalculations—provide your own when developing\n'tax_class_id' => $taxClassId, // generic value determined from previous\ncalculations—provide your own when developing\n'code' => 'custom_fee' // generic value—provide your own when developing\n ];\n\n $additionalFees->addAdditionalFee($details);\n }\n}\n```\n\n### Example for applying tax on the item at the invoice level\n\nInside your events file (`app/code/Vendor/YourModule/etc/events.xml`), add the\nfollowing event:\n\n```\n<event name=\"stripe_tax_additional_fee_invoice_item\">\n<observer name=\"your_custom_observer_name\"\ninstance=\"Vendor\\YourModule\\Observer\\AddAdditionalFeeForInvoiceItem\" />\n</event>\n```\n\nThe data provided to the event in addition to the `additional_fees_container`\nis:\n\n- `item`: The item the tax is calculated for—you can get other details such as\nthe order item for this item one time in the observer.\n- `invoice`: The quote the item belongs to—you can get information such as the\norder of the item from the invoice.\n\nInside your observer file\n`app/code/Vendor/YourModule/Observer/AddAdditionalFeeForInvoiceItem.php` add the\ncode for creating the details for the calculation, as in the following example:\n\n```\n<?php\n\nnamespace Vendor\\YourModule\\Observer;\n\nuse \\Magento\\Framework\\Event\\ObserverInterface;\nuse \\Magento\\Framework\\Event\\Observer;\n\nclass AddAdditionalFeeForInvoiceItem implements ObserverInterface\n{\n\n public function execute(Observer $observer)\n {\n $additionalFees = $observer->getAdditionalFeesContainer();\n $item = $observer->getItem();\n $invoice = $observer->getInvoice();\n\n// Calculations where you determine that the item has an additional tax and the\ntax needs to be calculated\n// After the calculations are complete and you have the values, add them to the\ndetails array and send the array forward\n\n $itemDetails = [\n'amount' => $amount, // generic value determined from previous calculations,\nprovide your own when developing\n'tax_class_id' => $taxClassId, // generic value determined from previous\ncalculations, provide your own when developing\n'code' => 'custom_fee' // generic value, provide your own when developing\n ];\n\n $additionalFees->addAdditionalFee($itemDetails);\n }\n}\n```\n\n### Example for applying tax at the invoice level\n\nInside your events file (`app/code/Vendor/YourModule/etc/events.xml`), add the\nfollowing event:\n\n```\n<event name=\"stripe_tax_additional_fee_invoice\">\n<observer name=\"stripe_tax_additional_fee_quote\"\ninstance=\"Vendor\\YourModule\\Observer\\AddAdditionalFeeForInvoice\" />\n</event>\n```\n\nThe data provided to the event apart from the `additional_fees_container` is:\n\n- `invoice`: The invoice where the custom fee is applied\n- `order`: The order the invoice belongs to\n\nInside your observer file\n`app/code/Vendor/YourModule/Observer/AddAdditionalFeeForInvoice.php` add the\ncode for creating the details for the calculation. The following is an example:\n\n```\n<?php\n\nnamespace Vendor\\YourModule\\Observer;\n\nuse \\Magento\\Framework\\Event\\ObserverInterface;\nuse \\Magento\\Framework\\Event\\Observer;\n\nclass AddAdditionalFeeForInvoice implements ObserverInterface\n{\n\n public function execute(Observer $observer)\n {\n $additionalFees = $observer->getAdditionalFeesContainer();\n $invoice = $observer->getInvoice();\n $order = $observer->getOrder();\n\n// Calculations where you determine that the invoice has an additional tax and\nthe tax needs to be calculated\n// After the calculations are complete and you have the values, add them to the\ndetails array and send the array forward\n\n $details = [\n'amount' => $amount, // generic value determined from previous calculations,\nplease provide your own when developing\n'tax_class_id' => $taxClassId, // generic value determined from previous\ncalculations—provide your own when developing\n'code' => 'custom_fee' // generic value—provide your own when developing\n ];\n\n $additionalFees->addAdditionalFee($details);\n }\n}\n```\n\n### Changes to credit memos\n\nWhen creating credit memos, the structure of the array that needs to be passed\nback to the Stripe Tax module changes. The `tax_class_id` is removed from the\narray and you get a new field called `amount_tax`, which must contain the tax\namount that you want to refund for the custom fee.\n\n```\n$details = [\n 'amount' => $amount,\n 'amount_tax' => $taxAmount,\n 'code' => 'custom_fee'\n];\n```\n\n#### Note\n\nThe `code` component of the details array needs to be the same code component\nprovided in the invoice step. This ensures that Stripe knows what component to\nsubtract the refunded amounts from.\n\namounts from.\n\n### Example for applying tax on the item at the credit memo level\n\nInside your events file (`app/code/Vendor/YourModule/etc/events.xml`), add the\nfollowing event:\n\n```\n<event name=\"stripe_tax_additional_fee_creditmemo_item\">\n<observer name=\"your_custom_observer_name\"\ninstance=\"Vendor\\YourModule\\Observer\\AddAdditionalFeeForCreditmemoItem\" />\n</event>\n```\n\nThe data provided to the event in addition to the `additional_fees_container`\nis:\n\n- `item`: The item the tax is calculated for—you can get other details such as\nthe order item for this item one time in the observer.\n- `creditmemo`: The quote the item belongs to\n- `invoice`: The quote the item belongs to\n- `order`: The quote the item belongs to\n\nInside your observer file\n(`app/code/Vendor/YourModule/Observer/AddAdditionalFeeForCreditmemoItem.php`),\nadd the code for creating the details for the calculation as in the following\nexample:\n\n```\n<?php\n\nnamespace Vendor\\YourModule\\Observer;\n\nuse \\Magento\\Framework\\Event\\ObserverInterface;\nuse \\Magento\\Framework\\Event\\Observer;\n\nclass AddAdditionalFeeForCreditmemoItem implements ObserverInterface\n{\n\n public function execute(Observer $observer)\n {\n $additionalFees = $observer->getAdditionalFeesContainer();\n $item = $observer->getItem();\n $creditmemo = $observer->getCreditmemo();\n $invoice = $observer->getInvoice();\n $order = $observer->getOrder();\n\n// Calculations where you determine that the item has an additional tax and the\ntax needs to be refunded\n// After the calculations are complete and you have the values, add them to the\ndetails array and send the array forward\n\n $itemDetails = [\n'amount' => $amount, // generic value determined from previous calculations,\nplease provide your own when developing\n'tax_amount' => $taxAmount, // generic value determined from previous\ncalculations, please provide your own when developing\n'code' => 'custom_fee' // generic value, please provide your own when developing\n ];\n\n $additionalFees->addAdditionalFee($itemDetails);\n }\n}\n```\n\n### Example for applying tax at the credit memo level\n\nInside your events file (`app/code/Vendor/YourModule/etc/events.xml`), add the\nfollowing event:\n\n```\n<event name=\"stripe_tax_additional_fee_creditmemo\">\n<observer name=\"stripe_tax_additional_fee_quote\"\ninstance=\"Vendor\\YourModule\\Observer\\AddAdditionalFeeForCreditmemo\" />\n</event>\n```\n\nThe data provided to the event in addition to the `additional_fees_container`\nis:\n\n- `creditmemo`: The quote the item belongs to\n- `invoice`: The quote the item belongs to\n- `order`: The quote the item belongs to\n\nInside your observer file\n(`app/code/Vendor/YourModule/Observer/AddAdditionalFeeForCreditmemo.php`), add\nthe code for creating the details for the calculation as in the following\nexample:\n\n```\n<?php\n\nnamespace Vendor\\YourModule\\Observer;\n\nuse \\Magento\\Framework\\Event\\ObserverInterface;\nuse \\Magento\\Framework\\Event\\Observer;\n\nclass AddAdditionalFeeForInvoice implements ObserverInterface\n{\n\n public function execute(Observer $observer)\n {\n $additionalFees = $observer->getAdditionalFeesContainer();\n $creditmemo = $observer->getCreditmemo();\n $invoice = $observer->getInvoice();\n $order = $observer->getOrder();\n\n// Calculations where you determine that the invoice has an additional tax and\nthe tax needs to be refunded\n// After the calculations are complete and you have the values, add them to the\ndetails array and sent the array forward\n\n $details = [\n'amount' => $amount, // generic value determined from previous calculations,\nplease provide your own when developing\n'tax_amount' => $taxClassId, // generic value determined from previous\ncalculations, please provide your own when developing\n'code' => 'custom_fee' // generic value, please provide your own when developing\n ];\n\n $additionalFees->addAdditionalFee($details);\n }\n}\n```\n\n## Links\n\n- [Stripe Tax calculation API](https://docs.stripe.com/api/tax/calculations)",
  "metadata": {
    "title": "Integrate a custom fee to the tax calculation | Stripe Documentation",
    "description": "Add additional taxable fees to sold products.",
    "sourceURL": "https://docs.stripe.com/connectors/adobe-commerce/cookbooks/tax-additional-fees"
  }
}