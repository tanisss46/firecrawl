{
  "content": "# Fraud prevention rules\n\n## Use fraud prevention rules to guard your business.\n\nFraud prevention rules allow you to take action whenever a payment matches\ncertain criteria.\n\nStripe Radar provides built-in rules to help detect and guard against fraud risk\nfor all Stripe users.\n\n[Radar for Fraud Teams](https://docs.stripe.com/radar) users can use the\n[Dashboard](https://dashboard.stripe.com/test/radar/rules) to create custom\nrules based on the unique business logic specific to your business. For example,\nyou can:\n\n- **Request 3D Secure** (3DS) for all payments that support it and are made by a\nnew customer\n- **Allow** all payments from your call center’s IP address\n- **Block** payments made from a location or card issued outside your country\n- **Review** all payments greater than 1,000 USD that have been made with a\nprepaid card\n\n#### Caution\n\nEU merchants might be affected by the [Geo-blocking\nRegulation](https://support.stripe.com/questions/eu-geo-blocking-regulation-changes)\nand its prohibitions on blocking payments from customers based in EU member\nstates.\n\n## Built-in rules\n\nThe following rules are available by default for all Radar users.\n\n### Machine learning risk checks\n\nStripe Radar and Stripe Radar for Fraud Teams provide a set of default rules\nbased on the judgments of our machine learning models, which are:\n\n`Block if :risk_level: = 'highest'`\n\nThe rule blocks and won’t process payments with a high risk of fraud. This rule\nis enabled by default for users of Radar or Radar for Fraud Teams.\n\n`Review if :risk_level: = 'elevated'`\n\nThe default behavior for Stripe Radar for Fraud Teams is to place payments into\nreview that we suspect have an elevated risk of fraud.\n\n### Traditional card checks\n\nA payment can still succeed even when the\n[CVC](https://docs.stripe.com/disputes/prevention/verification) or address\n([AVS](https://docs.stripe.com/disputes/prevention/verification)) check fails\nbecause issuers evaluate numerous signals when deciding to authorize a payment.\nA card issuer might still consider a payment that fails CVC or postal code\nverification legitimate, and therefore approve it.\n\nYou can enable Radar’s built-in rules to block certain payments that the card\nissuer approved. When enabled, these rules also affect attaching a card to a\ncustomer, and creating a customer, if you create the card and customer together.\n\nCVC and AVS RulesLegacy CVC and AVS Rules\nEffective December 17, 2024, the Dashboard shows these rules to new customers\nand existing customers who haven’t used the legacy CVC or AVS rules.\n\n`Block if CVC verification fails based on risk score`\n\nEnable this rule to block payments that fail a card issuer’s CVC verification\ncheck, unless Stripe evaluates it as low-risk. This rule doesn’t block payments\nwhere the customer doesn’t provide the CVC number because they, for example, use\na [wallet](https://docs.stripe.com/payments/payment-methods), or their card’s\nissuer doesn’t support its verification.\n\n`Block if Postal code verification fails based on risk score`\n\nEnable this rule to block payments that fail a card issuer’s postal code\nverification check, unless Stripe evaluates it as low-risk. This rule doesn’t\nblock payments where the customer doesn’t provide the postal code, or their\ncard’s issuer doesn’t support its verification.\n\n### Built-in rules to request 3D Secure\n\nUsing [3DS](https://docs.stripe.com/payments/3d-secure) prompts customers to\ncomplete an additional authentication step before they can complete the purchase\nflow. If 3DS authenticates a payment, the\n[liability](https://docs.stripe.com/payments/3d-secure/authentication-flow#disputed-payments)\nfor any fraud-related disputes for that payment typically shift from the seller\nto the issuer. This means that in most cases, the seller isn’t responsible for\nfraud costs on 3DS authenticated payments.\n\nStripe automatically handles soft decline codes indicating that 3DS is required\nby issuers. We also trigger 3DS when necessary, adhering to regulations such as\nthe [Strong Customer\nAuthentication](https://stripe.com/guides/strong-customer-authentication) (SCA)\nmandated by the PSD2. Disabling Radar doesn’t prevent 3DS from being triggered\nin cases where it’s necessary.\n\nStripe provides three default disabled rules you can enable to dynamically\nrequest 3DS when using Radar with [Payment\nIntents](https://docs.stripe.com/payments/accept-a-payment) or [Setup\nIntents](https://docs.stripe.com/payments/save-and-reuse):\n\n- `Request 3D Secure if 3D Secure is recommended for card`- Disabled by default.\nEnabling this rule prompts the customer for 3DS authentication when Stripe\nbelieves that 3DS authentication can take place with minimal impact on\nconversion rates.\n- Enable this if you want to maximize the number of payments that have liability\nshift.\n- `Request 3D Secure if 3D Secure is supported for card`- Disabled by default.\nEnabling this rule prompts the customer for 3DS authentication as long as their\ncard supports it.\n- Use this rule instead of the previous one if you want to maximize the number\nof payments that have liability shift. Be aware that this additional requirement\nmight decrease conversion rates.\n- `Request 3D Secure if 3D Secure is required for card` Deprecated- Enabling\nthis rule prompts the customer for 3DS authentication if the card historically\n[required\n3DS](https://docs.stripe.com/payments/3d-secure/authentication-flow#three-ds-cards).\n- Regardless of this rule, Stripe automatically triggers 3DS:- If a soft decline\ncode indicates the issuer requires 3DS.\n- In adherence to regulations such as PSD2’s [Strong Customer\nAuthentication](https://stripe.com/guides/strong-customer-authentication)\nmandate.\n\nBecause 3DS requires your customer to go through an additional layer of\nauthentication, indiscriminate use of 3DS might lower conversion rates.\n\nRequesting 3DS doesn’t necessarily mean the issuer actually performs 3DS. For\nmore details about possible outcomes, refer to the [3D Secure\ndocumentation](https://docs.stripe.com/payments/3d-secure).\n\n#### Custom rules to request 3D Secure and act on specific outcomes\n\nAfter attempting 3DS authentication, if you have [Radar for Fraud\nTeams](https://stripe.com/radar/fraud-teams), you can evaluate the result in\nallow, block, or review rules.\n\nThe most important attributes for custom Radar rules are:\n\n- `is_3d_secure` which is true if the card is supported, 3DS was attempted by\nthe issuer and the user didn’t fail authentication. We generally recommend using\nthis in block rules.\n- `is_3d_secure_authenticated` which is true if 3DS was attempted by the issuer\nand the user successfully went through a full authentication. Using this\nattribute in a block rule excludes legitimate transactions that might have an\nSCA exemption or don’t fall into a clear failure or successful authentication\nsuch as processing errors.\n- `has_liability_shift` which is true if Stripe expects the payment to be\ncovered under the liability shift rule. This might [not always be the same as\n3DS](https://docs.stripe.com/payments/3d-secure/authentication-flow#disputed-payments),\nfor example Apple Pay in certain regions.\n\nFor custom rules, we recommend keeping `Request 3DS` and `Block` rules aligned\ndepending on your [risk\nappetite](https://stripe.com/guides/improve-fraud-management-with-radar-for-fraud-teams-and-stripe-data).\nHowever, don’t block transactions where 3DS isn’t supported, such as some\nwallets.\n\nHere are some examples that show how to achieve this for different use cases:\n\n#### Request 3D Secure based on Radar risk level\n\nYou want to use Radar to request 3DS on all charges based on Radar risk level\nand above a certain amount.\n\nRadar ruleDescription`Request 3D Secure if :risk_level: != 'normal' and\n:amount_in_usd: > 25`This rule checks for Radar’s risk level then requests 3DS\non all charges with an elevated or high risk level above a certain amount.\nIn this case, without a block rule, cards or wallets that don’t support 3DS\naren’t blocked. 3DS attempts with failed authentication don’t continue to charge\nauthorization.\n\n#### Always require 3D Secure based on Radar risk level\n\nYou want to use Radar to request 3DS on all charges based on Radar risk level of\nelevated or high, and above a certain amount. If cards don’t support 3DS, you\ndon’t want to accept them.\n\nRadar ruleDescription`Request 3D Secure if :risk_level: != 'normal' and\n:amount_in_usd: > 25`This rule checks for Radar’s risk level then requests 3DS\non all charges with an elevated or high risk level above a certain amount.`Block\nif not :is_3d_secure: and :risk_level: != 'normal' and :amount_in_usd: > 25 and\nnot :is_off_session: and :digital_wallet: != 'apple_pay' and not\n(:digital_wallet: = 'android_pay' and :has_cryptogram:)`This rule blocks\npayments without a 3DS flow for charges with an elevated or high risk level\nabove a certain amount. However, it accepts legitimate transactions that might\nhave an SCA exemption or don’t have a clear failure or successful authentication\nsuch as `attempt_acknowledged`. It accepts off-session payments such as\nrecurring subscription charges and wallets such as Apple Pay or Google Pay to\nsucceed.\n#### Only accept fully 3D Secure authenticated transactions if 3D Secure is supported\n\nYou rely on Stripe triggering 3DS when necessary in cases such as [Strong\nCustomer\nAuthentication](https://stripe.com/guides/strong-customer-authentication) (SCA),\nbut don’t want to accept [edge\ncases](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-three_d_secure-result)\nsuch as processing errors.\n\nRadar ruleDescription`Block if :is_3d_secure: and not\n:is_3d_secure_authenticated:`This rule blocks payments where the card is\nenrolled in 3DS and 3DS was attempted but the user didn’t successfully\nauthenticate. Cards that don’t support 3DS, SCA exemptions, off-session payments\n(such as recurring subscription charges), and wallets (such as Apple Pay or\nGoogle Pay) are accepted.\n#### Request 3D Secure based on Metadata\n\nYou want to use Radar to request 3DS on all charges with a custom metadata\nattribute.\n\nRadar ruleDescription`Request 3D Secure if ::foo:: = 'bar'`This rule checks for\na metadata condition and then requests 3DS. To check Customer metadata, replace\n`::foo:: = 'bar'` with a value like `::customer:trusted:: = 'false'`.\nIn this case, without a block rule, cards or wallets that don’t support 3DS\naren’t blocked. 3DS attempts with failed authentication don’t continue to charge\nauthorization.\n\n#### Always require 3D Secure based on Metadata\n\nYou want to use Radar to request 3DS on all charges with a custom metadata\nattribute and block cards that don’t support it.\n\nRadar ruleDescription`Request 3D Secure if ::foo:: = 'bar'`This rule checks for\na metadata condition and then requests 3DS. To check Customer metadata, replace\n`::foo:: = 'bar'` with a value like `::customer:trusted:: = 'false'`.`Block if\n::foo:: = 'bar' and not :is_3d_secure and not :is_off_session: and\n:digital_wallet: != 'apple_pay' and not(:digital_wallet: = 'android_pay' and\n:has_cryptogram:)`This rule blocks payments without a 3DS flow for charges with\na custom metadata attribute. However, it accepts legitimate transactions that\nmight have an SCA exemption or don’t have a clear failure or successful\nauthentication such as `attempt_acknowledged`. It accepts off-session payments\n(such as recurring subscription charges), and wallets (such as Apple Pay or\nGoogle Pay) to succeed.\n#### Request 3D Secure for all new cards and review if 3D Secure wasn’t supported\n\nYou want to use Radar to request 3DS on all new cards and manually review\ncharges from cards that don’t support 3DS.\n\nRadar ruleDescription`Request 3D Secure if\nis_missing(:seconds_since_card_first_seen:)`This rule requests 3DS on all cards\nthat haven’t been used on your account. To reduce user friction, you can add an\nadditional condition to only request 3DS if `:risk_level: != 'normal'`.`Request\n3D Secure if :is_new_card_on_customer:`As an alternative to the rule above, this\nrule requests 3DS on all cards that are newly used on a\n[Customer](https://docs.stripe.com/api/customers). To reduce user friction, you\ncan add an additional condition to only request 3DS if `:risk_level: !=\n'normal'`.`Review if not :is_3d_secure and not:is_off_session: and\n:digital_wallet: != 'apple_pay' and not(:digital_wallet: = 'android_pay' and\n:has_cryptogram:)`This rule marks payments where 3DS is expected but isn’t\nsupported for manual review. It ignores off-session payments (such as recurring\nsubscription charges) and wallets (such as Apple Pay or Google Pay). Payments\nmarked for review continue to authorization and can give additional signals,\nsuch as issuer CVC checks.\nIn this case, without a block rule, cards or wallets that don’t support 3DS\naren’t blocked. 3DS attempts with failed authentication don’t continue to charge\nauthorization.\n\n#### Always require 3D Secure for certain issuer countries\n\nYou want to use Radar to request 3DS on all charges from card issuers\noriginating from countries on a [custom\nlist](https://docs.stripe.com/radar/lists) and block cards that don’t support\nit.\n\nRadar ruleDescription`Request 3D Secure if :card_country: in\n@enforce_3ds_list`This rule checks for a condition based on card issuers\noriginating from countries and compares them to a [custom\nlist](https://docs.stripe.com/radar/lists). If they match, it requests\n3DS.`Block if :card_country: in @enforce_3ds_list and not :is_3d_secure and not\n:is_off_session: and :digital_wallet: != 'apple_pay' and not(:digital_wallet: =\n'android_pay' and :has_cryptogram:)`This rule blocks payments without a 3DS flow\nfor charges originating from countries on the custom list. However, it accepts\nlegitimate transactions that might have an SCA exemption or don’t have a clear\nfailure or successful authentication, such as `attempt_acknowledged`. It accepts\noff-session payments (such as recurring subscription charges) and wallets (such\nas Apple Pay or Google Pay) to succeed.\n#### Always require 3D Secure based on Radar risk level and review edge cases\n\nYou want to use Radar to request 3DS on all charges based on Radar risk level\nand block cards that don’t support 3DS, but manually review edge cases.\n\nRadar ruleDescription`Request 3D Secure if :risk_level: != 'normal'`This rule\nchecks for Radar’s risk level then requests 3DS on all charges with an elevated\nor high risk level above a certain amount.`Block if not :is_3d_secure: and\n:risk_level: != 'normal' and not :is_off_session: and :digital_wallet: !=\n'apple_pay' and not (:digital_wallet: = 'android_pay' and :has_cryptogram:)`This\nrule blocks payments without a 3DS flow for charges with an elevated or high\nrisk level above a certain amount. However, it accepts legitimate transactions\nthat might have an SCA exemption. It accepts off-session payments (such as\nrecurring subscription charges) and wallets (such as Apple Pay or Google Pay) to\nsucceed.`Review if not :is_3d_secure_authenticated: and :risk_level: != 'normal'\nand not :is_off_session: and :digital_wallet: != 'apple_pay' and not\n(:digital_wallet: = 'android_pay' and :has_cryptogram:)`This rule marks payments\nfor manual review that were using 3DS, but didn’t result in a fully\nauthenticated flow. This would review [edge\ncases](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-three_d_secure-result)\nsuch as `attempt_acknowledged` and would also mark legitimate payments despite\nSCA exemptions. Because review rules are evaluated after block rules, cards that\ndon’t support 3DS are blocked.\n## When to create rules\n\nStripe’s default rules can block a substantial number of fraudulent payments.\nBusinesses that need more control over which payments they want to review,\nallow, or block can write custom rules through Radar for Fraud Teams.\n\nConsider the following when deciding whether to enable custom rules:\n\n- Whether you see certain features or user behaviors as more risky (for example,\nuse of a disposable email).\n- Whether you want to implement rules based on payment amounts or perceived risk\nlevel (for example, automatically review if the payment is over 500 USD,\nautomatically allow if the payment is under 5 USD).\n- Whether your existing disputed and refunded payments share any common patterns\n(for example, similar amounts, card types, or countries).\n- Whether you have existing rules you want to migrate to Stripe—many of these\nrules might already be covered by Stripe’s machine learning models, and you can\ncheck how our system performs for your business before customizing it.\n\n### How to create effective rules\n\nWhile rules can help you automate your existing workflows, they can also\nnegatively affect your business if used incorrectly. For example, a rule can\nautomatically allow a large number of payments that are fraudulent or block a\nlarge number of legitimate payments if it’s not set up properly.\n\nKeep the following in mind while setting up rules:\n\n- Rules only apply to future payments and don’t apply to any that you’ve already\nprocessed.\n- Request 3DS rules only apply when using [Stripe\nCheckout](https://docs.stripe.com/payments/checkout), [Payment\nIntents](https://docs.stripe.com/payments/accept-a-payment), or [Setup\nIntents](https://docs.stripe.com/payments/save-and-reuse), and are evaluated\nbefore review, block, and allow rules.\n- Before implementing any block rule to block all payments that meet its\ncriteria, consider whether you’d rather review such payments first.\n- Implement allow rules minimally, because they override Stripe’s default rules\nalong with any other custom rules that match the same criteria.\n- You can create a maximum of 200 rules across all rule types per account.\n\n## Construct rules\n\nYou can add and manage rules from the [Rules tab of the Radar\npage](https://dashboard.stripe.com/test/radar/rules) in the Dashboard.\n\nTo add a new rule:\n\n- Click **+ Add rule**.\n- Choose the type rule type from the sub-menu.\n- In the rule editor, construct a rule using the syntax `{action} if {attribute}\n{operator} {value}` where:- `{action}`: How Radar responds when the rule\ncriteria is met. This value is pre-populated based on the rule type selection\nyou chose.\n- `{attribute}`: The element of the transaction to evaluate, such as the amount\nor card type. Begin typing with `:` to open a list of valid attributes. You can\nalso evaluate your custom metadata by enclosing it in double colons, for\nexample, `::product_sku::`.\n- `{operator}`: How to compare the attribute to the value, such as `=`, `>`,\n`!=`, and so on.\n- `{value}`: The value of the attribute to evaluate.\n- Click **Test rule**.\n- Correct any detected validation errors, if necessary.\n- On the **Review new rule** page, review how this rule performs against your\nrecent transactions to confirm whether you want to enable it.\n- Click **Add rule** to begin applying this rule to all future transactions.\n\n### Use Radar Assistant\n\nStripe’s rule editor has a built-in LLM assistant that constructs a Radar rule\nfrom a natural language prompt.\n\nTo use Radar Assistant:\n\n- From the [Rules tab of the Radar\npage](https://dashboard.stripe.com/test/radar/rules) in the Dashboard, click **+\nAdd rule**.\n- Choose rule type from the sub-menu.\n- In the rule editor, click **Radar Assistant**.\n\n![Manual rule\nwriting](https://b.stripecdn.com/docs-statics-srv/assets/manual-rule-writing-view.598ac04a039b6222f5f7b46e14a74204.png)\n\nManual rule writing\n\n![Radar\nassistant](https://b.stripecdn.com/docs-statics-srv/assets/radar-assistant-view.4b7580fb9a503ae6df62990b4dea0a68.png)\n\nRadar Assistant\n\n- In the message field, enter your rule request. You might ask to:- *Review\npayments where the card and IP countries are different.*\n- *Block Discover card payments of more than $1000.*\n- *Allow payments from stripe.com email addresses.*\n- When the Assistant returns its suggestion, you can either enter an additional\ncommand to make adjustments to the rule or you can click **Test rule** to see\nhow the rule performs against your recent transaction history.\n- When you’re satisfied with the rule, click **Add rule** to enable it for all\nfuture transactions.\n\n**Training data consent:** By using Radar Assistant you agree that Stripe can\nlog and use your chat entries to train and improve the Radar Assistant\ncapabilities. If you don’t want to have your chat entries used for this purpose,\nwrite rules manually.\n\nLearn more about [Stripe AI\nservices](https://support.stripe.com/questions/use-of-artificial-intelligence-(ai)-in-stripe-services).\n\n### Review rules\n\nStripe still processes payments normally when they meet a review rule’s\ncriteria. But we place them into your [review\nqueue](https://dashboard.stripe.com/test/radar) so your team can look at them\nmore closely. Setting up a rule that’s too broad can result in too many payments\nbeing placed into your review queue, slowing down your customers and burdening\nyour review team.\n\nStripe’s rule testing interface runs a simulation on the last 6 months of\ncharges to determine how many legitimate, fraudulent, and blocked payments would\nhave been affected by the rule, had it been implemented. While testing a rule\nand examining the last 6 months, make sure that:\n\n- **Overall volume of payments is low**. Reviewing these payments shouldn’t\ncreate a burden to your team.\n- **Human reviewers add value**. A human reviewer can generally identify if a\npayment was fraudulent with greater confidence than the automated system.\n- **The rule results in a mix of successful and refunded or disputed payments**.\nThis means that additional inspection on these types of payments can help\nseparate legitimate payments from those that are fraudulent.\n\nThe following is an example of how to improve a review rule created by a\nbusiness that wants to review pre-paid credit cards.\n\nOriginal ruleImproved rule`Review if :card_funding: = 'prepaid'``Review if\n:is_disposable_email: and :card_funding: = 'prepaid'`Too broad—results in too\nmany reviewsMore focused—results in a smaller number of reviews\n### Block rules\n\nYou can use block rules to block payments that you’re confident are fraudulent,\nor based on any restrictions your business has in place (such as blocking\npayments from prepaid cards). If you’re not sure how to apply block rules, we\nrecommend placing payments in review using a review rule. After spending some\ntime reviewing these payments for potential false positives, you can confirm\nwhether you want to create a block rule instead.\n\nBlock rules only impact fraudulent and successful payments, because\nalready-blocked payments are unaffected. While testing a rule, make sure that\nyou:\n\n- **Keep false positives as low as possible**. During testing, Stripe identifies\nthe number of successful and disputed payments that would’ve been matched by the\nrule. A good block rule results in significantly more fraudulent payments\nblocked than legitimate payments.\n- **Minimize unnecessary rules**. If your rule appears to perform very well but\nis already covered by an existing rule, your newer rule might not be necessary.\nSimilarly, if the results during testing appear to be mixed, consider setting up\na review rule instead so you can gather more information about those types of\npayments.\n\nThe following is an example of how to improve a block rule created by a business\nthat’s suffering from a high level of fraud from payments outside the US:\n\nOriginal ruleImproved rule`Block if :card_country: != 'US'``Block if\n:card_country: != 'US' and :risk_level: = 'elevated'`Too broad—high number of\nlegitimate payments blockedMore focused—results in a smaller number of reviews\n### Allow rules\n\nAllow rules override all of your other rules, so use them with caution. Many\nbusinesses might not need to implement allow rules. If you have concerns that an\nallow rule could let through even a small number of fraudulent payments,\nconsider adjustments to further restrict these rules before implementing them.\n\nAllow rules apply to all new payments as soon as you create the rule. This\nincludes any payments that are similar to previously blocked payments. While\ntesting a rule, make sure that you:\n\n- **Examine the number of previously blocked payments that would have been\nallowed**. Allow rules override all other rules and Stripe’s risk assessment.\nWhen testing a new allow rule, all of the payments shown would have been allowed\nif this rule were active. This can include payments that had been blocked or\ndisputed, impacting your future dispute rates.\n- **Continue to block any high-risk payments**. You can do this by adding the\nfollowing to any allow rule: `and :risk_level: != 'highest'`\n- **Evaluate a history of legitimate transactions at your business**. You can\nanalyze connections between your own customers to allow a higher volume of\ntransactions based on a history of legitimate purchases. This helps you block\nfewer payments from customers that have a proven history at your business. To do\nthis, review the [attributes\nlist](https://docs.stripe.com/radar/rules/reference#supported-attributes) and\nlook for attributes that include the word “customer.”\n\nThe following is an example of how to improve an allow rule for a business that\ngenerally (but not always) sees good payments coming from customers in the\nUnited Kingdom:\n\nOriginal ruleImproved rule`Allow if :ip_country: = 'GB'``Allow if :ip_country: =\n'GB' and :risk_level: != 'highest'`Too broad—some fraudulent payments are\nallowedMore focused—a smaller number of fraudulent payments are allowed\n## Maintaining your rules\n\nAs your business continues to grow, you want to be sure that your rules continue\nto reflect the types of customers that you want to do business with. The\nfollowing are some best practices to keep rules current for the state of your\nbusiness.\n\n### Regularly monitor rules to ensure they’re still effective\n\n#### Rule metrics\n\nFraud patterns constantly change, so we provide\n[metrics](https://dashboard.stripe.com/settings/radar/rules) to show how these\nrules are performing. These metrics vary depending on the type of rule, because\nthe rule types perform different actions.\n\n!\n\nUse the **rule performance chart** to understand the behavior of your Radar\nrules. Look for unexpected spikes or declines in the number of payments matching\nyour rules, such as allow rules letting too many payments through or block rules\nblocking too many. These spikes may indicate a change in the types of payments\nyour business is receiving or that might warrant updates to the rules\nthemselves. Updates made to rules are displayed as triangles on the graph and\ncan help you compare the impact of the change before and after you make it.\n\n**Color-coded lines** track the number of payments that match\n[3DS](https://docs.stripe.com/issuing/3d-secure) rules, allow rules, block\nrules, and review rules. **Triangular symbols** on these graph lines represent\nupdates to rules of the corresponding type.\n\nYou can find information about the effectiveness of your rules and see how many\npayments each one has taken action against. You can also view and download a\nfiltered list of every payment that a rule has been applied to. Evaluate this\ninformation to help you decide if you need to make changes to any rules or\nremove them entirely.\n\nTo view additional commands, click the overflow menu () menu. Additional\ncommands include: **Disable**, **Enable**, **Edit** or **Delete** for any rule.\n\nYou can also use our reporting products Sigma and Data Pipelines to [query\ndisputes and fraud\ndata](https://docs.stripe.com/stripe-data/query-disputes-and-fraud-data),\nincluding rule decisions and attributes for each individual payment.\n\n#### Evaluate rule effectiveness\n\nYou can find information about the effectiveness of your rules and see how many\npayments each one has affected. You can also view and download a filtered list\nof every payment that a rule has been applied to. Review the sample questions in\nthe following table to help you decide if you need to make changes to any rules\nor remove them entirely.\n\nRule TypeEvaluateActions to considerGeneralIf this rule no longer match any\npayments at allRemove the rule.If this rule has anomalous behavior, such as\nallowing more payments than in previous time periods.Manually review payments\nthat matched this rule to determine if this is the behavior that you want.3DSIf\n3DS completion rate is high, but the number of disputes or EFWs is low.Remove\nthe rule since you may be issuing friction to good users.If fraud is high for\ntransactions that pass 3DS.Consider modifying your 3DS rule into a block rule to\nprevent these users from passing frictionless flow (controlled by issuers) or\ncommitting first party fraud.If the conversion rate for 3DS is low.This might be\na good rule since it might be mostly blocking fraudsters, but consider manually\ninvestigating matched payments to make sure your good users aren’t abandoning\ndue to additional friction.AllowIf the number of disputes, EFWs, Refunds, or\nFailed payments are high.Remove the rule that allows bad payments\nthrough.BlockIs the number of blocks going down, but your fraud is still steady\nor is increasing?Modify your rule because it might no longer be effective.If the\nnumber of blocks is going up, but your fraud is still steady or\nincreasing.Modify your rule since it might be blocking good users.If the number\nof blocks is going up and your fraud is going down.This suggests that your rule\nis effective, but consider manually reviewing a few transactions to make sure\nthat you’re not blocking too many good users.Manual ReviewIf the percentage of\npayments that get reviewed is low.Make the rule more restrictive since it might\nbe too broad.If the number of successful or approved payments is high.Remove the\nmanual review rule entirely or write an allow rule to target those payments.If\nthe number of refunds or disputes and Early Fraud Warnings are high.Convert to a\nblock rule.\n**Request 3DS rules**\n\nFor request 3DS rules, we display:\n\n- **3DS Requested**—the number of times a rule triggered a 3DS request.\n\nClick a 3DS rule to see the following metrics:\n\n!\n\n**Allow rules**\n\nFor allow rules, Radar for Fraud Teams users can view:\n\n- **Allowed payments**—The total number of payments allowed by your rules.\n- **Volume, allowed payments**—The total amount, in your local currency,\nassociated with payments allowed by your rules.\n- **Risk score**—The corresponding [risk\noutcomes](https://docs.stripe.com/radar/risk-evaluation#risk-outcomes) assigned\nby Stripe machine learning models to the set of payments allowed by your rules.\n- **Disputes from overrides**—The total number of allowed payments that were\ndisputed.\n- **Volume, disputes from overrides**—The total amount, in your local currency,\nassociated with disputes from allowed payments.\n\nClick an Allow rule to see the following metrics:\n\n!\n\n**Block rules**\n\nFor block rules, we display:\n\n- **Blocked payments**—The total number of payments blocked by your rules.\n- **Volume, blocked payments**—The total amount, in your local currency,\nassociated with payments blocked by your rules.\n\nRadar for Fraud Teams users can also view:\n\n- **Risk score**—The corresponding [risk\noutcomes](https://docs.stripe.com/radar/risk-evaluation#risk-outcomes) assigned\nby Stripe machine learning models to the set of payments allowed by your rules.\n- **Est. false positive rate**—The estimated percentage of non-fraudulent\npayments that were blocked for both your block rules as a set and by individual\nrules. (These estimates are made using the estimated false positive rates of the\ncorresponding machine learning risk scores, which we calculate with experiments\nacross the Stripe network.)\n- **Est. fraudulent payments prevented**—The estimated number of fraudulent\npayments that your block rules prevented. Stripe uses machine learning risk\nscores, calculated by analyzing millions of transactions across the Stripe\nnetwork, to predict payments with a high probability of being disputed or\ndeclined due to fraud and estimate which of those payments were successfully\nblocked by your rules.\n\nClick a Block rule to see the following metrics:\n\n!\n\n**Review rules**\n\nFor review rules, Radar for Fraud Teams users can view:\n\n- **Payments sent to review**—The total number of payments that were sent to\nmanual review by your rules.\n- **Volume, approved reviews**—The total amount, in your local currency,\nassociated with approved payment reviews.\n- **Refund rate**—The percentage of reviews that were refunded.\n- **Disputes from approved reviews**—The total number of payments that were\napproved in your review, but were ultimately disputed.\n- **Volume, disputes from approved reviews**—The total amount, in your local\ncurrency, associated with disputes from approved payment reviews.\n\nClick a Review rule to see the following metrics:\n\n!\n\n### Regularly monitor your manual review queue\n\nIf your review queue is getting too large to manage, check to see if you have\nthe right rules in place. If most reviews end up being refunded as fraudulent,\nconsider some additional rules to block payments. Likewise, if most payments are\napproved, consider making your review rules more focused.\n\n### Analyze your disputed and refunded payments\n\n[Disputes](https://docs.stripe.com/disputes) are inherently linked to fraud, so\nthe more you do to reduce fraud, the lower your dispute rate. Check to see if\ndisputed payments share any similar characteristics (for example, from the same\nlocations or of similar amounts). You can also perform this type of\ninvestigation by looking at payments that have been refunded during a review. If\nyou see trends, you can test and create the appropriate rules. If any payments\nappear to be fraudulent, refund and report them as fraud to avoid potential\ndisputes.\n\nYou can also use our reporting products, Sigma and Data Pipeline, to [query\ndisputes and fraud\ndata](https://docs.stripe.com/stripe-data/query-disputes-and-fraud-data).\n\nYou can respond to any incoming disputes using the Dashboard or through the API,\nand our [dispute documentation](https://docs.stripe.com/disputes) includes some\nsuggestions on how to present a well documented case.\n\n### Anticipate large changes to your business that might impact your fraud rate\n\nIf you’re planning any major product releases or changes to your service (for\nexample, a new, high-value product or expanding your service into new\ncountries), you might want to monitor these payments in the beginning. For these\nkinds of changes, it’s a good practice to set up some review rules so you can\nexamine any new payments. Reviewing these payments and identifying patterns can\nhelp you set up new rules to protect your business from fraud.\n\n## See also\n\n- [3DS Rule Examples](https://docs.stripe.com/radar/rules#request-3d-secure)\n- [Continuous Fraud Management\nGuide](https://stripe.com/guides/improve-fraud-management-with-radar-for-fraud-teams-and-stripe-data)\n- [Query Disputes and Fraud\nData](https://docs.stripe.com/stripe-data/query-disputes-and-fraud-data)\n- [Rules Reference](https://docs.stripe.com/radar/rules/reference)\n- [Supported\nAttributes](https://docs.stripe.com/radar/rules/supported-attributes)\n\n## Links\n\n- [Radar for Fraud Teams](https://docs.stripe.com/radar)\n- [Dashboard](https://dashboard.stripe.com/test/radar/rules)\n- [Geo-blocking\nRegulation](https://support.stripe.com/questions/eu-geo-blocking-regulation-changes)\n- [CVC](https://docs.stripe.com/disputes/prevention/verification)\n- [wallet](https://docs.stripe.com/payments/payment-methods)\n- [3DS with Stripe\nBilling](https://docs.stripe.com/billing/migration/strong-customer-authentication)\n- [3DS](https://docs.stripe.com/payments/3d-secure)\n-\n[liability](https://docs.stripe.com/payments/3d-secure/authentication-flow#disputed-payments)\n- [Strong Customer\nAuthentication](https://stripe.com/guides/strong-customer-authentication)\n- [Payment Intents](https://docs.stripe.com/payments/accept-a-payment)\n- [Setup Intents](https://docs.stripe.com/payments/save-and-reuse)\n- [required\n3DS](https://docs.stripe.com/payments/3d-secure/authentication-flow#three-ds-cards)\n- [Radar for Fraud Teams](https://stripe.com/radar/fraud-teams)\n- [risk\nappetite](https://stripe.com/guides/improve-fraud-management-with-radar-for-fraud-teams-and-stripe-data)\n- [edge\ncases](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-three_d_secure-result)\n- [Customer](https://docs.stripe.com/api/customers)\n- [custom list](https://docs.stripe.com/radar/lists)\n- [team\nmembers](https://support.stripe.com/questions/can-i-invite-other-team-members-or-my-developer-to-use-my-stripe-account)\n- [team settings](https://dashboard.stripe.com/settings/team)\n- [Stripe Checkout](https://docs.stripe.com/payments/checkout)\n- [Stripe AI\nservices](https://support.stripe.com/questions/use-of-artificial-intelligence-(ai)-in-stripe-services)\n- [review queue](https://dashboard.stripe.com/test/radar)\n- [contact us](https://support.stripe.com/contact)\n- [attributes\nlist](https://docs.stripe.com/radar/rules/reference#supported-attributes)\n- [metrics](https://dashboard.stripe.com/settings/radar/rules)\n- [3DS](https://docs.stripe.com/issuing/3d-secure)\n- [query disputes and fraud\ndata](https://docs.stripe.com/stripe-data/query-disputes-and-fraud-data)\n- [risk outcomes](https://docs.stripe.com/radar/risk-evaluation#risk-outcomes)\n- [Disputes](https://docs.stripe.com/disputes)\n- [3DS Rule Examples](https://docs.stripe.com/radar/rules#request-3d-secure)\n- [Rules Reference](https://docs.stripe.com/radar/rules/reference)\n- [Supported\nAttributes](https://docs.stripe.com/radar/rules/supported-attributes)",
  "metadata": {
    "title": "Fraud prevention rules | Stripe Documentation",
    "description": "Stripe Radar uses machine learning technology to evaluate risk across millions of transactions and create rules that help you prevent fraud. Radar for Fraud Teams supports custom rule writing based on your specific business.",
    "sourceURL": "https://docs.stripe.com/radar/rules"
  }
}