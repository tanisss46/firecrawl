{
  "content": "# Accept card payments without webhooks\n\n## Learn how to confirm a card payment on your server and handle card authentication requests.\n\nWebiOSAndroidReact Native\n#### Caution\n\nStripe recommends using the newer [Payment\nElement](https://docs.stripe.com/payments/quickstart) instead of the Card\nElement. It allows you to accept multiple payment methods with a single Element.\nLearn more about [when to use the Card Element and Payment\nElement](https://docs.stripe.com/payments/payment-card-element-comparison).\n\nFor a wider range of support and future proofing, use the [standard\nintegration](https://docs.stripe.com/payments/accept-a-payment) for asynchronous\npayments.\n\nThis integration waits for the returned response from the client and finalizes a\npayment on the server, without using\n[webhooks](https://docs.stripe.com/webhooks) or processing offline events. While\nit may seem simpler, this integration is difficult to scale as your business\ngrows and has several limitations:\n\n- **Only supports cards**—You’ll have to write more code to support ACH and\npopular regional payment methods separately.\n- **Double-charge risk**—By synchronously creating a new PaymentIntent each time\nyour customer attempts to pay, you risk accidentally double-charging your\ncustomer. Be sure to follow [best\npractices](https://docs.stripe.com/error-low-level#idempotency).\n- **Extra trip to client**—​​Cards with 3D Secure or those that are subject to\nregulations such as [Strong Customer\nAuthentication](https://docs.stripe.com/strong-customer-authentication) require\nextra steps on the client. ​\n\nKeep these limitations in mind if you decide to use this integration. Otherwise,\nuse the [standard\nintegration](https://docs.stripe.com/payments/accept-a-payment).\n\n[Set up\nStripe](https://docs.stripe.com/payments/accept-a-payment-synchronously#web-setup)\nFirst, you need a Stripe account. [Register\nnow](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n```\n# Available as a gem\nsudo gem install stripe\n```\n\n```\n# If you use bundler, you can add this line to your Gemfile\ngem 'stripe'\n```\n\n[Collect card\ndetailsClient-side](https://docs.stripe.com/payments/accept-a-payment-synchronously#web-collect-card-details)\nCollect card information on the client with Stripe.js and Stripe Elements.\nElements is a set of prebuilt UI components for collecting and validating card\nnumber, postal code, and expiration date.\n\nA Stripe Element contains an iframe that securely sends the payment information\nto Stripe over an HTTPS connection. The checkout page address must also start\nwith https:// rather than http:// for your integration to work.\n\nYou can test your integration without using HTTPS. [Enable\nit](https://docs.stripe.com/security/guide#tls) when you’re ready to accept live\npayments.\n\nHTML + JSReact\nInclude the [Stripe.js](https://docs.stripe.com/js) script in the head of every\npage on your site. Elements is automatically available as a feature of\nStripe.js.\n\n```\n<script src=\"https://js.stripe.com/v3/\"></script>\n```\n\nIncluding the script on every page of your site lets you take advantage of\nStripe’s [advanced fraud functionality](https://docs.stripe.com/radar) and\nability to detect anomalous browsing behavior.\n\n### Build the payment form\n\nTo securely collect card details from your customers, Elements creates UI\ncomponents for you that are hosted by Stripe. They’re then placed into your\npayment form as an iframe. To determine where to insert these components, create\nempty DOM elements (containers) with unique IDs within your payment form.\n\n```\n<form id='payment-form'>\n <label>\n Card details\n <!-- placeholder for Elements -->\n <div id=\"card-element\"></div>\n </label>\n <button type=\"submit\">Submit Payment</button>\n</form>\n```\n\nNext, create an instance of the [Stripe\nobject](https://docs.stripe.com/js#stripe-function), providing your publishable\n[API key](https://docs.stripe.com/keys) as the first parameter. Afterwards,\ncreate an instance of the [Elements\nobject](https://docs.stripe.com/js#stripe-elements) and use it to\n[mount](https://docs.stripe.com/js#element-mount) a Card element in the relevant\nplaceholder in the page.\n\n```\nconst stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\nconst elements = stripe.elements();\n// Set up Stripe.js and Elements to use in checkout form\nconst style = {\n base: {\n color: \"#32325d\",\n fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\n fontSmoothing: \"antialiased\",\n fontSize: \"16px\",\n \"::placeholder\": {\n color: \"#aab7c4\"\n }\n },\n invalid: {\n color: \"#fa755a\",\n iconColor: \"#fa755a\"\n },\n};\nconst cardElement = elements.create('card', {style});\ncardElement.mount('#card-element');\n```\n\nThe `card` Element simplifies the form and minimizes the number of fields\nrequired by inserting a single, flexible input field that securely collects all\nnecessary card details.\n\nOtherwise, combine `cardNumber`, `cardExpiry`, and `cardCvc` Elements for a\nflexible, multi-input card form.\n\n#### Note\n\nAlways collect a postal code to increase card acceptance rates and reduce fraud.\n\nThe [single line Card\nElement](https://docs.stripe.com/js/element/other_element?type=card)\nautomatically collects and sends the customer’s postal code to Stripe. If you\nbuild your payment form with split Elements ([Card\nNumber](https://docs.stripe.com/js/element/other_element?type=cardNumber),\n[Expiry](https://docs.stripe.com/js/element/other_element?type=cardExpiry),\n[CVC](https://docs.stripe.com/js/element/other_element?type=cardCvc)), add a\nseparate input field for the customer’s postal code.\n\n### Create a PaymentMethod\n\nFinally, use\n[stripe.createPaymentMethod](https://docs.stripe.com/js/payment_methods/create_payment_method)\non your client to collect the card details and create a\n[PaymentMethod](https://docs.stripe.com/api/payment_methods) when the user\nclicks the submit button.\n\n```\nconst form = document.getElementById('payment-form');\nform.addEventListener('submit', async (event) => {\n // We don't want to let default form submission happen here,\n // which would refresh the page.\n event.preventDefault();\n const result = await stripe.createPaymentMethod({\n type: 'card',\n card: cardElement,\n billing_details: {\n // Include any additional collected billing details.\n name: 'Jenny Rosen',\n },\n })\n stripePaymentMethodHandler(result);\n});\n```\n\n[Submit the PaymentMethod to your\nserverClient-side](https://docs.stripe.com/payments/accept-a-payment-synchronously#web-send-to-server)\nIf the [PaymentMethod](https://docs.stripe.com/api/payment_methods) was created\nsuccessfully, send its ID to your server.\n\n```\nconst stripePaymentMethodHandler = async (result) => {\n if (result.error) {\n // Show error in payment form\n } else {\n // Otherwise send paymentMethod.id to your server (see Step 4)\n const res = await fetch('/pay', {\n method: 'POST',\n headers: { 'Content-Type': 'application/json' },\n body: JSON.stringify({\n payment_method_id: result.paymentMethod.id,\n }),\n })\n const paymentResponse = await res.json();\n // Handle server response (see Step 4)\n handleServerResponse(paymentResponse);\n }\n}\n```\n\n[Create a\nPaymentIntentServer-side](https://docs.stripe.com/payments/accept-a-payment-synchronously#create-payment-intent)\nSet up an endpoint on your server to receive the request. This endpoint will\nalso be used\n[later](https://docs.stripe.com/payments/accept-a-payment-synchronously#confirm-payment)\nto handle cards that require an extra step of authentication.\n\n[Create a new\nPaymentIntent](https://docs.stripe.com/payments/payment-intents#creating-a-paymentintent)\nwith the ID of the\n[PaymentMethod](https://docs.stripe.com/api/payment_methods/object) created on\nyour client. You can\n[confirm](https://docs.stripe.com/api/payment_intents/confirm) the PaymentIntent\nby setting the\n[confirm](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-confirm)\nproperty to true when the PaymentIntent is created or by calling\n[confirm](https://docs.stripe.com/api/payment_intents/confirm) after creation.\n[Separate authorization and\ncapture](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method) is\nalso supported for card payments.\n\nIf the payment requires additional actions such as 3D Secure authentication, the\nPaymentIntent’s status will be set to `requires_action`. If the payment failed,\nthe status is set back to `requires_payment_method` and you should show an error\nto your user. If the payment doesn’t require any additional authentication then\na charge is created and the PaymentIntent status is set to `succeeded`.\n\n#### Note\n\nOn versions of the API before\n[2019-02-11](https://docs.stripe.com/upgrades#2019-02-11),\n`requires_payment_method` appears as `requires_source` and `requires_action`\nappears as `requires_source_action`.\n\n```\ncurl https://api.stripe.com/v1/payment_intents \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"payment_method\"=\"{{PAYMENT_METHOD_ID}}\" \\\n -d \"amount\"=1099 \\\n -d \"currency\"=\"usd\" \\\n -d \"confirmation_method\"=\"manual\" \\\n -d \"confirm\"=\"true\"\n```\n\nIf you want to save the card to reuse later, create a\n[Customer](https://docs.stripe.com/api/customers/create) to store the\n[PaymentMethod](https://docs.stripe.com/api/payment_methods) and pass the\nfollowing additional parameters when creating the PaymentIntent:\n\n-\n[customer](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-customer).\nSet to the ID of the [Customer](https://docs.stripe.com/api/customers).\n-\n[setup_future_usage](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-setup_future_usage).\nSet to `off_session` to tell Stripe that you plan to reuse this PaymentMethod\nfor off-session payments when your customer is not present. Setting this\nproperty saves the PaymentMethod to the Customer after the PaymentIntent is\nconfirmed and any required actions from the user are complete. See the code\nsample on [saving cards after a\npayment](https://github.com/stripe-samples/saving-card-after-payment/tree/master/without-webhooks)\nfor more details.\n[Handle any next\nactionsClient-side](https://docs.stripe.com/payments/accept-a-payment-synchronously#web-handle-next-actions)\nWrite code to handle situations that require your customer to intervene. A\npayment normally succeeds after you confirm it on the server in [step\n4](https://docs.stripe.com/payments/accept-a-payment-synchronously#create-payment-intent).\nHowever, when the PaymentIntent requires additional action from the customer,\nsuch as authenticating with [3D\nSecure](https://docs.stripe.com/payments/3d-secure), this code comes into play.\n\nUse\n[stripe.handleCardAction](https://docs.stripe.com/js/payment_intents/handle_card_action)\nto trigger the UI for handling customer action. If authentication succeeds, the\nPaymentIntent has a status of `requires_confirmation`. Confirm the PaymentIntent\nagain on your server to finish the payment.\n\nWhile testing, use a [test card\nnumber](https://docs.stripe.com/testing#regulatory-cards) that requires\nauthentication (for example, 4000002760003184) to force this flow. Using a card\nthat doesn’t require authentication (for example, 4242424242424242) skips this\npart of the flow and completes at step 4.\n\n```\nconst handleServerResponse = async (response) => {\n if (response.error) {\n // Show error from server on payment form\n } else if (response.requires_action) {\n // Use Stripe.js to handle the required card action\n const { error: errorAction, paymentIntent } =\n await stripe.handleCardAction(response.payment_intent_client_secret);\n if (errorAction) {\n // Show error from Stripe.js in payment form\n } else {\n // The card action has been handled\n // The PaymentIntent can be confirmed again on the server\n const serverResponse = await fetch('/pay', {\n method: 'POST',\n headers: { 'Content-Type': 'application/json' },\n body: JSON.stringify({ payment_intent_id: paymentIntent.id })\n });\n handleServerResponse(await serverResponse.json());\n }\n } else {\n // Show success message\n }\n}\n```\n\n#### Note\n\n`stripe.handleCardAction` may take several seconds to complete. During that\ntime, disable your form from being resubmitted and show a waiting indicator like\na spinner. If you receive an error, show it to the customer, re-enable the form,\nand hide the waiting indicator. If the customer must perform additional steps to\ncomplete the payment, such as authentication, Stripe.js walks them through that\nprocess.\n\n[Confirm the PaymentIntent\nagainServer-side](https://docs.stripe.com/payments/accept-a-payment-synchronously#confirm-payment)\nThis code is only executed when a payment requires additional\nauthentication—just like the handling in the previous step. The code itself\nisn’t optional because any payment could require this extra step.\n\nUsing the same endpoint you set up\n[above](https://docs.stripe.com/payments/accept-a-payment-synchronously#create-payment-intent),\nconfirm the PaymentIntent again to finalize the payment and fulfill the order.\nMake sure this confirmation happens within one hour of the payment attempt.\nOtherwise, the payment fails and transitions back to `requires_payment_method`.\n\n```\ncurl https://api.stripe.com/v1/payment_intents/{{PAYMENT_INTENT_ID}}/confirm \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -X \"POST\"\n```\n\n[Test the\nintegration](https://docs.stripe.com/payments/accept-a-payment-synchronously#web-test-integration)\n​​Several test cards are available for you to use in a sandbox to make sure this\nintegration is ready. Use them with any CVC and an expiration date in the\nfuture.\n\nNumberDescription4242424242424242Succeeds and immediately processes the\npayment.4000002500003155Requires authentication. Stripe triggers a modal asking\nfor the customer to authenticate.4000000000009995Always fails with a decline\ncode of `insufficient_funds`.\nFor the full list of test cards see our guide on\n[testing](https://docs.stripe.com/testing).\n\n[OptionalRecollect a\nCVC](https://docs.stripe.com/payments/accept-a-payment-synchronously#web-recollect-cvc)\n\n## Links\n\n- [Payment Element](https://docs.stripe.com/payments/quickstart)\n- [when to use the Card Element and Payment\nElement](https://docs.stripe.com/payments/payment-card-element-comparison)\n- [standard integration](https://docs.stripe.com/payments/accept-a-payment)\n- [webhooks](https://docs.stripe.com/webhooks)\n- [migration guide](https://docs.stripe.com/payments/payment-intents/migration)\n- [best practices](https://docs.stripe.com/error-low-level#idempotency)\n- [Strong Customer\nAuthentication](https://docs.stripe.com/strong-customer-authentication)\n- [Register now](https://dashboard.stripe.com/register)\n- [Enable it](https://docs.stripe.com/security/guide#tls)\n- [Stripe.js](https://docs.stripe.com/js)\n- [https://js.stripe.com/v3/](https://js.stripe.com/v3/)\n- [advanced fraud functionality](https://docs.stripe.com/radar)\n- [Stripe object](https://docs.stripe.com/js#stripe-function)\n- [API key](https://docs.stripe.com/keys)\n- [Elements object](https://docs.stripe.com/js#stripe-elements)\n- [mount](https://docs.stripe.com/js#element-mount)\n- [View full\nsample](https://github.com/stripe-samples/accept-a-payment/blob/main/custom-payment-flow/client/html/card.js#L63-L73)\n- [single line Card\nElement](https://docs.stripe.com/js/element/other_element?type=card)\n- [Card\nNumber](https://docs.stripe.com/js/element/other_element?type=cardNumber)\n- [Expiry](https://docs.stripe.com/js/element/other_element?type=cardExpiry)\n- [CVC](https://docs.stripe.com/js/element/other_element?type=cardCvc)\n-\n[stripe.createPaymentMethod](https://docs.stripe.com/js/payment_methods/create_payment_method)\n- [PaymentMethod](https://docs.stripe.com/api/payment_methods)\n- [Create a new\nPaymentIntent](https://docs.stripe.com/payments/payment-intents#creating-a-paymentintent)\n- [PaymentMethod](https://docs.stripe.com/api/payment_methods/object)\n- [confirm](https://docs.stripe.com/api/payment_intents/confirm)\n-\n[confirm](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-confirm)\n- [Separate authorization and\ncapture](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method)\n- [2019-02-11](https://docs.stripe.com/upgrades#2019-02-11)\n- [Customer](https://docs.stripe.com/api/customers/create)\n-\n[customer](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-customer)\n- [Customer](https://docs.stripe.com/api/customers)\n-\n[setup_future_usage](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-setup_future_usage)\n- [saving cards after a\npayment](https://github.com/stripe-samples/saving-card-after-payment/tree/master/without-webhooks)\n- [3D Secure](https://docs.stripe.com/payments/3d-secure)\n-\n[stripe.handleCardAction](https://docs.stripe.com/js/payment_intents/handle_card_action)\n- [test card number](https://docs.stripe.com/testing#regulatory-cards)\n- [testing](https://docs.stripe.com/testing)",
  "metadata": {
    "title": "Accept card payments without webhooks | Stripe Documentation",
    "description": "Learn how to confirm a card payment on your server and handle card authentication requests.",
    "sourceURL": "https://docs.stripe.com/payments/accept-a-payment-synchronously"
  }
}