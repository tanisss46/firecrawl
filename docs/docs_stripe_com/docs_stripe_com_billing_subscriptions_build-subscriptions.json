{
  "content": "# Build a subscriptions integration\n\n## Create and manage subscriptions to accept recurring payments.\n\nWebiOSAndroidReact NativeStripe-hosted pageEmbedded formCustom flow\n\n![Checkout subscription\npage](https://b.stripecdn.com/docs-statics-srv/assets/checkout-subs-preview.d409ee79bf1f3280b9dfd3968b314c21.png)\n\nLow code\nCustomize logo, images, and colors.\n\nUse prebuilt hosted forms to collect payments and manage\n[subscriptions](https://docs.stripe.com/billing/subscriptions/creating).\n\nClone a sample integration [from\nGitHub](https://github.com/stripe-samples/checkout-single-subscription).\n\nFor an immersive version of this guide, see the [Billing integration\nquickstart](https://docs.stripe.com/billing/quickstart).\n\nExplore the [sample on\nGitHub](https://github.com/stripe-samples/checkout-single-subscription) or the\n[demo](https://checkout.stripe.dev/).\n\n## What you’ll build\n\nThis guide describes how to sell fixed-price monthly subscriptions using [Stripe\nCheckout](https://docs.stripe.com/payments/checkout).\n\nThis guide shows you how to:\n\n- Model your business by building a product catalog\n- Add a Checkout session to your site, including a button and success and\ncancellation pages\n- Monitor subscription events and provision access to your service\n- Set up the [customer portal](https://docs.stripe.com/customer-management)\n- Add a customer portal session to your site, including a button and redirect\n- Let customers manage their subscription through the portal\n\nAfter you complete the integration, you can extend it to:\n\n- [Display taxes](https://docs.stripe.com/payments/checkout/taxes)\n- [Apply\ndiscounts](https://docs.stripe.com/billing/subscriptions/coupons#using-coupons-in-checkout)\n- [Offer customers a free trial\nperiod](https://docs.stripe.com/billing/subscriptions/trials)\n- [Add more payment\nmethods](https://docs.stripe.com/payments/payment-methods/integration-options)\n- [Integrate the hosted invoice\npage](https://docs.stripe.com/invoicing/hosted-invoice-page)\n- [Use Checkout in setup mode](https://docs.stripe.com/payments/save-and-reuse)\n- [Set up metered\nbilling](https://docs.stripe.com/products-prices/pricing-models#usage-based-pricing),\n[pricing\ntiers](https://docs.stripe.com/products-prices/pricing-models#tiered-pricing),\nand [usage-based\npricing](https://docs.stripe.com/products-prices/pricing-models#usage-based-pricing)\n- [Manage prorations](https://docs.stripe.com/billing/subscriptions/prorations)\n- [Allow customers to subscribe to multiple\nproducts](https://docs.stripe.com/billing/subscriptions/multiple-products)\n- [Integrate entitlements to manage access to your product’s\nfeatures](https://docs.stripe.com/billing/entitlements)\n[Set up\nStripe](https://docs.stripe.com/billing/subscriptions/build-subscriptions#set-up-stripe)\nInstall the Stripe client of your choice:\n\n```\n# Available as a gem\nsudo gem install stripe\n```\n\n```\n# If you use bundler, you can add this line to your Gemfile\ngem 'stripe'\n```\n\nInstall the Stripe CLI (optional). The CLI provides\n[webhook](https://docs.stripe.com/webhooks#test-webhook) testing, and you can\nrun it to create your products and prices.\n\n```\n# Install Homebrew to run this command: https://brew.sh/\nbrew install stripe/stripe-cli/stripe\n\n# Connect the CLI to your dashboard\nstripe login\n```\n\nFor additional install options, see [Get started with the Stripe\nCLI](https://docs.stripe.com/stripe-cli).\n\n[Create the pricing modelDashboard or Stripe\nCLI](https://docs.stripe.com/billing/subscriptions/build-subscriptions#create-pricing-model)\nCreate your [products](https://docs.stripe.com/api/products) and their\n[prices](https://docs.stripe.com/api/prices) in the Dashboard or with the Stripe\nCLI.\n\nThis example uses a fixed-price service with two different service-level\noptions: Basic and Premium. For each service-level option, you need to create a\nproduct and a recurring price. (If you want to add a one-time charge for\nsomething like a setup fee, create a third product with a one-time price. To\nkeep things simple, this example doesn’t include a one-time charge.)\n\nIn this example, each product bills at monthly intervals. The price for the\nBasic product is 5 USD. The price for the Premium product is 15 USD.\n\nDashboardStripe CLI\nGo to the [Add a product](https://dashboard.stripe.com/test/products/create)\npage and create two products. Add one price for each product, each with a\nmonthly recurring billing period:\n\n- Premium product: Premium service with extra features\n\n- Price: Standard pricing | 15 USD\n- Basic product: Basic service with minimum features\n\n- Price: Standard pricing | 5 USD\n\nAfter you create the prices, record the price IDs so you can use them in other\nsteps. Price IDs look like this: `price_G0FvDp6vZvdwRZ`.\n\nWhen you’re ready, use the ** to live mode** button at the top right of the\npage to clone your product from [test mode to live\nmode](https://docs.stripe.com/keys#test-live-modes).\n\nIf you offer multiple billing intervals, use Checkout to\n[upsell](https://docs.stripe.com/payments/checkout/upsells) customers on longer\nbilling intervals and collect more revenue upfront.\n\nFor other pricing models, see [Billing\nexamples](https://docs.stripe.com/products-prices/pricing-models).\n\n[Create a Checkout SessionClient and\nServer](https://docs.stripe.com/billing/subscriptions/build-subscriptions#create-session)\nAdd a checkout button to your website that calls a server-side endpoint to\ncreate a Checkout Session.\n\n```\n<html>\n <head>\n <title>Checkout</title>\n </head>\n <body>\n <form action=\"/create-checkout-session\" method=\"POST\">\n <!-- Note: If using PHP set the action to /create-checkout-session.php -->\n\n <input type=\"hidden\" name=\"priceId\" value=\"price_G0FvDp6vZvdwRZ\" />\n <button type=\"submit\">Checkout</button>\n </form>\n </body>\n</html>\n```\n\nOn the backend of your application, define an endpoint that [creates the\nsession](https://docs.stripe.com/api/checkout/sessions/create) for your frontend\nto call. You need these values:\n\n- The price ID of the subscription the customer is signing up for—your frontend\npasses this value\n- Your `success_url`, a page on your website that Checkout returns your customer\nto after they complete the payment\n\nYou can optionally provide `cancel_url`, a page on your website that Checkout\nreturns your customer to if they cancel the payment process. You can also\nconfigure a [billing cycle\nanchor](https://docs.stripe.com/billing/subscriptions/billing-cycle) to your\nsubscription in this call.\n\nIf you created a one-time price in [step\n2](https://docs.stripe.com/billing/subscriptions/build-subscriptions#create-pricing-model),\npass that price ID as well. After creating a Checkout Session, redirect your\ncustomer to the\n[URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url)\nreturned in the response.\n\n#### Note\n\nYou can use\n[lookup_keys](https://docs.stripe.com/products-prices/manage-prices#lookup-keys)\nto fetch prices rather than Price IDs. See the [sample\napplication](https://github.com/stripe-samples/subscription-use-cases/tree/main/fixed-price-subscriptions)\nfor an example.\n\n```\n# Set your secret key. Remember to switch to your live secret key in production.\n# See your keys here: https://dashboard.stripe.com/apikeys\nStripe.api_key = 'sk_test_BQokikJOvBiI2HlWgH4olfQ2'\n\n# The price ID passed from the front end.\n# price_id = params['priceId']\nprice_id = '{{PRICE_ID}}'\n\nsession = Stripe::Checkout::Session.create({\nsuccess_url:\n'https://example.com/success.html?session_id={CHECKOUT_SESSION_ID}',\n cancel_url: 'https://example.com/canceled.html',\n mode: 'subscription',\n line_items: [{\n # For metered billing, do not pass quantity\n quantity: 1,\n price: price_id,\n }],\n})\n\n# Redirect to the URL returned on the session\n# redirect session.url, 303\n```\n\nThis example customizes the `success_url` by appending the Session ID. For more\ninformation about this approach, see the documentation on how to [Customize your\nsuccess page](https://docs.stripe.com/payments/checkout/custom-success-page).\n\nFrom your [Dashboard](https://dashboard.stripe.com/settings/payment_methods),\nenable the payment methods you want to accept from your customers. Checkout\nsupports [several payment\nmethods](https://docs.stripe.com/payments/payment-methods/payment-method-support#product-support).\n\n[Provision and monitor\nsubscriptionsServer](https://docs.stripe.com/billing/subscriptions/build-subscriptions#provision-and-monitor)\nAfter the subscription signup succeeds, the customer returns to your website at\nthe `success_url`, which initiates a `checkout.session.completed`\n[webhooks](https://docs.stripe.com/webhooks). When you receive a\n`checkout.session.completed` event, you can [provision the\nsubscription](https://docs.stripe.com/billing/subscriptions/overview#provisioning).\nContinue to provision each month (if billing monthly) as you receive\n`invoice.paid` events. If you receive an `invoice.payment_failed` event, notify\nyour customer and send them to the customer portal to update their payment\nmethod.\n\nTo determine the next step for your system’s logic, check the event type and\nparse the payload of each [event\nobject](https://docs.stripe.com/api/events/object), such as `invoice.paid`.\nStore the `subscription.id` and `customer.id` event objects in your database for\nverification.\n\nFor testing purposes, you can monitor events in the\n[Dashboard](https://dashboard.stripe.com/events). For production, set up a\nwebhook endpoint and subscribe to appropriate event types. If you don’t know\nyour `STRIPE_WEBHOOK_SECRET` key, click the\n[webhook](https://dashboard.stripe.com/webhooks) in the Dashboard to view it.\n\n```\n# Set your secret key. Remember to switch to your live secret key in production.\n# See your keys here: https://dashboard.stripe.com/apikeys\nStripe.api_key = 'sk_test_BQokikJOvBiI2HlWgH4olfQ2'\n\npost '/webhook' do\n webhook_secret = '{{STRIPE_WEBHOOK_SECRET}}'\n payload = request.body.read\n if !webhook_secret.empty?\n# Retrieve the event by verifying the signature using the raw body and secret if\nwebhook signing is configured.\n sig_header = request.env['HTTP_STRIPE_SIGNATURE']\n event = nil\n\n begin\n event = Stripe::Webhook.construct_event(\n payload, sig_header, webhook_secret\n )\n rescue JSON::ParserError => e\n # Invalid payload\n status 400\n return\n rescue Stripe::SignatureVerificationError => e\n # Invalid signature\n puts '⚠️ Webhook signature verification failed.'\n status 400\n return\n end\n else\n data = JSON.parse(payload, symbolize_names: true)\n event = Stripe::Event.construct_from(data)\n end\n # Get the type of webhook event sent\n event_type = event['type']\n data = event['data']\n data_object = data['object']\n\n case event_type\n when 'checkout.session.completed'\n # Payment is successful and the subscription is created.\n# You should provision the subscription and save the customer ID to your\ndatabase.\n when 'invoice.paid'\n # Continue to provision the subscription as payments continue to be made.\n# Store the status in your database and check when a user accesses your service.\n # This approach helps you avoid hitting rate limits.\n when 'invoice.payment_failed'\n # The payment failed or the customer does not have a valid payment method.\n# The subscription becomes past_due. Notify your customer and send them to the\n # customer portal to update their payment information.\n else\n puts \"Unhandled event type: \\#{event.type}\"\n end\n\n status 200\nend\n```\n\nThe minimum event types to monitor:\n\nEvent nameDescription`checkout.session.completed`Sent when a customer\nsuccessfully completes the Checkout Session, informing you of a new\npurchase.`invoice.paid`Sent each billing interval when a payment\nsucceeds.`invoice.payment_failed`Sent each billing interval if there is an issue\nwith your customer’s payment method.\nFor even more events to monitor, see [Subscription\nwebhooks](https://docs.stripe.com/billing/subscriptions/webhooks).\n\n[Configure the customer\nportalDashboard](https://docs.stripe.com/billing/subscriptions/build-subscriptions#configure-portal)\nThe [customer portal](https://docs.stripe.com/customer-management) lets your\ncustomers directly manage their existing subscriptions and invoices.\n\nUse [the Dashboard](https://dashboard.stripe.com/test/settings/billing/portal)\nto configure the portal. At a minimum, make sure to configure it so that\ncustomers can update their payment methods. See [Integrating the customer\nportal](https://docs.stripe.com/customer-management) for information about other\nsettings you can configure.\n\n[Create a portal\nSessionServer](https://docs.stripe.com/billing/subscriptions/build-subscriptions#create-portal-session)\nDefine an endpoint that [creates the customer portal\nsession](https://docs.stripe.com/api/customer_portal/sessions/create) for your\nfrontend to call. Here `CUSTOMER_ID` refers to the customer ID created by a\nCheckout Session that you saved while processing the\n`checkout.session.completed` webhook. You can also set a default redirect link\nfor the portal in the Dashboard.\n\nPass an optional `return_url` value for the page on your site to redirect your\ncustomer to after they finish managing their subscription:\n\n```\n# Set your secret key. Remember to switch to your live secret key in production.\n# See your keys here: https://dashboard.stripe.com/apikeys\nStripe.api_key = 'sk_test_BQokikJOvBiI2HlWgH4olfQ2'\n\n# This is the URL that users are redirected to after they're done\n# managing their billing.\nreturn_url = '{{DOMAIN_URL}}'\ncustomer_id = '{{CUSTOMER_ID}}'\n\nsession = Stripe::BillingPortal::Session.create({\n customer: customer_id,\n return_url: return_url,\n})\n\n# Redirect to the URL for the session\n# redirect session.url, 303\n```\n\n[Send customers to the customer\nportalClient](https://docs.stripe.com/billing/subscriptions/build-subscriptions#send-to-portal)\nOn your frontend, add a button to the page at the `success_url` that provides a\nlink to the customer portal:\n\n```\n<html>\n <head>\n <title>Manage Billing</title>\n </head>\n <body>\n <form action=\"/customer-portal\" method=\"POST\">\n <!-- Note: If using PHP set the action to /customer-portal.php -->\n <button type=\"submit\">Manage Billing</button>\n </form>\n </body>\n</html>\n```\n\nAfter exiting the customer portal, the Customer returns to your website at the\n`return_url`. Continue to [monitor\nevents](https://docs.stripe.com/billing/subscriptions/webhooks) to track the\nstate of the Customer’s subscription.\n\nIf you configure the customer portal to allow actions such as canceling a\nsubscription, see [Integrating the customer\nportal](https://docs.stripe.com/customer-management/integrate-customer-portal#webhooks)\nfor additional events to monitor.\n\n[Test your\nintegration](https://docs.stripe.com/billing/subscriptions/build-subscriptions#test)\n### Test payment methods\n\nUse the following table to test different payment methods and scenarios.\n\nPayment methodScenarioHow to testBECS Direct DebitYour customer successfully\npays with BECS Direct Debit.Fill out the form using the account number\n`900123456` and BSB `000-000`. The confirmed PaymentIntent initially transitions\nto `processing`, then transitions to the `succeeded` status three minutes\nlater.BECS Direct DebitYour customer’s payment fails with an `account_closed`\nerror code.Fill out the form using the account number `111111113` and BSB\n`000-000`.Credit cardThe card payment succeeds and does not require\nauthentication.Fill out the credit card form using the credit card number `4242\n4242 4242 4242` with any expiration, CVC, and postal code.Credit cardThe card\npayment requires\n[authentication](https://docs.stripe.com/strong-customer-authentication).Fill\nout the credit card form using the credit card number `4000 0025 0000 3155` with\nany expiration, CVC, and postal code.Credit cardThe card is declined with a\ndecline code like `insufficient_funds`.Fill out the credit card form using the\ncredit card number `4000 0000 0000 9995` with any expiration, CVC, and postal\ncode.SEPA Direct DebitYour customer successfully pays with SEPA Direct\nDebit.Fill out the form using the account number `AT321904300235473204`. The\nconfirmed PaymentIntent initially transitions to processing, then transitions to\nthe succeeded status three minutes later.SEPA Direct DebitYour customer’s\npayment intent status transition from `processing` to\n`requires_payment_method`.Fill out the form using the account number\n`AT861904300235473202`.\n### Monitoring events\n\nSet up webhooks to listen to subscription change events, such as upgrades and\ncancellations. Learn more about [subscription\nwebhooks](https://docs.stripe.com/billing/subscriptions/webhooks). You can view\nevents in the [Dashboard](https://dashboard.stripe.com/test/events) or with the\n[Stripe CLI](https://docs.stripe.com/webhooks#test-webhook).\n\nFor more details about [testing your Billing\nintegration](https://docs.stripe.com/billing/testing), read the guide.\n\n## See also\n\n- [Offer customers a free trial\nperiod](https://docs.stripe.com/billing/subscriptions/trials)\n- [Apply\ndiscounts](https://docs.stripe.com/billing/subscriptions/coupons#using-coupons-in-checkout)\n- [Manage prorations](https://docs.stripe.com/billing/subscriptions/prorations)\n- [Integrate entitlements to manage access to your product’s\nfeatures](https://docs.stripe.com/billing/entitlements)\n\n## Links\n\n- [subscriptions](https://docs.stripe.com/billing/subscriptions/creating)\n- [from GitHub](https://github.com/stripe-samples/checkout-single-subscription)\n- [Billing integration quickstart](https://docs.stripe.com/billing/quickstart)\n- [demo](https://checkout.stripe.dev/)\n- [Stripe Checkout](https://docs.stripe.com/payments/checkout)\n- [customer portal](https://docs.stripe.com/customer-management)\n- [manually in the Dashboard](https://docs.stripe.com/no-code/subscriptions)\n- [Payment Links](https://docs.stripe.com/payment-links)\n- [designing an\nintegration](https://docs.stripe.com/billing/subscriptions/designing-integration)\n- [Display taxes](https://docs.stripe.com/payments/checkout/taxes)\n- [Apply\ndiscounts](https://docs.stripe.com/billing/subscriptions/coupons#using-coupons-in-checkout)\n- [Offer customers a free trial\nperiod](https://docs.stripe.com/billing/subscriptions/trials)\n- [Add more payment\nmethods](https://docs.stripe.com/payments/payment-methods/integration-options)\n- [Integrate the hosted invoice\npage](https://docs.stripe.com/invoicing/hosted-invoice-page)\n- [Use Checkout in setup mode](https://docs.stripe.com/payments/save-and-reuse)\n- [Set up metered\nbilling](https://docs.stripe.com/products-prices/pricing-models#usage-based-pricing)\n- [pricing\ntiers](https://docs.stripe.com/products-prices/pricing-models#tiered-pricing)\n- [Manage prorations](https://docs.stripe.com/billing/subscriptions/prorations)\n- [Allow customers to subscribe to multiple\nproducts](https://docs.stripe.com/billing/subscriptions/multiple-products)\n- [Integrate entitlements to manage access to your product’s\nfeatures](https://docs.stripe.com/billing/entitlements)\n- [webhook](https://docs.stripe.com/webhooks#test-webhook)\n- [https://brew.sh/](https://brew.sh/)\n- [Get started with the Stripe CLI](https://docs.stripe.com/stripe-cli)\n- [products](https://docs.stripe.com/api/products)\n- [prices](https://docs.stripe.com/api/prices)\n- [Add a product](https://dashboard.stripe.com/test/products/create)\n- [test mode to live mode](https://docs.stripe.com/keys#test-live-modes)\n- [upsell](https://docs.stripe.com/payments/checkout/upsells)\n- [Billing examples](https://docs.stripe.com/products-prices/pricing-models)\n- [View full\nsample](https://github.com/stripe-samples/checkout-single-subscription/blob/master/client/index.html)\n- [creates the session](https://docs.stripe.com/api/checkout/sessions/create)\n- [billing cycle\nanchor](https://docs.stripe.com/billing/subscriptions/billing-cycle)\n- [step\n2](https://docs.stripe.com/billing/subscriptions/build-subscriptions#create-pricing-model)\n-\n[URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url)\n-\n[lookup_keys](https://docs.stripe.com/products-prices/manage-prices#lookup-keys)\n- [sample\napplication](https://github.com/stripe-samples/subscription-use-cases/tree/main/fixed-price-subscriptions)\n- [View full\nsample](https://github.com/stripe-samples/checkout-single-subscription/blob/master/server/ruby/server.rb)\n- [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys)\n-\n[https://example.com/success.html?session_id={CHECKOUT_SESSION_ID}](https://example.com/success.html?session_id={CHECKOUT_SESSION_ID})\n- [https://example.com/canceled.html](https://example.com/canceled.html)\n- [Customize your success\npage](https://docs.stripe.com/payments/checkout/custom-success-page)\n- [Dashboard](https://dashboard.stripe.com/settings/payment_methods)\n- [several payment\nmethods](https://docs.stripe.com/payments/payment-methods/payment-method-support#product-support)\n- [webhooks](https://docs.stripe.com/webhooks)\n- [provision the\nsubscription](https://docs.stripe.com/billing/subscriptions/overview#provisioning)\n- [event object](https://docs.stripe.com/api/events/object)\n- [Dashboard](https://dashboard.stripe.com/events)\n- [webhook](https://dashboard.stripe.com/webhooks)\n- [Subscription\nwebhooks](https://docs.stripe.com/billing/subscriptions/webhooks)\n- [the Dashboard](https://dashboard.stripe.com/test/settings/billing/portal)\n- [creates the customer portal\nsession](https://docs.stripe.com/api/customer_portal/sessions/create)\n- [View full\nsample](https://github.com/stripe-samples/checkout-single-subscription/blob/master/client/success.html)\n- [Integrating the customer\nportal](https://docs.stripe.com/customer-management/integrate-customer-portal#webhooks)\n- [authentication](https://docs.stripe.com/strong-customer-authentication)\n- [Dashboard](https://dashboard.stripe.com/test/events)\n- [testing your Billing integration](https://docs.stripe.com/billing/testing)",
  "metadata": {
    "title": "Build a subscriptions integration | Stripe Documentation",
    "description": "Create and manage subscriptions to accept recurring payments.",
    "sourceURL": "https://docs.stripe.com/billing/subscriptions/build-subscriptions"
  }
}