{
  "content": "# Accept a payment with the Express Checkout Element\n\n## Use a single integration to accept payments through one-click payment buttons.\n\nThe [Express Checkout\nElement](https://docs.stripe.com/elements/express-checkout-element) gives you a\nsingle integration for accepting payments through one-click payment buttons,\nincluding [Link](https://docs.stripe.com/payments/link),\n[PayPal](https://docs.stripe.com/payments/paypal), [Apple\nPay](https://docs.stripe.com/apple-pay), [Google\nPay](https://docs.stripe.com/google-pay), and [Amazon\nPay](https://docs.stripe.com/payments/amazon-pay).\n\n[Customers](https://docs.stripe.com/api/customers) see different payment buttons\ndepending on what their device and browser combination supports. Compatible\ndevices automatically support Google Pay and Link. Supporting Apple Pay and\nPayPal requires additional steps.\n\n#### Klarna on the Express Checkout Element\n\nKlarna on the Express Checkout Element is currently in private preview with\nlimited availability. Reach out here to request access.\n\nMerchant CountryUnited StatesBackground ColorLightSizeDesktopMax ColumnsMax\nColumnsMax RowsMax RowsOverflowCollect Shipping AddressThe Express Checkout\nElement displays multiple buttons at the same time in the order that maximizes\npayment conversion on your page. The demo sets the\n[wallets](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-wallets)\nparameter to 'always' for all wallets. Google Pay and Apple Pay are displayed\nonly on their available platforms. Amazon Pay and Paypal are only displayed if\nthey are available in the selected business country.OptionDescriptionMerchant\ncountrySet this using the [publishable\nkey](https://docs.stripe.com/keys#obtain-api-keys) that you use to [initialize\nStripe.js](https://docs.stripe.com/js/initializing). To change the country, you\nmust unmount the Express Checkout Element, update the publishable key, then\nre-mount the Express Checkout Element.Background colorSet colors using the\n[Elements Appearance API](https://docs.stripe.com/elements/appearance-api).\nButton themes are inherited from the Appearance API but you can also [define\nthem directly when you create the\nElement](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-buttonTheme).Desktop\nand mobile sizeUse the dropdown to set the max pixel width of the parent element\nthat the Express Checkout Element is mounted to. You can set it to 750px\n(Desktop) or 320px (Mobile).Max columns and max rowsSet these values using the\n[layout](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-layout)\nparameter when you [Create the Express Checkout\nElement](https://docs.stripe.com/js/elements_object/create_express_checkout_element).Overflow\nmenuSet this using the\n[layout](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-layout)\nparameter when you [Create the Express Checkout\nElement](https://docs.stripe.com/js/elements_object/create_express_checkout_element).Collect\nshipping addressTo collect shipping information, you must pass options when\n[creating](https://docs.stripe.com/js/elements_object/create_express_checkout_element)\nthe Express Checkout Element. Learn more about [collecting customer details and\ndisplaying line\nitems](https://docs.stripe.com/elements/express-checkout-element/accept-a-payment#handle-create-event).\nWe recommend that you collect payment details before creating an Intent when\nusing the Express Checkout Element. If you previously integrated with the\n[Payment Element](https://docs.stripe.com/payments/payment-element), you might\nneed to [update your\nintegration](https://docs.stripe.com/payments/accept-a-payment-deferred) to this\npreferred approach.\n\n## Before you begin\n\n- Add a payment method to your browser. For example, you can add a card to your\nGoogle Pay account or to your Wallet for Safari.\n- Serve your application over HTTPS. This is required in development and in\nproduction. You can use a service such as [ngrok](https://ngrok.com/).\n- [Register your\ndomain](https://docs.stripe.com/payments/payment-methods/pmd-registration) in\nboth test mode and live mode.\n- [Create a PayPal Sandbox\naccount](https://developer.paypal.com/tools/sandbox/accounts/) to test your\nintegration.\n[Set up\nStripeServer-side](https://docs.stripe.com/elements/express-checkout-element/accept-a-payment#set-up-stripe)\nFirst, [create a Stripe account](https://dashboard.stripe.com/register) or [sign\nin](https://dashboard.stripe.com/login).\n\nUse our official libraries to access the Stripe API from your application:\n\n```\n# Available as a gem\nsudo gem install stripe\n```\n\n```\n# If you use bundler, you can add this line to your Gemfile\ngem 'stripe'\n```\n\n[Enable payment\nmethods](https://docs.stripe.com/elements/express-checkout-element/accept-a-payment#enable-payment-methods)\nBy default, Stripe uses your [payment methods\nsettings](https://dashboard.stripe.com/settings/payment_methods) to determine\nwhich payment methods are enabled in the Express Checkout Element.\n\nTo manually override which payment methods are enabled, list any that you want\nto enable using the `payment_method_types` attribute.\n\n- If you collect payments before creating an intent, then list payment methods\nin the [paymentMethodTypes attribute on your Elements provider\noptions](https://docs.stripe.com/js/elements_object/create_without_intent#stripe_elements_no_intent-options-paymentMethodTypes).\n- If you create an intent before rendering Elements, then list payment methods\nin the [payment_method_types attribute on your\nIntent](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-payment_method_types).\n\n### Supported payment methods\n\nApple Pay and Google Pay are automatically enabled when using `card` payment\nmethod type. When using Link, you must also pass the `card` payment method type.\n\nPayment method namePayment method API parametersApple Pay`card`Google\nPay`card`Link`link, card`PayPal`paypal`Amazon Pay`amazon_pay`[Set up Stripe\nElementsClient-side](https://docs.stripe.com/elements/express-checkout-element/accept-a-payment#set-up-elements)HTML\n+ JSReact\nThe Express Checkout Element is automatically available as a feature of\nStripe.js. Include the Stripe.js script on your checkout page by adding it to\nthe head of your HTML file. Always load Stripe.js directly from js.stripe.com to\nremain PCI compliant. Donâ€™t include the script in a bundle or host a copy of it\nyourself.\n\n```\n<head>\n <title>Checkout</title>\n <script src=\"https://js.stripe.com/v3/\"></script>\n</head>\n```\n\nCreate an instance of Stripe with the following JavaScript on your checkout\npage:\n\n```\n// Set your publishable key: remember to change this to your live publishable\nkey in production\n// See your keys here: https://dashboard.stripe.com/apikeys\nconst stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n```\n\nThen, create an instance of Elements with the\n[mode](https://docs.stripe.com/js/elements_object/create_without_intent#stripe_elements_no_intent-options-mode)\n(payment, setup, or subscription),\n[amount](https://docs.stripe.com/js/elements_object/create_without_intent#stripe_elements_no_intent-options-amount),\nand\n[currency](https://docs.stripe.com/js/elements_object/create_without_intent#stripe_elements_no_intent-options-currency).\nThese values determine which payment methods to show to your customer. See the\nnext step for more configurable Elements options.\n\n```\nconst options = {\n mode: 'payment',\n amount: 1099,\n currency: 'usd',\n // Customizable by using the Appearance API.\n appearance: {/*...*/},\n};\n\n// Set up Stripe.js and Elements to use in checkout form.\nconst elements = stripe.elements(options);\n```\n\n[OptionalAdditional Elements\noptionsClient-side](https://docs.stripe.com/elements/express-checkout-element/accept-a-payment#additional-options)[Create\nand mount the Express Checkout\nElementClient-side](https://docs.stripe.com/elements/express-checkout-element/accept-a-payment#create-and-mount)\nThe Express Checkout Element contains an iframe that securely sends the payment\ninformation to Stripe over an HTTPS connection. The checkout page address must\nalso start with `https://`, rather than `http://`, for your integration to work.\n\nHTML + JSReact\nThe Express Checkout Element needs a place to live on your payment page. Create\nan empty DOM node (container) with a unique ID in your payment form.\n\n```\n<div id=\"express-checkout-element\">\n <!-- Express Checkout Element will be inserted here -->\n</div>\n<div id=\"error-message\">\n <!-- Display an error message to your customers here -->\n</div>\n```\n\nWhen the form has loaded, create an instance of the Express Checkout Element and\nmount it to the container DOM node:\n\n```\n// Create and mount the Express Checkout Element\nconst expressCheckoutElement = elements.create('expressCheckout');\nexpressCheckoutElement.mount('#express-checkout-element');\n```\n\n[Collect customer details and display line\nitemsClient-side](https://docs.stripe.com/elements/express-checkout-element/accept-a-payment#handle-create-event)\nPass options when\n[creating](https://docs.stripe.com/js/elements_object/create_express_checkout_element)\nthe Express Checkout Element.\n\nHTML + JSReact\n### Collect payer information\n\nSet `emailRequired: true` to collect emails, and `phoneNumberRequired: true` to\ncollect phone numbers. `billingAddressRequired` is `true` by default.\n\n```\nelements.create('expressCheckout', {\n emailRequired: true,\n phoneNumberRequired: true\n});\n```\n\nWhen using PayPal with the Express Checkout Element, Stripe typically only\nreceives and exposes the country from the billing address. Because of how PayPal\nshares information with third-party payment processors, the confirm event\npayload might show `billingDetails[address]` fields as empty strings, except for\nthe country field.\n\n### Collect shipping information\n\nSet `shippingAddressRequired: true` and pass an array of\n[shippingRates](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-shippingRates).\n\n```\nelements.create('expressCheckout', {\n shippingAddressRequired: true,\n allowedShippingCountries: ['US'],\n shippingRates: [\n {\n id: 'free-shipping',\n displayName: 'Free shipping',\n amount: 0,\n deliveryEstimate: {\n maximum: {unit: 'day', value: 7},\n minimum: {unit: 'day', value: 5}\n }\n },\n ]\n});\n```\n\nListen to the [shippingaddresschange\nevent](https://docs.stripe.com/js/elements_object/express_checkout_element_shippingaddresschange_event)\nto detect when a customer selects a shipping address. You must call either\n`resolve` or `reject` if you choose to handle this event.\n\n```\nexpressCheckoutElement.on('shippingaddresschange', async (event) => {\n const response = await fetch('/calculate-shipping', {\n data: JSON.stringify({\n shippingAddress: event.address\n })\n });\n const result = await response.json();\n event.resolve({\n lineItems: result.updatedLineItems,\n });\n});\n```\n\nListen to the [shippingratechange\nevent](https://docs.stripe.com/js/elements_object/express_checkout_element_shippingratechange_event)\nto detect when a customer selects a shipping rate. You must call either\n`resolve` or `reject` if you choose to handle this event.\n\n```\nexpressCheckoutElement.on('shippingratechange', async (event) => {\n const response = await fetch('/calculate-and-update-amount', {\n data: JSON.stringify({\n shippingRate: event.shippingRate\n })\n });\n const result = await response.json();\n elements.update({amount: result.amount})\n event.resolve({\n lineItems: result.updatedLineItems,\n });\n});\n```\n\nListen to the [cancel\nevent](https://docs.stripe.com/js/elements_object/express_checkout_element_cancel_event)\nto detect when a customer dismisses the payment interface. Reset the amount to\nthe initial amount.\n\n```\nexpressCheckoutElement.on('cancel', () => {\n elements.update({amount: 1099})\n});\n```\n\n### Display line items\n\nPass in an array of\n[lineItems](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-lineItems):\n\n```\nelements.create('expressCheckout', {\n lineItems: [\n {\n name: 'Sample item',\n amount: 1000\n },\n {\n name: 'Tax',\n amount: 100\n },\n {\n name: 'Shipping cost',\n amount: 1000\n }\n ]\n});\n```\n\n### Configure the Apple Pay interface\n\nLearn how to configure the Apple Pay interface.\n\n### Merchant initiated transactions (MIT)\n\nYou can set up recurring payments, deferred payments, or automatic reload\npayments when a user checks out with Apple Pay by requesting the relevant\n[merchant token\ntype](https://docs.stripe.com/apple-pay/merchant-tokens?pay-element=ece&mpan=auto-reload#merchant-token-types)\nin the Express Checkout Element `click` event. We recommend implementing Apple\nPay merchant tokens to align with Apple Payâ€™s latest guidelines and to future\nproof your integration.\n\n[OptionalListen to the ready\neventClient-side](https://docs.stripe.com/elements/express-checkout-element/accept-a-payment#ready-event)[OptionalControl\nwhen to show payment\nbuttonsClient-side](https://docs.stripe.com/elements/express-checkout-element/accept-a-payment#payment-button-control)[OptionalStyle\nthe\nbuttonClient-side](https://docs.stripe.com/elements/express-checkout-element/accept-a-payment#style-button)[OptionalCreate\na\nConfirmationTokenClient-side](https://docs.stripe.com/elements/express-checkout-element/accept-a-payment#create-ct)[Create\na\nPaymentIntentServer-side](https://docs.stripe.com/elements/express-checkout-element/accept-a-payment#create-pi)\nStripe uses a [PaymentIntent](https://docs.stripe.com/payments/payment-intents)\nobject to represent your intent to collect payment from a customer, tracking\ncharge attempts and payment state changes throughout the process.\n\nCreate a PaymentIntent on your server with an amount and currency. This must\nmatch what you set on the `stripe.elements` instance in [step\n3](https://docs.stripe.com/elements/express-checkout-element/accept-a-payment#set-up-elements).\nAlways decide how much to charge on the server-side, a trusted environment, as\nopposed to the client-side. This prevents malicious customers from choosing\ntheir own prices.\n\n```\nrequire 'stripe'\nStripe.api_key = 'sk_test_BQokikJOvBiI2HlWgH4olfQ2'\n\npost '/create-intent' do\n intent = Stripe::PaymentIntent.create({\n # To allow saving and retrieving payment methods, provide the Customer ID.\n customer: customer.id,\n# In the latest version of the API, specifying the `automatic_payment_methods`\nparameter is optional because Stripe enables its functionality by default.\n automatic_payment_methods: {enabled: true},\n amount: 1099,\n currency: 'usd',\n })\n {client_secret: intent.client_secret}.to_json\nend\n```\n\nThe returned PaymentIntent includes a [client\nsecret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret),\nwhich the client-side uses to securely complete the payment process instead of\npassing the entire PaymentIntent object. You can use different approaches to\npass the client secret to the client-side.\n\n[Submit the payment to\nStripeClient-side](https://docs.stripe.com/elements/express-checkout-element/accept-a-payment#submit-the-payment)\nUse\n[stripe.confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment)\nto complete the payment using details from the Express Checkout Element.\n\n#### Note\n\nFor Amazon Pay and PayPal, the amount you confirm in the PaymentIntent must\nmatch the amount the buyer pre-authorized. If the amounts donâ€™t match, the\npayment is declined.\n\nProvide a\n[return_url](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-return_url)\nto this function to indicate where Stripe should redirect the user after they\ncomplete the payment. Your user might be initially redirected to an intermediate\nsite before being redirected to the `return_url`. Payments immediately redirect\nto the `return_url` when a payment is successful.\n\nIf you donâ€™t want to redirect after payment completion, set\n[redirect](https://docs.stripe.com/js/payment_intents/confirm_payment#confirm_payment_intent-options-redirect)\nto `if_required`. This only redirects customers that check out with\nredirect-based payment methods.\n\nHTML + JSReact\n```\nconst handleError = (error) => {\n const messageContainer = document.querySelector('#error-message');\n messageContainer.textContent = error.message;\n}\n\nexpressCheckoutElement.on('confirm', async (event) => {\n const {error: submitError} = await elements.submit();\n if (submitError) {\n handleError(submitError);\n return;\n }\n\n // Create the PaymentIntent and obtain clientSecret\n const res = await fetch('/create-intent', {\n method: 'POST',\n });\n const {client_secret: clientSecret} = await res.json();\n\n const {error} = await stripe.confirmPayment({\n // `elements` instance used to create the Express Checkout Element\n elements,\n // `clientSecret` from the created PaymentIntent\n clientSecret,\n confirmParams: {\n return_url: 'https://example.com/order/123/complete',\n },\n });\n\n if (error) {\n // This point is only reached if there's an immediate error when\n// confirming the payment. Show the error to your customer (for example, payment\ndetails incomplete)\n handleError(error);\n } else {\n // The payment UI automatically closes with a success animation.\n // Your customer is redirected to your `return_url`.\n }\n});\n```\n\n[Test the\nintegration](https://docs.stripe.com/elements/express-checkout-element/accept-a-payment#test-integration)\nBefore you go live, [test](https://docs.stripe.com/testing) each payment method\nintegration. To determine a payment methodâ€™s browser compatibility, see\n[supported\nbrowsers](https://docs.stripe.com/elements/express-checkout-element#supported-browsers).\nIf you use the Express Checkout Element within an iframe, the iframe must have\nthe\n[allow](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-allowpaymentrequest)\nattribute set to `payment *`.\n\nLinkWalletsAmazon Pay\n#### Caution\n\nDonâ€™t store real user data in [sandbox](https://docs.stripe.com/sandboxes) Link\naccounts. Treat them as if theyâ€™re publicly available, because these test\naccounts are associated with your publishable key.\n\nCurrently, Link only works with credit cards, debit cards, and qualified US bank\naccount purchases. Link requires [domain\nregistration](https://docs.stripe.com/payments/payment-methods/pmd-registration).\n\nYou can create sandbox accounts for Link using any valid email address. The\nfollowing table shows the fixed one-time passcode values that Stripe accepts for\nauthenticating sandbox accounts:\n\nValueOutcomeAny other 6 digits not listed belowSuccess000001Error, code\ninvalid000002Error, code expired000003Error, max attempts exceeded[OptionalUse\nthe Express Checkout Element with Stripe\nConnect](https://docs.stripe.com/elements/express-checkout-element/accept-a-payment#connect)\n## Disclose Stripe to your customers\n\nStripe collects information on customer interactions with Elements to provide\nservices to you, prevent fraud, and improve its services. This includes using\ncookies and IP addresses to identify which Elements a customer saw during a\nsingle checkout session. Youâ€™re responsible for disclosing and obtaining all\nrights and consents necessary for Stripe to use data in these ways. For more\ninformation, visit our [privacy\ncenter](https://stripe.com/legal/privacy-center#as-a-business-user-what-notice-do-i-provide-to-my-end-customers-about-stripe).\n\n## See also\n\n- [Stripe Elements](https://docs.stripe.com/payments/elements)\n- [Collect payment details before creating an\nIntent](https://docs.stripe.com/payments/accept-a-payment-deferred)\n- [Finalize payments on the\nserver](https://docs.stripe.com/payments/finalize-payments-on-the-server)\n\n## Links\n\n- [Express Checkout\nElement](https://docs.stripe.com/elements/express-checkout-element)\n- [Link](https://docs.stripe.com/payments/link)\n- [PayPal](https://docs.stripe.com/payments/paypal)\n- [Apple Pay](https://docs.stripe.com/apple-pay)\n- [Google Pay](https://docs.stripe.com/google-pay)\n- [Amazon Pay](https://docs.stripe.com/payments/amazon-pay)\n- [Customers](https://docs.stripe.com/api/customers)\n-\n[wallets](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-wallets)\n- [publishable key](https://docs.stripe.com/keys#obtain-api-keys)\n- [initialize Stripe.js](https://docs.stripe.com/js/initializing)\n- [Elements Appearance API](https://docs.stripe.com/elements/appearance-api)\n- [define them directly when you create the\nElement](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-buttonTheme)\n-\n[layout](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-layout)\n- [Create the Express Checkout\nElement](https://docs.stripe.com/js/elements_object/create_express_checkout_element)\n- [collecting customer details and displaying line\nitems](https://docs.stripe.com/elements/express-checkout-element/accept-a-payment#handle-create-event)\n- [Payment Element](https://docs.stripe.com/payments/payment-element)\n- [update your\nintegration](https://docs.stripe.com/payments/accept-a-payment-deferred)\n- [ngrok](https://ngrok.com/)\n- [Register your\ndomain](https://docs.stripe.com/payments/payment-methods/pmd-registration)\n- [Create a PayPal Sandbox\naccount](https://developer.paypal.com/tools/sandbox/accounts/)\n- [create a Stripe account](https://dashboard.stripe.com/register)\n- [sign in](https://dashboard.stripe.com/login)\n- [payment methods\nsettings](https://dashboard.stripe.com/settings/payment_methods)\n- [paymentMethodTypes attribute on your Elements provider\noptions](https://docs.stripe.com/js/elements_object/create_without_intent#stripe_elements_no_intent-options-paymentMethodTypes)\n- [payment_method_types attribute on your\nIntent](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-payment_method_types)\n- [https://js.stripe.com/v3/](https://js.stripe.com/v3/)\n- [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys)\n-\n[mode](https://docs.stripe.com/js/elements_object/create_without_intent#stripe_elements_no_intent-options-mode)\n-\n[amount](https://docs.stripe.com/js/elements_object/create_without_intent#stripe_elements_no_intent-options-amount)\n-\n[currency](https://docs.stripe.com/js/elements_object/create_without_intent#stripe_elements_no_intent-options-currency)\n-\n[shippingRates](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-shippingRates)\n- [shippingaddresschange\nevent](https://docs.stripe.com/js/elements_object/express_checkout_element_shippingaddresschange_event)\n- [shippingratechange\nevent](https://docs.stripe.com/js/elements_object/express_checkout_element_shippingratechange_event)\n- [cancel\nevent](https://docs.stripe.com/js/elements_object/express_checkout_element_cancel_event)\n-\n[lineItems](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-lineItems)\n- [merchant token\ntype](https://docs.stripe.com/apple-pay/merchant-tokens?pay-element=ece&mpan=auto-reload#merchant-token-types)\n- [PaymentIntent](https://docs.stripe.com/payments/payment-intents)\n- [client\nsecret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret)\n-\n[stripe.confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment)\n-\n[return_url](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-return_url)\n-\n[redirect](https://docs.stripe.com/js/payment_intents/confirm_payment#confirm_payment_intent-options-redirect)\n-\n[https://example.com/order/123/complete](https://example.com/order/123/complete)\n- [test](https://docs.stripe.com/testing)\n- [supported\nbrowsers](https://docs.stripe.com/elements/express-checkout-element#supported-browsers)\n-\n[allow](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-allowpaymentrequest)\n- [sandbox](https://docs.stripe.com/sandboxes)\n- [privacy\ncenter](https://stripe.com/legal/privacy-center#as-a-business-user-what-notice-do-i-provide-to-my-end-customers-about-stripe)\n- [Stripe Elements](https://docs.stripe.com/payments/elements)\n- [Finalize payments on the\nserver](https://docs.stripe.com/payments/finalize-payments-on-the-server)",
  "metadata": {
    "title": "Accept a payment with the Express Checkout Element | Stripe Documentation",
    "description": "Use a single integration to accept payments through one-click payment buttons.",
    "sourceURL": "https://docs.stripe.com/elements/express-checkout-element/accept-a-payment"
  }
}