{
  "content": "# Using tokens to securely transmit account data\n\n## Connect platforms can use Stripe.js, the API, or mobile client libraries to securely collect account details from their users.\n\nBefore we can enable charges and [payouts](https://docs.stripe.com/payouts) for\nconnected accounts, you must fulfill *Know Your Customer* (KYC) requirements. To\ndo so, provide [identity verification\ninformation](https://docs.stripe.com/connect/identity-verification) about your\naccounts to Stripe, which we then verify. [Account\nTokens](https://docs.stripe.com/api/tokens/create_account) and [Person\nTokens](https://docs.stripe.com/api/tokens/create_person) provide a secure and\nreliable way to perform this task. Tokens ensure that personally identifiable\ninformation (PII) doesn’t touch your servers, so your integration can operate\nsecurely. These tokens also allow Stripe to more accurately detect potential\nfraud.\n\nTokens can be used only for:\n\n- Legal entity details (information about the business or individual)\n- Person details\n- Indicating acceptance of the Stripe Connected Account Agreement\n\nTokens *cannot* be used for any other account information, including:\n\n- Configuration settings on the account (for example, payout schedules)\n- Non-sensitive info on the account (for example, support url, support phone\nnumber)\n- The country of the connected account\n\nTokens are created using [Stripe.js](https://docs.stripe.com/payments/elements),\n[the API](https://docs.stripe.com/api/tokens), or one of the mobile client\nlibraries. The process is effectively the same as tokenizing [payment\ndetails](https://docs.stripe.com/payments/accept-a-payment-charges#web-create-token)\nor external accounts. Your connected account’s information is sent directly to\nStripe and exchanged for a token that can be used in `create` and `update` API\ncalls.\n\n#### Regional considerationsFrance\n\nFrench platforms must use account tokens, which are an alternative to the agent\nmodel for platform [PSD2](https://stripe.com/connect/eu-guide) compliance. The\nkey benefit of tokens for French platforms is that information is transferred\nfrom the user directly to Stripe. Not having to store PII data is still a\nbenefit, but not necessarily a requirement. For platforms in other countries,\naccount tokens are optional but recommended.\n\n## Creating and using tokens\n\nTokens require both client-side and server-side code:\n\n- Create the HTML form that takes the user’s input.\n- Add JavaScript that sends the form data to Stripe, receives a token in return,\nand submits that token to your server.\n- Use the token in a server-side Stripe API call.\n\nThe following example shows how to use account tokens and person tokens. Both\ntypes are required when providing legal entity and person details for companies.\nIf you onboard only individuals, you don’t need person tokens. Instead, create\naccount tokens and pass the\n[individual](https://docs.stripe.com/api/accounts/object#account_object-individual)\nhash on the Account object to provide the required information.\n\n### Step 1: Create an HTML form\n\nThe first step is to create an HTML form that collects the required information\nfor the account and the person. This includes acceptance of the Stripe Connected\nAccount Agreement.\n\n### Collecting account and person details\n\nCreate form elements to collect the required information, such as name, address,\nand anything else that’s\n[required](https://docs.stripe.com/connect/required-verification-information) in\nthe user’s country.\n\n```\n<form class=\"my-form\" action=\"/create-person\" method=\"post\">\n <input type=\"hidden\" name=\"token-account\" id=\"token-account\">\n <input type=\"hidden\" name=\"token-person\" id=\"token-person\">\n <label>\n <span>Business Name</span>\n <input class=\"inp-company-name\">\n </label>\n <fieldset>\n <legend>Business Address</legend>\n <label>\n <span>Street Address Line 1</span>\n```\n\nSee all 55 lines\n### Presenting the Stripe Connected Account Agreement\n\nAs the platform, you must make clear to your users that processing of payments\nis provided subject to the [Stripe Connected Account\nAgreement](https://stripe.com/connect-account/legal). Indicating acceptance of\nthe Stripe Connected Account Agreement is required when using an account token\nto create a new connected account.\n\n#### Note\n\nOnly platforms that can [accept the service agreement through the\nAPI](https://docs.stripe.com/connect/service-agreement-types#accepting-the-correct-agreement)\nmay create Account Tokens that specify\n[tos_shown_and_accepted](https://docs.stripe.com/api/tokens/create_account#create_account_token-account-tos_shown_and_accepted).\n\nWe recommend you include language like the following, including links to both\nour agreement and your terms of service.\n\n```\n<p>By clicking, you agree to <a href=\"#\">our terms</a> and the <a\nhref=\"https://stripe.com/connect-account/legal\">Stripe Connected Account\nAgreement</a>.</p>\n```\n\n### Step 2: Add JavaScript\n\nNext, the page needs JavaScript that:\n\n- Interrupts the form submission.\n- Calls the `stripe.createToken()` method to request account and person tokens.\n- Sends the IDs of the received tokens to your server.\n\nFor simplicity, data validation and error handling are omitted in the below\ncode, but remember to add both to your actual integration.\n\nProvide to the `stripe.createToken()` method two arguments:\n\n- The value `account` or `person`, to specify the kind of token to create\n- A generic object of information\n\nThe JavaScript object provided as the second argument needs to parallel the\nstructure of the Account or Person object you are tokenizing. Account tokens\nneed either a top-level\n[company](https://docs.stripe.com/api/accounts/object#account_object-company) or\n[individual](https://docs.stripe.com/api/accounts/object#account_object-individual)\nproperty, and person tokens need a top-level\n[person](https://docs.stripe.com/api/persons/object) property. Follow the\nobject’s structure through all the required attributes. For example, `line1`\nwithin `address` in the code block below is provided as\n[person.address.line1](https://docs.stripe.com/api/persons/object#person_object-address-line1).\n\nTo represent the user’s acceptance of the Stripe Connected Account Agreement,\nprovide a top-level `tos_shown_and_accepted` property with a value of true (only\naccount tokens are used for this).\n\nYou must still use tokens—to create or update a person—using server-side code.\nYou can send the token ID to your server using whatever approach makes sense for\nyour application (for example, an XHR request). For simplicity, this code\nexample stores the token ID in a hidden form input and then submits the form.\n\n```\n// Assumes you've already included Stripe.js!\nconst stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\nconst myForm = document.querySelector('.my-form');\nmyForm.addEventListener('submit', handleForm);\n\nasync function handleForm(event) {\n event.preventDefault();\n\n const accountResult = await stripe.createToken('account', {\n business_type: 'company',\n company: {\n name: document.querySelector('.inp-company-name').value,\n address: {\n line1: document.querySelector('.inp-company-street-address1').value,\n city: document.querySelector('.inp-company-city').value,\n state: document.querySelector('.inp-company-state').value,\n postal_code: document.querySelector('.inp-company-zip').value,\n },\n },\n tos_shown_and_accepted: true,\n });\n\n const personResult = await stripe.createToken('person', {\n person: {\n first_name: document.querySelector('.inp-person-first-name').value,\n last_name: document.querySelector('.inp-person-last-name').value,\n address: {\n line1: document.querySelector('.inp-person-street-address1').value,\n city: document.querySelector('.inp-person-city').value,\n state: document.querySelector('.inp-person-state').value,\n postal_code: document.querySelector('.inp-person-zip').value,\n },\n },\n });\n\n if (accountResult.token && personResult.token) {\n document.querySelector('#token-account').value = accountResult.token.id;\n document.querySelector('#token-person').value = personResult.token.id;\n myForm.submit();\n }\n}\n```\n\nUpon successfully receiving the tokens from Stripe, the JavaScript stores the\ntoken IDs in a hidden form input and then submits the form (to your server). The\nfinal steps are for your server-side code to use the tokens to create an account\nand a person.\n\n### Step 3: Create an account\n\nUse the account token ID to create the account. The country and business type\nare provided outside the token.\n\nWith controller propertiesWith account type\n```\ncurl https://api.stripe.com/v1/accounts \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d \"controller[stripe_dashboard][type]\"=none \\\n -d \"controller[fees][payer]\"=application \\\n -d \"controller[losses][payments]\"=application \\\n -d \"controller[requirement_collection]\"=application \\\n -d country=US \\\n -d \"capabilities[card_payments][requested]\"=true \\\n -d \"capabilities[transfers][requested]\"=true \\\n -d account_token={{ACCOUNT_TOKEN_ID}}\n```\n\nWhen creating an account token, setting `tos_shown_and_accepted` to true\nautomatically populates the `date`, `ip`, and `user_agent` attributes of the\n`Account` object’s\n[tos_acceptance](https://docs.stripe.com/api#account_object-tos_acceptance)\nattribute. If you create an account without using an account token, you must\nprovide values for those attributes.\n\nMake sure to note the account ID that’s returned so that you can use it to\ncreate person objects for the account.\n\n### Step 4: Create a person\n\n[Create a person](https://docs.stripe.com/api/persons/create) by providing the\nID of the person token as the value for the `person_token` parameter (you also\nneed the account ID the person is for). You can use the\n[requirements](https://docs.stripe.com/api/accounts/object#account_object-requirements)\nhash on the Account object to determine what information needs to be collected\nand from which persons.\n\n```\ncurl https://api.stripe.com/v1/accounts/{{CONNECTED_ACCOUNT_ID}}/persons \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d first_name=Jane \\\n -d last_name=Diaz \\\n -d person_token={{PERSON_ID}}\n```\n\n## Creating account tokens with the mobile SDKs\n\nYou can also create an account token with our Android or iOS SDKs. Note that\ncurrently only account tokens are supported on mobile. This is sufficient for\ncreating an individual account, but you must use Stripe.js to create the person\ntoken that you need for a company account. Support for person tokens in the\nmobile SDKs will be available in a future release.\n\niOSAndroid\n```\nimport UIKit\nimport StripePayments\n\nlet companyParams = STPConnectAccountCompanyParams()\ncompanyParams.name = company.name\ncompanyParams.address = STPConnectAccountAddress()\ncompanyParams.address.line1 = company.address_line_1\ncompanyParams.address.city = company.address_city\ncompanyParams.address.state = company.address_state\ncompanyParams.address.country = company.address_country\ncompanyParams.address.postalCode = company.address_postal_code\n\nguard let accountParams = STPConnectAccountParams(tosShownAndAccepted: true,\ncompany: companyParams) else {\n // The TOS was not accepted\n return\n}\n\nSTPAPIClient.shared.createToken(withConnectAccount: accountParams) {\n(accountToken, error) in\n if let error = error {\n // display an error to your user\n }\n else {\n // use account token to create a Connect account server-side\n }\n}\n```\n\n## Handling a file upload\n\nWhen a connected account needs to provide Stripe with a [scan of an identity\ndocument](https://docs.stripe.com/connect/handling-api-verification#handle-identity-verification)\nsuch as a passport, you can use an account token. However, the JavaScript is\nmore complicated because the file must be sent to Stripe as part of an XHR\nrequest. In this flow, the JavaScript:\n\n- Interrupts the form submission.\n- If a file was uploaded, sends that to Stripe, receiving a file token in\nreturn.\n- Adds the file token ID to the generic object for the account token request.\n- Calls the `stripe.createToken()` method to request a token.\n- Sends the ID of the received account token to your server for use.\n\nTo begin, add a file element to the form. The uploaded file needs to be a color\nimage (smaller than 8,000px by 8,000px), in JPG, PNG, or PDF format, and less\nthan 10MB in size.\n\n```\n<input type=\"file\" id=\"id-file\" name=\"id-file\" accept=\".jpeg,.jpg,.png\">\n```\n\nNext, in your JavaScript that handles the form’s submission, send the uploaded\nfile to Stripe. This needs to happen before creating the account token.\n\n```\nconst data = new FormData();\ndata.append('file', document.querySelector('#id-file').files[0]);\ndata.append('purpose', 'identity_document');\nconst fileResult = await fetch('https://uploads.stripe.com/v1/files', {\n method: 'POST',\n headers: {'Authorization': 'Bearer pk_test_TYooMQauvdEDq54NiTphI7jx'},\n body: data,\n});\nconst fileData = await fileResult.json();\n```\n\nFinally, include the returned file ID as the `verification.document.front` value\nin the generic object provided to the `createToken()` call:\n\n```\nconst result = await stripe.createToken('account', {\n person: {\n first_name: document.querySelector('.inp-first-name').value,\n last_name: document.querySelector('.inp-last-name').value,\n address: {\n line1: document.querySelector('.inp-street-address1').value,\n city: document.querySelector('.inp-city').value,\n state: document.querySelector('.inp-state').value,\n postal_code: document.querySelector('.inp-zip').value,\n },\n verification: {\n document: {\n front: fileData.id,\n },\n },\n },\n tos_shown_and_accepted: true,\n});\n```\n\n## Updating legal entity and person details\n\nYou can use tokens to securely update an existing account’s legal entity and\nperson information. Create the tokens you need using the same combination of\nHTML and JavaScript as above, and then perform an [update\naccount](https://docs.stripe.com/api#update_account) or [update\nperson](https://docs.stripe.com/api/persons/update) call providing the new token\nID.\n\nYou must create and provide a new token when updating legal entity details\npreviously set using an account token.\n\n```\ncurl https://api.stripe.com/v1/accounts/{{CONNECTED_ACCOUNT_ID}} \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d account_token={{ACCOUNT_TOKEN_ID}}\n```\n\nWhen using tokens for updates:\n\n- An existing value is replaced with a new value.\n- If no new value is provided, the existing value remains.\n- You cannot unset an existing value.\n- The `tos_shown_and_accepted` parameter is ignored and can be omitted.\n- You can use an account or person token for an update whether or not a token\nwas originally used when creating the account or person.\n- If the account or person was originally created using an account token, you\ncan only update values using another token.\n\nFor example, if an account is created with a token containing only a name and\ndate of birth, you’d create a subsequent token containing only the address\ninformation and then perform an update account call to add the address details\nto the account.\n\n## Removing legal entity and person details\n\nTo clear any legal entity or person details or to explicitly set a value as\nnull, pass an empty string in an [update\naccount](https://docs.stripe.com/api#update_account) or [update\nperson](https://docs.stripe.com/api/persons/update) call. Use an update call,\nnot a token, even if you originally used a token. You can assign empty strings\nonly to optional attributes (for example, the second line of an address). You\ncan’t assign them to any required attributes.\n\n## See also\n\n- [Identity verification for connected\naccounts](https://docs.stripe.com/connect/identity-verification)\n- [Payouts to connected\naccounts](https://docs.stripe.com/connect/payouts-connected-accounts)\n\n## Links\n\n- [configured with\nproperties](https://docs.stripe.com/connect/update-to-typeless-connect)\n- [payouts](https://docs.stripe.com/payouts)\n- [identity verification\ninformation](https://docs.stripe.com/connect/identity-verification)\n- [Account Tokens](https://docs.stripe.com/api/tokens/create_account)\n- [Person Tokens](https://docs.stripe.com/api/tokens/create_person)\n- [Stripe.js](https://docs.stripe.com/payments/elements)\n- [the API](https://docs.stripe.com/api/tokens)\n- [payment\ndetails](https://docs.stripe.com/payments/accept-a-payment-charges#web-create-token)\n- [PSD2](https://stripe.com/connect/eu-guide)\n-\n[individual](https://docs.stripe.com/api/accounts/object#account_object-individual)\n- [required](https://docs.stripe.com/connect/required-verification-information)\n- [Stripe Connected Account Agreement](https://stripe.com/connect-account/legal)\n- [accept the service agreement through the\nAPI](https://docs.stripe.com/connect/service-agreement-types#accepting-the-correct-agreement)\n-\n[tos_shown_and_accepted](https://docs.stripe.com/api/tokens/create_account#create_account_token-account-tos_shown_and_accepted)\n- [company](https://docs.stripe.com/api/accounts/object#account_object-company)\n- [person](https://docs.stripe.com/api/persons/object)\n-\n[person.address.line1](https://docs.stripe.com/api/persons/object#person_object-address-line1)\n- [tos_acceptance](https://docs.stripe.com/api#account_object-tos_acceptance)\n- [Create a person](https://docs.stripe.com/api/persons/create)\n-\n[requirements](https://docs.stripe.com/api/accounts/object#account_object-requirements)\n- [scan of an identity\ndocument](https://docs.stripe.com/connect/handling-api-verification#handle-identity-verification)\n- [https://uploads.stripe.com/v1/files](https://uploads.stripe.com/v1/files)\n- [update account](https://docs.stripe.com/api#update_account)\n- [update person](https://docs.stripe.com/api/persons/update)\n- [retrieve account](https://docs.stripe.com/api#retrieve_account)\n- [retrieve person](https://docs.stripe.com/api/persons/retrieve)\n- [Payouts to connected\naccounts](https://docs.stripe.com/connect/payouts-connected-accounts)",
  "metadata": {
    "title": "Using tokens to securely transmit account data | Stripe Documentation",
    "description": "Connect platforms can use Stripe.js, the API, or mobile client libraries to securely collect account details from their users.",
    "sourceURL": "https://docs.stripe.com/connect/account-tokens"
  }
}