{
  "content": "# Tabs component for Stripe Apps\n\n## Use tabs to display sections of content.\n\nSDK version8.x9.x\nTabs are sections of content that display one panel of content at a time. The\nlist of tab elements sits along the top edge of the currently displayed panel.\n\nTo add the `Tabs` component to your app:\n\n```\nimport {Tabs, Tab, TabList, TabPanel, TabPanels} from\n'@stripe/ui-extension-sdk/ui';\n```\n\nLoading example...\n```\n<Box css={{width: 'fill'}}>\n <Tabs fitted>\n <TabList>\n {[1, 2].map((i) => (\n <Tab key={i} tabKey={i}>\n Tab {i}\n </Tab>\n ))}\n </TabList>\n <TabPanels>\n {[1, 2].map((i) => (\n <TabPanel key={i} tabKey={i}>\n <Box css={{backgroundColor: 'container', padding: 'large'}}>\n Tab panel {i}\n </Box>\n </TabPanel>\n ))}\n </TabPanels>\n </Tabs>\n</Box>\n```\n\n### Tabs props\n\nPropertyType\n`children`\n\nRequired\n`React.ReactNode`\n\nOne or more `TabList` or `TabPanels` components.\n\n`fitted`\n\nOptional\n`boolean | undefined`\n\nWhether or not the `TabList` should take up the entire width of its container.\n\n`onSelectionChange`\n\nOptional\n`((event: React.Key) => void) | undefined`\n\nCallback to be fired when a `Tab` is selected.\n\n`selectedKey`\n\nOptional\n`React.Key | undefined`\n\nKey of currently selected `TabPanel` if controlling the component.\n\n`size`\n\nOptional\n`(\"small\" | \"medium\" | \"large\") | undefined`\n\nThe size of the component.\n\n## Tab\n\nThe `TabList` component supports the selection of content. `TabList` is made up\nof a collection of `Tab` components. Each `Tab` can be uniquely identified with\na `tabKey` prop. If you render `Tab` components using a `map` function, you must\nstill add a `key` to satisfy [the rules of\nReact](https://reactjs.org/docs/lists-and-keys.html#keys).\n\n### TabList props\n\nPropertyType\n`children`\n\nRequired\n`React.ReactNode`\n\nOne or more `Tab` components.\n\n### Tab props\n\nPropertyType\n`children`\n\nRequired\n`React.ReactNode`\n\nThe contents of the component.\n\n`disabled`\n\nOptional\n`boolean | undefined`\n\nWhether or not the tab should be disabled.\n\n`id`\n\nOptional\n`string | undefined`\n\nNative `id` attribute to use with the `Tabs` `selectedKey`.\n\n`tabKey`\n\nOptionalDeprecated\nuse the `id` prop instead.\n\n`(React.Key | null) | undefined`\n\nA unique identifier to use with the `Tabs` `selectedKey`.\n\n## TabPanel\n\nThe `TabPanels` component supports displaying panels of content with Tabs.\n`TabPanels` is made up of a collection of `TabPanel` components. Each `TabPanel`\ncan be uniquely identified with a `tabKey` prop. If you render `TabPanel`\ncomponents using a `map` function, you must still add a `key` to satisfy [the\nrules of React](https://reactjs.org/docs/lists-and-keys.html#keys).\n\n### TabPanel props\n\nPropertyType\n`children`\n\nRequired\n`React.ReactNode`\n\nThe contents of the component.\n\n`id`\n\nOptional\n`string | undefined`\n\nNative `id` attribute to use with the `Tabs` `selectedKey`.\n\n`tabKey`\n\nOptionalDeprecated\nuse the `id` prop instead.\n\n`(React.Key | null) | undefined`\n\nA unique identifier to use with the `Tabs` `selectedKey`.\n\n## Small Tabs\n\nLoading example...\n```\n<Box css={{width: 'fill'}}>\n <Tabs size=\"small\">\n <TabList>\n {[1, 2, 3, 4, 5].map((i) => (\n <Tab key={i} tabKey={i}>\n Tab {i}\n </Tab>\n ))}\n </TabList>\n <TabPanels>\n {[1, 2, 3, 4, 5].map((i) => (\n <TabPanel key={i} tabKey={i}>\n <Box css={{backgroundColor: 'container', padding: 'large'}}>\n Tab panel {i}\n </Box>\n </TabPanel>\n ))}\n </TabPanels>\n </Tabs>\n</Box>\n```\n\n## Disabled Tabs\n\nLoading example...\n```\n<Box css={{width: 'fill'}}>\n <Tabs size=\"large\" fitted>\n <TabList>\n <Tab tabKey=\"1\">Tab</Tab>\n <Tab tabKey=\"2\">Another Tab</Tab>\n <Tab tabKey=\"3\" disabled>\n Disabled Tab\n </Tab>\n </TabList>\n <TabPanels>\n <TabPanel tabKey=\"1\">\n <Box css={{backgroundColor: 'container', padding: 'large'}}>\n Test Tab Panel 1\n </Box>\n </TabPanel>\n <TabPanel tabKey=\"2\">\n <Box css={{backgroundColor: 'container', padding: 'large'}}>\n Test Tab Panel 2\n </Box>\n </TabPanel>\n <TabPanel tabKey=\"3\">\n <Box css={{backgroundColor: 'container', padding: 'large'}}>\n Test Tab Panel 3\n </Box>\n </TabPanel>\n </TabPanels>\n </Tabs>\n</Box>\n```\n\n## Unsupported uses\n\nTabs donâ€™t support conditional content within fragments unless the fragment\nchildren are given the same key.\n\n```\nconst [result, setResult] = React.useState(null);\n\nreturn (\n <Box css={{width: 'fill'}}>\n <Tabs>\n <TabList>\n <Tab tabKey=\"1\">\n <>\n {result ? (\n <Inline>View results</Inline>\n ) : (\n <Inline>Create results</Inline>\n )}\n </>\n </Tab>\n </TabList>\n <TabPanels>\n <TabPanel tabKey=\"1\">\n <>\n {result ? (\n <Inline>Results</Inline>\n ) : (\n <Inline>No results yet</Inline>\n )}\n </>\n </TabPanel>\n </TabPanels>\n </Tabs>\n </Box>\n)\n```\n\nTo avoid unsupported uses of Tabs, use components instead of fragments.\nAlternatively, give the children of fragments a shared `key`.\n\nLoading example...\n```\nconst [result, setResult] = React.useState(null);\n\nreturn (\n <Box css={{width: 'fill'}}>\n <Tabs>\n <TabList>\n <Tab tabKey=\"1\">\n <Box>\n {result ? (\n <Inline>View results</Inline>\n ) : (\n <Inline>Create results</Inline>\n )}\n </Box>\n </Tab>\n </TabList>\n <TabPanels>\n <TabPanel tabKey=\"1\">\n <>\n {result ? (\n <Inline key=\"tab-panel-results\">Results</Inline>\n ) : (\n <Inline key=\"tab-panel-no-results\">No results yet</Inline>\n )}\n </>\n </TabPanel>\n </TabPanels>\n </Tabs>\n </Box>\n)\n```\n\n## Controlled Tabs\n\nUse the `selectedKey` prop from `Tabs` in combination with the `tabKey` prop\nfrom `Tab` and `TabPanel` to create a controlled component.\n\nLoading example...\n```\nconst [key, setSelectedKey] = React.useState<React.Key>('c');\n\nreturn (\n <Box css={{width: 'fill'}}>\n <Tabs selectedKey={key} onSelectionChange={setSelectedKey}>\n <TabList>\n {['a', 'b', 'c', 'd', 'e'].map((key) => (\n <Tab key={key} tabKey={key}>\n Tab {key}\n </Tab>\n ))}\n </TabList>\n <TabPanels>\n {['a', 'b', 'c', 'd', 'e'].map((key) => (\n <TabPanel key={key} tabKey={key}>\n <Box css={{backgroundColor: 'container', padding: 'large'}}>\n Tab panel {key}\n </Box>\n </TabPanel>\n ))}\n </TabPanels>\n </Tabs>\n </Box>\n)\n```\n\n## See also\n\n- [Design patterns to follow](https://docs.stripe.com/stripe-apps/patterns)\n- [Style your app](https://docs.stripe.com/stripe-apps/style)\n- [UI testing](https://docs.stripe.com/stripe-apps/ui-testing)\n\n## Links\n\n- [the rules of React](https://reactjs.org/docs/lists-and-keys.html#keys)\n- [Design patterns to follow](https://docs.stripe.com/stripe-apps/patterns)\n- [Style your app](https://docs.stripe.com/stripe-apps/style)\n- [UI testing](https://docs.stripe.com/stripe-apps/ui-testing)",
  "metadata": {
    "title": "Tabs component for Stripe Apps | Stripe Documentation",
    "description": "Use tabs to display sections of content.",
    "sourceURL": "https://docs.stripe.com/stripe-apps/components/tabs"
  }
}