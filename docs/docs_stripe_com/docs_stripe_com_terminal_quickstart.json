{
  "content": "partners](https://stripe.partners/).1 Set up the server\n### Install the Stripe Ruby library\n\nInstall the Stripe ruby gem and require it in your code. Alternatively, if\nyou’re starting from scratch and need a Gemfile, download the project files\nusing the link in the code editor.\n\nTerminalBundlerGitHub\nInstall the gem:\n\n`gem install stripe`Server\n### Create a ConnectionToken endpoint\n\nTo connect to a reader, your backend needs to give the SDK permission to use the\nreader with your Stripe account by providing it with the secret from a\n[ConnectionToken](https://docs.stripe.com/api/terminal/connection_tokens). Your\nbackend should only create connection tokens for clients that it trusts. ​​If\nyou’re using Stripe Connect, you should also [scope the connection\ntoken](https://docs.stripe.com/terminal/features/connect) to the relevant\nconnected accounts. ​​If using locations, you should [pass a location\nID](https://docs.stripe.com/terminal/fleet/locations-and-zones#connection-tokens)\nwhen creating the connection token to control access to readers.\n\nServer2 Set up the SDK\n### Organize your readers\n\n[Create locations](https://docs.stripe.com/terminal/fleet/locations-and-zones)\nto organize your readers. Locations group readers and allows them to\nautomatically download the reader configuration needed for their region of use.\n\nServer\n### Install the SDK\n\nTo install the SDK, add stripeterminal to the dependencies block of your\nbuild.gradle file.\n\nGradleGitHub\nAdd the dependencies to your build.gradle file:\n\n```\ndependencies {\n // ...\n\n // Stripe Terminal SDK\n implementation 'com.stripe:stripeterminal:4.2.0'\n}\n```\n\nClient\n### Verify ACCESS_FINE_LOCATION permission\n\nAdd a check to make sure that the `ACCESS_FINE_LOCATION` permission is enabled\nin your app.\n\nClient\n### Verify user location permission\n\nOverride the `onRequestPermissionsResult` method in your app and check the\npermission result to verify that the app user grants location permission.\n\nClient\n### Fetch ConnectionToken\n\nImplement the ConnectionTokenProvider interface in your app, which defines a\nsingle function that requests a connection token from your backend.\n\nClient\n### Configure TerminalApplicationDelegate\n\nTo prevent memory leaks and ensure proper cleanup of long-running Terminal SDK\nprocesses, your application must subclass `Application` and call out to the\n`TerminalApplicationDelegate` from the `onCreate` method.\n\nClient\n### Initialize the SDK\n\nTo get started, provide the current application context, the\nConnectionTokenProvider, and a TerminalListener object.\n\nClient3 Connect to the simulated reader\n### Discover readers\n\nThe Stripe Terminal SDK comes with a built-in simulated card reader, so you can\ndevelop and test your app without connecting to physical hardware. To use the\nsimulated reader, call <code>discoverReaders</code> to search for readers, with\nthe simulated option set to true.\n\nClient\n### Connect to the simulated reader\n\nWhen `discoverReaders` returns a result, call `connectBluetoothReader` to\nconnect to the simulated reader.\n\nClient4 Collecting Payments\n### Create a PaymentIntent\n\nCreate a [PaymentIntent](https://docs.stripe.com/api/payment_intents) object\nusing the SDK. A PaymentIntent tracks the customer’s payment lifecycle, keeping\ntrack of any failed payment attempts and ensuring the customer is only charged\nonce.\n\nClient\n### Collect payment method details\n\nCall `collectPaymentMethod` with the PaymentIntent’s client secret to collect a\npayment method. When connected to the simulated reader calling this method\nimmediately updates the PaymentIntent object with a [simulated test\ncard](https://docs.stripe.com/terminal/references/testing#simulated-test-cards).\nWhen connected to a physical reader the connected reader waits for a card to be\npresented.\n\nClient\n### Confirm the payment\n\nAfter successfully collecting payment method data, call `confirmPaymentIntent`\nwith the updated PaymentIntent to confirm the payment. A successful call results\nin a PaymentIntent with a status of `requires_capture` for manual capture or\n`succeeded` for automatic capture.\n\nClient\n### Create an endpoint to capture the PaymentIntent\n\nCreate an endpoint on your backend that accepts a PaymentIntent ID and sends a\nrequest to the Stripe API to capture it.\n\nServer\n### Capture the PaymentIntent\n\nIf you defined `capture_method` as `manual` during PaymentIntent creation, the\nSDK returns an authorized but not captured PaymentIntent to your application.\nWhen the PaymentIntent status is `requires_capture`, notify your backend to\ncapture the PaymentIntent. In your request send the PaymentIntent ID. To ensure\nthe application fee captured is correct for connected accounts, inspect each\n`PaymentIntent` and modify the application fee, if needed, prior to manually\ncapturing the payment.\n\nClient5 Test the integration\n### Run the application\n\nRun your server and go to [localhost:4242](http://localhost:4242/).\n\n`ruby server.rb`Server\n### Make a test payment\n\nUse\n[amounts](https://docs.stripe.com/terminal/references/testing#physical-test-cards)\nending in the following special values to test your integration.\n\nPayment succeeds00Payment is declined01Client\n## Next steps\n\n#### [Connecting to a reader](https://docs.stripe.com/terminal/payments/connect-reader)\n\nLearn what it means to connect your app to a reader.\n\n#### [Fleet management](https://docs.stripe.com/terminal/fleet/locations-and-zones)\n\nGroup and manage a fleet of readers by physical location.\n\n#### [Connect](https://docs.stripe.com/terminal/features/connect)\n\nIntegrate Stripe Terminal with your Connect platform.\n\nWas this page\nhelpful?server.rbMainActivity.ktTokenProvider.ktStripeTerminalApplication.ktReaderAdapter.ktApiClient.ktBackendService.ktTerminalEventListener.ktTerminalBluetoothReaderListener.ktConnectionToken.ktServerPaymentIntent.ktbuild.gradleDownload\n```\nrequire 'sinatra'require 'stripe'\n# This is a public sample test API key.# Don’t submit any personally identifiable information in requests made with this key.# Sign in to see your own test API key embedded in code samples.Stripe.api_key = 'sk_test_BQokikJOvBiI2HlWgH4olfQ2'\nset :root, File.dirname(__FILE__)set :public_folder, -> { File.join(root,\n'public') }set :static, trueset :port, 4242\ndef create_location Stripe::Terminal::Location.create({ display_name: 'HQ',\naddress: { line1: '1272 Valencia Street', city: 'San Francisco', state: 'CA',\ncountry: 'US', postal_code: '94110', } })end\nget '/' do redirect '/index.html'end\n\n# The ConnectionToken's secret lets you connect to any Stripe Terminal reader# and take payments with your Stripe account.# Be sure to authenticate the endpoint for creating connection tokens.post '/connection_token' do content_type 'application/json'\nconnection_token = Stripe::Terminal::ConnectionToken.create {secret:\nconnection_token.secret}.to_jsonend\npost '/create_payment_intent' do content_type 'application/json' data =\nJSON.parse(request.body.read)\n# For Terminal payments, the 'payment_method_types' parameter must include #\n'card_present'. # To automatically capture funds when a charge is authorized, #\nset `capture_method` to `automatic`. intent = Stripe::PaymentIntent.create(\namount: data['amount'], currency: 'usd', payment_method_types: [ 'card_present',\n], capture_method: 'manual', )\n intent.to_jsonend\n\npost '/capture_payment_intent' do data = JSON.parse(request.body.read)\n intent = Stripe::PaymentIntent.capture(data['payment_intent_id'])\n intent.to_jsonend\n\n```\n\n## Links\n\n- [text version of this\nguide](https://docs.stripe.com/terminal/payments/setup-sdk)\n- [View the text-based\nguide](https://docs.stripe.com/terminal/payments/setup-integration)\n- [no-code options](https://docs.stripe.com/no-code)\n- [our partners](https://stripe.partners)\n- [ConnectionToken](https://docs.stripe.com/api/terminal/connection_tokens)\n- [scope the connection\ntoken](https://docs.stripe.com/terminal/features/connect)\n- [pass a location\nID](https://docs.stripe.com/terminal/fleet/locations-and-zones#connection-tokens)\n- [Create locations](https://docs.stripe.com/terminal/fleet/locations-and-zones)\n- [PaymentIntent](https://docs.stripe.com/api/payment_intents)\n- [simulated test\ncard](https://docs.stripe.com/terminal/references/testing#simulated-test-cards)\n- [localhost:4242](http://localhost:4242)\n-\n[amounts](https://docs.stripe.com/terminal/references/testing#physical-test-cards)\n- [Connecting to a\nreader](https://docs.stripe.com/terminal/payments/connect-reader)",
  "metadata": {
    "title": "Accept in-person payments | Stripe Documentation",
    "description": "",
    "sourceURL": "https://docs.stripe.com/terminal/quickstart"
  }
}