{
  "content": "# Migrate your Connect integration to use controller properties instead of account types\n\n## Learn how to work with account controller properties instead of specifying account types.\n\nYou can now configure connected accounts using account controller properties\ninstead of defining accounts as Standard, Express, or Custom. These controller\nproperties let you specify discrete account behaviors like which Stripe-hosted\ndashboard the account can access or who Stripe collects fees from. This\nmodularity allows for more flexible configuration options.\n\nUsing account controller properties doesn’t require you to update your API\nversion. **Migrating your integration to use controller properties is\noptional**. If you only use one type of connected account and aren’t interested\nin using a new configuration, you don’t need to update your integration.\n\nWe recommend you update your integration to take advantage of the increased\nmodularity and new configurations available. The new properties are fully\nbackwards compatible, so you can migrate your integration incrementally while\ncontinuing to work with account types.\n\nEach account type maps to a set of controller properties. We automatically set\nthose properties on your existing connected accounts and on any accounts that\nyou create with account types going forward. When you update your integration to\nwork with controller properties, you don’t have to update any of your connected\naccounts.\n\n#### Note\n\nYou can start using features such as [embedded\ncomponents](https://docs.stripe.com/connect/get-started-connect-embedded-components)\nwithout making any of the changes in this guide.\n\n## Before you begin\n\n- Learn how account controller properties work and how they map to your existing\nconnected accounts.\n- Determine which of the new account configurations make sense for your\nintegration.\n\nUpdating your integration involves:\n\n- Identifying code in your integration that references the account type, and\nupdating it to reference the corresponding controller properties instead.\n- Updating your account creation process to specify controller properties\ninstead of `type`. Specifying `type` is no longer required.\n\n## Account controller properties\n\nYou can specify values for the controller properties when you create a connected\naccount using the [Accounts\nAPI](https://docs.stripe.com/api/accounts/create#create_account-controller). Any\nproperty that you don’t specify is set to a default value that has the least\ncomplex integration requirements.\n\nIf you’re building a new integration, you can get a configuration recommendation\nby completing [Connect platform\nonboarding](https://dashboard.stripe.com/connect/set-up).\n\nPropertyDefault\nvalueDescription[controller.losses.payments](https://docs.stripe.com/api/accounts/create#create_account-controller-losses-payments)`stripe`Possible\nvalues:- `application`: Your platform is [responsible for negative\nbalances](https://docs.stripe.com/connect/risk-management) and manages credit\nand fraud risk on the connected account, which requires you to review and\nacknowledge your responsibilities in [the\nDashboard](https://dashboard.stripe.com/settings/connect/platform_profile)\n- `stripe`: Stripe is liable when this account can’t pay back negative balances\nresulting from payments. Your platform is still liable for a negative balance on\nyour platform account.\n\n[controller.fees.payer](https://docs.stripe.com/api/accounts/create#create_account-controller-fees-payer)\n\n`account`\n\nPossible values:\n\n- `account`: The connected account pays all Stripe fees directly to Stripe,\ninclusive of payment processing fees\n- `application`: The Connect platform pays all Stripe fees, inclusive of payment\nprocessing fees\n- `application_custom`: The account was created with type=custom\n- `application_express`: The account was created with type=express\n\nWhen you create an account, you can only specify `application` or `account`.\n\n`application_express` and `application_custom` are not valid creation\nparameters.\n\nFor a comprehensive description of Stripe fee payment models, see the [fee\nbehavior\ndocumentation](https://docs.stripe.com/connect/direct-charges-fee-payer-behavior).\n\n[controller.requirement_collection](https://docs.stripe.com/api/accounts/create#create_account-controller-requirement_collection)`stripe`Possible\nvalues:- `application`: Your platform is responsible for collecting updated\ninformation when [requirements are due or\nchange](https://docs.stripe.com/connect/required-verification-information)\n- `stripe`: Stripe is responsible for collecting updated information when\n[requirements are due or\nchange](https://docs.stripe.com/connect/required-verification-information)\n\n[controller.stripe_dashboard.type](https://docs.stripe.com/api/accounts/create#create_account-controller-stripe_dashboard-type)`full`Possible\nvalues:- `express`: The connected account can access the Express Dashboard\n- `full`: The connected account can access the full Stripe Dashboard\n- `none`: The account can’t access the Express or Stripe Dashboard\n\n[type](https://docs.stripe.com/api/accounts/create#create_account-type)\n\nSee the description\n\nPossible values:\n\n- `custom`: The account was created as a Custom connected account\n- `express`: The account was created as an Express connected account\n- `standard`: The account was created as a Standard connected account or with\ncontroller properties matching Standard accounts\n- `none`: The account was created with no type value and its controller\nproperties don’t match any of the three account types\n\nSpecifying `type` is optional. If you create an account using `type`, you can\nonly specify `custom`, `express`, or `standard`. `none` isn’t a valid account\ncreation parameter.\n\n## Mapping account types to controller parameters\n\nEach of the three account types maps to values in the `controller` hash of\n`v1/accounts` that match the behavior of that type.\n\n### Standard\n\nIf you create an account without specifying any controller properties, the\ndefault values match the behavior of a Standard account. You can also create the\nequivalent of a Standard account by specifying the values that map to Standard\naccount behavior.\n\nThese values map to a Standard account’s behavior:\n\n- `losses.payments`: `stripe`\n- `fees.payer`: `account`\n- `requirement_collection`: `stripe`\n- `stripe_dashboard.type`: `full`\nCreation with controller propertiesCreation with type\nRequest (using default values for all properties):\n\n```\ncurl -X POST https://api.stripe.com/v1/accounts \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\"\n```\n\nResponse:\n\n```\n{\n controller: {\n type: \"application\",\n is_controller: true,\n losses: {\n payments: \"stripe\"\n },\n requirement_collection: \"stripe\",\n fees: {\n payer: \"account\",\n },\n stripe_dashboard: {\n type: \"full\"\n }\n },\n type: \"standard\"\n}\n\n```\n\n### Express\n\nThese values map to an Express account’s behavior:\n\n- `losses.payments`: `application`\n- `fees.payer`: `application` (see note)\n- `requirement_collection`: `stripe`\n- `stripe_dashboard.type`: `express`\n\n#### Note\n\nCreating an Express account using `type`, sets the `controller.fees.payer`\nproperty to `application_express` instead of `application`. This difference\ndenotes a variation in Stripe [fee billing\nbehavior](https://docs.stripe.com/connect/direct-charges-fee-payer-behavior)\nwhen your platform is using Direct charges.\n\nCreation with controller propertiesCreation with type\nRequest:\n\n```\ncurl https://api.stripe.com/v1/accounts \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d \"controller[stripe_dashboard][type]\"=express \\\n -d \"controller[fees][payer]\"=application \\\n -d \"controller[losses][payments]\"=application\n```\n\nResponse:\n\n```\n{\n controller: {\n type: \"application\",\n is_controller: true,\n losses: {\n payments: \"application\"\n },\n requirement_collection: \"stripe\",\n fees: {\n payer: \"application\",\n },\n stripe_dashboard: {\n type: \"express\"\n }\n },\n type: \"none\"\n}\n```\n\n### Custom\n\nThese values map to a Custom account’s behavior:\n\n- `losses.payments`: `application`\n- `fees.payer`: `application` (see note)\n- `requirement_collection`: `application`\n- `stripe_dashboard.type`: `none`\n\nYou must also specify the account country when creating a Custom account, and\nrequest the `card_payments` and `transfers` capabilities.\n\n#### Note\n\nCreating a Custom account using `type`, sets the `controller.fees.payer`\nproperty to `application_custom` instead of `application`. This difference\ndenotes a variation in Stripe [fee billing\nbehavior](https://docs.stripe.com/connect/direct-charges-fee-payer-behavior)\nwhen your platform is using Direct charges.\n\nCreation with controller propertiesCreation with type\nRequest:\n\n```\ncurl https://api.stripe.com/v1/accounts \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d \"controller[stripe_dashboard][type]\"=none \\\n -d \"controller[fees][payer]\"=application \\\n -d \"controller[losses][payments]\"=application \\\n -d \"controller[requirement_collection]\"=application \\\n -d \"capabilities[transfers][requested]\"=true \\\n -d country=US\n```\n\nResponse:\n\n```\n{\n controller: {\n type: \"application\",\n is_controller: true,\n losses: {\n payments: \"application\"\n },\n requirement_collection: \"application\",\n fees: {\n payer: \"application\",\n },\n stripe_dashboard: {\n type: \"none\"\n }\n },\n type: \"none\"\n}\n```\n\n## Migrate code to use controller properties\n\nIn addition to updating your account creation process to use controller\nproperties, update your integration by reviewing your code and looking for\nreferences to account types.\n\nFor each reference to an account type, determine which controller property or\nproperties are relevant and update the code accordingly.\n\nFor example, say that your code includes a conditional statement that applies to\nExpress and Custom accounts because it relates to your platform being\nresponsible for negative balances. Update that logic from `if type == express`\nor `if type == custom` to `if controller.losses.payments == application`.\n\nIf you create connected accounts that don’t match an account type, consider\ntheir controller properties as well when updating your code. The logic for\nhandling those accounts can differ from your existing logic that’s based on\naccount types.\n\nYou can use this table to identify the controller properties associated with\neach account type:\n\nAccount\nTypelosses.paymentsfees.payerrequirement_collectionstripe_dashboard.typeCustom`application``application_custom``application``none`Express`application``application_express``stripe``express`Standard`stripe``account``stripe``full`\n#### Note\n\nRemember that Express and Custom accounts have a different value for\n`fees.payer` than equivalent accounts created using controller properties. When\nupdating code related to collecting fees, you must take into account the\ndifference in behavior.\n\n## Unsupported configurations\n\nWhen creating accounts with controller properties, the following combinations\naren’t supported:\n\n`controller.requirement_collection` = `application` isn’t compatible with any of\nthe following values:\n\n- `controller.losses.payments` = `stripe`\n- `controller.fees.payer` = `account`\n- `controller.stripe_dashboard.type` = `express`\n- `controller.stripe_dashboard.type` = `full`\n\n`controller.stripe_dashboard.type` = `express` isn’t compatible with any of the\nfollowing values:\n\n- `controller.losses.payments` = `stripe`\n- `controller.fees.payer` = `account`\n- `controller.requirement_collection` = `application`\n\n`controller.stripe_dashboard.type` = `full` isn’t compatible with any of the\nfollowing values:\n\n- `controller.losses.payments` = `application`\n- `controller.fees.payer` = `application`\n- `controller.requirement_collection` = `application`\n\n`controller.stripe_dashboard.type` = `none` isn’t supported when both of the\nfollowing values are set (it’s supported when only one of them is set):\n\n- `controller.requirement_collection` = `stripe`\n- `controller.losses.payments` = `application`\n\n## Links\n\n- [embedded\ncomponents](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n- [Accounts\nAPI](https://docs.stripe.com/api/accounts/create#create_account-controller)\n- [Connect platform onboarding](https://dashboard.stripe.com/connect/set-up)\n-\n[controller.losses.payments](https://docs.stripe.com/api/accounts/create#create_account-controller-losses-payments)\n- [responsible for negative\nbalances](https://docs.stripe.com/connect/risk-management)\n- [the\nDashboard](https://dashboard.stripe.com/settings/connect/platform_profile)\n-\n[controller.fees.payer](https://docs.stripe.com/api/accounts/create#create_account-controller-fees-payer)\n- [fee behavior\ndocumentation](https://docs.stripe.com/connect/direct-charges-fee-payer-behavior)\n-\n[controller.requirement_collection](https://docs.stripe.com/api/accounts/create#create_account-controller-requirement_collection)\n- [requirements are due or\nchange](https://docs.stripe.com/connect/required-verification-information)\n-\n[controller.stripe_dashboard.type](https://docs.stripe.com/api/accounts/create#create_account-controller-stripe_dashboard-type)\n- [type](https://docs.stripe.com/api/accounts/create#create_account-type)",
  "metadata": {
    "title": "Migrate your Connect integration to use controller properties instead of account types | Stripe Documentation",
    "description": "Learn how to work with account controller properties instead of specifying account types.",
    "sourceURL": "https://docs.stripe.com/connect/migrate-to-controller-properties"
  }
}