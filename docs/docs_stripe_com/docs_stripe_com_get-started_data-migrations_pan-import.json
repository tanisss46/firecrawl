{
  "content": "# Request a payment data import\n\n## Securely import sensitive payment data.\n\nStripe enables you to retain your existing customer and payment data when you\nmigrate to Stripe. We work with your team and current payment provider, as\nneeded, to securely migrate your information in a few steps:\n\n- [Build your Stripe\nintegration](https://docs.stripe.com/get-started/data-migrations/pan-import#build-integration).\n- [Request and confirm the migration\ndetails](https://docs.stripe.com/get-started/data-migrations/pan-import#request-migration).\n- [Update your\nintegration](https://docs.stripe.com/get-started/data-migrations/pan-import#update-integration)\nto complete the migration.\n- (Optional) [Migrate\nsubscriptions](https://docs.stripe.com/get-started/data-migrations/pan-import#subscription-migrations).\n\nThis process allows you to accept and charge new customers on Stripe and\ncontinue charging your existing customers with your current processor until the\nmigration is complete. Your customers incur no downtime. After the migration\nprocess completes, you can process all payments on Stripe.\n\nBuild and test your Stripe integration before requesting data from your current\nprocessor. This gives you plenty of time to verify and test your new\nintegration. If you have any questions about the migration process or\nintegrating with Stripe, [let us\nknow](https://support.stripe.com/contact/login?email=true&topic=migrations).\n\n[Build your Stripe\nintegration](https://docs.stripe.com/get-started/data-migrations/pan-import#build-integration)\nStripe simplifies your security requirements so that your customers don’t have\nto leave your site to complete a payment. This is done through a combination of\nclient-side and server-side steps:\n\n- From your website running in the customer’s browser, Stripe securely collects\ntheir payment details.\n- Stripe responds with a representative token.\n- The browser submits the token to your server, along with any other form data.\n- Your server-side code uses that token in an API request (for example, when\n[creating a charge](https://docs.stripe.com/payments/charges-api)).\n\nThis approach streamlines your website’s checkout flow, while sensitive payment\ninformation never touches your server. This allows you to operate in accordance\nwith\n[PCI-compliance](https://docs.stripe.com/security/guide#validating-pci-compliance)\nregulations, which can save you time and provide financial benefits.\n\n![Stripe's payment process\nflow](https://b.stripecdn.com/docs-statics-srv/assets/charge-workflow.6d5c025c1b1e62a53803f1908104e0a8.png)\n\nStripe’s payment process flow\n\nCompared to other payment processors, a Stripe integration can differ in the\nfollowing ways:\n\n- Your customer never leaves your website.\n- Token creation isn’t tied to a specific product or amount.\n- There’s no need to create a client-side key on-demand. You use a set,\npublishable [API key](https://docs.stripe.com/keys) instead.\n\n### Prepare your integration\n\nFor all new customer tokens (not imported), implement the following:\n\n- Use [Customer](https://docs.stripe.com/api#create_customer) objects to [save\nthe card information](https://docs.stripe.com/saving-cards).\n- Collect and tokenize customer card information with one of our recommended\n[payments\nintegrations](https://docs.stripe.com/payments/online-payments#compare-features-and-availability).\n- [Create charges](https://docs.stripe.com/api#create_charge-customer) for these\nnew customers.\n\nUsing this approach, you can accept payments from your new customers on Stripe\nwithout impacting your current customers in your existing processor during the\nmigration process.\n\n### Integration considerations\n\nDesigning your integration before you ask your payment processor to transfer\ndata to Stripe is the most efficient way to handle imported data. Some actions\nyou can take before requesting an import include:\n\n- Complete your Stripe account setup.\n- Remap customer records.\n- Handle updates to payment information during the migration.\n- Enable all optimizations, such as [Adaptive\nAcceptance](https://stripe.com/guides/optimizing-authorization-rates#adaptive-acceptance),\nCard Account Updater (CAU), and [network\ntokens](https://stripe.com/guides/understanding-benefits-of-network-tokens).\n\n#### Remap customer records\n\nIf you prefer, you can configure your integration to [import the payment method\ndata from prior records into existing Stripe customer\nobjects](https://docs.stripe.com/get-started/data-migrations/map-payment-data).\nDoing so prevents the migration from creating a new (possibly duplicate)\ncustomer in your Stripe account for each unique customer ID in the files we\nreceive from your prior processor.\n\nAfter migrating, you might still have to update some records to correspond with\nthe new Stripe [Customer](https://docs.stripe.com/api/customers) identifier, if:\n\n- You created the Stripe customer before migration, then we imported the payment\ninformation to update this customer record.\n- We imported the payment information as a new customer record.\n\nFor example, customer jenny.rosen@example.com might have ID `42` in your\ndatabase, corresponding to ID `1893` in your previous processor’s system, but is\nID `cus_12345` in your Stripe account. In this case, you must now map your ID\n`42` to the Stripe ID `cus_12345` in your database. Stripe provides a\npost-import [mapping\nfile](https://docs.stripe.com/get-started/data-migrations/pan-import#update-integration)\nto help you identify required remapping.\n\n#### Handle updates to payment information\n\nIf customers update their payment information with your previous processor in\nthe window between transferring the data and completing the import, those\nchanges are lost.\n\nUpdate your site’s process for handling updates to saved payments to prevent\nerrors or billing issues for your customers. This includes preparations to\nperform a self-migration for any customer without a stored Stripe customer ID:\n\n- Create a new [Customer object](https://docs.stripe.com/api/customers/object)\nin Stripe for your customer.\n- Attach the payment method to the Customer object.\n- If necessary, [migrate\nsubscriptions](https://docs.stripe.com/billing/subscriptions/import-subscriptions-toolkit).\n\nAfter migration completes, Stripe [automatically handles card-triggered\nupdates](https://stripe.com/blog/smarter-saved-cards), such as expiration date\nchanges.\n\n[Request and confirm the migration\ndetails](https://docs.stripe.com/get-started/data-migrations/pan-import#request-migration)-\nAfter you complete your integration and are ready to process payments on Stripe,\n[request your payment data from your previous\nprocessor](https://support.stripe.com/questions/request-data-from-a-current-processor-for-a-data-import-to-stripe).\nMany processors require the account owner to request a data transfer.\n- Log in to your Stripe account to submit the [migration request\nform](https://support.stripe.com/contact/email?topic=migrations) to request your\nimport migration.\n- Engage with Stripe through the authenticated email thread we create upon\nreceipt of your migration request.\n\n#### Warning\n\nNever send sensitive credit card details or customer information directly to\nStripe. If you have this data, let us know in your migration request form so we\ncan help you securely transfer your data.\n\nStripe can import your customer billing address information and payment details.\nFor details on migrating specific payment types, see:\n\n- [Cards](https://docs.stripe.com/get-started/data-migrations/card-imports)\n- [ACH](https://docs.stripe.com/get-started/data-migrations/ach-imports)\n- [SEPA](https://docs.stripe.com/get-started/data-migrations/sepa-imports)\n- [Bacs](https://docs.stripe.com/payments/bacs-debit/import-data)\n- [PADs/ACSS](https://docs.stripe.com/get-started/data-migrations/pads-imports)\n\nData migrations doesn’t migrate subscriptions, but you can\n[recreate](https://docs.stripe.com/billing/subscriptions/migrate-subscriptions)\nthem separately or import them using the [Billing Migration\nToolkit](https://docs.stripe.com/billing/subscriptions/import-subscriptions-toolkit).\n\nYour previous processor might take a few days or several weeks to transfer the\nfinal data to Stripe. Allow for this transition time in your migration plan.\n\nAfter your previous processor transfers your data, Stripe reviews the data and\nidentifies any problems with the import. We work with you and your previous\nprocessor to correct any issues. We then share a summary of the import for your\nfinal review and approval.\n\nAfter your approval, Stripe imports the data into your account. We create a\n[Customer](https://docs.stripe.com/api#customer_object) for each unique customer\nin the transferred data file, and create and attach the customer’s cards as\n[Card](https://docs.stripe.com/api#card_object) or [Payment\nMethod](https://docs.stripe.com/api/payment_methods/object) objects. If the\ntransferred data specifies the customer’s default card, we set that as the\ncustomer’s [default payment\nmethod](https://docs.stripe.com/api#customer_object-default_source) for charges\nand [subscription](https://docs.stripe.com/api/subscriptions/create) payments.\n\nIf your Stripe account has accumulated significant customer records by the time\nyou migrate, consider [mapping import date into existing Stripe customer\nobjects](https://docs.stripe.com/get-started/data-migrations/map-payment-data)\ninstead of creating new Customer objects.\n\nStripe typically imports data within 10 business days of receiving the correct\ndata from your previous processor, along with any supplementary data files you\nwant to share with our team.\n\n[Update your\nintegration](https://docs.stripe.com/get-started/data-migrations/pan-import#update-integration)\nAfter completing the import, Stripe sends you a choice of a CSV or JSON file\nthat shows the mapped relationship between your current processor’s IDs and the\nimported Stripe object IDs. Parse this mapping file and update your database\naccordingly. Make sure your integration [handled any card\nupdates](https://docs.stripe.com/get-started/data-migrations/pan-import#handle-card-updates)\nthat took place during the transition.\n\n### Post import mapping file\n\nAfter you update your integration with this mapping file, you can begin charging\nall of your customers on Stripe.\n\n```\n{\n \"1893\": {\n \"cards\": {\n \"2600\": {\n \"id\": \"card_2222222222\",\n \"fingerprint\": \"x9yW1WE4nLvl6zjg\",\n \"last4\": \"4242\",\n \"exp_month\": 1,\n \"exp_year\": 2020,\n \"brand\": \"Visa\"\n },\n \"3520\": {\n \"id\": \"card_3333333333\",\n \"fingerprint\": \"nZnMWbJBurX3VHIN\",\n \"last4\": \"0341\",\n \"exp_month\": 6,\n \"exp_year\": 2021,\n \"brand\": \"Mastercard\"\n }\n },\n \"id\": \"cus_abc123def456\"\n }\n}\n\n```\n\nThe example JSON mapping above shows:\n\n- Imported customer ID 1893 as a new Stripe Customer with ID `cus_abc123def456`.\n- Imported customer card ID 2600 as a new Stripe Card with ID `card_2222222222`.\n- Imported customer card ID 3520 as a new Stripe Card with ID `card_3333333333`.\n\nStripe can import card data as\n[PaymentMethods](https://docs.stripe.com/api#payment_method_object) instead of\nCard objects if you specify it in your migration request. The following examples\nshow the mapping files for different types of payment information imports.\n\nCard as card_ CSVCard as PaymentMethod (pm_) CSVACH as bank account (ba_) CSVACH\nas PaymentMethod (pm_) CSVBACs as PaymentMethod (pm_) CSVSEPA as PaymentMethod\n(pm_) CSV\n```\n\nold_customer_id,customer_id,old_card_id,card_id,card_fingerprint,card_last4,card_exp_month,card_exp_year,card_brand\n\nold_cus_100,cus_abc123def456,old_src_100,card_2222222222,x9yW1WE4nLvl6zjg,424242,09,2024,Visa\n\n```\n\n### Post import payment declines\n\nAfter migrating, monitor your payments performance to make sure the acceptance\nrate for imported payment data matches your expectations.\n\nPayment acceptance (or issuer authorization rate) is the percentage of\ntransactions that issuers successfully authorize out of all transactions\nsubmitted for payment. This metric excludes blocked transactions (for example\ndue to Radar rules) because those are never submitted for authorization.\n\nIn both your general approach and post migration, align your [payment\nauthorization\noptimization](https://stripe.com/guides/optimizing-authorization-rates) goals\nwith your business objectives. For example, a digital goods business with low\nunit cost might set their risk level to block fewer payments. Consider the\npotential effects:\n\n- Increased conversion rates due to less friction.\n- Increased exposure to fraud due to riskier payments getting through.\n- Lower raw issuer authorization rates due to fraud model blocks by the issuer.\n\nMake sure you provide accurate data (such as cardholder name, billing address,\nand email). Reflecting the cardholder’s *intent* maximizes successful\nauthorization potential.\n\n#### Identify cards on file\n\nPayment data migrations involve *cards on file* (cards saved for a future\n[merchant-initiated or off\nsession](https://support.stripe.com/questions/what-is-the-difference-between-on-session-and-off-session-and-why-is-it-important)\npayment for the same customer). Make sure you store imported payment data and\nlabel payments using those cards on file with the correct `off_session`\nparameter. If you improperly identify cards on file:\n\n- Issuers who can’t confirm a cardholder’s consent to future or recurring\npayments might [decline](https://docs.stripe.com/declines#issuer-declines) them.\n- The payment data might be ineligible for certain Stripe optimization products\nsuch as Card account updater (CAU) and Network tokens (NT).\n\n#### Monitor decline reasons for optimization opportunities\n\nFollowing your migration, your [issuer decline\nreasons](https://docs.stripe.com/declines/codes) can help you identify whether\nmigrated payment data is transacting as expected. Spikes in certain types of\ndeclines might benefit from the following optimization products:\n\n- [Card account\nupdater](https://docs.stripe.com/saving-cards#automatic-card-updates): Stripe’s\npartnerships with card networks allows us to automatically obtain updates for\nexpired or replaced cards in both real-time and the background.\n- **Automatic retries** (Dunning): Use caution because retrying numerous cards\n(such as after a migration) can appear suspicious to issuers. If you use\nStripe’s [Smart\nretries](https://stripe.com/guides/optimizing-authorization-rates#smart-retries)\nfor your billing payments, the machine learning model analyzes decline code,\npayment method updates, and bank risk threshold activity to retry recurring\nrevenue payments more strategically.\n- [Network\ntokens](https://stripe.com/guides/optimizing-authorization-rates#network-tokens):\nReplace a specific payment account number (PAN) with a secure token from the\ncard network to make sure PAN updates (like renewal or replacement)\nautomatically reflect in the token.\n- [Adaptive\nacceptance](https://stripe.com/guides/optimizing-authorization-rates#adaptive-acceptance):\nStripe uses machine learning to assess the effect of minor adjustments (such as\nformatting) to an authorization request in real-time, then refines the payment\nretry before returning the original decline to the customer.\n- **Customer outreach**: Asking your customer to log in and re-enter or\nre-verify their payment details often re-establishes your business’s\ntrustworthiness with the customer and the payment providers. Consider notifying\ncustomers through channels other than email, such as text messages or in-app\nnotifications.\n\nThe following table shows which optimization products offer improvement for a\nvariety of decline reasons.\n\nDecline codes might include Migration effectDoDon’t\n`incorrect_number`\n\n`invalid_number`\n\n`expired_card`\n\nUpdates to card data during the natural migration lag can cause saved card data\nto be out of date.\n\n- Card account updater\n- Network tokens\n- Adaptive acceptance\n- Contact customer\n\nRetry\n\n`generic_decline`\n\n`do_not_honor`\n\nChanges to your statement descriptor or other identification markers might\ntrigger issuer risk models or confuse your customer.\n\n- Retry\n- Network tokens\n- Adaptive acceptance\n- Contact customer\n\nCard account updater\n\n`transaction_not_allowed`\n\n`try_again_later`\n\n`authentication_required`\n\n`incorrect_cvc`\n\nSome migrated payment data might be missing initial card validation details,\nsuch as the network token or original transaction ID.\n\n- Card account updater\n- Retry\n- Adaptive acceptance\n- Contact customer\n\nNetwork tokens\n\n`lost_card`\n\n`stolen_card`\n\n`invalid_account`\n\n`pickup_card`\n\n`card_not_supported`\n\nCustomers might report lost or stolen cards during a migration lag. Look out for\na special CONTAC event in conjunction with these declines.\n\n- Network tokens\n- Contact customer\n- CAU\n- Retry1\n- Adaptive acceptance\n\n1 Retrying lost or stolen payment data can appear suspicious to card issuers.\n\n[OptionalWork with\nsubscriptions](https://docs.stripe.com/get-started/data-migrations/pan-import#subscription-migrations)[Migration\nPGP\nkey](https://docs.stripe.com/get-started/data-migrations/pan-import#migration-pgp-key)\nIf you’re unfamiliar with PGP, see [GPG](http://gnupg.org/) and start by\n[importing a public key](http://www.gnupg.org/gph/en/manual.html#AEN84). After\nyou familiarize yourself with the basics of PGP, use the following PGP key to\nencrypt sensitive data (such as credit card information) for PCI-compliant\nmigration.\n\n### PGP migration key\n\nThis creates **FILENAME.gpg** with the following information:\n\n- Key ID: `9C78B7620C1E99AD`\n- Key type: `RSA`\n- Key size: `4096 bits`\n- Fingerprint: `AEBF 7C48 38C4 4D2F DC99 A3F9 9C78 B762 0C1E 99AD`\n- User ID: `Stripe Import Key (PCI) <support-migrations@stripe.com>`\n\nAfter you import our key, you can encrypt files to send by running this command\nin your command line prompt:\n\n`gpg --encrypt --recipient 9C78B7620C1E99AD FILENAME`\n\nFor more details on providing encrypted data to Stripe, see [Upload\nsupplementary\ndata](https://docs.stripe.com/get-started/data-migrations/supplementary-data).\n\n## See also\n\n- [Multiple\naccounts](https://docs.stripe.com/get-started/account/multiple-accounts)\n- [Account checklist](https://docs.stripe.com/get-started/account/checklist)\n\n## Links\n\n- [let us\nknow](https://support.stripe.com/contact/login?email=true&topic=migrations)\n- [creating a charge](https://docs.stripe.com/payments/charges-api)\n-\n[PCI-compliance](https://docs.stripe.com/security/guide#validating-pci-compliance)\n- [API key](https://docs.stripe.com/keys)\n- [Customer](https://docs.stripe.com/api#create_customer)\n- [save the card information](https://docs.stripe.com/saving-cards)\n- [payments\nintegrations](https://docs.stripe.com/payments/online-payments#compare-features-and-availability)\n- [Create charges](https://docs.stripe.com/api#create_charge-customer)\n- [Adaptive\nAcceptance](https://stripe.com/guides/optimizing-authorization-rates#adaptive-acceptance)\n- [network\ntokens](https://stripe.com/guides/understanding-benefits-of-network-tokens)\n- [import the payment method data from prior records into existing Stripe\ncustomer\nobjects](https://docs.stripe.com/get-started/data-migrations/map-payment-data)\n- [Customer](https://docs.stripe.com/api/customers)\n- [Customer object](https://docs.stripe.com/api/customers/object)\n- [migrate\nsubscriptions](https://docs.stripe.com/billing/subscriptions/import-subscriptions-toolkit)\n- [automatically handles card-triggered\nupdates](https://stripe.com/blog/smarter-saved-cards)\n- [request your payment data from your previous\nprocessor](https://support.stripe.com/questions/request-data-from-a-current-processor-for-a-data-import-to-stripe)\n- [migration request\nform](https://support.stripe.com/contact/email?topic=migrations)\n- [Cards](https://docs.stripe.com/get-started/data-migrations/card-imports)\n- [ACH](https://docs.stripe.com/get-started/data-migrations/ach-imports)\n- [SEPA](https://docs.stripe.com/get-started/data-migrations/sepa-imports)\n- [Bacs](https://docs.stripe.com/payments/bacs-debit/import-data)\n- [PADs/ACSS](https://docs.stripe.com/get-started/data-migrations/pads-imports)\n-\n[recreate](https://docs.stripe.com/billing/subscriptions/migrate-subscriptions)\n- [Customer](https://docs.stripe.com/api#customer_object)\n- [Card](https://docs.stripe.com/api#card_object)\n- [Payment Method](https://docs.stripe.com/api/payment_methods/object)\n- [default payment\nmethod](https://docs.stripe.com/api#customer_object-default_source)\n- [subscription](https://docs.stripe.com/api/subscriptions/create)\n- [PaymentMethods](https://docs.stripe.com/api#payment_method_object)\n- [payment authorization\noptimization](https://stripe.com/guides/optimizing-authorization-rates)\n- [merchant-initiated or off\nsession](https://support.stripe.com/questions/what-is-the-difference-between-on-session-and-off-session-and-why-is-it-important)\n- [decline](https://docs.stripe.com/declines#issuer-declines)\n- [issuer decline reasons](https://docs.stripe.com/declines/codes)\n- [Card account\nupdater](https://docs.stripe.com/saving-cards#automatic-card-updates)\n- [Smart\nretries](https://stripe.com/guides/optimizing-authorization-rates#smart-retries)\n- [Network\ntokens](https://stripe.com/guides/optimizing-authorization-rates#network-tokens)\n- [GPG](http://gnupg.org/)\n- [importing a public key](http://www.gnupg.org/gph/en/manual.html#AEN84)\n- [Upload supplementary\ndata](https://docs.stripe.com/get-started/data-migrations/supplementary-data)\n- [Multiple\naccounts](https://docs.stripe.com/get-started/account/multiple-accounts)\n- [Account checklist](https://docs.stripe.com/get-started/account/checklist)",
  "metadata": {
    "title": "Request a payment data import | Stripe Documentation",
    "description": "You can bring your payment history when you migrate to Stripe. You can securely import customer and payment data into your Stripe account to maintain one center of operations.",
    "sourceURL": "https://docs.stripe.com/get-started/data-migrations/pan-import"
  }
}