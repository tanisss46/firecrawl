{
  "content": "- [Go](https://github.com/stripe/stripe-go) `>=81.3.0`\n\nBuild a full, working integration using [Connect embedded\ncomponents](https://docs.stripe.com/connect/get-started-connect-embedded-components).\nUse Connect embedded components to add connected account dashboard functionality\nto your website in minutes. These libraries and their supporting API help you to\nget up and running with almost no code, giving your users access to Stripe\nproducts directly in your dashboard.\n\nDownload full appDon't code? Use Stripe’s [no-code\noptions](https://docs.stripe.com/no-code) or get help from [our\npartners](https://stripe.partners/).1Set up the server\n### Install the Stripe Ruby library\n\nInstall the Stripe Ruby gem and require it in your code. Alternatively, if\nyou’re starting from scratch and need a Gemfile, download the project files\nusing the link in the code editor.\n\nTerminalBundlerGitHub\nInstall the gem:\n\n`gem install stripe -v 13.4.1`Server\n### Create an endpoint on your server\n\nAdd a new endpoint on your server for your client to call.\n\nServer\n### Delegate API access to your connected account\n\nTo make requests on behalf of your connected account, pass the connected account\nID to the [AccountSessions API](https://docs.stripe.com/api/account_sessions).\n\nServer\n### Enable specific embedded components for your connected accounts\n\nSpecify the embedded components you want to enable for your connected accounts.\nFor the full list of supported embedded components, see [Get started with\nConnect embedded\ncomponents](https://docs.stripe.com/connect/supported-embedded-components).\n\nServer\n### Create an AccountSession\n\nCall the `v1/account_sessions` API from your endpoint to create a new\n[AccountSession](https://docs.stripe.com/api/account_sessions).\n\nServer\n### Return the client secret\n\nReturn the `client_secret` property from the AccountSession in the response.\n\nServer2Initialize Connect.js on the client\n### Load the Connect.js script\n\nImport the [@stripe/connect-js](https://github.com/stripe/connect-js) module and\ncall `loadConnectAndInitialize(initParams)` to load the code necessary to\nconnect your client to Stripe. Connect.js loads synchronously and returns a\n`StripeConnectInstance` to the client.\n\nnpmGitHub\nInstall the library:\n\n`npm install --save @stripe/connect-js`Client\n### Initialize Connect.js\n\n`loadConnectAndInitialize(initParams)` returns a StripeConnectInstance object,\nwhich is used to create a StripeConnectInstance. Initialize the\nStripeConnectInstance by passing in your [publishable\nkey](https://docs.stripe.com/keys) and the `fetchClientSecret` function to fetch\na client secret.\n\nClient\n### Include Connect embedded components\n\nAdd Connect embedded components to the DOM. After initialization, the\nStripeConnectInstance handles making requests to Stripe and updating the UI of\nthe web components. You can mount or unmount these elements from the DOM at any\ntime and make the inner elements fit seamlessly within your page by wrapping\nthem with your own HTML.\n\nAfter a successful initialization, StripeConnectInstance manages the context for\nall the Connect embedded components in your application and uses that client\nsecret and publishable key to contact Stripe.\n\nClient\n### Optional: Style Connect embedded components\n\n[Customize the appearance of Connect embedded\ncomponents](https://docs.stripe.com/connect/get-started-connect-embedded-components#customize-the-look-of-connect-embedded-components)\nby passing an `appearance` configuration to StripeConnect upon initialization.\nConnect embedded components already inherit the font-family of the parent HTML\nelement, but you can make them match with the rest of your application by\npassing your company’s color scheme.\n\nClientserver.rbindex.htmlindex.jsDownload\n```\nrequire 'sinatra'require 'stripe'\n# This is a placeholder - it should be replaced with your secret API key.# Sign in to see your own test API key embedded in code samples.# Don’t submit any personally identifiable information in requests made with this key.Stripe.api_key = 'sk_INSERT_YOUR_SECRET_KEY'\nset :static, trueset :port, 4242set :public_folder, 'dist'\npost '/account_session' do content_type 'application/json'\nbegin account_session = Stripe::AccountSession.create({ account:\n\"{{CONNECTED_ACCOUNT_ID}}\", components: { payments: { enabled: true, features: {\nrefund_management: true, dispute_management: true, capture_payments: true } } }\n})\n{ client_secret: account_session[:client_secret] }.to_json rescue => error puts\n\"An error occurred when calling the Stripe API to create an account session:\n#{error.message}\"; return [500, { error: error.message }.to_json] endend\nget '/' do send_file File.join(settings.public_folder, 'index.html')end\n```\n\n## Links\n\n- [text version of this\nguide](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n- [Ruby](https://github.com/stripe/stripe-ruby)\n- [Python](https://github.com/stripe/stripe-python)\n- [PHP](https://github.com/stripe/stripe-php)\n- [Node](https://github.com/stripe/stripe-node)\n- [.NET](https://github.com/stripe/stripe-dotnet)\n- [Java](https://github.com/stripe/stripe-java)\n- [Go](https://github.com/stripe/stripe-go)\n- [no-code options](https://docs.stripe.com/no-code)\n- [our partners](https://stripe.partners)\n- [AccountSessions API](https://docs.stripe.com/api/account_sessions)\n- [Get started with Connect embedded\ncomponents](https://docs.stripe.com/connect/supported-embedded-components)\n- [@stripe/connect-js](https://github.com/stripe/connect-js)\n- [publishable key](https://docs.stripe.com/keys)\n- [Customize the appearance of Connect embedded\ncomponents](https://docs.stripe.com/connect/get-started-connect-embedded-components#customize-the-look-of-connect-embedded-components)",
  "metadata": {
    "title": "Integrate with Connect embedded components | Stripe Documentation",
    "description": "",
    "sourceURL": "https://docs.stripe.com/connect/connect-embedded-components/quickstart"
  }
}