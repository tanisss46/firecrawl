{
  "content": "# How subscriptions work\n\n## Manage recurring payments and subscription lifecycles.\n\nWith Subscriptions, customers make recurring payments for access to a product.\nSubscriptions require you to retain more information about your customers than\none-time purchases because you need to charge them in the future.\n\n## Subscription objects\n\nUse the following core API resources to build and manage subscriptions:\n\nResource Definition[Customer](https://docs.stripe.com/api/customers)Represents a\ncustomer who purchases a subscription. Use the Customer object associated with a\nsubscription to make and track recurring charges and to manage the products that\nthey subscribe\nto.[Entitlement](https://docs.stripe.com/api/entitlements/active-entitlement)Represents\na customer’s access to a feature included in a service product that they\nsubscribe to. When you create a subscription for a customer’s recurring purchase\nof a product, an active entitlement is automatically created for each feature\nassociated with that product. When a customer accesses your services, use their\nactive entitlements to enable the features included in their\nsubscription.[Feature](https://docs.stripe.com/api/entitlements/feature)Represents\na function or ability that your customers can access when they subscribe to a\nservice product. You can include features in a product by creating\nProductFeatures.[Invoice](https://docs.stripe.com/api/invoices)A statement of\namounts a customer owes that tracks payment statuses from draft through paid or\notherwise finalized. Subscriptions automatically generate\ninvoices.[PaymentIntent](https://docs.stripe.com/api/payment_intents)A way to\nbuild dynamic payment flows. A PaymentIntent tracks the lifecycle of a customer\ncheckout flow and triggers additional authentication steps when required by\nregulatory mandates, custom Radar fraud rules, or redirect-based payment\nmethods. Invoices automatically create\nPaymentIntents.[PaymentMethod](https://docs.stripe.com/api/payment_methods)A\ncustomer’s payment instruments that they use to pay for your products. For\nexample, you can store a credit card on a Customer object and use it to make\nrecurring payments for that customer. Typically used with the Payment Intents or\nSetup Intents APIs.[Price](https://docs.stripe.com/api/prices)Defines the unit\nprice, currency, and billing cycle for a\nproduct.[Product](https://docs.stripe.com/api/products)A good or service that\nyour business sells. A service product can include one or more\nfeatures.[ProductFeature](https://docs.stripe.com/api/product-feature)Represents\na single feature’s inclusion in a single product. Each product is associated\nwith a ProductFeature for each feature that it includes, and each feature is\nassociated with a ProductFeature for each product that includes\nit.[Subscription](https://docs.stripe.com/api/subscriptions)Represents a\ncustomer’s scheduled recurring purchase of a product. Use a subscription to\ncollect payments and provide repeated delivery of or continuous access to a\nproduct.\nHere’s an example of how products, features, and entitlements work together.\nImagine that you want to set up a subscription service that offers two tiers: a\nstandard product with basic functionality, and an advanced product that adds\nextended functionality.\n\n- You create two features: `basic_features` and `extended_features`.\n- You create two products: `standard_product` and `advanced_product`.\n- For the standard product, you create one ProductFeature that associates\n`basic_features` with `standard_product`.\n- For the advanced product, you create two ProductFeatures: one that associates\n`basic_features` with `advanced_product` and one that associates\n`extended_features` with `advanced_product`.\n\nA customer, `first_customer`, subscribes to the standard product. When you\ncreate the subscription, Stripe automatically creates an Entitlement that\nassociates `first_customer` with `basic_features`.\n\nAnother customer, `second_customer`, subscribes to the advanced product. When\nyou create the Subscription, Stripe automatically creates two Entitlements: one\nthat associates `second_customer` with `basic_features`, and one that associates\n`second_customer` with `extended_features`.\n\nYou can determine which features to provision for a customer by [retrieving\ntheir active entitlements or listening to the Active Entitlement Summary\nevent](https://docs.stripe.com/billing/entitlements#entitlements). You don’t\nhave to retrieve their subscriptions, products, and features.\n\n![How Stripe objects work in a subscription\nlifecycle.](https://b.stripecdn.com/docs-statics-srv/assets/abstractions.c0365799e62eac96eed3e9e746e3b65b.svg)\n\n## Integration example\n\nThis section describes our [sample\nintegration](https://github.com/stripe-samples/subscription-use-cases/tree/master/fixed-price-subscriptions)\non GitHub, which illustrates how to build a subscriptions integration. If you’re\nready to build your own integration, see the [Billing\nquickstart](https://docs.stripe.com/billing/quickstart) or [integration\nguide](https://docs.stripe.com/billing/subscriptions/build-subscriptions).\n\n### Landing page\n\nOn your frontend, the landing page collects the email address first. Your\napplication might have other customer-specific information you want to collect\nlike a username or address. Clicking the signup button sends the information\ncollected on the landing page to your backend. This process creates a customer\nand displays the pricing page on your frontend.\n\n### Pricing page\n\nThe pricing page displays your subscription options based on the products and\nprices you create when you first set up your integration, meaning you don’t need\nto create new ones every time customers sign up. Your pricing page displays the\nprices you created, and your customers choose the option they want. The [example\non\nGitHub](https://github.com/stripe-samples/subscription-use-cases/tree/master/fixed-price-subscriptions)\ndisplays a payment form when a customer selects an option. Learn more about\n[products and\nprices](https://docs.stripe.com/products-prices/how-products-and-prices-work).\n\n### Payment\n\nThe payment form collects a name and card information. Stripe hosts this form if\nyou use Checkout. It’s one of the key features that allows you to collect\npayments and remain PCI compliant. Clicking **Subscribe**:\n\n- Creates a new subscription with your customer and price IDs.\n- Generates an invoice for your initial subscription cycle.\n- Collects payment details and pays your invoice.\n- Sets the payment method as the default payment method for the subscription-a\nrequirement for subsequent payments.\n\nMake sure to [confirm](https://docs.stripe.com/api/payment_intents/confirm)\npayment before [provisioning\naccess](https://docs.stripe.com/billing/subscriptions/overview#provisioning) for\nyour customer.\n\nTo implement this:\n\n- **Accept payments without code**: If you don’t want to write any code, learn\nhow to [create a Payment\nLink](https://docs.stripe.com/payment-links/create?pricing-model=standard) and\nshare it with your customers.\n- **Build a checkout page**: Use the [Checkout Sessions\nAPI](https://docs.stripe.com/api/checkout/sessions) to accept payments through\n[a hosted page](https://docs.stripe.com/checkout/quickstart), [an embedded form\non your site](https://docs.stripe.com/checkout/embedded/quickstart), or [a\ncustomized checkout page built with embedded\ncomponents](https://docs.stripe.com/checkout/custom/quickstart).\n- **Advanced integration**: Use [Stripe\nElements](https://docs.stripe.com/payments/elements) to [collect payment details\nand activate the\nsubscription](https://docs.stripe.com/billing/subscriptions/build-subscriptions?ui=elements#collect-payment)\nwith the [Payment Element](https://docs.stripe.com/payments/payment-element).\n\n### Provisioning\n\nUse [Entitlements](https://docs.stripe.com/billing/entitlements) to determine\nwhen you can grant or revoke product feature access to your customers.\nAlternatively, after a successful payment, you can safely provision the product\nfor the customer. This generally means:\n\n- Verifying the status of the subscription is `active`.\n- Granting the customer access to the products and features they subscribed to.\n\nLearn how to use [event\ndestinations](https://docs.stripe.com/event-destinations) to:\n\n- [Track active\nsubscriptions](https://docs.stripe.com/billing/subscriptions/webhooks#active-subscriptions)\n- [Handle payment\nfailures](https://docs.stripe.com/billing/subscriptions/webhooks#payment-failures)\n- [Check event\nobjects](https://docs.stripe.com/event-destinations#events-overview)\n\n## How payments work with subscriptions\n\nTo simplify the handling of failed payments and to create subscriptions before\nattempting payment:\n\n- Pass\n[payment_behavior=default_incomplete](https://docs.stripe.com/api/subscriptions/create#create_subscription-payment_behavior)\nwhen creating a subscription. If your subscription requires payment, it’s\ncreated with an `incomplete` status, otherwise your subscription immediately\nbecomes `active`.\n- Activate an incomplete subscription by paying the first invoice.\n- Pass the payment intent identifier from the invoice to your user interface to\ncollect payment information and confirm the payment intent. You can use\n[Elements](https://docs.stripe.com/js/elements_object), the [Android\nSDK](https://stripe.dev/stripe-android/), or the [iOS\nSDK](https://stripe.dev/stripe-ios/).\n\n### Payment status\n\nThe payment process differs across payment methods and geographical locations.\nPayments can also fail initially (for example, a customer might enter the wrong\ncard number or have insufficient funds), so various payment outcomes are\npossible.\n\nA [PaymentIntent](https://docs.stripe.com/payments/payment-intents) tracks the\nlifecycle of every payment. Whenever a payment is due for a subscription, Stripe\ngenerates an invoice and a PaymentIntent. The PaymentIntent ID attaches to the\ninvoice and you can access it from the Invoice and Subscription objects. The\nstate of the PaymentIntent affects the state of the invoice and the\nsubscription. Here’s how the different outcomes of a payment map to the\ndifferent statuses:\n\nPayment outcomePaymentIntent statusInvoice statusSubscription\nstatusSuccess`succeeded``paid``active`Fails because of a card\nerror`requires_payment_method``open``incomplete`Fails because of\nauthentication`requires_action``open``incomplete`\nThe following sections explain these statuses and the actions to take for each.\n\n### Payment succeeded\n\nWhen your payment succeeds, the status of the PaymentIntent is `succeeded`, and\nthe subscription becomes `active`. For [payment\nmethods](https://docs.stripe.com/payments/payment-methods/integration-options)\nwith longer processing periods, subscriptions are immediately activated. In\nthese cases, the status of the PaymentIntent may be `processing` for an `active`\nsubscription until the payment succeeds.\n\nWith your subscription now activated, provision access to your product. Read the\nguide to learn more about [the subscription\nlifecycle](https://docs.stripe.com/billing/subscriptions/overview#subscription-lifecycle)\nand best practices for provisioning.\n\nResponseSubscriptionPaymentIntent\n```\n{\n \"id\": \"sub_1ELI8bClCIKljWvsvK36TXlC\",\n \"object\": \"subscription\",\n \"status\": \"active\",\n ...\n \"latest_invoice\": {\n \"id\": \"in_EmGqfJMYy3Nt9M\",\n \"status\": \"paid\",\n ...\n \"payment_intent\": {\n \"status\": \"succeeded\",\n ...\n }\n }\n}\n```\n\nactivesucceeded\n\n![Subscription payment network\nflow.](https://b.stripecdn.com/docs-statics-srv/assets/payment-flow-succeeds.ac7343c9ec9a77e6efa1a84c02bb597d.svg)\n\n### Requires payment method\n\nIf payment fails because of a [card\nerror](https://docs.stripe.com/api/errors#errors-card_error), such as a\n[decline](https://docs.stripe.com/declines#issuer-declines), the status of the\nPaymentIntent is `requires_payment_method` and the subscription is `incomplete`.\n\nResponseSubscriptionPaymentIntent\n```\n{\n \"id\": \"sub_1ELI8bClCIKljWvsvK36TXlC\",\n \"object\": \"subscription\",\n \"status\": \"incomplete\",\n ...\n \"latest_invoice\": {\n \"id\": \"in_EmGqfJMYy3Nt9M\",\n \"status\": \"open\",\n ...\n \"payment_intent\": {\n \"status\": \"requires_payment_method\",\n ...\n }\n }\n}\n```\n\nincompleterequires_payment_method\nTo resolve these scenarios:\n\n- Notify the customer.\n- Collect new payment information and [confirm the payment\nintent](https://docs.stripe.com/api/payment_intents/confirm).\n- Update the [default payment\nmethod](https://docs.stripe.com/api/subscriptions/object#subscription_object-default_payment_method)\non the subscription.\n\nLearn how to [handle payment failures for\nsubscriptions](https://docs.stripe.com/billing/subscriptions/webhooks#payment-failures).\n\n![How to handle subscription payment\nfailures.](https://b.stripecdn.com/docs-statics-srv/assets/payment-flow-requires-payment-method.8305917aa91650ba7f7e9b6e5999ce32.svg)\n\n### Requires action\n\nSome payment methods require customer authentication with [3D\nSecure](https://docs.stripe.com/payments/3d-secure) (3DS) to complete the\npayment process. If you use the [Payment Intents\nAPI](https://docs.stripe.com/api/payment_intents), the value of\n`latest_invoice.payment_intent.status` is `requires_action` when a customer\nneeds to authenticate a payment. 3DS completes the authentication process.\nWhether a payment method requires authentication depends on your [Radar\nrules](https://docs.stripe.com/payments/3d-secure/authentication-flow#three-ds-radar)\nand the issuing bank for the card.\n\nRegulations in Europe often require 3D Secure. See [Strong Customer\nAuthentication](https://docs.stripe.com/strong-customer-authentication) to\ndetermine whether handling this status is important for your business. If you\nhave an existing billing integration and want to add support for this flow, also\nsee the [Billing SCA Migration\nguide](https://docs.stripe.com/billing/migration/strong-customer-authentication).\n\nResponseSubscriptionPaymentIntent\n```\n{\n \"id\": \"sub_1ELI8bClCIKljWvsvK36TXlC\",\n \"object\": \"subscription\",\n \"status\": \"incomplete\",\n ...\n \"latest_invoice\": {\n \"id\": \"in_EmGqfJMYy3Nt9M\",\n \"status\": \"open\",\n ...\n \"payment_intent\": {\n \"status\": \"requires_action\",\n \"client_secret\": \"pi_91_secret_W9\",\n \"next_action\": {\n \"type\": \"use_stripe_sdk\",\n ...\n },\n ...\n }\n }\n}\n```\n\nincompleterequires_action\nTo handle these scenarios:\n\n- Monitor for the `invoice.payment_action_required` event notification with\n[webhook endpoints](https://docs.stripe.com/billing/subscriptions/webhooks).\nThis indicates that authentication is required.\n- Notify your customer that they must authenticate.\n- Retrieve the client secret for the payment intent and pass it in a call to\n[stripe.ConfirmCardPayment](https://docs.stripe.com/js/payment_intents/confirm_card_payment).\nThis displays an authentication modal to your customers, attempts payment, then\ncloses the modal and returns context to your application.\n- Monitor the `invoice.paid` event on your event destination to verify that the\npayment succeeded. Users can leave your application before\n`confirmCardPayment()` finishes. Verifying whether the payment succeeded allows\nyou to correctly provision your product.\n\n![How to handle subscription payments that require additional action from the\ncustomer.](https://b.stripecdn.com/docs-statics-srv/assets/payment-flow-requires-action.ac57889e9bccdb6ec4f5ea47fba194ec.svg)\n\n### Recurring charges\n\nStripe handles recurring charges for you automatically. This includes:\n\n- [Automatically\ninvoicing](https://docs.stripe.com/billing/invoices/subscription#subscription-renewal)\ncustomers and attempting payments when new billing cycles start.\n- When payments fail, Stripe retries them using the [Smart\nRetries](https://docs.stripe.com/invoicing/automatic-collection#smart-retries)\nfeature or your custom retry schedule. This automatically re-attempts payment\naccording to your Dashboard settings when cards are declined. If a failure\nreturns a non-retryable [decline code](https://docs.stripe.com/declines/codes),\nthe scheduled retries continue but the payment executes only if you obtain a new\npayment method.\n\nYou can send a [dunning\nemail](https://docs.stripe.com/invoicing/integration/send-email) to customers\nfor overdue payments to increase recovery chances. For payments that require 3D\nSecure, you can [configure your billing\nsettings](https://dashboard.stripe.com/account/billing/automatic) to send a\n[hosted link](https://docs.stripe.com/invoicing/hosted-invoice-page) to\ncustomers so they can complete the flow.\n\n#### Handle recurring charge failures\n\nIf you don’t want to use Stripe’s tooling to manage failures, you can build your\nown. If a payment fails or if it requires customer authentication, the\nsubscription’s `status` is set to `past_due` and the PaymentIntent status is\neither `requires_payment_method` or `requires_action`.\n\n![Objects involved when handling failed or action required subscription\npayments.](https://b.stripecdn.com/docs-statics-srv/assets/recurring-charge-failure.0e0ffd1930f8e91c96f21707a49111b6.svg)\n\nTo manage these scenarios, set up a [webhook\nendpoint](https://docs.stripe.com/webhooks) and listen to the\n[customer.subscription.updated](https://docs.stripe.com/api/events/types#event_types-customer.subscription.updated)\nevent so you’re notified when subscriptions enter a `past_due` state:\n\n```\n{\n \"id\": \"sub_E8uXk63MAbZbto\",\n \"object\": \"subscription\",\n ...\n \"status\": \"past_due\",\n \"latest_invoice\": \"in_1EMLu1ClCIKljWvsfTjRFAxa\"\n}\n```\n\nFor these subscriptions, you need to get your customers back into your\napplication to collect a different payment method so they can complete the\npayment. You can use an email or a mobile push notification. Stripe provides\nbuilt-in reminder emails to handle this case, which you can configure in your\n[billing settings](https://dashboard.stripe.com/account/billing/automatic).\n\nWhen your customer is back in your application, reuse either your [payment\nfailure\nflow](https://docs.stripe.com/billing/subscriptions/overview#requires-payment-method)\nor [customer action\nflow](https://docs.stripe.com/billing/subscriptions/overview#requires-action)\ndepending on the status of the associated PaymentIntent. After the payment\nsucceeds, the status of the subscription is `active` and the invoice is `paid`.\n\n### Handle non-payment invoices\n\nSubscriptions that include [free\ntrials](https://docs.stripe.com/billing/subscriptions/trials), [usage-based\nbilling](https://docs.stripe.com/products-prices/pricing-models#usage-based-pricing),\ninvoices with coupons, or applied customer credit balances often result in\nnon-payment invoices. This means you don’t immediately charge your customer when\nyou create the subscription.\n\nEven though you don’t charge customers for the first invoice, authenticating and\nauthorizing their card is often beneficial as it can increase the chance that\nthe first non-zero payment completes successfully. Payments made this way are\nknown as off-session payments. To manage these scenarios, Stripe created\nSetupIntents.\n\n#### Use SetupIntents\n\nYou can use SetupIntents to:\n\n- Collect payment information.\n- Authenticate your customer’s card to claim\n[exemptions](https://stripe.com/guides/strong-customer-authentication#exemptions-to-strong-customer-authentication)\nlater.\n- Authorize your customer’s card without charging it.\n\nAuthenticating payments allows your customer to grant permissions to charge\ntheir card. [Strong Customer\nAuthentication](https://docs.stripe.com/strong-customer-authentication) requires\nthis, and [3DS](https://docs.stripe.com/payments/3d-secure) is a common way to\ncomplete it. Collecting payment method information and authorizing it ensures\nthat you can successfully charge the payment method.\n\nIn off-session scenarios, SetupIntents enable you to charge customers for their\nfirst non-zero payment without having to bring them back to your website or app\nfor authentication. This reduces the friction on your customers.\n\nThe `pending_setup_intent` field on a subscription doesn’t cancel automatically\nwhen the subscription ends. Listen for `customer.subscription.deleted` events\nand manually [cancel a subscription\nSetupIntent](https://docs.stripe.com/api/setup_intents/cancel) if needed.\n\nStripe automatically creates SetupIntents for subscriptions that don’t require\nan initial payment. The authentication and authorization process also completes\nat this point, if required. If both succeed or aren’t required, no action is\nnecessary, and the `subscription.pending_setup_intent` field is `null`. If\neither step fails, Stripe recommends using the SetupIntent on your frontend to\nresolve the issue while your customer is on-session. The next two sections\nexplain in detail how to manage scenarios where authentication or authorization\nfail.\n\n#### Manage authentication failures Client-side\n\nAuthentication failures occur when Stripe is unable to authenticate your\ncustomer with their card issuer. When this happens, the `status` of the\nSetupIntent is set to `requires_action`.\n\n![How to handle subscription payment authentication\nfailures.](https://b.stripecdn.com/docs-statics-srv/assets/authentication_failure.2eaec43cac8c688f0ff3438fbe3b50e4.svg)\n\nTo resolve these scenarios, call\n[confirmCardSetup](https://docs.stripe.com/js#stripe-confirm-card-setup) on your\nfrontend so that your customer can complete the authentication flow manually.\nThe code example below [expands](https://docs.stripe.com/api/expanding_objects)\nthe `pending_setup_intent` to complete the flow.\n\n```\nconst {pending_setup_intent} = subscription;\n\nif (pending_setup_intent) {\n const {client_secret, status} = subscription.pending_setup_intent;\n\n if (status === \"requires_action\") {\n const {setupIntent, error} = await stripe.confirmCardSetup(client_secret);\n\n if (error) {\n // Display error.message in your UI.\n } else {\n // The setup has succeeded. Display a success message.\n }\n }\n}\n```\n\nAfter completing this flow, authorization executes if it’s required. If\nauthorization succeeds, or if it’s not required, `pending_setup_intent` is\nupdated to `null` upon completion.\n\n#### Manage authorization failures Client-side\n\nPayment authorization failures occur when Stripe can’t verify that a card can be\ncharged. When this happens, the `status` of the SetupIntent is set to\n`requires_payment_method`. This generally means that subsequent charges with\nthat card fail.\n\n![How to handle subscription payment authorization\nfailures.](https://b.stripecdn.com/docs-statics-srv/assets/authorization_failure.0b6ca4a2e2bbeba11710bf22fb0a5d00.svg)\n\nTo resolve these scenarios, [collect a new payment\nmethod](https://docs.stripe.com/billing/subscriptions/overview#requires-payment-method),\nthen update the default payment method for your customer or the subscription.\nThe code example below [expands](https://docs.stripe.com/api/expanding_objects)\nthe `pending_setup_intent` to complete the flow.\n\n```\nconst {pending_setup_intent, latest_invoice} = subscription;\n\nif (pending_setup_intent) {\n const {client_secret, status} = subscription.pending_setup_intent;\n\n if (status === \"requires_action\") {\n const {setupIntent, error} = await stripe.confirmCardSetup(client_secret);\n\n if (error) {\n // Display error.message in your UI.\n } else {\n // The setup has succeeded. Display a success message.\n }\n } else if (status === \"requires_payment_method\") {\n // Collect new payment method\n }\n}\n```\n\n## The subscription lifecycle\n\nThis is what the recommended subscription flow looks like:\n\n- You create the subscription. The `status` of the subscription is `incomplete`\n(if you follow the recommended flow—if you create a subscription without\nspecifying the `payment_behavior`, the default `status` is `active`).\n- An invoice is created for the subscription. The `status` of the invoice is\n`open`.\n- The customer pays the first invoice.\n- When the payment succeeds:\n\n- The subscription `status` moves to `active`\n- The invoice `status` is set to `paid`\n- Stripe sends an `invoice.paid` event to your configured webhook endpoints.\n- You provision access to your product. You can confirm whether the invoice has\nbeen paid by:\n\n- Setting up a webhook endpoint or another type of event destination and\nlistening for the `invoice.paid` event.\n- Manually checking the subscription object and looking for\n`subscription.status=active`. The `status` becomes `active` when the invoice has\nbeen paid either through an automatic charge or having the customer pay\nmanually.\n\nThe `status` can also become `trialing` if you offer trials that don’t require\npayments. When the trial is over, the subscription moves to `active` and the\nsubscribed customer starts to be charged.\n\n![Subscription creation and expiration\nworkflow](https://b.stripecdn.com/docs-statics-srv/assets/lifecycle-default-incomplete.a6ba5c1779f0f9b8601166f41bbc6d88.svg)\n\n### Subscription payment behavior\n\nTo simplify handling failed payments, create subscriptions with\n`payment_behavior` set to\n[default_incomplete](https://docs.stripe.com/api/subscriptions/create#create_subscription-payment_behavior).\nThis creates subscriptions with status `incomplete`, which allows you to collect\nand confirm payment information in a single user interface. When using\n`allow_incomplete` or `error_if_incomplete`, Stripe immediately attempts to pay\nthe invoice. If the payment fails, the subscription’s status changes to\n`incomplete` or the creation fails.\n\n### Successful payments\n\nWhen your customer successfully pays the invoice, the subscription updates to\n`active` and the invoice to `paid`. At this point, you can provision access to\nyour product.\n\n#### Payment window\n\nCustomers have about 23 hours to make a successful payment. The subscription\nremains in status `incomplete` and the invoice is `open` during this time. If\nyour customer pays the invoice, the subscription updates to `active` and the\ninvoice to `paid`. If they don’t make a payment, the subscription updates to\n`incomplete_expired` and the invoice becomes `void`.\n\nThis window exists because your customer usually makes the first payment for a\nsubscription while on-session. If the customer returns to your application after\n23 hours, create a new subscription for them.\n\n### Failed payments\n\nThe subscription’s status remains `active` as long as automatic payments\nsucceed. If automatic payment fails, the subscription updates to `past_due` and\nStripe attempts to recover payment based on your [retry\nrules](https://dashboard.stripe.com/account/billing/automatic). If payment\nrecovery fails, you can set the subscription status to `canceled`, `unpaid`, or\nleave it `past_due`.\n\n### Unpaid subscriptions\n\nFor subscriptions with unpaid invoices, the unpaid invoices remain open but\nfurther payment attempts are paused. The subscription continues to generate\ninvoices each billing cycle, which remain in the `draft` state. To reactivate\nthe subscription:\n\n- Collect new payment information if necessary.\n- Enable automatic collection by setting [auto\nadvance](https://docs.stripe.com/api/invoices/update#update_invoice-auto_advance)\nto `true` on draft invoices.\n- [Finalize](https://docs.stripe.com/api/invoices/finalize) and pay the open\ninvoices. Paying the most recent non-voided invoice before its due date updates\nthe subscription status to `active`.\n\nInvoices marked as uncollectable are treated as `paid` when determining\nsubscription status, even though their\n[paid](https://docs.stripe.com/api/invoices/object#invoice_object-paid) property\nremains `false`. Stripe ignores voided invoices when determining subscription\nstatus; the most recent non-voided invoice is used instead.\n\nThe `status` of an unpaid subscription is based on your [failed payment\nsettings](https://dashboard.stripe.com/settings/billing/automatic) in the\nDashboard.\n\n### Cancel subscriptions\n\nIf you cancel a subscription, it disables creating new invoices and stops\nautomatic collection of all invoices from the subscription because it sets\n`auto_advance` to `false`. It also deletes the subscription and you can no\nlonger update the subscription or its\n[metadata](https://docs.stripe.com/metadata). If your customer wants to\nresubscribe, you need to collect new payment information from them and create a\nnew subscription.\n\n### Voiding an invoice generated by a subscription\n\nIf the subscription is `incomplete` and you void the first invoice that’s\ngenerated, the subscription updates to `incomplete_expired`. If you void the\nmost recent invoice for an active subscription and it’s not the first one, the\nfollowing logic is applied to each invoice (from most recent to oldest) until it\nmeets one of these conditions:\n\n- If the invoice is in a `paid` or `uncollectible` state, the subscription state\nis set to `active`.\n- If the\n[collection_method](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method)\nis set to `charge_automatically` on the invoice and Stripe stopped dunning on\nthe invoice because of retry limits, the subscription state is set to `canceled`\n, `unpaid`, or `past_due` based on your [automatic collection\nsettings](https://dashboard.stripe.com/settings/billing/automatic).\n- If the\n[collection_method](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method)\nis set to `send_invoice`, and the invoice is past its due date, the state of the\nsubscription is set to `past_due`.\n- If the invoice is in none of these states, the same steps execute on the next\nmost recent invoice.\n\nIf no invoices match any of the above criteria, the subscription state is set to\n`active`.\n\n### Checkout Sessions\n\nFor [Stripe Checkout](https://docs.stripe.com/payments/checkout) integrations,\nyou can’t update the subscription or its invoice if the session’s subscription\nis `incomplete`. You can listen to the\n[checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed)\nevent to make the update after the session has completed.\n\nYou can also [expire the\nsession](https://docs.stripe.com/api/checkout/sessions/expire) instead if you\nwant to cancel the session’s subscription, void the subscription invoice, or\nmark the invoice as uncollectible.\n\n### Get referral information\n\nYou can use [Affiliate and referral Stripe\nApps](https://marketplace.stripe.com/categories/affiliate_and_referrals) to set\nup and manage referral and affiliate programs with Stripe, get customer\ninformation, and automate commission adjustments from the Stripe Dashboard.\n\n### Subscription statuses\n\nStatusDescription`trialing`The subscription is currently in a trial period and\nyou can safely provision your product for your customer. The subscription\ntransitions automatically to `active` when a customer makes the first\npayment.`active`The subscription is in good standing. For `past_due`\nsubscriptions, paying the latest associated invoice or marking it uncollectible\ntransitions the subscription to `active`. Note that `active` doesn’t indicate\nthat all outstanding invoices associated with the subscription have been paid.\nYou can leave other outstanding invoices open for payment, mark them as\nuncollectible, or void them as you see fit.`incomplete`The customer must make a\nsuccessful payment within 23 hours to activate the subscription. Or the payment\n[requires\naction](https://docs.stripe.com/billing/subscriptions/overview#requires-action),\nsuch as customer authentication. Subscriptions can also be `incomplete` if\nthere’s a pending payment and the PaymentIntent status is\n`processing`.`incomplete_expired`The initial payment on the subscription failed\nand the customer didn’t make a successful payment within 23 hours of\nsubscription creation. These subscriptions don’t bill customers. This status\nexists so you can track customers that failed to activate their\nsubscriptions.`past_due`Payment on the latest finalized invoice either failed or\nwasn’t attempted. The subscription continues to create invoices. Your\n[subscription\nsettings](https://docs.stripe.com/billing/subscriptions/overview#settings)\ndetermine the subscription’s next state. If the invoice is still unpaid after\nall attempted [smart\nretries](https://docs.stripe.com/billing/revenue-recovery/smart-retries), you\ncan configure the subscription to move to `canceled`, `unpaid`, or leave it as\n`past_due`. To move the subscription to `active`, pay the most recent invoice\nbefore its due date.`canceled`The subscription was canceled. During\ncancellation, automatic collection for all unpaid invoices is disabled\n(`auto_advance=false`). This is a terminal state that can’t be\nupdated.`unpaid`The latest invoice hasn’t been paid but the subscription remains\nin place. The latest invoice remains open and invoices continue to generate, but\npayments aren’t attempted. Revoke access to your product when the subscription\nis `unpaid` because payments were already attempted and retried while\n`past_due`. To move the subscription to `active`, pay the most recent invoice\nbefore its due date.`paused`The subscription has ended its trial period without\na default payment method and the\n[trial_settings.end_behavior.missing_payment_method](https://docs.stripe.com/billing/subscriptions/trials#create-free-trials-without-payment)\nis set to `pause`. Invoices are no longer created for the subscription. After\nattaching a default payment method to the customer, you can [resume the\nsubscription](https://docs.stripe.com/billing/subscriptions/trials#resume-a-paused-subscription).\n## Subscription events\n\n[Events](https://docs.stripe.com/api#event_types) are triggered every time a\nsubscription is created or changed. We send some events immediately when a\nsubscription is created, while others recur on regular billing intervals. We\nrecommend listening for events with [webhook\nendpoints](https://docs.stripe.com/billing/subscriptions/webhooks).\n\nMake sure that your integration properly handles the events. For example, you\nmight want to email a customer if a payment fails or revoke a customer’s access\nwhen a subscription is canceled.\n\nThe following table describes the most common events related to subscriptions\nand, where applicable, suggests actions for handling the events.\n\nEventDescription`customer.created`Sent when a\n[Customer](https://docs.stripe.com/api/customers/object) is successfully\ncreated.`customer.subscription.created`Sent when the subscription is created.\nThe subscription `status` might be `incomplete` if customer authentication is\nrequired to complete the payment or if you set `payment_behavior` to\n`default_incomplete`. View [subscription payment\nbehavior](https://docs.stripe.com/billing/subscriptions/overview#subscription-payment-behavior)\nto learn more.`customer.subscription.deleted`Sent when a customer’s subscription\nends.`customer.subscription.paused`Sent when a subscription’s `status` changes\nto `paused`. For example, this is sent when a subscription is\n[configured](https://docs.stripe.com/api/subscriptions/create#create_subscription-trial_settings-end_behavior-missing_payment_method)\nto pause when a [free trial ends without a payment\nmethod](https://docs.stripe.com/billing/subscriptions/trials#create-free-trials-without-payment).\nInvoicing won’t occur until the subscription is\n[resumed](https://docs.stripe.com/api/subscriptions/resume). We don’t send this\nevent if [payment collection is\npaused](https://docs.stripe.com/billing/subscriptions/pause-payment) because\ninvoices continue to be created during that time\nperiod.`customer.subscription.resumed`Sent when a subscription previously in a\n`paused` status is resumed. This doesn’t apply when [payment collection is\nunpaused](https://docs.stripe.com/billing/subscriptions/pause-payment#unpausing).`customer.subscription.trial_will_end`Sent\nthree days before the [trial period\nends](https://docs.stripe.com/billing/subscriptions/trials). If the trial is\nless than three days, this event is\ntriggered.`customer.subscription.updated`Sent when a subscription starts or\n[changes](https://docs.stripe.com/billing/subscriptions/change). For example,\nrenewing a subscription, adding a coupon, applying a discount, adding an invoice\nitem, and changing plans all trigger this\nevent.`entitlements.active_entitlement_summary.updated`Sent when a customer’s\nactive entitlements are updated. When you receive this event, you can provision\nor de-provision access to your product’s features. Read more about [integrating\nwith\nentitlements](https://docs.stripe.com/billing/entitlements).`invoice.created`Sent\nwhen an invoice is created for a new or renewing subscription. If Stripe fails\nto receive a successful response to `invoice.created`, then finalizing all\ninvoices with [automatic\ncollection](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection)\nis delayed for up to 72 hours. Read more about [finalizing\ninvoices](https://docs.stripe.com/invoicing/integration/workflow-transitions#finalized).-\nRespond to the notification by sending a request to the [Finalize an\ninvoice](https://docs.stripe.com/api/invoices/finalize) API.\n`invoice.finalized`Sent when an invoice is successfully finalized and ready to\nbe paid.- You can send the invoice to the customer. View [invoice\nfinalization](https://docs.stripe.com/invoicing/integration/workflow-transitions#finalized)\nto learn more.\n- Depending on your settings, we automatically charge the default payment method\nor attempt collection. View [emails after\nfinalization](https://docs.stripe.com/invoicing/integration/workflow-transitions#emails)\nto learn more.\n`invoice.finalization_failed`The invoice couldn’t be finalized. Learn how to\n[handle invoice finalization\nfailures](https://docs.stripe.com/tax/customer-locations#finalizing-invoices-with-finalization-failures)\nby reading the guide. Learn more about [invoice\nfinalization](https://docs.stripe.com/invoicing/integration/workflow-transitions#finalized)\nin the invoices overview guide.- Inspect the Invoice’s\n[last_finalization_error](https://docs.stripe.com/api/invoices/object#invoice_object-last_finalization_error)\nto determine the cause of the error.\n- If you’re using Stripe Tax, check the Invoice object’s\n[automatic_tax](https://docs.stripe.com/api/invoices/object#invoice_object-last_finalization_error)\nfield.\n- If `automatic_tax[status]=requires_location_inputs`, the invoice can’t be\nfinalized and payments can’t be collected. Notify your customer and collect the\nrequired [customer location](https://docs.stripe.com/tax/customer-locations).\n- If `automatic_tax[status]=failed`, retry the request later.\n`invoice.paid`Sent when the invoice is successfully paid. You can provision\naccess to your product when you receive this event and the subscription `status`\nis `active`.`invoice.payment_action_required`Sent when the invoice requires\ncustomer authentication. Learn how to handle the subscription when the invoice\n[requires\naction](https://docs.stripe.com/billing/subscriptions/overview#requires-action).\n`invoice.payment_failed`\n\nA payment for an invoice failed. The PaymentIntent status changes to\n`requires_action`. The status of the subscription continues to be `incomplete`\n*only* for the subscription’s first invoice. If a payment fails, there are\nseveral possible actions to take:\n\n- Notify the customer. Read about how you can configure [subscription\nsettings](https://docs.stripe.com/billing/subscriptions/overview#settings) to\nenable [Smart\nRetries](https://docs.stripe.com/billing/revenue-recovery/smart-retries) and\nother revenue recovery features.\n- If you’re using PaymentIntents, collect new payment information and [confirm\nthe PaymentIntent](https://docs.stripe.com/api/payment_intents/confirm).\n- Update the [default payment\nmethod](https://docs.stripe.com/api/subscriptions/object#subscription_object-default_payment_method)\non the subscription.\n`invoice.upcoming`Sent a few days prior to the renewal of the subscription. The\nnumber of days is based on the number set for Upcoming renewal events in the\n[Dashboard](https://dashboard.stripe.com/settings/billing/automatic). For\nexisting subscriptions, changing the number of days takes effect on the next\nbilling period. You can still add [extra invoice\nitems](https://docs.stripe.com/billing/invoices/subscription#adding-upcoming-invoice-items),\nif needed.`invoice.updated`Sent when a payment succeeds or fails. If payment is\nsuccessful the `paid` attribute is set to `true` and the `status` is `paid`. If\npayment fails, `paid` is set to `false` and the `status` remains `open`. Payment\nfailures also trigger a `invoice.payment_failed`\nevent.`payment_intent.created`Sent when a\n[PaymentIntent](https://docs.stripe.com/api/payment_intents) is\ncreated.`payment_intent.succeeded`Sent when a PaymentIntent has successfully\ncompleted payment.`subscription_schedule.aborted`Sent when a subscription\nschedule is canceled because payment delinquency terminated the related\nsubscription.`subscription_schedule.canceled`Sent when a subscription schedule\nis canceled, which also cancels any active associated\nsubscription.`subscription_schedule.completed`Sent when all\n[phases](https://docs.stripe.com/billing/subscriptions/subscription-schedules#subscription-schedule-phases)\nof a subscription schedule complete.`subscription_schedule.created`Sent when a\nnew subscription schedule is created.`subscription_schedule.expiring`Sent 7 days\nbefore a subscription schedule is set to\nexpire.`subscription_schedule.released`Sent when a subscription schedule is\n[released](https://docs.stripe.com/api/subscription_schedules/release), or\nstopped and disassociated from the subscription, which\nremains.`subscription_schedule.updated`Sent when a subscription schedule is\nupdated.\n## Invoice lifecycle\n\nThe [invoices overview](https://docs.stripe.com/invoicing/overview) provides a\nmore detailed explanation of how invoices work, but for invoices generated by\nsubscriptions, the basic lifecycle looks like this:\n\n- The subscription generates a new invoice in `draft` state.\n- About [one\nhour](https://docs.stripe.com/billing/invoices/subscription#adding-draft-invoice-items)\nafter creation, the invoice finalizes. You can’t make changes after the invoice\nis finalized.\n- The status is set to `open` and Stripe automatically attempts to pay it using\nthe default payment method.\n- If payment succeeds, the status updates to `paid`.\n- If payment fails, the invoice remains `open` and the subscription becomes\n`past_due`.\n\nIn this flow, Stripe doesn’t notify your customer about the invoice. Payment is\nautomatically attempted on the invoice shortly after it’s generated. However, if\n[customer emails](https://dashboard.stripe.com/account/emails) are enabled, we\nsend an email receipt.\n\n## Subscription settings and recovery\n\nYour [subscription\nsettings](https://dashboard.stripe.com/settings/billing/automatic) determine how\nStripe responds when payments fail or when subscriptions become past due.\n\n### Smart Retries\n\nAfter creating a subscription, payment failure is the most important event that\ncan happen. Failures occur for many reasons:\n\n- Lack of a payment method on the customer.\n- The payment method is expired.\n- The payment is declined.\n\nYou can configure Stripe to retry failed payments. [Smart\nRetries](https://dashboard.stripe.com/settings/billing/automatic) use Stripe’s\nmachine learning to pick the optimal time to retry over a configurable time\nperiod up to 2 months after the initial payment fails.\n\nYou can also modify the retry schedule with custom rules. You can configure up\nto three retries, each with a specific number of days after the previous\nattempt.\n\nYou can use the\n[invoice.payment_failed](https://docs.stripe.com/billing/revenue-recovery/smart-retries#invoice-payment-failed-webhook)\nevent to monitor subscription payment failure events and retry attempt updates.\nAfter a payment attempt on an invoice, its\n[next_payment_attempt](https://docs.stripe.com/api#invoice_object-next_payment_attempt)\nvalue is set using the current subscription settings in your Dashboard.\n\nIf recovery fails, the subscription transitions according to your settings. The\noptions are:\n\nSettingDescriptionCancel the subscriptionThe subscription changes to a\n`canceled` state after the maximum number of days defined in the retry\nschedule.Mark the subscription as unpaidThe subscription changes to an `unpaid`\nstate after the maximum number of days defined in the retry schedule. Invoices\ncontinue to be generated and stay in a draft state.Leave the subscription\npast-dueThe subscription remains in a `past_due` state after the maximum number\nof days defined in the retry schedule. Invoices continue to be generated and\ncharge customer based on retry settings.\nAfter the final payment attempt, we make no further payment attempts. Changing\nyour subscription settings only affects future retries.\n\n#### Emails\n\nStripe can optionally send different emails to customers, using the email\naddresses associated with the [Customer](https://docs.stripe.com/api#customers)\nobject:\n\n- An upcoming renewal reminder at the same time that we send the\n`invoice.upcoming` event.\n- A failed payment notification prompting customers to update their payment\ninformation. Learn [how to turn on failed payment\nnotifications](https://docs.stripe.com/billing/revenue-recovery/customer-emails#failed-payment-notifications).\n- An expiring card notification when a customer’s `default_source` card is due\nto expire.\n\nYou can customize the logos and colors your customers see in emails, and our\nHosted Invoice Payment page by changing the [branding\nsettings](https://dashboard.stripe.com/account/branding) in the Dashboard.\n\n### Manual payment\n\nYou can configure the due date for invoices that use the `send_invoice`\n[collection\nmethod](https://docs.stripe.com/billing/collection-method#set-collection-method-invoice)\nto receive manual payments. You can also configure up to three reminders,\nstarting at 10 days before the due date and ending at 60 days after.\n\nYou can also take additional action on the subscription 30, 60, or 90 days after\nan invoice becomes past due. The options are:\n\nSettingDescriptionCancel the subscriptionThe subscription changes to a\n`canceled` state after the maximum number of days defined in the retry\nschedule.Mark the subscription as unpaidThe subscription changes to an `unpaid`\nstate after the maximum number of days defined in the retry schedule. Invoices\ncontinue to generate and either stay in a `draft` state or transition to a state\nspecified in your invoice settings.Leave the subscription past-dueThe\nsubscription remains in a `past_due` state after the maximum number of days\ndefined in the retry schedule. Invoices continue to be generated into an `open`\nstate.\nLearn more about [subscription\nstatuses](https://docs.stripe.com/billing/subscriptions/overview#subscription-statuses).\n\n### Payments requiring 3D Secure\n\nFor payments that require 3D Secure, Stripe can send a confirmation email to\nyour customer at the same time that we send the\n`invoice.payment_action_required`. You can also configure sending up to three\nreminders, from 1 to 7 days after the payment was initiated.\n\nIf a payment is still incomplete after the set number of days, you can choose\nto:\n\nSettingDescriptionCancel the subscriptionThe subscription changes to a\n`canceled` state after the maximum number of days defined in the retry\nschedule.Mark the subscription as unpaidThe subscription changes to an `unpaid`\nstate after the maximum number of days defined in the retry schedule. Invoices\ncontinue to be generated and stay in a draft state.Leave the subscription\npast-dueThe subscription remains in a `past_due` state after the maximum number\nof days defined in the retry schedule. Invoices continue to be generated and\ncharge customer based on retry settings.\n### Trials\n\nCard networks require you to inform your customers about their trials. Stripe\ncan manage this communication for you. In the [Stripe\nDashboard](https://dashboard.stripe.com/settings/billing/automatic), you can\nconfigure the cancellation URL that’s included on both the reminder emails and\non the receipt for the first invoice after a trial ends. You can also configure\nthe statement descriptor for the first charge after a trial. Learn more about\nthese requirements and settings on the\n[trials](https://docs.stripe.com/billing/subscriptions/trials#compliance) page.\n\n## Change subscriptions\n\nStripe supports [modifying existing\nsubscriptions](https://docs.stripe.com/billing/subscriptions/change) without\nhaving to cancel and recreate them. Some of the most significant changes you\nmight make are [upgrading or\ndowngrading](https://docs.stripe.com/billing/subscriptions/upgrade-downgrade)\nthe subscription price, or\n[canceling](https://docs.stripe.com/billing/subscriptions/cancel) or [pausing\npayment collection\nfor](https://docs.stripe.com/billing/subscriptions/pause-payment) an active\nsubscription. Learn more about how to [change existing\nsubscriptions](https://docs.stripe.com/billing/subscriptions/change).\n\n## Links\n\n- [Customer](https://docs.stripe.com/api/customers)\n- [Entitlement](https://docs.stripe.com/api/entitlements/active-entitlement)\n- [Feature](https://docs.stripe.com/api/entitlements/feature)\n- [Invoice](https://docs.stripe.com/api/invoices)\n- [PaymentIntent](https://docs.stripe.com/api/payment_intents)\n- [PaymentMethod](https://docs.stripe.com/api/payment_methods)\n- [Price](https://docs.stripe.com/api/prices)\n- [Product](https://docs.stripe.com/api/products)\n- [ProductFeature](https://docs.stripe.com/api/product-feature)\n- [Subscription](https://docs.stripe.com/api/subscriptions)\n- [retrieving their active entitlements or listening to the Active Entitlement\nSummary event](https://docs.stripe.com/billing/entitlements#entitlements)\n- [sample\nintegration](https://github.com/stripe-samples/subscription-use-cases/tree/master/fixed-price-subscriptions)\n- [Billing quickstart](https://docs.stripe.com/billing/quickstart)\n- [integration\nguide](https://docs.stripe.com/billing/subscriptions/build-subscriptions)\n- [products and\nprices](https://docs.stripe.com/products-prices/how-products-and-prices-work)\n- [confirm](https://docs.stripe.com/api/payment_intents/confirm)\n- [create a Payment\nLink](https://docs.stripe.com/payment-links/create?pricing-model=standard)\n- [Checkout Sessions API](https://docs.stripe.com/api/checkout/sessions)\n- [a hosted page](https://docs.stripe.com/checkout/quickstart)\n- [an embedded form on your\nsite](https://docs.stripe.com/checkout/embedded/quickstart)\n- [a customized checkout page built with embedded\ncomponents](https://docs.stripe.com/checkout/custom/quickstart)\n- [Stripe Elements](https://docs.stripe.com/payments/elements)\n- [collect payment details and activate the\nsubscription](https://docs.stripe.com/billing/subscriptions/build-subscriptions?ui=elements#collect-payment)\n- [Payment Element](https://docs.stripe.com/payments/payment-element)\n- [Entitlements](https://docs.stripe.com/billing/entitlements)\n- [event destinations](https://docs.stripe.com/event-destinations)\n- [Track active\nsubscriptions](https://docs.stripe.com/billing/subscriptions/webhooks#active-subscriptions)\n- [Handle payment\nfailures](https://docs.stripe.com/billing/subscriptions/webhooks#payment-failures)\n- [Check event\nobjects](https://docs.stripe.com/event-destinations#events-overview)\n-\n[payment_behavior=default_incomplete](https://docs.stripe.com/api/subscriptions/create#create_subscription-payment_behavior)\n- [Elements](https://docs.stripe.com/js/elements_object)\n- [Android SDK](https://stripe.dev/stripe-android/)\n- [iOS SDK](https://stripe.dev/stripe-ios/)\n- [PaymentIntent](https://docs.stripe.com/payments/payment-intents)\n- [payment\nmethods](https://docs.stripe.com/payments/payment-methods/integration-options)\n- [the subscription\nlifecycle](https://docs.stripe.com/billing/subscriptions/overview#subscription-lifecycle)\n- [card error](https://docs.stripe.com/api/errors#errors-card_error)\n- [decline](https://docs.stripe.com/declines#issuer-declines)\n- [default payment\nmethod](https://docs.stripe.com/api/subscriptions/object#subscription_object-default_payment_method)\n- [3D Secure](https://docs.stripe.com/payments/3d-secure)\n- [Radar\nrules](https://docs.stripe.com/payments/3d-secure/authentication-flow#three-ds-radar)\n- [Strong Customer\nAuthentication](https://docs.stripe.com/strong-customer-authentication)\n- [Billing SCA Migration\nguide](https://docs.stripe.com/billing/migration/strong-customer-authentication)\n- [webhook endpoints](https://docs.stripe.com/billing/subscriptions/webhooks)\n-\n[stripe.ConfirmCardPayment](https://docs.stripe.com/js/payment_intents/confirm_card_payment)\n- [Automatically\ninvoicing](https://docs.stripe.com/billing/invoices/subscription#subscription-renewal)\n- [Smart\nRetries](https://docs.stripe.com/invoicing/automatic-collection#smart-retries)\n- [decline code](https://docs.stripe.com/declines/codes)\n- [dunning email](https://docs.stripe.com/invoicing/integration/send-email)\n- [configure your billing\nsettings](https://dashboard.stripe.com/account/billing/automatic)\n- [hosted link](https://docs.stripe.com/invoicing/hosted-invoice-page)\n- [webhook endpoint](https://docs.stripe.com/webhooks)\n-\n[customer.subscription.updated](https://docs.stripe.com/api/events/types#event_types-customer.subscription.updated)\n- [payment failure\nflow](https://docs.stripe.com/billing/subscriptions/overview#requires-payment-method)\n- [customer action\nflow](https://docs.stripe.com/billing/subscriptions/overview#requires-action)\n- [free trials](https://docs.stripe.com/billing/subscriptions/trials)\n- [usage-based\nbilling](https://docs.stripe.com/products-prices/pricing-models#usage-based-pricing)\n-\n[exemptions](https://stripe.com/guides/strong-customer-authentication#exemptions-to-strong-customer-authentication)\n- [cancel a subscription\nSetupIntent](https://docs.stripe.com/api/setup_intents/cancel)\n- [confirmCardSetup](https://docs.stripe.com/js#stripe-confirm-card-setup)\n- [expands](https://docs.stripe.com/api/expanding_objects)\n- [auto\nadvance](https://docs.stripe.com/api/invoices/update#update_invoice-auto_advance)\n- [Finalize](https://docs.stripe.com/api/invoices/finalize)\n- [paid](https://docs.stripe.com/api/invoices/object#invoice_object-paid)\n- [failed payment\nsettings](https://dashboard.stripe.com/settings/billing/automatic)\n- [metadata](https://docs.stripe.com/metadata)\n-\n[collection_method](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method)\n- [Stripe Checkout](https://docs.stripe.com/payments/checkout)\n-\n[checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed)\n- [expire the session](https://docs.stripe.com/api/checkout/sessions/expire)\n- [Affiliate and referral Stripe\nApps](https://marketplace.stripe.com/categories/affiliate_and_referrals)\n- [subscription\nsettings](https://docs.stripe.com/billing/subscriptions/overview#settings)\n- [smart\nretries](https://docs.stripe.com/billing/revenue-recovery/smart-retries)\n-\n[trial_settings.end_behavior.missing_payment_method](https://docs.stripe.com/billing/subscriptions/trials#create-free-trials-without-payment)\n- [resume the\nsubscription](https://docs.stripe.com/billing/subscriptions/trials#resume-a-paused-subscription)\n- [Events](https://docs.stripe.com/api#event_types)\n- [Customer](https://docs.stripe.com/api/customers/object)\n- [subscription payment\nbehavior](https://docs.stripe.com/billing/subscriptions/overview#subscription-payment-behavior)\n-\n[configured](https://docs.stripe.com/api/subscriptions/create#create_subscription-trial_settings-end_behavior-missing_payment_method)\n- [resumed](https://docs.stripe.com/api/subscriptions/resume)\n- [payment collection is\npaused](https://docs.stripe.com/billing/subscriptions/pause-payment)\n- [payment collection is\nunpaused](https://docs.stripe.com/billing/subscriptions/pause-payment#unpausing)\n- [changes](https://docs.stripe.com/billing/subscriptions/change)\n- [automatic\ncollection](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection)\n- [finalizing\ninvoices](https://docs.stripe.com/invoicing/integration/workflow-transitions#finalized)\n- [emails after\nfinalization](https://docs.stripe.com/invoicing/integration/workflow-transitions#emails)\n- [handle invoice finalization\nfailures](https://docs.stripe.com/tax/customer-locations#finalizing-invoices-with-finalization-failures)\n-\n[last_finalization_error](https://docs.stripe.com/api/invoices/object#invoice_object-last_finalization_error)\n- [customer location](https://docs.stripe.com/tax/customer-locations)\n- [extra invoice\nitems](https://docs.stripe.com/billing/invoices/subscription#adding-upcoming-invoice-items)\n-\n[phases](https://docs.stripe.com/billing/subscriptions/subscription-schedules#subscription-schedule-phases)\n- [released](https://docs.stripe.com/api/subscription_schedules/release)\n- [invoices overview](https://docs.stripe.com/invoicing/overview)\n- [one\nhour](https://docs.stripe.com/billing/invoices/subscription#adding-draft-invoice-items)\n- [customer emails](https://dashboard.stripe.com/account/emails)\n-\n[invoice.payment_failed](https://docs.stripe.com/billing/revenue-recovery/smart-retries#invoice-payment-failed-webhook)\n-\n[next_payment_attempt](https://docs.stripe.com/api#invoice_object-next_payment_attempt)\n- [Customer](https://docs.stripe.com/api#customers)\n- [how to turn on failed payment\nnotifications](https://docs.stripe.com/billing/revenue-recovery/customer-emails#failed-payment-notifications)\n- [branding settings](https://dashboard.stripe.com/account/branding)\n- [collection\nmethod](https://docs.stripe.com/billing/collection-method#set-collection-method-invoice)\n- [trials](https://docs.stripe.com/billing/subscriptions/trials#compliance)\n- [upgrading or\ndowngrading](https://docs.stripe.com/billing/subscriptions/upgrade-downgrade)\n- [canceling](https://docs.stripe.com/billing/subscriptions/cancel)",
  "metadata": {
    "title": "How subscriptions work | Stripe Documentation",
    "description": "Manage recurring payments and subscription lifecycles.",
    "sourceURL": "https://docs.stripe.com/billing/subscriptions/overview"
  }
}