{
  "content": "# How UI extensions work\n\n## Learn about the UI extensions system, and how you can extend the Stripe Dashboard.\n\nStripe Apps UI extensions let you render your own UI into Stripe’s products\nusing [TypeScript](https://www.typescriptlang.org/) and\n[React](https://reactjs.org/). These tools should be familiar if you’ve\ndeveloped in React. But because they run within a [secure sandboxed\niframe](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#sandbox)\nembedded on another web page, they differ from standard browser-based React\napplications in several ways.\n\n## Overview\n\nUI extensions are written in TypeScript and use React to create UI using\n[Stripe’s UI toolkit](https://docs.stripe.com/stripe-apps/components). Unlike\nother React environments, UI extensions don’t support arbitrary HTML. Instead,\nthey exclusively use UI components provided by Stripe. The structure of a UI\nextension involves some key directories and files:\n\n- `stripe-app.json`: The [app\nmanifest](https://docs.stripe.com/stripe-apps/reference/app-manifest). It\ndescribes how apps interact with Stripe, including what permissions they need,\nwhether they have a UI extension, and—if so—where that extension appears in\nStripe’s UI.\n- `package.json`: NPM package metadata. The UI extensions are regular [NPM\npackages](https://docs.npmjs.com/about-packages-and-modules). You can manage\ndependencies using [npm](https://docs.npmjs.com/cli) or\n[yarn](https://yarnpkg.com/).\n- `src`: The actual TypeScript source code for the UI extension. By default, the\nCLI places a generic view in `src/views` with a corresponding entry in\n`stripe-app.json`.\n\nDeveloping a UI extension relies on the Stripe CLI app plugin. The CLI takes\ncare of initializing apps with the correct structure, configuring the app\nmanifest, running a development server, and bundling the app appropriately for\nsubmission to Stripe.\n\n### Developing a UI extension\n\n- As the app developer, you write views, which are React components registered\nto appear whenever a specific\n[viewport](https://docs.stripe.com/stripe-apps/reference/viewports) appears on\nthe screen. For example, to make a view appear whenever a user is viewing an\ninvoice details page, register it to the viewport\n`stripe.dashboard.invoice.detail`.\n- When you’re ready to upload your app, CLI commands help you bundle up your\ncode, upload it to Stripe, and host your app on Stripe’s CDN.\n- When your app’s UI extension gets initialized, Stripe downloads the app’s code\ninto a sandboxed iframe.\n- When a user goes to a page that has a particular viewport (for example,\n`/invoices/inv_1283`):- Stripe defines the UI extension’s view inside the iframe\nwith the context provided by the viewport.\n- Stripe passes the view to the Dashboard to be displayed to users.\n- When users interact with the UI extension (for example, by clicking a button),\nevent handlers in the UI extension iframe receive the event and can update the\nview.\n\n![System diagram of Stripe App UI\nextension](https://b.stripecdn.com/docs-statics-srv/assets/extensions-structure.d6d4d0512ef2194eda5c7ffd214e894e.jpg)\n\n## Views and viewports\n\nTo display UI to users of an app, create a React view and register it with a\nviewport.\n\nViews are React components that the app exports. Viewports are identifiers that\nindicate where the view displays. When you upload an app, all views exported by\nthe app register with the associated viewport.\n\nViews automatically register with viewports when you run `stripe apps add view`.\nBehind the scenes, this adds an entry to the [app\nmanifest](https://docs.stripe.com/stripe-apps/reference/app-manifest).\n\n```\n{\n //... other manifest properties\n \"ui_extension\": {\n \"views\": [\n {\n\"viewport\": \"stripe.dashboard.invoice.detail\", // See all valid values at\nstripe.com/docs/stripe-apps/reference/viewports\n \"component\": \"NameOfComponent\" // This is provided by you\n }\n // ... additional views\n ]\n }\n}\n```\n\n## Lifecycle of a UI extension\n\nUI extensions run in an invisible, sandboxed iframe that asynchronously sends UI\nupdates to the Stripe Dashboard. A single sandboxed iframe can accommodate\nmultiple views at the same time.\n\nThe lifecycle of the sandboxed iframe and the views it powers works like this:\n\n- The Dashboard loads the UI extension iframe, which happens between when the\nDashboard loads and when the user opens the app.\n- When a view needs to be displayed, the Dashboard waits for the sandboxed\niframe to initialize, and then directs it to mount the correct view and passes\nin the [appropriate\ncontext](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#props).\n- When the user dismisses the view (for example, when they close the app\ndrawer), the view unmounts. Unmounting the view removes it from the DOM and from\nthe sandboxed React tree.\n- The sandboxed iframe might stay running or shut down depending on resource\nusage. The only guarantee is that the Dashboard makes a best-effort attempt to\nallow [useEffect](https://reactjs.org/docs/hooks-effect.html) and other cleanup\nhandlers to run before terminating the iframe.\n\n![Lifecyle of a Stripe Apps UI\nextension](https://b.stripecdn.com/docs-statics-srv/assets/extensions-lifecycle.0fef55cf88daa063de38151596ad17e5.jpg)\n\nLifecyle of a Stripe Apps UI extension\n\n## Sandboxed iframe limitations\n\nBecause of the unique sandbox environment where UI extension code runs, a Stripe\nApps UI extension can’t do everything that a regular React app running in a full\nbrowser context can do.\n\n### Main differences between Stripe Apps and regular React apps\n\n- Stripe Apps don’t have direct access to the DOM. They run in an iframe with a\nseparate DOM that’s invisible from the Dashboard.\n- The Dashboard proxies and serializes all data to the app. UI toolkit\ncomponents only accept serializable data.\n- The Dashboard also proxies and serializes all *props* to the app, so functions\npassed to or triggered by UI toolkit components are asynchronous.\n\n### React and JavaScript limitations\n\nThe restrictions below affect what you can do with React and JavaScript when\ndeveloping your app. The React tree doesn’t render to the DOM until the Stripe\nDashboard host environment deserializes and evaluates it. The DOM for the app\nupdates, and the instance of React in the Dashboard manages data input.\n\n#### Global document and window objects are limited\n\nThe DOM environment that the UI extension code is running in is locked down by\nthe [sandboxed\niframe](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#sandbox).\nThis means that top-level APIs like\n[localStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage),\n[indexedDB](https://developer.mozilla.org/en-US/docs/web/api/indexeddb), and\n[BroadcastChannel](https://developer.mozilla.org/en-US/docs/web/api/broadcastchannel)\nare unavailable. Any DOM API that relies on the [same-origin\npolicy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy)\ndoesn’t work as expected because sandboxed iframes have a `null` origin.\n\n#### React ref props are unsupported\n\nUI components don’t support React `ref` props because the React tree is\nserialized and passed to the Stripe Dashboard to be rendered. The DOM that the\ncomponents are eventually rendered into is inaccessible from the App code\nrunning in the sandboxed iframe.\n\n#### Apps can’t control the React version\n\nThe default `package.json` file generated with each Stripe app doesn’t have a\n`dependency` entry for `react`. Adding a specific version of React in the\n`package.json` file of the Stripe app doesn’t control which React version\nrenders your app; it only performs type checking and unit testing. The Stripe\nDashboard uses its version of React (currently version 17.0.2) to render all\napps. To ensure compatibility, only change it if Stripe instructs you to.\n\n#### Use uncontrolled components for interactions\n\nThe Dashboard serializes and proxies all data input to the app, which results in\ninput lag while using React [controlled\ncomponents](https://reactjs.org/docs/forms.html#controlled-components). This lag\nis perceptible by the user and can potentially overwrite characters that they\ntyped in the meantime. It also results in the cursor skipping to the end of a\ntext input if they try to edit text at the beginning.\n\nTo reduce lag in your app, use user inputs in an uncontrolled manner:\n\n```\nimport {useState} from 'react';\nimport {TextArea} from '@stripe/ui-extension-sdk/ui';\n\nconst App = () => {\n const defaultValue = 'Initial TextArea value';\n const [text, setText] = useState(defaultValue);\n return (\n <>\n <TextArea\n label=\"Message\"\n // This doesn't work ❌\n // Attempting to edit text at the beginning skips the cursor to the end\n value={text}\n onChange={e => setText(e.target.value)}\n />\n <TextArea\n label=\"Message\"\n // This will work ✅\n defaultValue={defaultValue}\n onChange={e => setText(e.target.value)}\n />\n </>\n );\n};\n```\n\n### UI component restrictions\n\nThe restrictions below apply to [UI\ncomponents](https://docs.stripe.com/stripe-apps/components). While your\nextension runs in an isolated environment, UI components render directly in the\nDashboard. The SDK informs the Dashboard to render UI toolkit components, which\nresults in the following limitations.\n\n#### Components can’t stop event propagation\n\nBecause event handlers are called asynchronously, the event has already\npropagated by the time the app’s event handler is called. As a result, the app\ncan’t stop event propagation or bubbling.\n\n#### Components only accept serializable data types as props\n\nUI components only accept serializable data types. Passing unserializable data\ntypes like `Map` or `Set` as a prop to a UI Toolkit component throws an error.\n\nUse only simple types, functions, or React events as props. Supported types are:\n\n- Strings, numbers, `true`, `false`, `null`, and `undefined`\n- Objects whose keys and values are all simple types\n- Arrays whose values are all simple types\n- Functions, but they become asynchronous when proxied. Any functions passed as\narguments or returned are also subject to the type limitations\n- React events\n\n#### Components don’t support render functions\n\nReact renders synchronously, but functions passed to UI components become\nasynchronous after the Dashboard proxies them to the app. Functions that\ngenerate markup passed to a UI component don’t finish rendering in time for\nReact to use their results. As a result, no UI components accept render\nfunctions.\n\nThis means that the following patterns don’t work:\n\n```\n// This doesn't work ❌\n<ItemProvider>\n {(data) => (\n <Item data={data} />\n )}\n</ItemProvider>\n```\n\n```\n// This doesn't work ❌\n<Item renderFooter={() => <div>footer</div>} />\n```\n\n#### JSX can only be passed to non-children props as a single node\n\nUI components support props that take a single React element:\n\n```\n// This will work ✅\n<Item footer={<div>footer</div>} />\n```\n\nMore complex JSX data structures are unsupported, however:\n\n```\n// This doesn't work ❌\n<Item footer={[<div>one</div>, <div>two</div>]} />\n```\n\n```\n// This doesn't work ❌\n<Item footer={{\n one: <div>one</div>,\n two: <div>two</div>\n}} />\n```\n\nIf you need to pass multiple React elements to a UI component, wrap them in a\nfragment:\n\n```\n// This works ✅\n<Item footer={\n <>\n <div>one</div>\n <div>two</div>\n </>\n}/>\n```\n\nA similar constraint applies to `children`. Arrays and objects containing JSX\nare unsupported, but multiple React elements are allowed:\n\n```\n// This works ✅\n<Item>\n <div>one</div>\n <div>two</div>\n</Item>\n```\n\n## Installing NPM Packages\n\nThere aren’t any restrictions on adding third-party NPM packages to Stripe Apps;\nfeel free to install packages as you see fit. However, not all packages work as\nexpected given the [sandboxed iframe\nlimitations](https://docs.stripe.com/stripe-apps/how-ui-extensions-work#sandboxed-iframe-limitations)\nof UI extensions.\n\nUsing a utility library like `lodash` is fine, because `lodash` doesn’t require\nDOM access:\n\n```\nimport { Box, Button } from \"@stripe/ui-extension-sdk/ui\";\nimport { useState } from \"react\";\nimport kebabCase from \"lodash/kebabCase\";\n\nconst text = \"A note to the user\";\n\nconst App = () => {\n const [isKebabCase, setIsKebabCase] = useState(false);\n return (\n <>\n {/* This will work ✅ */}\n <Box>{isKebabCase ? kebabCase(text) : text}</Box>\n <Button\n onPress={() => {\n setIsKebabCase(!isKebabCase);\n }}\n >\n Toggle kebab-case\n </Button>\n </>\n );\n};\n```\n\nUsing a form library like `react-hook-form` won’t work because `react-hook-form`\nuses Refs to manage form state:\n\n```\nimport { TextField } from \"@stripe/ui-extension-sdk/ui\";\nimport { useForm } from \"react-hook-form\";\n\nconst App = () => {\n const { register } = useForm();\n const { onChange, name, ref } = register(\"firstName\");\n return (\n <TextField\n label=\"First name\"\n placeholder=\"Enter your name\"\n name={name}\n onChange={onChange}\n // This doesn't work ❌\n ref={ref}\n />\n );\n};\n```\n\n## See also\n\n- [Build and test views](https://docs.stripe.com/stripe-apps/build-ui)\n- [Design your app](https://docs.stripe.com/stripe-apps/design)\n- [Style your app](https://docs.stripe.com/stripe-apps/style)\n- [Distribution\noptions](https://docs.stripe.com/stripe-apps/distribution-options)\n\n## Links\n\n- [TypeScript](https://www.typescriptlang.org/)\n- [React](https://reactjs.org/)\n- [secure sandboxed\niframe](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#sandbox)\n- [​​Intro to React](https://reactjs.org/tutorial/tutorial.html)\n- [​​Get started with TypeScript](https://www.typescriptlang.org/docs/)\n- [​​Stripe’s UI components](https://docs.stripe.com/stripe-apps/components)\n- [app manifest](https://docs.stripe.com/stripe-apps/reference/app-manifest)\n- [NPM packages](https://docs.npmjs.com/about-packages-and-modules)\n- [npm](https://docs.npmjs.com/cli)\n- [yarn](https://yarnpkg.com/)\n- [viewport](https://docs.stripe.com/stripe-apps/reference/viewports)\n- [appropriate\ncontext](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#props)\n- [useEffect](https://reactjs.org/docs/hooks-effect.html)\n-\n[localStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage)\n- [indexedDB](https://developer.mozilla.org/en-US/docs/web/api/indexeddb)\n-\n[BroadcastChannel](https://developer.mozilla.org/en-US/docs/web/api/broadcastchannel)\n- [same-origin\npolicy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy)\n- [controlled\ncomponents](https://reactjs.org/docs/forms.html#controlled-components)\n- [Build and test views](https://docs.stripe.com/stripe-apps/build-ui)\n- [Design your app](https://docs.stripe.com/stripe-apps/design)\n- [Style your app](https://docs.stripe.com/stripe-apps/style)\n- [Distribution\noptions](https://docs.stripe.com/stripe-apps/distribution-options)",
  "metadata": {
    "title": "How UI extensions work | Stripe Documentation",
    "description": "Learn about the UI extensions system, and how you can extend the Stripe Dashboard.",
    "sourceURL": "https://docs.stripe.com/stripe-apps/how-ui-extensions-work"
  }
}