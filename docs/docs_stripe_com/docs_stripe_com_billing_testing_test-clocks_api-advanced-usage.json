{
  "content": "# API and advanced usage\n\n## Learn advanced strategies for using test clocks in the Dashboard and API.\n\nYou can create a test clock separately from a subscription for running advanced\nsimulations. In this scenario you create the test clock first and then add\ndifferent test cases to it.\n\nNot ready for a full integration? See [our\nguide](https://docs.stripe.com/billing/testing/test-clocks/simulate-subscriptions)\nfor running simulations on subscriptions.\n\n![How to set a test clock to simulate subscription time\nelpasing.](https://b.stripecdn.com/docs-statics-srv/assets/test-clock-lifecycle.b711b9cf4feb52351e27958b8b924cb3.png)\n\nTest clock lifecycle\n\nFollow these steps to start using test clocks:\n\n- [Create a test\nclock](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#create-clock)\n- [Set up your testing\nsimulation](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#setup-simulation)\n- [Advance the clock’s\ntime](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#advance-clock)\n- [Monitor and handle the\nchanges](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#monitor-changes)\n- [Update the\nsimulation](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#update-simulation)\n- [Delete the\nclock](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#delete-clock)\n\nYou can advance the clock’s time, monitor changes, and update the simulation as\noften as you need to test different cases.\n\n[Create a clock and set its\ntime](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#create-clock)\nTo start a simulation, create a clock and set its frozen time. The temporal\nstarting point for all\n[subscriptions](https://docs.stripe.com/billing/subscriptions/creating)\nassociated with this clock. You can set this to a time in the future or in the\npast to test different simulations, but you can only move it forward in time\nafter you set it.\n\nDashboardAPI\nTo create a test clock in the Dashboard, follow the steps below. Set the\nDashboard to **Test mode** to use test clocks.\n\n- Go to the **Subscriptions**\n[section](https://dashboard.stripe.com/test/subscriptions) under the **Billing**\ntab.\n- Click the [test clocks](https://dashboard.stripe.com/test/test-clocks) link in\nthe banner.\n- Click **New simulation**.\n- In the **Create new simulation** modal, enter a name for the simulation. You\ncan use this to describe the simulation you’re testing, like `Annual renewal` or\n`Free trial`.\n- Set the frozen time of the clock. This is the starting point for your\nsimulation. You can set this to a time in the future or in the past, but you can\nonly move it forward in time after you set it.\n[Set up your\nsimulation](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#setup-simulation)\nNext, set up the test case for your simulation. You need to create a customer\nfirst, then a subscription for them.\n\nDashboardAPI\nTo create a customer for your simulation through the Dashboard:\n\n- Go to the [test clocks](https://dashboard.stripe.com/test/test-clocks) page\nand find your test clock.\n- Click **Add** > **Add customer**.\n\nYou can’t choose existing customers during test clock simulations. You can add\nup to three new customers to each simulation.\n\nYou can optionally enter other [available\nproperties](https://docs.stripe.com/billing/customer#properties-uses) for the\ncustomer, like their name, email, and billing information, but none are\nrequired. For some simulations, like testing free trials, you might not want to\ncollect any billing information up front.\n\nNext, you can create up to three subscriptions or subscription schedules for\nyour customer. To create a subscription for the customer through the Dashboard:\n\n- Go to the [test clocks](https://dashboard.stripe.com/test/test-clocks) page\nand find your test clock.\n- Click **Add** > **Add subscription**. Select or search for your customer from\nthe drop-down menu. You can also add the customer to a subscription through the\ncustomer page, by clicking **Actions** > **Create subscription**.\n- Select a recurring product and price in the **Pricing** section.\n- For the **Subscription schedule**, define the start and end date for the\nsubscription and when to start the billing cycle.\n- Choose a payment collection method:\n\n- Select **Automatically charge a payment method on file** if you want to charge\nyour customer when the billing cycle starts.\n- Select **Email invoice to the customer to pay manually** if you want to\ninvoice your customer in arrears.\n- Click **Start test subscription** to start the subscription and billing cycle.\n\nBoth the customer and subscription objects are associated with the clock object\nyou created in the [first\nstep](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#create-clock).\nIn the Dashboard, the icon indicates that an object is associated with a clock.\n\n[Advance the simulated\ntime](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#advance-clock)\nAfter you’ve created the test clock and set up your test case, advance the\nsimulated time of the clock. The first time you do this, you’ll advance the time\nfrom the initial frozen time you set at the [creation of the\nclock](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#create-clock).\nAs you advance time, you can see how your integration works when subscriptions\nend, renew, or undergo other changes (like upgrading from a free trial to a paid\nsubscription).\n\nYou can advance test clocks by any increment, but you can only advance them two\nintervals at a time from their initial frozen time. The length of the interval\nis based on the shortest subscription interval associated with the test clock,\nwhich is determined by the recurring price. For example, if you have a monthly\nsubscription, you can only advance the clock up to two months at a time. If the\ntest clock has no subscriptions or subscription schedules, you can advance it up\nto two years from the initial frozen time.\n\nDashboardAPI\nTo advance time through the Dashboard:\n\n- Go to the [test clocks](https://dashboard.stripe.com/test/test-clocks) page\nand find your test clock.\n- Click **Advance time**.\n- Use the calendar modal to select the date you want to advance the clock to.\n- Click **Advance**.\n\nWhen the clock is done advancing, the banner updates and displays the clock’s\ncurrent time.\n\n[Monitor and handle\nchanges](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#monitor-changes)\nAfter a successful API request or Dashboard operation, the clock takes a few\nseconds to advance to the specified time. To know when the clock has changed\nstate, you can use webhooks to listen for event notifications or you can poll\nthe clock. The Dashboard also reflects the changes. For example, you can go to\nthe [invoices page](https://dashboard.stripe.com/test/invoices) to check whether\nan invoice was created or paid for your subscription.\n\nIf you use [webhooks](https://docs.stripe.com/webhooks), listen to the following\nevent notifications. Before production, make sure your integration correctly\nhandles the other [billing-specific event\nnotifications](https://docs.stripe.com/billing/subscriptions/webhooks) in\naddition to the ones listed below.\n\nEventDescription`test_helpers.test_clock.advancing`The clock has started to\nadvance but hasn’t reached the specified time.`test_helpers.test_clock.ready`The\nclock has completed advancing to the specified time.\nTo poll the state of the clock,\n[retrieve](https://docs.stripe.com/api/test_clocks/retrieve) it by ID to examine\nits `status`.\n\n```\ncurl https://api.stripe.com/v1/test_helpers/test_clocks/{{CLOCK_ID}} \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\"\n```\n\n[Update the\nsimulation](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#update-simulation)\nYou can continue to make changes to your simulation and [advance the\nclock](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#advance-clock)\nfor simulations like:\n\n- Adding a [customer balance](https://docs.stripe.com/billing/customer/balance).\n- Making a mid-cycle upgrade.\n- [Adding one-off invoice\nitems](https://docs.stripe.com/billing/invoices/subscription#adding-upcoming-invoice-items).\n\nAfter each update, [monitor the\nchanges](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#monitor-changes)\nagain. Repeat as many times as you need to satisfy your test case.\n\n[Delete the\nclock](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#delete-clock)\nTest clocks are automatically deleted 30 days after you create them, but you can\ndelete them when you’re done testing to ensure a clean test environment.\n\nDashboardAPI\nTo delete the clock and all of its associated test objects through the\nDashboard:\n\n- Go to the [test clocks](https://dashboard.stripe.com/test/test-clocks) page\nand find your test clock.\n- Click **Finish simulation**.\n- In the confirmation modal, click **Finish**.\n\nDeleting the clock also deletes the test customers associated with the clock and\ncancels their subscriptions. Test clocks are only available in test mode, so you\ncan’t delete any production objects when you delete a clock.\n\n## Use cases\n\n### Test subscription renewals\n\nFirst, follow these steps to start using test clocks:\n\n- [Create a test\nclock](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#create-clock)\n- [Set up your testing\nsimulation](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#setup-simulation)\n- [Advance the clock’s\ntime](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#advance-clock)\n- [Monitor and handle the\nchanges](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#monitor-changes)\n- [Update the\nsimulation](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#update-simulation)\n\nNext, you can test certain subscription renewals using test clocks. Let’s say\nthat you’d like to test that a 50 USD/month subscription renews correctly. To\nsimulate this situation using test clocks:\n\n- Create a new test clock and set its `frozen_time` to January 1.\n- Add a customer and add a payment method for the customer:\nDashboardAPI\nTo add a payment method for a customer in the Dashboard:\n\n- From the customer account page, click **Add > Add card** from the **Payment\nmethods** section.\n- Enter payment information. In this case, use the 4242424242424242 [test\ncard](https://docs.stripe.com/testing#cards).\n- Click **Add card** in the modal.\n- After adding a payment method for the customer, create a subscription for the\nnew customer set at 50 USD/month. In doing so, the invoice of 50 USD is paid\nautomatically and the subscription is `active`.\n- Advance the date to February 1 to see that an invoice of 50 USD is created. By\ndefault, the invoice appears in a `draft` state for [one\nhour](https://docs.stripe.com/billing/invoices/subscription#adding-draft-invoice-items).\n- Advance the time by one hour to see that the invoice is finalized and paid\nautomatically.\n\n### Test mid-cycle upgrades with prorations\n\nFirst, follow these steps to start using test clocks:\n\n- [Create a test\nclock](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#create-clock)\n- [Set up your testing\nsimulation](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#setup-simulation)\n- [Advance the clock’s\ntime](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#advance-clock)\n- [Monitor and handle the\nchanges](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#monitor-changes)\n- [Update the\nsimulation](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#update-simulation)\n\nNext, you can test prorations for customers who upgrade their plans in the\nmiddle of a billing cycle. Let’s say that you have two products. One product is\n50 USD/month (‘basic plan’) and the other is 100 USD/month (‘premium plan’). In\nthis case, you may want to test prorations for a customer who upgrades their\n‘basic plan’ to the ‘premium plan’ in the middle of a billing cycle. To simulate\nthis situation using test clocks:\n\n- Create a new test clock and set its `frozen_time` to January 1.\n- Create a customer and add their payment method. In this case, use the\n4242424242424242 [test card](https://docs.stripe.com/testing#cards).\n- Create a subscription for the ‘basic plan’ at 50 USD/month. After this is\ndone, you’ll see that the 50 USD/month invoice is created, finalized, and\nautomatically paid.\n- Advance the date by two weeks. In this case, we’ll set the date to January 16.\n- Upgrade the subscription to a ‘premium plan’ at 100 USD/month:\nDashboardAPI\nTo upgrade a subscription using the Dashboard:\n\n- From the customer account page or the subscription details page, click the\noverflow menu () associated with a subscription, then select **Update\nsubscription**.\n- Make your desired modifications.\n- Click **Update subscription** in the top right corner to apply the changes.\n- After upgrading the subscription, the\n[customer.subscription.updated](https://docs.stripe.com/api/events/types#event_types-customer.subscription.updated)\nwebhook event is created.\n- Pending invoice items are also created for the prorations. You’ll see a\nnegative proration of -25 USD for the unused time with the ‘basic plan’ and a\npositive proration of 50 USD for using the ‘premium plan’ for half of the\nremaining month. At this point, no invoice has been generated.\n- Advance the date by two weeks. In this case, we’ll set the date to February 1.\nYou’ll see that the subscription has cycled. An invoice has been generated in a\n`draft` state and has incorporated the pending invoice items, including a\nnegative proration, a positive proration, and the total payment for the month of\nFebruary, resulting in 125 USD. By default, the invoice appears in a `draft`\nstate for around [one\nhour](https://docs.stripe.com/billing/invoices/subscription#adding-draft-invoice-items).\n- To finalize the invoice, advance the time by one hour.\n\n### Test trials\n\nFirst, follow these steps to start using test clocks:\n\n- [Create a test\nclock](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#create-clock)\n- [Set up your testing\nsimulation](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#setup-simulation)\n- [Advance the clock’s\ntime](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#advance-clock)\n- [Monitor and handle the\nchanges](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#monitor-changes)\n- [Update the\nsimulation](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#update-simulation)\n\nNext, you can start testing trials with test clocks. Let’s say that you want\ncustomers to try your product for free with a seven-day trial before they start\npaying and want to collect payment information up front. To simulate this\nsituation using test clocks, follow these steps:\n\n- Create a new test clock and set its `frozen_time` to January 1.\n- Add a customer and include their payment method. In this case, use a\n4242424242424242 [test card](https://docs.stripe.com/testing#cards).\n- Create a subscription and add a seven-day free trial period:\nDashboardAPI\nTo add a trial period to an existing subscription using the Dashboard:\n\nFind the subscription you want to change.\n\n- Click **Actions**.\n- Click **Update subscription**.\n- Click **Add free trial** and enter seven in **Free trial days** field.\n- Click **Update subscription**.\n- After creating a subscription with a seven-day free trial period, a\nsubscription is created in a `trialing` state. An invoice of $0.00 is generated\ndue to the free trial.\n- Advance the date to January 5 to see the\n[customer.subscription.trial_will_end](https://docs.stripe.com/api/events/types#event_types-customer.subscription.trial_will_end)\nevent notification. Stripe sends the notification three days before the trial\nends. You can use this webhook event to inform your customers that the trial\nends soon.\n- Advance the date to January 8 to see that the subscription is now `paid` and\nan invoice for 50 USD is created.\n- Advance the date by one cycle (for example, to February 8 for a monthly\nsubscription) to see the subscription renew successfully.\n\n## Limitations\n\nFor efficient advancement of test clocks, Stripe limits the complexity of each\nsimulation to:\n\n- Three customers\n- Three subscriptions, including [scheduled\nsubscriptions](https://docs.stripe.com/billing/subscriptions/subscription-schedules),\nper customer\n- Ten quotes that aren’t attached to customers\n\n### Test clock objects omitted in list all results\n\nStripe list APIs (such as [List\ninvoices](https://docs.stripe.com/api/invoices/list)) omit results generated by\ntest clocks for list all requests. To see results generated by test clocks in\nthese cases, you must request results within a specific parent, such as\n`test_clock`, `customer`, or `subscription`.\n\nFor example, `GET /v1/invoices` won’t return test clock generated invoices, but\n`GET /v1/invoices/{customer_id}` returns all invoices for that customer,\nincluding those that are test clock generated.\n\nSimilarly, you can specify a test clock ID in this example to get all invoices\nrelated to that test clock, or you can specify a subscription ID to return all\ninvoices billed for that subscription, including test clock generated invoices.\n\n### Rate limit errors\n\nIf you make multiple updates to a subscription that has a test clock, Stripe\nmight return a rate limit error. Since the subscription is frozen to the time of\nthe test clock, all API requests count toward that time, which can trigger the\nrate limit.\n\nTo avoid this, advance the simulated time of the clock by a few minutes before\nmaking additional API requests on the subscription.\n\n### Caveats with payment processing\n\nTest clock advancement currently doesn’t support collecting payments through\nbank debits (for example, `us_bank_account` payment method types). Stripe\ncollects payments after the test clock advances. To test payment failures:\n\n- Choose the **Cancel subscription after all payment retries fail** setting.\n- Attach a `us_bank_account` payment method type to a customer that fails\npayments.\n- Create a subscription under the customer.\n- Advance the test clock to cycle and collect payment on a subscription.\n\nAfter the Test Clock advances, the subscription remains in the `active` state.\nThis indicates that the payment collection hasn’t be attempted during test clock\nadvancement, and the subscription has yet to enter the `canceled` state due to\n`payment_failed`.\n\nListen to the `invoice.payment_failed` event to monitor the delayed subscription\nstate and invoice payment. The `customer.subscription.deleted` event indicates\nthat the subscription state is set to `canceled`.\n\n## Links\n\n- [our\nguide](https://docs.stripe.com/billing/testing/test-clocks/simulate-subscriptions)\n- [subscriptions](https://docs.stripe.com/billing/subscriptions/creating)\n- [section](https://dashboard.stripe.com/test/subscriptions)\n- [test clocks](https://dashboard.stripe.com/test/test-clocks)\n- [available\nproperties](https://docs.stripe.com/billing/customer#properties-uses)\n- [invoices page](https://dashboard.stripe.com/test/invoices)\n- [webhooks](https://docs.stripe.com/webhooks)\n- [billing-specific event\nnotifications](https://docs.stripe.com/billing/subscriptions/webhooks)\n- [retrieve](https://docs.stripe.com/api/test_clocks/retrieve)\n- [customer balance](https://docs.stripe.com/billing/customer/balance)\n- [Adding one-off invoice\nitems](https://docs.stripe.com/billing/invoices/subscription#adding-upcoming-invoice-items)\n- [test card](https://docs.stripe.com/testing#cards)\n- [one\nhour](https://docs.stripe.com/billing/invoices/subscription#adding-draft-invoice-items)\n-\n[customer.subscription.updated](https://docs.stripe.com/api/events/types#event_types-customer.subscription.updated)\n- [Create a test\nclock](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#create-clock)\n- [Set up your testing\nsimulation](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#setup-simulation)\n- [Advance the clock’s\ntime](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#advance-clock)\n- [Monitor and handle the\nchanges](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#monitor-changes)\n- [Update the\nsimulation](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#update-simulation)\n-\n[customer.subscription.trial_will_end](https://docs.stripe.com/api/events/types#event_types-customer.subscription.trial_will_end)\n- [scheduled\nsubscriptions](https://docs.stripe.com/billing/subscriptions/subscription-schedules)\n- [List invoices](https://docs.stripe.com/api/invoices/list)",
  "metadata": {
    "title": "API and advanced usage | Stripe Documentation",
    "description": "Learn advanced strategies for using test clocks in the Dashboard and API.",
    "sourceURL": "https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage"
  }
}