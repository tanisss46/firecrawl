{
  "content": "Install the Stripe ruby gem and require it in your code. Alternatively, if\nyou’re starting from scratch and need a Gemfile, download the project files\nusing the link in the code editor.\n\nTerminalBundlerGitHub\nInstall the gem:\n\n`gem install stripe`Server\n### Create a Checkout Session\n\nAdd an endpoint on your server that creates a [Checkout\nSession](https://docs.stripe.com/api/checkout/sessions), setting the\n[ui_mode](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-ui_mode)\nto `embedded`.\n\nThe Checkout Session response includes a client secret, which the client uses to\nmount Checkout. Return the\n[client_secret](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-client_secret)\nin your response.\n\nServer\n### Supply a return URL\n\nTo define how Stripe redirects your customer after payment, specify the URL of\nthe return page in the\n[return_url](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-return_url)\nparameter while creating the Checkout Session. After the payment attempt, Stripe\ndirects your customer to return page hosted on your website.\n\nInclude the `{CHECKOUT_SESSION_ID}` template variable in the URL. Before\nredirecting your customer, Checkout replaces the variable with the Checkout\nSession ID. You’re responsible for creating and hosting the return page on your\nwebsite.\n\nServer\n### Define a product to sell\n\nDefine the products you’re selling when you create the Checkout Session by using\n[predefined price\nIDs](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=embedded-form#create-product-prices-upfront).\n\nAlways keep sensitive information about your product inventory, such as price\nand availability, on your server to prevent customer manipulation from the\nclient.\n\nServer\n### Choose the mode\n\nTo handle different transaction types, adjust the `mode` parameter. For one-time\npayments, use `payment`. To initiate recurring payments with\n[subscriptions](https://docs.stripe.com/billing/subscriptions/build-subscriptions?platform=web&ui=embedded-form),\nswitch the `mode` to `subscription`. And for [setting up future\npayments](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=embedded-form),\nset the `mode` to `setup`.\n\nServer2Mount Checkout\n### Load Stripe.js\n\nUse [Stripe.js](https://docs.stripe.com/js) to remain [PCI\ncompliant](https://docs.stripe.com/security/guide#validating-pci-compliance) by\nensuring that payment details are sent directly to Stripe without hitting your\nserver. Always load Stripe.js from *js.stripe.com* to remain compliant. Don’t\ninclude the script in a bundle or host it yourself.\n\nClient\n### Define the payment form\n\nTo securely collect the customer’s information, create an empty placeholder\n`div`. Stripe inserts an iframe into the `div`.\n\nClient\n### Initialize Stripe.js\n\nInitialize Stripe.js with your [publishable API\nkey](https://docs.stripe.com/keys#obtain-api-keys).\n\nClient\n### Fetch a Checkout Session client secret\n\nCreate an asynchronous `fetchClientSecret` function that makes a request to your\nserver to [create a Checkout\nSession](https://docs.stripe.com/api/checkout/sessions/create) and retrieve the\nclient secret.\n\nClient\n### Initialize Checkout\n\nInitialize Checkout with your `fetchClientSecret` function and mount it to the\nplaceholder `<div>` in your payment form. Checkout is rendered in an iframe that\nsecurely sends payment information to Stripe over an HTTPS connection.\n\nAvoid placing Checkout within another iframe because some payment methods\nrequire redirecting to another page for payment confirmation.\n\nClient3Show a return page\n### Create an endpoint to retrieve a Checkout Session\n\nAdd an endpoint to retrieve a Checkout Session status.\n\nServer\n### Add a return page\n\nTo display order information to your customer, create a return page for the URL\nyou provided as the Checkout Session `return_url`. Stripe redirects to this page\nafter the customer completes the checkout.\n\nClient\n### Retrieve a Checkout session\n\nAs soon as your return page loads, immediately make a request to the endpoint on\nyour server. Use the Checkout Session ID in the URL to retrieve the status of\nthe Checkout Session.\n\nClient\n### Handle session\n\nHandle the result of the session by using its status:\n\n- `complete`: The payment succeeded. Use the information from the Checkout\nSession to render a success page.\n- `open`: The payment failed or was canceled. Remount Checkout so that your\ncustomer can try again.\nClient4Test your page\n### Run the application\n\nStart your server and navigate to\n[http://localhost:4242/checkout.html](http://localhost:4242/checkout.html)\n\n`ruby server.rb`Client\n### Try it out\n\nClick the pay button to complete the payment, which redirects you to the\nspecified return page.\n\nIf you see the return page, and the payment in the list of [successful\npayments](https://dashboard.stripe.com/test/payments?status%5B0%5D=successful)\nin the Dashboard, your integration is successfully working. Use any of the\nfollowing test cards to simulate a payment:\n\nPayment succeeds4242 4242 4242 4242Payment requires authentication4000 0025 0000\n3155Payment is declined4000 0000 0000 9995\n## Congratulations!\n\nYou have a basic Checkout integration working. Now learn how to customize the\nappearance of your checkout page and automate tax collection.\n\n### Customize the checkout page\n\n[Customize](https://docs.stripe.com/payments/checkout/customization) the\nappearance of the embedded form by:\n\n- Adding your color theme and font in your [branding\nsettings](https://dashboard.stripe.com/settings/branding/checkout).\n- Using the [Checkout Sessions\nAPI](https://docs.stripe.com/api/checkout/sessions/create)to activate additional\nfeatures, like collecting addresses and prefilling customer data.\n\n### Automate tax collection\n\nCalculate and collect the right amount of tax on your Stripe transactions. Learn\nmore about [Stripe Tax](https://docs.stripe.com/tax) and [how to add it to\nCheckout](https://docs.stripe.com/tax/checkout).\n\n## Next steps\n\n#### [Fulfill orders](https://docs.stripe.com/checkout/fulfillment)\n\nSet up a webhook to fulfill orders after a payment succeeds. Webhooks are the\nmost reliable way to handle business-critical events.\n\n#### [Receive payouts](https://docs.stripe.com/payouts)\n\nLearn how to move funds out of your Stripe account into your bank account.\n\n#### [Refund and cancel payments](https://docs.stripe.com/refunds)\n\nHandle requests for refunds by using the Stripe API or Dashboard.\n\n#### [Customer management](https://docs.stripe.com/customer-management)\n\nLet your customers self-manage their payment details, invoices, and\nsubscriptions\n\nWas this page\nhelpful?Previewserver.rbcheckout.htmlcheckout.jsreturn.htmlreturn.jsDownload\n```\nrequire 'stripe'require 'sinatra'\n# This test secret API key is a placeholder. Don't include personal details in requests with this key.# To see your test secret API key embedded in code samples, sign in to your Stripe account.# You can also find your test secret API key at https://dashboard.stripe.com/test/apikeys.Stripe.api_key = 'sk_test_BQokikJOvBiI2HlWgH4olfQ2'\nset :static, trueset :port, 4242\nYOUR_DOMAIN = 'http://localhost:4242'\npost '/create-checkout-session' do content_type 'application/json'\nsession = Stripe::Checkout::Session.create({ ui_mode: 'embedded', line_items: [{\n# Provide the exact Price ID (e.g. pr_1234) of the product you want to sell\nprice: '{{PRICE_ID}}', quantity: 1, }], mode: 'payment', return_url: YOUR_DOMAIN\n+ '/return.html?session_id={CHECKOUT_SESSION_ID}', })\n {clientSecret: session.client_secret}.to_jsonend\nget '/session-status' do session =\nStripe::Checkout::Session.retrieve(params[:session_id])\n{status: session.status, customer_email:\nsession.customer_details.email}.to_jsonend\n```\n\n## Links\n\n- [text version of this\nguide](https://docs.stripe.com/payments/accept-a-payment)\n- [View the text-based\nguide](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=embedded-checkout)\n- [Stripe Checkout](https://docs.stripe.com/payments/checkout)\n- [no-code options](https://docs.stripe.com/no-code)\n- [our partners](https://stripe.partners)\n- [Checkout Session](https://docs.stripe.com/api/checkout/sessions)\n-\n[ui_mode](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-ui_mode)\n-\n[client_secret](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-client_secret)\n-\n[return_url](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-return_url)\n- [predefined price\nIDs](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=embedded-form#create-product-prices-upfront)\n-\n[subscriptions](https://docs.stripe.com/billing/subscriptions/build-subscriptions?platform=web&ui=embedded-form)\n- [setting up future\npayments](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=embedded-form)\n- [Stripe.js](https://docs.stripe.com/js)\n- [PCI\ncompliant](https://docs.stripe.com/security/guide#validating-pci-compliance)\n- [publishable API key](https://docs.stripe.com/keys#obtain-api-keys)\n- [create a Checkout\nSession](https://docs.stripe.com/api/checkout/sessions/create)\n- [http://localhost:4242/checkout.html](http://localhost:4242/checkout.html)\n- [successful\npayments](https://dashboard.stripe.com/test/payments?status%5B0%5D=successful)\n- [Customize](https://docs.stripe.com/payments/checkout/customization)\n- [branding settings](https://dashboard.stripe.com/settings/branding/checkout)\n- [Stripe Tax](https://docs.stripe.com/tax)\n- [how to add it to Checkout](https://docs.stripe.com/tax/checkout)\n- [Fulfill orders](https://docs.stripe.com/checkout/fulfillment)\n- [Receive payouts](https://docs.stripe.com/payouts)\n- [Refund and cancel payments](https://docs.stripe.com/refunds)\n- [Customer management](https://docs.stripe.com/customer-management)",
  "metadata": {
    "title": "Embedded form | Stripe Documentation",
    "description": "",
    "sourceURL": "https://docs.stripe.com/checkout/embedded/quickstart"
  }
}