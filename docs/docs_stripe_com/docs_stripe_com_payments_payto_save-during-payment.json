{
  "content": "# Save a mandate for future PayTo paymentsInvite only\n\n## Learn how to collect a PayTo payment and authorize future payments.\n\nPayTo allows customers in Australia to\n[authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions)\nPayTo agreements for one-off and recurring payments in their banking apps.\n[Customers](https://docs.stripe.com/api/customers) pay with PayTo by receiving\nnotification of a pending agreement request, authorizing the terms of the\nagreement, then returning to your app where you get [delayed\nnotification](https://docs.stripe.com/payments/payment-methods#payment-notification)\non whether the payment succeeded or failed.\n\nSetting up a PayTo agreement for future payments allows you to collect future\nrecurring payments without needing customer authorization again. Customers can\nview, manage, pause, and cancel their PayTo agreements in their banking apps.\n\n#### Caution\n\nStripe doesn’t support modification or pausing of PayTo agreements by customers.\nIf a customer attempts to pause or modify an agreement, we cancel the agreement\nand send you a [mandate.updated\nwebhook](https://docs.stripe.com/api/events/types#event_types-mandate.updated).\nAfter receiving the webhook, you can reach out to your customer to find out why\nthey adjusted their agreement, as well as setup a new agreement.\n\nAdvanced integrationDirect API\nTo accept PayTo payments, create a\n[PaymentIntent](https://docs.stripe.com/api/payment_intents/object) object to\ntrack a payment, collect payment method details, then submit the payment to\nStripe for processing. Stripe uses the PaymentIntent to track and handle all the\nstates of the payment until the payment completes. Use the ID of the\n[Mandate](https://docs.stripe.com/api/mandates) collected from your initial\nPayTo PaymentIntent to create future payments.\n\n#### Caution\n\nStripe automatically presents your customers payment method options by\nevaluating their currency, payment method restrictions, and other parameters. We\nrecommend that you configure your payment methods from the Stripe Dashboard\nusing the instructions in [Accept a\npayment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to\nyour customers with Checkout, use this guide. Otherwise, update your integration\nto [configure payment methods in the\nDashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\n[Set up\nStripeServer-side](https://docs.stripe.com/payments/payto/save-during-payment#web-set-up-stripe)\nFirst, you need a Stripe account. [Register\nnow](https://dashboard.stripe.com/register).\n\nTo access the Stripe API from your application, use our official libraries:\n\n```\n# Available as a gem\nsudo gem install stripe\n```\n\n```\n# If you use bundler, you can add this line to your Gemfile\ngem 'stripe'\n```\n\n[Create a\nCustomerServer-side](https://docs.stripe.com/payments/payto/save-during-payment#create-customer)\nCreate a [Customer](https://docs.stripe.com/api/customers) after they create an\naccount with your business and associate it with your internal representation of\ntheir account. This enables you to retrieve and use their saved payment method\ndetails later.\n\n```\ncurl https://api.stripe.com/v1/customers \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d name=\"Jenny Rosen\" \\\n --data-urlencode email=\"jenny@example.com\"\n```\n\n[Create a\nPaymentIntentServer-side](https://docs.stripe.com/payments/payto/save-during-payment#web-create-payment-intent)\nCreate a PaymentIntent on your server and specify the `amount` to collect, the\n`aud` currency, the customer ID, and `off_session` as an argument for [setup\nfuture\nusage](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-setup_future_usage).\nThe minimum charge amount is 0.50 AUD and PayTo doesn’t support other\ncurrencies. If you have an existing [Payment Intents\nAPI](https://docs.stripe.com/payments/payment-intents) integration, add `payto`\nto the list of [payment method\ntypes](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_types).\n\nYou can specify the terms of the agreement for your customer’s consent in the\n[PayTo payment method\noptions](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-payto).\n\n#### Common mistake\n\nThe payment method options `amount` must match the PaymentIntent `amount` unless\nyou set the `amount_type` to `maximum`, in which case you can set payment method\noptions value that’s higher than the PaymentIntent.\n\nThe following code sample shows a PaymentIntent amount of 10 AUD and a payment\nmethod options amount of 1500 AUD because the `amount_type` is `maximum`.\n\n```\ncurl https://api.stripe.com/v1/payment_intents \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d amount=1000 \\\n -d currency=aud \\\n -d \"payment_method_types[]\"=payto \\\n -d customer={{CUSTOMER_ID}} \\\n -d setup_future_usage=off_session \\\n -d \"payment_method_options[payto][mandate_options][amount_type]\"=maximum \\\n -d \"payment_method_options[payto][mandate_options][payment_schedule]\"=annual \\\n -d \"payment_method_options[payto][mandate_options][amount]\"=150000 \\\n -d \"payment_method_options[payto][mandate_options][payments_per_period]\"=13 \\\n -d \"payment_method_options[payto][mandate_options][end_date]\"=2036-12-25 \\\n -d \"payment_method_options[payto][mandate_options][purpose]\"=mortgage\n```\n\nStripe supports various types of agreements, with controls for the amount,\nduration, cadence, and purpose of the agreement. Specify agreement terms that\nmatch your requirements as closely as possible—customers see these precise terms\nat authorization time, so accuracy can improve your conversion rate.\n\nThe default `purpose` is set to `retail`. Override this field using [any of the\nvalid\nvalues](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-payto-mandate_options-purpose)\nif `retail` doesn’t accurately represent the purpose of the agreement.\n\n### Retrieve the client secret\n\nThe PaymentIntent includes a [client\nsecret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret)\nthat the client side uses to securely complete the payment process. You can use\ndifferent approaches to pass the client secret to the client side.\n\nSingle-page applicationServer-side rendering\nRetrieve the client secret from an endpoint on your server, using the browser’s\n`fetch` function. This approach is best if your client side is a single-page\napplication, particularly one built with a modern frontend framework like React.\nCreate the server endpoint that serves the client secret:\n\n```\nget '/secret' do\n intent = # ... Create or retrieve the PaymentIntent\n {client_secret: intent.client_secret}.to_json\nend\n```\n\nAnd then fetch the client secret with JavaScript on the client side:\n\n```\n(async () => {\n const response = await fetch('/secret');\n const {client_secret: clientSecret} = await response.json();\n // Render the form using the clientSecret\n})();\n```\n\n[Collect payment method details and submit the\npaymentClient-side](https://docs.stripe.com/payments/payto/save-during-payment#web-collect-payment-method-details)\nCollect payment details on the client with the [Payment\nElement](https://docs.stripe.com/payments/payment-element). The Payment Element\nis a prebuilt UI component that simplifies collecting payment details for a\nvariety of payment methods.\n\nThe Payment Element contains an iframe that securely sends payment information\nto Stripe over an HTTPS connection. Avoid placing the Payment Element within\nanother iframe because some payment methods require redirecting to another page\nfor payment confirmation.\n\nThe checkout page address must start with `https://` rather than `http://` for\nyour integration to work. You can test your integration without using HTTPS, but\nremember to [enable it](https://docs.stripe.com/security/guide#tls) when you’re\nready to accept live payments.\n\nHTML + JSReact\n### Set up Stripe.js\n\nThe Payment Element is automatically available as a feature of Stripe.js.\nInclude the Stripe.js script on your checkout page by adding it to the `head` of\nyour HTML file. Always load Stripe.js directly from js.stripe.com to remain PCI\ncompliant. Don’t include the script in a bundle or host a copy of it yourself.\n\n```\n<head>\n <title>Checkout</title>\n <script src=\"https://js.stripe.com/v3/\"></script>\n</head>\n```\n\nCreate an instance of Stripe with the following JavaScript on your checkout\npage:\n\n```\n// Set your publishable key: remember to change this to your live publishable\nkey in production\n// See your keys here: https://dashboard.stripe.com/apikeys\nconst stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx', {\n betas: 'payto_pm_beta_1',\n});\n```\n\n### Add the Payment Element to your payment page\n\nThe Payment Element needs a place to live on your payment page. Create an empty\nDOM node (container) with a unique ID in your payment form:\n\n```\n<form id=\"payment-form\">\n <div id=\"payment-element\">\n <!-- Elements will create form elements here -->\n </div>\n <button id=\"submit\">Submit</button>\n <div id=\"error-message\">\n <!-- Display error message to your customers here -->\n </div>\n</form>\n```\n\nWhen the previous form loads, create an instance of the Payment Element and\nmount it to the container DOM node. Pass the [client\nsecret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret)\nfrom the previous step into `options` when you create the\n[Elements](https://docs.stripe.com/js/elements_object/create) instance:\n\nHandle the client secret carefully because it can complete the charge. Don’t log\nit, embed it in URLs, or expose it to anyone but the customer.\n\n```\nconst options = {\n clientSecret: '{{CLIENT_SECRET}}',\n // Fully customizable with appearance API.\n appearance: {/*...*/},\n};\n\n// Set up Stripe.js and Elements to use in checkout form, passing the client\nsecret obtained in a previous step\nconst elements = stripe.elements(options);\n// Optional: Autofill user's saved payment methods. If the customer's\n// email is known when the page is loaded, you can pass the email\n// to the linkAuthenticationElement on mount:\n//\n// linkAuthenticationElement.mount(\"#link-authentication-element\", {\n// defaultValues: {\n// email: 'jenny.rosen@example.com',\n// }\n// })\n\n// Create and mount the Payment Element\nconst paymentElementOptions = { layout: 'accordion'};\nconst paymentElement = elements.create('payment', paymentElementOptions);\npaymentElement.mount('#payment-element');\n```\n\nUse\n[stripe.confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment)\nto complete the payment using details from the Payment Element. This sends an\nauthorization request to the buyer.\n\n#### Note\n\n`stripe.confirmPayment` might take several seconds to complete while waiting for\ncustomers to authorize the payment. During that time, disable your form from\nbeing resubmitted and show a waiting indicator like a spinner. If you receive an\nerror, show it to the customer, re-enable the form, and hide the waiting\nindicator.\n\nHTML + JSReact\n```\nconst form = document.getElementById('payment-form');\n\nform.addEventListener('submit', async (event) => {\n event.preventDefault();\n\n const {error, paymentIntent} = await stripe.confirmPayment({\n //`Elements` instance that was used to create the Payment Element\n elements,\n redirect: 'if_required',\n confirmParams: {\n mandate_data: {\n customer_acceptance: {\n type: 'online',\n online: {\n infer_from_client: true,\n },\n },\n }\n },\n });\n\n const message = document.querySelector('#message')\n if (error) {\n // This point will only be reached if there is an immediate error when\n // confirming the payment. Show error to your customer (for example, payment\n // details incomplete)\n message.innerText = error.message;\n } else {\n // This will execute if the confirm request is successful, or if the\n // payment fails asynchronously.\n switch (paymentIntent.status) {\n case 'succeeded':\n message.innerText = 'Success! Payment received.';\n break;\n\n case 'processing':\nmessage.innerText = \"Payment processing. We'll update you when payment is\nreceived.\";\n break;\n\n case 'requires_payment_method':\nmessage.innerText = 'Payment failed. Please try another payment method.';\n // Redirect your user back to your payment page to attempt collecting\n // payment again\n break;\n\n default:\n message.innerText = 'Something went wrong.';\n break;\n }\n }\n});\n```\n\n[Charge the PayTo PaymentMethod\nlater](https://docs.stripe.com/payments/payto/save-during-payment#web-charge-payto-pm)\nWhen you need to charge your customer again, create a new PaymentIntent. To find\nthe mandate ID, customer ID, and payment method ID,\n[retrieve](https://docs.stripe.com/api/payment_intents/retrieve) the previous\nPaymentIntent and [expand](https://docs.stripe.com/api/expanding_objects) the\n`latest_charge` field.\n\n```\ncurl -G https://api.stripe.com/v1/payment_intents/{{PAYMENT_INTENT_ID}} \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d \"expand[]\"=latest_charge\n```\n\nView the necessary IDs in the response below.\n\n```\n{\n // ...\n \"customer\": \"cus_PW6rQWRGAaBD7z\", // <---- Here's the customer\n \"latest_charge\": {\n\"payment_method\": \"pm_1Ok4l9A8DuEjWaGwhB4SGrWh\", // <---- Here's the payment\nmethod\n \"payment_method_details\": {\n \"payto\": {\n \"bsb_number\": null,\n \"last4\": null,\n\"mandate\": \"mandate_1Ok4lVA8DuEjWaGwu0uTwI94\", // <----- Here's the mandate\n \"pay_id\": \"jenny@example.com\"\n },\n \"type\": \"payto\"\n },\n },\n \"payment_method_types\": [\n \"payto\"\n ],\n // ...\n}\n```\n\nCreate a PaymentIntent with the PaymentMethod, Mandate, and Customer IDs.\n\n```\ncurl https://api.stripe.com/v1/payment_intents \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d \"payment_method_types[]\"=payto \\\n -d amount=1099 \\\n -d currency=aud \\\n -d customer={{CUSTOMER_ID}} \\\n -d payment_method={{PAYMENT_METHOD_ID}} \\\n -d mandate={{MANDATE_ID}} \\\n -d confirm=true\n```\n\n[Test your\nintegration](https://docs.stripe.com/payments/payto/save-during-payment#web-test-integration)\nTest your PayTo integration with your test API keys by using the various test\nPayIDs and bank account details below. Each set of details results in a\ndifferent scenario your integration might commonly face in live mode.\n\nPayIDAccount + BSB numbersPayIDDescription`{any_prefix}+succeed@{any_domain}`The\nPaymentIntent status transitions from `requires_action` to `processing` after 60\nseconds, then transitions to `succeeded` after an additional 2 seconds. The\nmandate enters an `active` state.`{any_prefix}+decline@{any_domain}`The\nPaymentIntent status transitions from `requires_action` to\n`requires_payment_method` after 60 seconds. Stripe returns the\n`payment_method_provider_decline` error code and an `invalid_authorization`\ndecline code. The mandate enters an `inactive`\nstate.`{any_prefix}+expire@{any_domain}`The PaymentIntent status transitions\nfrom `requires_action` to `requires_payment_method` after 5 minutes. Stripe\nreturns the `payment_method_provider_decline` error code and a `generic_decline`\ndecline code. The mandate enters an `inactive`\nstate.`{any_prefix}+insufficient_funds@{any_domain}`The PaymentIntent status\ntransitions from `requires_action` to `processing` after 60 seconds, then\ntransitions to `requires_payment_method` after an additional 2 seconds. Stripe\nreturns the `payment_method_provider_decline` error code and an\n`insufficient_funds` decline code. The mandate enters an `inactive`\nstate.`{any_prefix}+revoke@{any_domain}`The PaymentIntent status transitions\nfrom `requires_action` to `processing` after 60 seconds then to `succeeded`\nafter a further 2 seconds. The mandate begins in an `active` state and\ntransitions to `inactive` after 5 minutes.[OptionalHandle post-payment\nevents](https://docs.stripe.com/payments/payto/save-during-payment#web-fulfillment)\n\n## Links\n\n-\n[authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions)\n- [Customers](https://docs.stripe.com/api/customers)\n- [delayed\nnotification](https://docs.stripe.com/payments/payment-methods#payment-notification)\n- [mandate.updated\nwebhook](https://docs.stripe.com/api/events/types#event_types-mandate.updated)\n- [PaymentIntent](https://docs.stripe.com/api/payment_intents/object)\n- [Mandate](https://docs.stripe.com/api/mandates)\n- [Accept a\npayment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted)\n- [configure payment methods in the\nDashboard](https://docs.stripe.com/payments/dashboard-payment-methods)\n- [Register now](https://dashboard.stripe.com/register)\n- [setup future\nusage](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-setup_future_usage)\n- [Payment Intents API](https://docs.stripe.com/payments/payment-intents)\n- [payment method\ntypes](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_types)\n- [PayTo payment method\noptions](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-payto)\n- [any of the valid\nvalues](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-payto-mandate_options-purpose)\n- [client\nsecret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret)\n- [Payment Element](https://docs.stripe.com/payments/payment-element)\n- [enable it](https://docs.stripe.com/security/guide#tls)\n- [https://js.stripe.com/v3/](https://js.stripe.com/v3/)\n- [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys)\n- [Elements](https://docs.stripe.com/js/elements_object/create)\n-\n[stripe.confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment)\n- [retrieve](https://docs.stripe.com/api/payment_intents/retrieve)\n- [expand](https://docs.stripe.com/api/expanding_objects)",
  "metadata": {
    "title": "Save a mandate for future PayTo payments | Stripe Documentation",
    "description": "Learn how to collect a PayTo payment and authorize future payments.",
    "sourceURL": "https://docs.stripe.com/payments/payto/save-during-payment"
  }
}