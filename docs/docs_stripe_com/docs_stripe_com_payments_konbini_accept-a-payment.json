{
  "content": "# Konbini payments\n\n## Use the Payment Intents and Payment Methods APIs to accept payments through Konbini, a common way to make payments through convenience stores in Japan.\n\nStripe-hosted pageDirect API\n#### Caution\n\nStripe automatically presents your customers payment method options by\nevaluating their currency, payment method restrictions, and other parameters. We\nrecommend that you configure your payment methods from the Stripe Dashboard\nusing the instructions in [Accept a\npayment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to\nyour customers with Checkout, use this guide. Otherwise, update your integration\nto [configure payment methods in the\nDashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nKonbini is a [single\nuse](https://docs.stripe.com/payments/payment-methods#usage) payment method\nwhere customers are required to [take additional\nsteps](https://docs.stripe.com/payments/payment-methods#customer-actions) to\ncomplete their payment. Customers pay by providing a payment code, confirmation\nnumber, and cash payment at Japanese convenience stores. Stripe notifies you\nwhen the payment is completed.\n\n[Determine\ncompatibility](https://docs.stripe.com/payments/konbini/accept-a-payment#compatibility)\nA Checkout Session must satisfy all of the following conditions to support\nKonbini payments:\n\n- [Prices](https://docs.stripe.com/api/prices) for all line items must be in the\nsame currency (JPY).\n- You can only use one-time line items (recurring\n[subscription](https://docs.stripe.com/billing/subscriptions/creating) plans are\nnot supported).\n[Accept a\npayment](https://docs.stripe.com/payments/konbini/accept-a-payment#accept-a-payment)\n#### Note\n\nBuild an integration to [accept a\npayment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout)\nwith Checkout before using this guide.\n\nUse this guide to learn how to enable Konbini—it shows the differences between\naccepting a card payment and using Konbini.\n\n### Enable Konbini as a payment method\n\nWhen creating a new [Checkout\nSession](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n- Add `konbini` to the list of `payment_method_types`\n- Make sure all your `line_items` use the `jpy` currency.\n\n```\ncurl https://api.stripe.com/v1/checkout/sessions \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"mode\"=\"payment\" \\\n -d \"payment_method_types[]\"=\"card\" \\\n -d \"payment_method_types[]\"=\"konbini\" \\\n -d \"payment_method_options[konbini][expires_after_days]\"=3 \\\n -d \"line_items[0][price_data][currency]\"=\"jpy\" \\\n -d \"line_items[0][price_data][unit_amount]\"=2000 \\\n -d \"line_items[0][price_data][product_data][name]\"=\"Tシャツ\" \\\n -d \"line_items[0][quantity]\"=1 \\\n -d \"success_url\"=\"https://example.com/success\" \\\n -d \"cancel_url\"=\"https://example.com/cancel\"\n```\n\n### Additional payment method options\n\nPayment method options can be specified in the [payment method\noptions](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-payment_method_options-konbini)\nunder the `konbini` key.\n\nFieldValueRequired Default Value `expires_after_days`The number of calendar days\nbefore a pending Konbini payment expires. Valid values are from 1 to 60 days.\nSee\n[Expiration](https://docs.stripe.com/payments/konbini/accept-a-payment#checkout-additional-options-expiration).No3\n#### Expiration\n\nPending Konbini payments expire right before midnight (23:59:59 JST) on the\nspecified date. For example if `expires_after_days` is set to 2 and the\nPaymentIntent is confirmed on Monday, the pending Konbini payment will expire on\nWednesday at 23:59:59 Japan (UTC+9) time.\n\n#### Phone number\n\nOn the Konbini checkout form, your customers can optionally supply a phone\nnumber to use as their confirmation number. This simplifies their payment\nprocess at a convenience store where the in-store UI asks for the customer to\nprovide a payment code and their confirmation number. Both are reflected in the\npayment instructions that Stripe displays after the customer submits their\ncheckout form. If your customer doesn’t provide a phone number, Stripe generates\na random confirmation number.\n\nStripe proactively blocks phone numbers consisting of only zeros.\n\n### Redirect to Stripe hosted voucher page\n\n#### Note\n\nUnlike card payments, the customer won’t be redirected to the\n[success_url](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-success_url)\nwith Konbini payment.\n\nAfter submitting the Checkout form successfully, the customer is redirected to\nthe `hosted_voucher_url`. The customer can reference the hosted page’s payment\ninstructions for details on how to complete their payment. The page is viewable\non desktop and mobile, as well as being printable.\n\nStripe sends a\n[payment_intent.requires_action](https://docs.stripe.com/api/events/types#event_types-payment_intent.requires_action)\nevent when a Konbini voucher is created successfully. If you need to email your\ncustomers the voucher’s payment instructions link, you can locate the\n`hosted_voucher_url` in\n[payment_intent.next_action.konbini_display_details](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-konbini_display_details-hosted_voucher_url).\nLearn more about how to [monitor a PaymentIntent with\nwebhooks](https://docs.stripe.com/payments/payment-intents/verifying-status#webhooks).\n\nStripe allows customization of customer-facing UIs on the [Branding\nSettings](https://dashboard.stripe.com/account/branding) page. The following\nbrand settings can be applied to the voucher:\n\n- **Icon**—your brand image and public business name\n- **Accent color**—used as the color of the Number button\n- **Brand color**—used as the background color\n\n### Fulfill your orders\n\nBecause Konbini is a delayed notification payment method, you need to use a\nmethod such as [webhooks](https://docs.stripe.com/webhooks) to monitor the\npayment status and handle order fulfillment. Learn more about [setting up\nwebhooks and fulfilling orders](https://docs.stripe.com/checkout/fulfillment).\n\nThe following events are sent when the payment status changes:\n\nEvent NameDescriptionNext steps\n\n[checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed)\n\nThe customer has successfully submitted the Checkout form. Stripe has generated\nthe Konbini voucher.\n\nYou can choose to email the `hosted_voucher_url` to your customer in case they\nlose the Konbini voucher.\n\nWait for the customer to pay at a Konbini.\n\n[checkout.session.async_payment_succeeded](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_succeeded)The\ncustomer has successfully paid the Konbini voucher. The `PaymentIntent`\ntransitions to `succeeded`.Fulfill the goods or services that the customer\npurchased.[checkout.session.async_payment_failed](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_failed)The\nKonbini voucher has expired, or the payment has failed for some other reason.\nThe `PaymentIntent` returns to a status of `requires_payment_method`.Contact the\ncustomer via email and request that they place a new order.[Test your\nintegration](https://docs.stripe.com/payments/konbini/accept-a-payment#test-integration)\nWhen testing your Checkout integration, select Konbini as the payment method and\nclick the **Pay** button.\n\nProvide the following values in the Checkout form to test different scenarios.\nYou can either test with a special confirmation number or an email pattern. If\nboth are provided the behavior of the special confirmation number applies.\n\nEmailConfirmation numberDescription\n`{any_prefix}@{any_domain}`\n\n`11111111110`\n\nSimulates a Konbini payment which succeeds after 3 minutes and the\n`payment_intent.succeeded` webhook arrives after that.\n\nExample: hanako@test.com\n\n`{any_prefix}succeed_immediately@{any_domain}`\n\n`22222222220`\n\nSimulates a Konbini payment which succeeds immediately and the\n`payment_intent.succeeded` webhook arrives after that.\n\nExample: succeed_immediately@test.com\n\n`{any_prefix}expire_immediately@{any_domain}`\n\n`33333333330`\n\nSimulates a Konbini payment which expires immediately and the\n`payment_intent.payment_failed` webhook arrives after that.\n\nThe `expires_at` field in\n[next_action.konbini_display_details](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-konbini_display_details-expires_at)\nis set to the current time regardless of what the `expires_after_days` or\n`expires_at` parameter in [payment method\noptions](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-konbini-expires_after_days)\nis set to.\n\nExample: expire_immediately@test.com\n\n`{any_prefix}expire_with_delay@{any_domain}`\n\n`44444444440`\n\nSimulates a Konbini payment which never succeeds; it expires in 3 minutes and\nthe `payment_intent.payment_failed` webhook arrives after that.\n\nThe `expires_at` field in\n[next_action.konbini_display_details](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-konbini_display_details-expires_at)\nis set to 3 minutes in the future regardless of what the `expires_after_days` or\n`expires_at` parameter in [payment method\noptions](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-konbini-expires_after_days)\nis set to.\n\nExample: expire_with_delay@test.com\n\n`{any_prefix}fill_never@{any_domain}`\n\n`55555555550`\n\nSimulates a Konbini payment which never succeeds; it expires according to the\n`expires_at` field in `next_action.konbini_display_details` per the provided\nparameters in the [payment method\noptions](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-konbini-expires_after_days)\nand the `payment_intent.payment_failed` webhook arrives after that.\n\nExample: fill_never@test.com\n\nIn order to test [confirmation\nnumber](https://docs.stripe.com/payments/konbini/accept-a-payment#web-confirm-payment-intent-additional-options-confirmation-number)\nerrors you may use the following values:\n\n- `01234567890` simulates a confirmation number rejection.\n- `00000000000` results in a validation error.\n\n## Expiration and cancellation\n\nAfter the time specified by the `expires_at` value in the\n[next_action.konbini_display_details](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-konbini_display_details-expires_at),\nthe customer can no longer *initiate* the payment process for a pending Konbini\npayment at a convenience store kiosk. However, if they issued a valid payment\nslip before the deadline they may be able to *complete* the payment at the cash\nregister after the `expires_at` time.\n\nThere is a buffer period to avoid premature payment failures in such an event.\nThe PaymentIntent’s status changes to `requires_payment_method`. At this point,\nyou can cancel or confirm the PaymentIntent with another payment method.\n\nYou can also cancel a pending Konbini payment after confirmation and before the\ntime specified by `next_action.konbini_display_details.expires_at`. Updating the\nPaymentIntent or confirming it with another payment method will also implicitly\ncancel the existing Konbini payment.\n\nIf the customer is currently paying for the Konbini payment at the convenience\nstore, the cancellation request will fail. Cancellation may be re-attempted if\nthe customer abandons the payment attempt and after the payment slip expires.\n\nNote that [temporary payment method availability\nissues](https://docs.stripe.com/payments/konbini/accept-a-payment#web-handling-temporary-availability-issues)\nalso affect (both explicit as well as implicit) cancellation requests.\n\n#### Caution\n\nWhen you cancel a pending payment the original payment instructions become\ninvalid. For most use cases we suggest you reach out to your customer to inform\nthem of the cancellation.\n\nWhen you successfully reconfirm a PaymentIntent in status `requires_action` we\ncreate new instructions and a new `hosted_voucher_url`. You need to ensure that\nyour customer is made aware of these.\n\n## Refunds\n\nIt is possible to refund Konbini payments through the\n[Dashboard](https://dashboard.stripe.com/payments) or\n[API](https://docs.stripe.com/api#create_refund).\n\nTo complete a refund sent to the customer’s bank account directly, your customer\nmust provide the bank account details where they would like to receive the\nfunds. Stripe contacts the customer at the email address from the billing\ndetails on the payment method and requests these details from them. After we\nreceive the bank details, we process the refund automatically.\n\nThe refund’s status transitions as follows:\n\nEventRefund statusRefund is created`requires_action`Customer submits bank\naccount details, and Stripe begins processing the refund`pending`Refund is\nexpected to arrive in customer’s bank`succeeded`Customer’s bank returns the\nfunds back to Stripe`requires_action`Refund is in `requires_action` 45 days\nafter creation`failed`Refund is canceled from a `requires_action`\nstate`canceled`\nIf the customer’s bank can’t successfully complete the transfer, the funds are\nreturned to Stripe and the refund transitions to `requires_action`. This can\nhappen if the account holder’s name doesn’t match what the recipient bank has on\nfile or if the provided bank account number has a typo. In these cases, Stripe\nemails the customer to inform them of the failure and to request that they\nresubmit their bank account details.\n\nIf your customer doesn’t provide their bank account details within 45 days, the\nrefund’s status transitions to `failed` and we send the\n[refund.failed](https://docs.stripe.com/api/events/types#event_types-refund.failed)\nevent. This means that Stripe can’t process the refund, and you must [return the\nfunds to your customer outside of\nStripe](https://docs.stripe.com/refunds#failed-refunds).\n\nThe\n[instructions_email](https://docs.stripe.com/api/refunds/object#refund_object-instructions_email)\nfield on the refund is the email that the refund was sent to. While a refund is\nwaiting for a response from the customer, details of the email sent to the\ncustomer can also be found under the\n[next_action.display_details.email_sent](https://docs.stripe.com/api/refunds/object#refund_object-next_action-display_details-email_sent)\nfield on the refund.\n\nEach individual refund (including each partial refund) may incur a fee. Please\nreach out to your point of contact at Stripe to learn more about this.\n\n### Testing Refunds\n\nYou can test refund behavior in testmode using the following test bank accounts\non the bank account details collection page linked in the email sent to the\ncustomer. Bank account details outside of these test bank accounts will not be\naccepted.\n\nRoutingAccountType`1100000``0001234`Refund succeeds.\n`1100000`\n\n`1111113`\n\n`1111116`\n\n`1111113`\n\n`3333335`\n\n`4444440`\n\nRefund fails.\n\n#### Testing Refunds Expiry\n\nYou can make an API call to simulate the expiry of a testmode refund.\n\n```\ncurl https://api.stripe.com/v1/test_helpers/refunds/{{REFUND_ID}}/expire \\\n -X POST \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2:\n```\n\n## See also\n\n- [Checkout fulfillment](https://docs.stripe.com/checkout/fulfillment)\n- [Customizing\nCheckout](https://docs.stripe.com/payments/checkout/customization)\n\n## Links\n\n- [Accept a\npayment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted)\n- [configure payment methods in the\nDashboard](https://docs.stripe.com/payments/dashboard-payment-methods)\n- [single use](https://docs.stripe.com/payments/payment-methods#usage)\n- [take additional\nsteps](https://docs.stripe.com/payments/payment-methods#customer-actions)\n- [Prices](https://docs.stripe.com/api/prices)\n- [subscription](https://docs.stripe.com/billing/subscriptions/creating)\n- [accept a\npayment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout)\n- [Checkout Session](https://docs.stripe.com/api/checkout/sessions)\n- [https://example.com/success](https://example.com/success)\n- [https://example.com/cancel](https://example.com/cancel)\n- [payment method\noptions](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-payment_method_options-konbini)\n-\n[success_url](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-success_url)\n-\n[payment_intent.requires_action](https://docs.stripe.com/api/events/types#event_types-payment_intent.requires_action)\n-\n[payment_intent.next_action.konbini_display_details](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-konbini_display_details-hosted_voucher_url)\n- [monitor a PaymentIntent with\nwebhooks](https://docs.stripe.com/payments/payment-intents/verifying-status#webhooks)\n- [Branding Settings](https://dashboard.stripe.com/account/branding)\n- [webhooks](https://docs.stripe.com/webhooks)\n- [setting up webhooks and fulfilling\norders](https://docs.stripe.com/checkout/fulfillment)\n-\n[checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed)\n-\n[checkout.session.async_payment_succeeded](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_succeeded)\n-\n[checkout.session.async_payment_failed](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_failed)\n-\n[next_action.konbini_display_details](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-konbini_display_details-expires_at)\n- [payment method\noptions](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-konbini-expires_after_days)\n- [Dashboard](https://dashboard.stripe.com/payments)\n- [API](https://docs.stripe.com/api#create_refund)\n-\n[refund.failed](https://docs.stripe.com/api/events/types#event_types-refund.failed)\n- [return the funds to your customer outside of\nStripe](https://docs.stripe.com/refunds#failed-refunds)\n-\n[instructions_email](https://docs.stripe.com/api/refunds/object#refund_object-instructions_email)\n-\n[next_action.display_details.email_sent](https://docs.stripe.com/api/refunds/object#refund_object-next_action-display_details-email_sent)\n- [Customizing\nCheckout](https://docs.stripe.com/payments/checkout/customization)",
  "metadata": {
    "title": "Konbini payments | Stripe Documentation",
    "description": "Use the Payment Intents and Payment Methods APIs to accept payments through Konbini, a common way to make payments through convenience stores in Japan.",
    "sourceURL": "https://docs.stripe.com/payments/konbini/accept-a-payment"
  }
}