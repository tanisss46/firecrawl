{
  "content": "# Migrate to the Payment Element\n\n## Accept many payment methods with a single Element.\n\n#### Note\n\nIf your integration still uses the Charges API with tokens, follow the\n[Migrating to the Payment Intents\nAPI](https://docs.stripe.com/payments/payment-intents/migration#web) guide\nfirst.\n\n#### Interested in using Stripe Billing, Tax, discounts, shipping, or currency conversion?\n\nWe’re developing a Payment Element integration that manages subscriptions, tax,\ndiscounts, shipping, and currency conversion. To learn more, see [Build a\ncheckout page](https://docs.stripe.com/checkout/custom/quickstart).\n\nPreviously, each payment method (cards, iDEAL, and so on) required a separate\nElement. By migrating to the Payment Element, you can accept many payment\nmethods with a single Element.\n\nPaymentIntents and SetupIntents each have their own set of migration guidelines.\nSee the appropriate guide for your integration path, including example code.\n\nPaymentIntent migrationSetupIntent migration\nIf your existing integration uses the [Payment\nIntents](https://docs.stripe.com/payments/payment-intents) API to create and\ntrack payments or save card details during a payment, follow the steps below to\nuse the Payment Element.\n\n[Enable payment\nmethods](https://docs.stripe.com/payments/payment-element/migration#enable-payment-methods)\n#### Caution\n\nThis integration path doesn’t support BLIK or pre-authorized debits that use the\nAutomated Clearing Settlement System (ACSS).\n\nView your [payment methods\nsettings](https://dashboard.stripe.com/settings/payment_methods) and enable the\npayment methods you want to support. You need at least one payment method\nenabled to create a\n[PaymentIntent](https://docs.stripe.com/payments/payment-intents).\n\nBy default, Stripe enables cards and other prevalent payment methods that can\nhelp you reach more customers, but we recommend turning on additional payment\nmethods that are relevant for your business and customers. See [Payment method\nsupport](https://docs.stripe.com/payments/payment-methods/payment-method-support)\nfor product and payment method support, and our [pricing\npage](https://stripe.com/pricing/local-payment-methods) for fees.\n\n[Update Elements\ninstanceClient-side](https://docs.stripe.com/payments/payment-element/migration#one-time-update-elements)\nNext, update your client-side code to pass `mode`, `currency`, and `amount` when\nyou create the Elements instance. For use with a PaymentIntent, set the `mode`\nto `'payment'` and the `currency` and `amount` to what you’ll charge your\ncustomer.\n\nJavascriptReactBeforeAfter\n```\nconst stripe =\n Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\nconst elements = stripe.elements();\n```\n\n```\nconst stripe =\n Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\nconst options = {\n mode: 'payment',\n currency: 'usd',\n amount: 1099,\n};\nconst elements = stripe.elements(options);\n```\n\n[OptionalSave payment details during a\npayment](https://docs.stripe.com/payments/payment-element/migration#one-time-save-payment-details)[OptionalAdditional\nElements\noptionsClient-side](https://docs.stripe.com/payments/payment-element/migration#additional-options)[Add\nthe Payment\nElementClient-side](https://docs.stripe.com/payments/payment-element/migration#one-time-add-payment-element)\nYou can now replace the Card Element and individual payment methods Elements\nwith the Payment Element. The Payment Element automatically adjusts to collect\ninput fields based on the payment method and country (for example, full billing\naddress collection for SEPA Direct Debit) so you don’t have to maintain\ncustomized input fields anymore.\n\nThe following example replaces `CardElement` with `PaymentElement`:\n\n```\n<form id=\"payment-form\">\n <div id=\"card-element\">\n </div>\n <div id=\"payment-element\">\n <!-- Mount the Payment Element here -->\n </div>\n <button id=\"submit\">Submit</button>\n</form>\n```\n\n```\nconst cardElement = elements.create(\"card\");\ncardElement.mount(\"#card-element\");\nconst paymentElement = elements.create(\"payment\");\npaymentElement.mount(\"#payment-element\");\n```\n\nIf your payment flow already always collects details like the customer’s name or\nemail address, you can prevent the Payment Element from collecting this\ninformation by passing the\n[fields](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-fields)\noption when creating the Payment Element. If you disable the collection of a\ncertain field, you must pass that same data back with\n[stripe.confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment).\n\n[Update your PaymentIntent creation\ncallServer-side](https://docs.stripe.com/payments/payment-element/migration#one-time-payment-intent)\nThe Payment Element allows you to accept multiple payment methods. You can\nmanage payment methods from the\n[Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe\nhandles the return of eligible payment methods based on factors such as the\ntransaction’s amount, currency, and payment flow. We prioritize payment methods\nthat increase conversion and are most relevant to the customer’s currency and\nlocation.\n\nAny of the additional elements options passed when creating the Elements group\nin the earlier step should also be passed when creating the PaymentIntent.\n\n```\ncurl https://api.stripe.com/v1/payment_intents \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -H \"Stripe-Version: 2025-02-24.acacia\" \\\n -d \"amount\"=1099 \\\n -d \"currency\"=\"usd\" \\\n -d \"payment_method_types[]\"=card \\\n -d \"automatic_payment_methods[enabled]\"=true \\\n```\n\n#### Caution\n\nEach payment method needs to support the currency passed in the PaymentIntent\nand your business needs to be based in one of the countries each payment method\nsupports. See the [Payment method integration\noptions](https://docs.stripe.com/payments/payment-methods/integration-options)\npage for more details about what’s supported.\n\n[Update the submit\nhandlerClient-side](https://docs.stripe.com/payments/payment-element/migration#one-time-update-method)\nInstead of using individual confirm methods like `stripe.confirmCardPayment` or\n`stripe.confirmP24Payment`, use\n[stripe.confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment)\nto collect payment information and submit it to Stripe.\n\nTo confirm the PaymentIntent, make the following updates to your submit handler:\n\n- Call `await elements.submit()` to trigger form validation and collect any data\nrequired for\n[wallets](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-wallets).\n- Optional: Move PaymentIntent creation to the submit handler. This way you only\ncreate the PaymentIntent when you’re sure of the final amount.\n- Pass the `elements` instance you used to create the Payment Element and the\n`clientSecret` from the PaymentIntent as parameters to `stripe.confirmPayment`.\n\nWhen called, `stripe.confirmPayment` attempts to complete any [required\nactions](https://docs.stripe.com/payments/paymentintents/lifecycle), such as\nauthenticating your customers by displaying a 3DS dialog or redirecting them to\na bank authorization page. When confirmation is complete, users are directed to\nthe `return_url` you configured, which normally corresponds to a page on your\nwebsite that [provides the status of the\npayment](https://docs.stripe.com/payments/accept-a-payment#web-post-payment).\n\nIf you want to keep the same checkout flow for card payments and only redirect\nfor redirect-based payment methods, you can set\n[redirect](https://docs.stripe.com/js/payment_intents/confirm_payment#confirm_payment_intent-options-redirect)\nto `if_required`.\n\nThe following code example replaces `stripe.confirmCardPayment` with\n`stripe.confirmPayment`:\n\nBeforeAfter\n```\n// Create the PaymentIntent and obtain clientSecret\nconst res = await fetch(\"/create-intent\", {\n method: \"POST\",\n headers: {\"Content-Type\": \"application/json\"},\n});\n\nconst {client_secret: clientSecret} = await res.json();\n\nconst handleSubmit = async (event) => {\n event.preventDefault();\n\n if (!stripe) {\n // Stripe.js hasn't yet loaded.\n // Make sure to disable form submission until Stripe.js has loaded.\n return;\n }\n\n setLoading(true);\n\n const {error} = await stripe.confirmCardPayment(clientSecret, {\n payment_method: {\n card: elements.getElement(CardElement)\n }\n });\n\n if (error) {\n handleError(error);\n }\n};\n```\n\n```\nconst handleSubmit = async (event) => {\n event.preventDefault();\n\n if (!stripe) {\n // Stripe.js hasn't yet loaded.\n // Make sure to disable form submission until Stripe.js has loaded.\n return;\n }\n\n setLoading(true);\n\n // Trigger form validation and wallet collection\n const {error: submitError} = await elements.submit();\n if (submitError) {\n handleError(submitError);\n return;\n }\n\n // Create the PaymentIntent and obtain clientSecret\n const res = await fetch(\"/create-intent\", {\n method: \"POST\",\n headers: {\"Content-Type\": \"application/json\"},\n });\n\n const {client_secret: clientSecret} = await res.json();\n\n // Use the clientSecret and Elements instance to confirm the setup\n const {error} = await stripe.confirmPayment({\n elements,\n clientSecret,\n confirmParams: {\n return_url: 'https://example.com/order/123/complete',\n },\n // Uncomment below if you only want redirect for redirect-based payments\n // redirect: \"if_required\",\n });\n\n if (error) {\n handleError(error);\n }\n};\n```\n\n[Handle post-payment\neventsServer-side](https://docs.stripe.com/payments/payment-element/migration#post-payment)\nStripe sends a\n[payment_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-payment_intent.succeeded)\nevent when the payment completes. Use the [Dashboard webhook\ntool](https://dashboard.stripe.com/webhooks) or follow the [webhook\nguide](https://docs.stripe.com/webhooks/quickstart) to receive these events and\nrun actions, such as sending an order confirmation email to your customer,\nlogging the sale in a database, or starting a shipping workflow.\n\nListen for these events rather than waiting on a callback from the client. On\nthe client, the customer could close the browser window or quit the app before\nthe callback executes, and malicious clients could manipulate the response.\nSetting up your integration to listen for asynchronous events is what enables\nyou to accept [different types of payment\nmethods](https://stripe.com/payments/payment-methods-guide) with a single\nintegration.\n\nIn addition to handling the `payment_intent.succeeded` event, we recommend\nhandling these other events when collecting payments with the Payment Element:\n\nEventDescriptionAction[payment_intent.succeeded](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.succeeded)Sent\nwhen a customer successfully completes a payment.Send the customer an order\nconfirmation and fulfill their\norder.[payment_intent.processing](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.processing)Sent\nwhen a customer successfully initiates a payment, but the payment has yet to\ncomplete. This event is most commonly sent when the customer initiates a bank\ndebit. It’s followed by either a `payment_intent.succeeded` or\n`payment_intent.payment_failed` event in the future.Send the customer an order\nconfirmation that indicates their payment is pending. For digital goods, you\nmight want to fulfill the order before waiting for payment to\ncomplete.[payment_intent.payment_failed](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.payment_failed)Sent\nwhen a customer attempts a payment, but the payment fails.If a payment\ntransitions from `processing` to `payment_failed`, offer the customer another\nattempt to pay.[Test the\nintegration](https://docs.stripe.com/payments/payment-element/migration#test-the-integration)CardsWalletsBank\nredirectsBank debitsVouchersCard numberScenarioHow to test4242424242424242The\ncard payment succeeds and doesn’t require authentication.Fill out the credit\ncard form using the credit card number with any expiration, CVC, and postal\ncode.4000002500003155The card payment requires\n[authentication](https://docs.stripe.com/strong-customer-authentication).Fill\nout the credit card form using the credit card number with any expiration, CVC,\nand postal code.4000000000009995The card is declined with a decline code like\n`insufficient_funds`.Fill out the credit card form using the credit card number\nwith any expiration, CVC, and postal code.6205500000000000004The UnionPay card\nhas a variable length of 13-19 digits.Fill out the credit card form using the\ncredit card number with any expiration, CVC, and postal code.\nSee [Testing](https://docs.stripe.com/testing) for additional information to\ntest your integration.\n\n## Links\n\n- [Migrating to the Payment Intents\nAPI](https://docs.stripe.com/payments/payment-intents/migration#web)\n- [Build a checkout page](https://docs.stripe.com/checkout/custom/quickstart)\n- [Payment Intents](https://docs.stripe.com/payments/payment-intents)\n- [payment methods\nsettings](https://dashboard.stripe.com/settings/payment_methods)\n- [Payment method\nsupport](https://docs.stripe.com/payments/payment-methods/payment-method-support)\n- [pricing page](https://stripe.com/pricing/local-payment-methods)\n- [React Stripe.js](https://github.com/stripe/react-stripe-js)\n-\n[fields](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-fields)\n-\n[stripe.confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment)\n- [Payment method integration\noptions](https://docs.stripe.com/payments/payment-methods/integration-options)\n-\n[wallets](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-wallets)\n- [required actions](https://docs.stripe.com/payments/paymentintents/lifecycle)\n- [provides the status of the\npayment](https://docs.stripe.com/payments/accept-a-payment#web-post-payment)\n-\n[redirect](https://docs.stripe.com/js/payment_intents/confirm_payment#confirm_payment_intent-options-redirect)\n-\n[https://example.com/order/123/complete](https://example.com/order/123/complete)\n-\n[payment_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-payment_intent.succeeded)\n- [Dashboard webhook tool](https://dashboard.stripe.com/webhooks)\n- [webhook guide](https://docs.stripe.com/webhooks/quickstart)\n- [different types of payment\nmethods](https://stripe.com/payments/payment-methods-guide)\n-\n[payment_intent.succeeded](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.succeeded)\n-\n[payment_intent.processing](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.processing)\n-\n[payment_intent.payment_failed](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.payment_failed)\n- [authentication](https://docs.stripe.com/strong-customer-authentication)\n- [Testing](https://docs.stripe.com/testing)",
  "metadata": {
    "title": "Migrate to the Payment Element | Stripe Documentation",
    "description": "Accept many payment methods with a single Element.",
    "sourceURL": "https://docs.stripe.com/payments/payment-element/migration"
  }
}