{
  "content": "# Pending updates reference\n\n## Learn more about the pending updates feature.\n\n## Supported attributes\n\nOnly certain attributes can be used to create a pending update. These attributes\neither control proration behavior or generate new\n[invoices](https://docs.stripe.com/api/invoices).\n\nThe supported attributes for the [update\nsubscription](https://docs.stripe.com/api/subscriptions/update) endpoint are:\n\n- `expand`\n- `payment_behavior`\n- `proration_behavior`\n- `proration_date`\n- `billing_cycle_anchor`\n- `items`- `price`\n- `quantity`\n- `trial_end`\n- `trial_from_plan`\n- `add_invoice_items`\n\nThe supported attributes for the [create subscription\nitem](https://docs.stripe.com/api/subscription_items/create) and [update\nsubscription item](https://docs.stripe.com/api/subscription_items/update)\nendpoints are:\n\n- `expand`\n- `payment_behavior`\n- `proration_behavior`\n- `proration_date`\n- `price`\n- `quantity`\n\n## Pending updates lifecycle\n\nIf payment succeeds, the invoice is updated to `paid` and the changes are\napplied to the\n[subscription](https://docs.stripe.com/billing/subscriptions/creating)\nimmediately. If payment fails, the updated values are added to the\n`pending_update` hash on the `Subscription` object. The `latest_invoice` for the\nsubscription refers to an unpaid invoice in an `open` status. The subscription\nwill continue to cycle as if no update request was made.\n\nThere are two ways to [handle payment\nfailures](https://docs.stripe.com/billing/subscriptions/pending-updates#handling-failed-payments).\nThese are related to declines and customer authentication. After resolving these\nissues, payment is attempted again. If the payment succeeds, the changes are\napplied and the `pending_update` hash is cleared. If payment fails again, the\n`pending_update` hash remains on the subscription with the original expiry date\nand no changes are applied.\n\nIf you [cancel a pending\nupdate](https://docs.stripe.com/billing/subscriptions/pending-updates#canceling-changing),\nthe `pending_update` hash is cleared and the associated changes are discarded.\n\n### Expiration\n\nIf you don’t take any action after an update fails, the invoice is voided and\nthe pending update is discarded after the `expired_at` time on the\n`pending_update` has passed. This time is set to either the [trial\nend](https://docs.stripe.com/api/subscriptions/object#subscription_object-trial_end)\ntime or the [current period\nend](https://docs.stripe.com/api/subscriptions/object#subscription_object-current_period_end),\nwhichever comes first. If these times are greater than 23 hours from the time\nthe update is made, the `expired_at` time is calculated to 23 hours after the\nupdate call was made.\n\nStripe also automatically voids the invoice and removes the pending update if\nany of the following occurs:\n\n- The subscription reaches a billing threshold.\n- A subscription schedule linked to the subscription transitions to a new phase.\n\n## Pending updates events\n\nYou can use [webhooks](https://docs.stripe.com/webhooks) to listen for the\nfollowing events related to pending updates:\n\nEventPurpose`customer.subscription.updated`Receive notifications for\nsubscriptions, checking for the `pending_updates` hash and [resolving payment\nfailures](https://docs.stripe.com/billing/subscriptions/pending-updates#handling-failed-payments)\nif needed.`customer.subscription.pending_update_applied`Receive notifications\nwhen pending updates are applied so that you can take further actions like\nupgrading, downgrading, provisioning or deprovisioning services, and so\non.`customer.subscription.pending_update_expired`Receive notifications when\npending updates expire or are automatically voided, and if needed, try the\nupdate request again.\n## Pending updates and subscription schedules\n\nPending updates and [subscription\nschedules](https://docs.stripe.com/billing/subscriptions/subscription-schedules)\ncan both be used to manage subscriptions. If a pending update exists when a\nschedule changes phases, the pending update is discarded and the associated\ninvoice is voided before the phase transition occurs. You can retry the update\nrequest after the phase transition if needed.\n\n## Usage records\n\nIf a subscription includes metered items, Stripe bills any outstanding usage\nrecords on the pending update invoice. However, if payment for the pending\nupdate doesn’t occur before the expiration date, Stripe discards these usage\nrecords, which prevents billing on the subsequent invoice. Additionally, if the\npending update removes a metered price, Stripe disregards any usage reported\nbetween the pending update’s creation and the resulting invoice’s payment,\nexcluding it from all invoices.\n\n## Links\n\n- [invoices](https://docs.stripe.com/api/invoices)\n- [update subscription](https://docs.stripe.com/api/subscriptions/update)\n- [create subscription\nitem](https://docs.stripe.com/api/subscription_items/create)\n- [update subscription\nitem](https://docs.stripe.com/api/subscription_items/update)\n- [subscription](https://docs.stripe.com/billing/subscriptions/creating)\n- [handle payment\nfailures](https://docs.stripe.com/billing/subscriptions/pending-updates#handling-failed-payments)\n- [cancel a pending\nupdate](https://docs.stripe.com/billing/subscriptions/pending-updates#canceling-changing)\n- [trial\nend](https://docs.stripe.com/api/subscriptions/object#subscription_object-trial_end)\n- [current period\nend](https://docs.stripe.com/api/subscriptions/object#subscription_object-current_period_end)\n- [webhooks](https://docs.stripe.com/webhooks)\n- [subscription\nschedules](https://docs.stripe.com/billing/subscriptions/subscription-schedules)",
  "metadata": {
    "title": "Pending updates reference | Stripe Documentation",
    "description": "Learn more about the pending updates feature.",
    "sourceURL": "https://docs.stripe.com/billing/subscriptions/pending-updates-reference"
  }
}