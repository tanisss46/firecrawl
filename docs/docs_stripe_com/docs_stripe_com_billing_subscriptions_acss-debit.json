{
  "content": "# Set up a subscription with pre-authorized debit in Canada\n\n## Learn how to create and charge for a subscription with Canadian pre-authorized debits.\n\n#### Note\n\nSubscription mode in [Checkout](https://docs.stripe.com/payments/checkout) isn’t\nyet supported. To learn about early access when this feature is available,\n[contact\nus](mailto:payment-methods-feedback@stripe.com?subject=PADs%20Subscription%20Mode%20User%20Interest)\nto join the waitlist.\n\n[Create a product and\npriceDashboard](https://docs.stripe.com/billing/subscriptions/acss-debit#create-product-plan-code)\n[Products](https://docs.stripe.com/api/products) represent the item or service\nyou’re selling. [Prices](https://docs.stripe.com/api/prices) define how much and\nhow frequently you charge for a product. This includes how much the product\ncosts, what currency you accept, and whether it’s a one-time or recurring\ncharge. If you only have a few products and prices, create and manage them in\nthe Dashboard.\n\nThis guide uses a stock photo service as an example and charges customers a 15\nCAD monthly subscription. To model this:\n\n- Navigate to the [Add a\nproduct](https://dashboard.stripe.com/test/products/create) page.\n- Enter a **Name** for the product.\n- Enter **15** for the price.\n- Select **CAD** as the currency.\n- Click **Save product**.\n\nAfter you create the product and the price, record the price ID so you can use\nit in subsequent steps. The pricing page displays the ID and it looks similar to\nthis: `price_G0FvDp6vZvdwRZ`.\n\n[Create the\nsubscriptionServer-side](https://docs.stripe.com/billing/subscriptions/acss-debit#create-subscription)\n#### Note\n\nTo create a subscription with a free trial period, see [Subscription\ntrials](https://docs.stripe.com/billing/subscriptions/acss-debit#trial-periods).\n\nCreate a [subscription](https://docs.stripe.com/api/subscriptions) with the\nprice and customer with status `incomplete` by providing the\n[payment_behavior](https://docs.stripe.com/api/subscriptions/create#create_subscription-payment_behavior)\nparameter with the value of `default_incomplete`.\n\n```\ncurl https://api.stripe.com/v1/subscriptions \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"customer\"=\"{{CUSTOMER_ID}}\" \\\n -d \"items[0][price]\"=\"price_F52b2UdntfQsfR\" \\\n -d \"payment_behavior\"=\"default_incomplete\" \\\n -d \"payment_settings[payment_method_types][]\"=\"acss_debit\" \\\n -d \"expand[0]\"=\"latest_invoice.payment_intent\"\n```\n\nIncluded in the response is the\n[subscription](https://docs.stripe.com/billing/subscriptions/creating)’s first\n[PaymentIntent](https://docs.stripe.com/payments/payment-intents), containing\nthe [client\nsecret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret),\nwhich is used on the client side to securely complete the payment process\ninstead of passing the entire PaymentIntent object. Return the `client_secret`\nto the frontend to complete payment.\n\n[Collect payment method details and mandate\nacknowledgmentClient-side](https://docs.stripe.com/billing/subscriptions/acss-debit#collect-payment-and-mandate)\nTo use Canadian pre-authorized debits, you must obtain authorization from your\ncustomer for one-time and recurring debits using a pre-authorized debit\nagreement (see [PAD\nMandates](https://docs.stripe.com/payments/acss-debit#mandates)). The\n[Mandate](https://docs.stripe.com/api/mandates) object records this agreement\nand authorization.\n\nStripe automatically configures subscription and\n[invoice](https://docs.stripe.com/api/invoices) mandates for you. The customer\nonly needs to acknowledge the mandate terms once, subsequent subscription\ncharges will succeed without further intervention.\n\nWhen a customer clicks to pay with Canadian pre-authorized debit, we recommend\nyou use Stripe.js to submit the payment to Stripe.\n[Stripe.js](https://docs.stripe.com/payments/elements) is our foundational\nJavaScript library for building payment flows. It will automatically handle\nintegration complexities, and enables you to easily extend your integration to\nother payment methods in the future.\n\nInclude the Stripe.js script on your checkout page by adding it to the `head` of\nyour HTML file.\n\n```\n<head>\n <title>Checkout</title>\n <script src=\"https://js.stripe.com/v3/\"></script>\n</head>\n```\n\nCreate an instance of Stripe.js with the following JavaScript on your checkout\npage.\n\n```\n// Set your publishable key. Remember to change this to your live publishable\nkey in production!\n// See your keys here: https://dashboard.stripe.com/apikeys\nconst stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n```\n\nRather than sending the entire PaymentIntent object to the client, use its\n[client\nsecret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret)\nfrom the previous step. This is different from your API keys that authenticate\nStripe API requests.\n\nThe client secret should still be handled carefully because it can complete the\ncharge. Do not log it, embed it in URLs, or expose it to anyone but the\ncustomer.\n\nUse\n[stripe.confirmAcssDebitPayment](https://docs.stripe.com/js/payment_intents/confirm_acss_debit_payment)\nto collect bank account details and verification, confirm the mandate, and\ncomplete the payment when the user submits the form. Including the customer’s\nemail address and the account holder’s name in the `billing_details` property of\nthe `payment_method` parameter is required to create a PAD payment method.\n\n```\nconst form = document.getElementById('payment-form');\nconst accountholderName = document.getElementById('accountholder-name');\nconst email = document.getElementById('email');\nconst submitButton = document.getElementById('submit-button');\nconst clientSecret = submitButton.dataset.secret;\n\nform.addEventListener('submit', async (event) => {\n event.preventDefault();\n\n const {paymentIntent, error} = await stripe.confirmAcssDebitPayment(\n clientSecret,\n {\n payment_method: {\n billing_details: {\n name: accountholderName.value,\n email: email.value,\n },\n },\n }\n );\n\n if (error) {\n // Inform the customer that there was an error.\n console.log(error.message);\n } else {\n // Handle next step based on PaymentIntent's status.\n console.log(\"PaymentIntent ID: \" + paymentIntent.id);\n console.log(\"PaymentIntent status: \" + paymentIntent.status);\n }\n});\n```\n\nStripe.js then loads an on-page modal UI that handles bank account details\ncollection and verification, presents a hosted mandate agreement and collects\nauthorization.\n\n#### Note\n\n`stripe.confirmAcssDebitPayment` may take several seconds to complete. During\nthat time, disable your form from being resubmitted and show a waiting indicator\nlike a spinner. If you receive an error, show it to the customer, re-enable the\nform, and hide the waiting indicator.\n\nIf the customer completes instant verification, the subscription automatically\nbecomes `active`. Otherwise, consult the following section to handle\nmicro-deposit verification while the subscription remains `incomplete`.\n\n[Verify bank account with\nmicro-depositsClient-side](https://docs.stripe.com/billing/subscriptions/acss-debit#verify-with-microdeposits)\n#### Note\n\n[Customers](https://docs.stripe.com/api/customers) have 10 days to successfully\nverify micro-deposits for a subscription, instead of 23 hours normally given in\nthe [subscription\nlifecycle](https://docs.stripe.com/billing/subscriptions/overview#subscription-lifecycle).\nHowever, this expiration can’t be later than the [billing cycle\ndate](https://docs.stripe.com/billing/subscriptions/acss-debit#billing-cycle).\n\nNot all customers can verify the bank account instantly. This step only applies\nif your customer has elected to opt out of the instant verification flow in the\nprevious step.\n\nIn this case, Stripe automatically sends two micro-deposits to the customer’s\nbank account. These deposits take 1–2 business days to appear on the customer’s\nonline statement and have statement descriptors that include `ACCTVERIFY`.\n\nThe result of the `stripe.confirmAcssDebitPayment` method call in the previous\nstep is a PaymentIntent in the `requires_action` state. The PaymentIntent\ncontains a `next_action` field that contains some useful information for\ncompleting the verification.\n\nStripe notifies your customer at the [billing\nemail](https://docs.stripe.com/api/payment_methods/object#payment_method_object-billing_details-email)\nwhen the deposits are expected to arrive. The email includes a link to a\nStripe-hosted verification page where they can confirm the amounts of the\ndeposits and complete verification.\n\nThere is a limit of three failed verification attempts. If this limit is\nexceeded, the bank account can no longer be verified. In addition, there is a\ntimeout for micro-deposit verifications of 10 days. If micro-deposits are not\nverified in that time, the PaymentIntent reverts to requiring new payment method\ndetails. Clear messaging about what these micro-deposits are and how you use\nthem can help your customers avoid verification issues.\n\n### Optional: Custom email and verification page\n\nIf you choose to send [custom email\nnotifications](https://docs.stripe.com/payments/acss-debit#mandate-and-debit-notification-emails),\nyou have to email your customer instead. To do this, you can use the\n`verify_with_microdeposits[hosted_verification_url]` URL in the `next_action`\nobject to direct your customer to complete the verification process.\n\nIf you are sending custom emails and don’t want to use the Stripe hosted\nverification page, you can create a form on your site for your customers to\nrelay these amounts to you and verify the bank account using\n[Stripe.js](https://docs.stripe.com/js/payment_intents/verify_microdeposits_for_payment).\n\n```\nstripe.verifyMicrodepositsForPayment(clientSecret, {\n amounts: [32, 45],\n});\n```\n\n[Set the default payment\nmethodServer](https://docs.stripe.com/billing/subscriptions/acss-debit#default-payment-method)\nYou now have an active\n[subscription](https://docs.stripe.com/billing/subscriptions/creating) belonging\nto a customer with a payment method, but this payment method isn’t automatically\nused for future payments. To automatically bill this payment method in the\nfuture, use a [webhook](https://docs.stripe.com/webhooks) consumer to listen to\nthe `invoice.payment_succeeded` event for new subscriptions and set the default\npayment method.\n\n```\n# Set your secret key. Remember to switch to your live secret key in production.\n# See your keys here: https://dashboard.stripe.com/apikeys\nStripe.api_key = 'sk_test_BQokikJOvBiI2HlWgH4olfQ2'\n\nif event.type == 'invoice.payment_succeeded'\n invoice = event.data.object\n if invoice['billing_reason'] == 'subscription_create'\n subscription_id = invoice['subscription']\n payment_intent_id = invoice['payment_intent']\n\n # Retrieve the payment intent used to pay the subscription\n payment_intent = Stripe::PaymentIntent.retrieve(payment_intent_id)\n\n # Set the default payment method\n Stripe::Subscription.update(\n subscription_id,\n default_payment_method: payment_intent.payment_method\n )\n end\nend\n```\n\n[Manage subscription\nstatusClient-side](https://docs.stripe.com/billing/subscriptions/acss-debit#manage-sub-status)\nAssuming the initial payment succeeds, the state of the subscription is `active`\nand requires no further action. When payments fail, the status changes to the\n**Subscription status** configured in your [automatic collection\nsettings](https://docs.stripe.com/invoicing/automatic-collection). Notify the\ncustomer upon failure and [charge them with a different payment\nmethod](https://docs.stripe.com/billing/subscriptions/overview#requires-payment-method).\n\n#### Note\n\nCanadian pre-authorized debit payments are never automatically retried, even if\nyou have a [retry\nschedule](https://docs.stripe.com/invoicing/automatic-collection) configured for\nother payment methods.\n\n[Test your\nintegration](https://docs.stripe.com/billing/subscriptions/acss-debit#test-integration)\n### Receive micro-deposit verification email\n\nIn order to receive the micro-deposit verification email in test mode after\ncollecting the bank account details and accepting a mandate, provide an email in\nthe `payment_method[billing_details][email]` field in the form of\n`{any_prefix}+test_email@{any_domain}` when confirming the payment method\ndetails.\n\n### Test account numbers\n\nStripe provides several test account numbers you can use to make sure your\nintegration for manually-entered bank accounts is ready for production. All test\naccounts that automatically succeed or fail the payment must be verified using\nthe test micro-deposit amounts below before they can be completed.\n\nInstitution NumberTransit NumberAccount\nNumberScenario`000``11000``000123456789`Succeeds the payment immediately after\nmicro-deposits are verified.`000``11000``900123456789`Succeeds the payment with\na three-minute delay after micro-deposits are\nverified.`000``11000``000222222227`Fails the payment immediately after\nmicro-deposits are verified.`000``11000``900222222227`Fails the payment with a\nthree-minute delay after micro-deposits are\nverified.`000``11000``000666666661`Fails to send verification\nmicro-deposits.`000``11000``000777777771`Fails the payment due to the payment\namount causing the account to exceed its weekly payment volume\nlimit.`000``11000``000888888881`Fails the payment due to the payment amount\nexceeding the account’s transaction limit.\nTo mimic successful or failed bank account verifications in test mode, use these\nmeaningful amounts for micro-deposits:\n\nMicro-deposit ValuesScenario`32` and `45`Successfully verifies the account.Any\nother number combinationsFails account verification.[OptionalSetting the billing\ncycle](https://docs.stripe.com/billing/subscriptions/acss-debit#billing-cycle)[OptionalSubscription\ntrials](https://docs.stripe.com/billing/subscriptions/acss-debit#trial-periods)[OptionalSaving\npayment method details for future\nuse](https://docs.stripe.com/billing/subscriptions/acss-debit#save-payment-method-for-future-subscriptions)\n\n## Links\n\n- [Checkout](https://docs.stripe.com/payments/checkout)\n- [Products](https://docs.stripe.com/api/products)\n- [Prices](https://docs.stripe.com/api/prices)\n- [Add a product](https://dashboard.stripe.com/test/products/create)\n- [subscription](https://docs.stripe.com/api/subscriptions)\n-\n[payment_behavior](https://docs.stripe.com/api/subscriptions/create#create_subscription-payment_behavior)\n- [subscription](https://docs.stripe.com/billing/subscriptions/creating)\n- [PaymentIntent](https://docs.stripe.com/payments/payment-intents)\n- [client\nsecret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret)\n- [PAD Mandates](https://docs.stripe.com/payments/acss-debit#mandates)\n- [Mandate](https://docs.stripe.com/api/mandates)\n- [invoice](https://docs.stripe.com/api/invoices)\n- [Stripe.js](https://docs.stripe.com/payments/elements)\n- [https://js.stripe.com/v3/](https://js.stripe.com/v3/)\n- [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys)\n-\n[stripe.confirmAcssDebitPayment](https://docs.stripe.com/js/payment_intents/confirm_acss_debit_payment)\n- [Customers](https://docs.stripe.com/api/customers)\n- [subscription\nlifecycle](https://docs.stripe.com/billing/subscriptions/overview#subscription-lifecycle)\n- [billing\nemail](https://docs.stripe.com/api/payment_methods/object#payment_method_object-billing_details-email)\n- [custom email\nnotifications](https://docs.stripe.com/payments/acss-debit#mandate-and-debit-notification-emails)\n-\n[Stripe.js](https://docs.stripe.com/js/payment_intents/verify_microdeposits_for_payment)\n- [webhook](https://docs.stripe.com/webhooks)\n- [automatic collection\nsettings](https://docs.stripe.com/invoicing/automatic-collection)\n- [charge them with a different payment\nmethod](https://docs.stripe.com/billing/subscriptions/overview#requires-payment-method)",
  "metadata": {
    "title": "Set up a subscription with pre-authorized debit in Canada | Stripe Documentation",
    "description": "Learn how to create and charge for a subscription with Canadian pre-authorized debits.",
    "sourceURL": "https://docs.stripe.com/billing/subscriptions/acss-debit"
  }
}