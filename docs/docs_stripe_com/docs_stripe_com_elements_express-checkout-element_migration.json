{
  "content": "# Migrate to the Express Checkout Element\n\n## Migrate your existing integration with the Payment Request Button Element to the Express Checkout Element.\n\nThe [Payment Request Button\nElement](https://docs.stripe.com/stripe-js/elements/payment-request-button)\nallows you to accept card payments only through [Apple\nPay](https://docs.stripe.com/apple-pay), [Google\nPay](https://docs.stripe.com/google-pay), or\n[Link](https://docs.stripe.com/payments/link). When you migrate to the [Express\nCheckout Element](https://docs.stripe.com/elements/express-checkout-element),\nyou can accept card or [wallet](https://docs.stripe.com/payments/wallets)\npayments through one or more payment buttons, including\n[PayPal](https://docs.stripe.com/payments/paypal). See the [comparison\nguide](https://docs.stripe.com/elements/express-checkout-element/comparison) for\nmore details.\n\nIf your existing integration usesDo the following[Payment\nIntents](https://docs.stripe.com/api/payment_intents) API to create and track\npayments or save card details during a paymentFollow the steps in this guide to\nuse the Express Checkout Element.[Charges](https://docs.stripe.com/api/charges)\nAPI with tokensMigrate to the [Payment Intents\nAPI](https://docs.stripe.com/payments/payment-intents/migration#web) before\nproceeding.[Enable payment\nmethods](https://docs.stripe.com/elements/express-checkout-element/migration#enable-payment-methods)\nEnable the payment methods you want to support in your [payment methods\nsettings](https://dashboard.stripe.com/settings/payment_methods). You must\nenable at least one payment method.\n\nBy default, Stripe enables cards and other common payment methods. You can\nenable additional payment methods that are relevant for your business and\ncustomers. See the [Payment method\nsupport](https://docs.stripe.com/payments/payment-methods/payment-method-support)\nfor product and payment method support and our [pricing\npage](https://stripe.com/pricing/local-payment-methods) for fees.\n\n[Update Elements\ninstanceClient-side](https://docs.stripe.com/elements/express-checkout-element/migration#one-time-update-elements)\nNext, update your client-side code to pass the mode (payment), amount, and\ncurrency. These values determine which payment methods to show to your\ncustomers.\n\nFor example, if you pass the `eur` currency on the `PaymentIntent` and enable\nOXXO in the Dashboard, your customer won’t see OXXO because OXXO doesn’t support\n`eur` payments.\n\nStripe evaluates the currency, payment method restrictions, and other parameters\nto determine the list of supported payment methods. We prioritize payment\nmethods that increase conversion and are most relevant to the currency and\ncustomer location.\n\nHTML + JSReactBeforeAfter\n```\nconst stripe =\n Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\nconst elements = stripe.elements();\n```\n\n```\nconst stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\nconst options = {\n mode: 'payment',\n amount: 1099,\n currency: 'usd',\n};\nconst elements = stripe.elements(options);\n```\n\n[OptionalSave payment details during a\npayment](https://docs.stripe.com/elements/express-checkout-element/migration#one-time-save-payment-details)[Update\nyour PaymentIntent creation\ncallServer-side](https://docs.stripe.com/elements/express-checkout-element/migration#one-time-payment-intent)\nThe `PaymentIntent` includes the payment methods shown to customers during\ncheckout. You can manage payment methods from the\n[Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe\nhandles the return of eligible payment methods based on factors such as the\ntransaction’s amount, currency, and payment flow.\n\n```\ncurl https://api.stripe.com/v1/payment_intents \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -H \"Stripe-Version: 2025-02-24.acacia\" \\\n -d \"amount\"=1099 \\\n -d \"currency\"=\"usd\" \\\n -d \"automatic_payment_methods[enabled]\"=true \\\n```\n\nIf your existing integration supports multiple payment methods or you want to\naccept payment methods other than cards, you can [enable more payment\nmethods](https://dashboard.stripe.com/settings/payment_methods) in the\nDashboard.\n\n[Add the Express Checkout\nElementClient-side](https://docs.stripe.com/elements/express-checkout-element/migration#one-time-add-express-checkout-element)\nReplace the Payment Request Button Element with the Express Checkout Element.\nThe examples below demonstrate how to replace `PaymentRequestButtonElement` with\n`ExpressCheckoutElement`.\n\nYou no longer need to create a `paymentRequest` object. Instead, pass the\noptions when creating the `ExpressCheckoutElement`.\n\nHTML + JSReactBeforeAfter\n```\n<div id=\"payment-request-button\">\n</div>\n```\n\n```\n<div id=\"express-checkout-element\">\n <!-- Mount the Express Checkout Element here -->\n</div>\n```\n\nBeforeAfter\n```\nconst paymentRequest = stripe.paymentRequest({\n country: 'US',\n currency: 'usd',\n total: {\n label: 'Demo total',\n amount: 1099,\n },\n requestPayerName: true,\n requestPayerEmail: true,\n});\nconst paymentRequestButton = elements.create('paymentRequestButton', {\n paymentRequest: paymentRequest,\n});\npaymentRequestButton.mount(\"#payment-request-button\");\npaymentRequest.canMakePayment().then(function(result) {\n if (result) {\n prButton.mount('#payment-request-button');\n } else {\n document.getElementById('payment-request-button').style.display = 'none';\n }\n});\n```\n\n```\nconst expressCheckoutElement = elements.create(\"expressCheckout\", {\n emailRequired: true\n});\nexpressCheckoutElement.mount(\"#express-checkout-element\");\n```\n\n[OptionalRequest an Apple Pay merchant token\n(MPAN)](https://docs.stripe.com/elements/express-checkout-element/migration#mpan)[OptionalListen\nto the ready\nevent](https://docs.stripe.com/elements/express-checkout-element/migration#ready-event)[OptionalStyle\nthe Express Checkout\nElement](https://docs.stripe.com/elements/express-checkout-element/migration#customize-express-checkout-element)[Update\nthe confirm payment\nmethodClient-side](https://docs.stripe.com/elements/express-checkout-element/migration#one-time-update-method)\nListen to the\n[confirm](https://docs.stripe.com/js/elements_object/express_checkout_element_confirm_event)\nevent to handle confirmation. To collect and submit payment information to\nStripe, use\n[stripe.confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment)\ninstead of individual confirmation methods like `stripe.confirmCardPayment`.\n\nInstead of a PaymentMethod ID, `stripe.confirmPayment` uses the Elements\ninstance from the Express Checkout Element and the client secret from the\ncreated `PaymentIntent`.\n\nWhen called, `stripe.confirmPayment` attempts to complete any required actions,\nsuch as authenticating your customers by displaying a 3DS dialog or redirecting\nthem to a bank authorization page. After confirmation completes, users are\ndirected to the\n[return_url](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-return_url)\nthat you configured, which corresponds to a page on your website that provides\nthe payment status.\n\nIf you want the checkout flow for card payments to redirect only for payment\nmethods that require it, you can set\n[redirect](https://docs.stripe.com/js/payment_intents/confirm_payment#confirm_payment_intent-options-redirect)\nto `if_required`. This doesn’t apply to the Express Checkout Element.\n\nThe example below replaces `stripe.confirmCardPayment` with\n`stripe.confirmPayment`.\n\nHTML + JSReactBeforeAfter\n```\npaymentRequest.on('paymentmethod', function(ev) {\n stripe.confirmCardPayment(\n '{{CLIENT_SECRET}}',\n {payment_method: ev.paymentMethod.id},\n {handleActions: false}\n ).then(function(confirmResult) {\n if (confirmResult.error) {\n ev.complete('fail');\n } else {\n ev.complete('success');\n if (confirmResult.paymentIntent.status === \"requires_action\") {\n stripe.confirmCardPayment(clientSecret).then(\n function(result) {\n if (result.error) {\n// The payment failed -- ask your customer for a new payment method.\n } else {\n // The payment succeeded.\n }\n }\n );\n } else {\n // The payment succeeded.\n }\n }\n });\n});\n```\n\n```\nexpressCheckoutElement.on('confirm', async (event) => {\n const {error} = await stripe.confirmPayment({\n // `Elements` instance that's used to create the Express Checkout Element.\n elements,\n // `clientSecret` from the created PaymentIntent\n clientSecret,\n confirmParams: {\n return_url: 'https://example.com/order/123/complete',\n },\n // Uncomment below if you only want redirect for redirect-based payments.\n // redirect: 'if_required',\n });\n\n if (error) {\n// This point is reached only if there's an immediate error when confirming the\npayment. Show the error to your customer (for example, payment details\nincomplete).\n } else {\n // Your customer will be redirected to your `return_url`.\n }\n});\n```\n\n[Handle post-payment\neventsServer-side](https://docs.stripe.com/elements/express-checkout-element/migration#post-payment)\nStripe sends a\n[payment_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-payment_intent.succeeded)\nevent when the payment completes. Use the [Dashboard webhook\ntool](https://dashboard.stripe.com/webhooks) or follow the [webhook\nguide](https://docs.stripe.com/webhooks/quickstart) to receive these events and\nrun actions, such as sending an order confirmation email to your customer,\nlogging the sale in a database, or starting a shipping workflow.\n\nListen for these events rather than waiting on a callback from the client. On\nthe client, the customer could close the browser window or quit the app before\nthe callback executes, and malicious clients could manipulate the response.\nSetting up your integration to listen for asynchronous events is what enables\nyou to accept [different types of payment\nmethods](https://stripe.com/payments/payment-methods-guide) with a single\nintegration.\n\nIn addition to handling the `payment_intent.succeeded` event, we recommend\nhandling these other events when collecting payments with the Payment Element:\n\nEventDescriptionAction[payment_intent.succeeded](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.succeeded)Sent\nwhen a customer successfully completes a payment.Send the customer an order\nconfirmation and fulfill their\norder.[payment_intent.processing](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.processing)Sent\nwhen a customer successfully initiates a payment, but the payment has yet to\ncomplete. This event is most commonly sent when the customer initiates a bank\ndebit. It’s followed by either a `payment_intent.succeeded` or\n`payment_intent.payment_failed` event in the future.Send the customer an order\nconfirmation that indicates their payment is pending. For digital goods, you\nmight want to fulfill the order before waiting for payment to\ncomplete.[payment_intent.payment_failed](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.payment_failed)Sent\nwhen a customer attempts a payment, but the payment fails.If a payment\ntransitions from `processing` to `payment_failed`, offer the customer another\nattempt to pay.\n\n## Links\n\n- [Payment Request Button\nElement](https://docs.stripe.com/stripe-js/elements/payment-request-button)\n- [Apple Pay](https://docs.stripe.com/apple-pay)\n- [Google Pay](https://docs.stripe.com/google-pay)\n- [Link](https://docs.stripe.com/payments/link)\n- [Express Checkout\nElement](https://docs.stripe.com/elements/express-checkout-element)\n- [wallet](https://docs.stripe.com/payments/wallets)\n- [PayPal](https://docs.stripe.com/payments/paypal)\n- [comparison\nguide](https://docs.stripe.com/elements/express-checkout-element/comparison)\n- [Payment Intents](https://docs.stripe.com/api/payment_intents)\n- [Charges](https://docs.stripe.com/api/charges)\n- [Payment Intents\nAPI](https://docs.stripe.com/payments/payment-intents/migration#web)\n- [payment methods\nsettings](https://dashboard.stripe.com/settings/payment_methods)\n- [Payment method\nsupport](https://docs.stripe.com/payments/payment-methods/payment-method-support)\n- [pricing page](https://stripe.com/pricing/local-payment-methods)\n- [React Stripe.js](https://github.com/stripe/react-stripe-js)\n-\n[confirm](https://docs.stripe.com/js/elements_object/express_checkout_element_confirm_event)\n-\n[stripe.confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment)\n-\n[return_url](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-return_url)\n-\n[redirect](https://docs.stripe.com/js/payment_intents/confirm_payment#confirm_payment_intent-options-redirect)\n-\n[https://example.com/order/123/complete](https://example.com/order/123/complete)\n-\n[payment_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-payment_intent.succeeded)\n- [Dashboard webhook tool](https://dashboard.stripe.com/webhooks)\n- [webhook guide](https://docs.stripe.com/webhooks/quickstart)\n- [different types of payment\nmethods](https://stripe.com/payments/payment-methods-guide)\n-\n[payment_intent.succeeded](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.succeeded)\n-\n[payment_intent.processing](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.processing)\n-\n[payment_intent.payment_failed](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.payment_failed)",
  "metadata": {
    "title": "Migrate to the Express Checkout Element | Stripe Documentation",
    "description": "Migrate your existing integration with the Payment Request Button Element to the Express Checkout Element.",
    "sourceURL": "https://docs.stripe.com/elements/express-checkout-element/migration"
  }
}