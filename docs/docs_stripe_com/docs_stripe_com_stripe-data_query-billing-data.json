{
  "content": "# Query billing data\n\n## Use Sigma or Data Pipeline to retrieve billing information.\n\nBilling is made up of different components that work together to provide one-off\n[invoices](https://docs.stripe.com/api/invoices) and periodic billing, with\ndifferent aspects of billing data available across a number of tables. All\nbilling-specific tables are in the **Billing** section of the schema, with the\nprimary tables being `subscriptions` and `invoices`.\n\nTo explore billing data further, you can use the additional tables that\nrepresent the components of subscriptions and invoices, such as `prices`,\n`products`, or `coupons`. In addition, the `customers` table is a fundamental\npart of billing, and contains data you might need to report on.\n\n## Subscriptions\n\nEach row within the `subscriptions` table represents data about an individual\n[Subscription](https://docs.stripe.com/api#subscription_object) object—the same\ninformation that the API retrieves or is available in the [Stripe\nDashboard](https://dashboard.stripe.com/test/subscriptions). You can report on\nevery subscription that you create on your account.\n\nThis table is our recommended starting point for creating reports about your\ncurrent subscribers. You can join this to other related tables, allowing you to\nexplore your data in more detail.\n\n!\n\nThe following example retrieves a list of subscriptions that have been marked as\nunpaid, along with any available contact information for the customer.\n\n```\nselect\n subscriptions.id,\n subscriptions.customer_id,\n customers.email\nfrom subscriptions\ninner join customers\n on customers.id = subscriptions.customer_id\nwhere\n subscriptions.status = 'unpaid'\nlimit 5\n```\n\nidcustomer_idemailsub_SxpjMlQgvZZ8ofjcus_87bMt18IORpkNt0jenny.rosen@example.comsub_YsNdmQ0yFOhQFeDcus_fsucVFdcBpYFio0noah.wilson@example.comsub_VbomXNGp0RUpVipcus_m5r0wqkzoP6RHvJjoshua.miller@example.comsub_emx0gd34RzifhKScus_OHuLqPEDMfmhJg4madison.jackson@example.comsub_0zACzOECHHvXI77cus_tUTHZC4EPY5ZG95elijah.smith@example.com\n## Customers\n\nData about [Customer](https://docs.stripe.com/api#customers) objects are\ncontained in the `customers` table (this isn’t part of the Billing Tables\ngroup). It’s commonly used as part of billing-based reports and can be joined to\na number of tables. It’s also useful if you’re creating\n[charges](https://docs.stripe.com/stripe-data/query-transactions) with saved\npayment information.\n\n!\n\nThe following example retrieves a list of customers with subscriptions that are\ncurrently in a trial period. It retrieves both the ID and email address for each\ncustomer.\n\n```\nselect\n customers.id,\n customers.email,\n subscriptions.price_id\nfrom subscriptions\ninner join customers\non customers.id = subscriptions.customer_id\nwhere subscriptions.status = 'trialing'\nlimit 5\n```\n\nidemailprice_idcus_KtePdZXEiRJWH1Tjenny.rosen@example.comruby-pro-522cus_fu1l3GBsdrUVm4Snoah.wilson@example.comruby-pro-522cus_vGnHKoNf18B8lHirichard.jones@example.comgold-basic-221cus_Yu6zeqKpMkm8sX1madison.jackson@example.comgold-basic-221cus_yF8ivJdxcBdpBixelijah.smith@example.comsilver-pro-498\n## Products and prices\n\nProducts describe items that your customers can purchase with a subscription.\nPrices are tied to products and set out the cost, billing interval, and\ncurrency. When you view data from the `subscriptions` table, you can join it\nwith `subscription_items`. Additionally, you can join it to `products.id` by\nusing the `price_product_id` from the item.\n\nThe following example returns a list of active subscriptions along with the\nproduct name and its statement descriptor:\n\n```\nwith active_subscriptions as (\n select\n s.id as subscription_id,\n p.name as product_name,\n p.statement_descriptor\n from subscriptions s\n join subscription_items si on s.id = si.subscription_id\n join products p on si.price_product_id = p.id\n where s.status = 'active'\n)\nselect\n subscription_id,\n subscription_item_id,\n price_id,\n product_name,\n statement_descriptor\nfrom active_subscriptions\norder by 1,2\n```\n\nidnamestatement_descriptorsub_SGEkF4tmKVnMUwlruby-pro-522Ruby\nProsub_sYTzRpuXc28Pe1Ggold-basic-221Gold\nBasicsub_spzBiZsTolzGnKZsilver-pro-498Silver\nProsub_pxyLUVfj8LeShU8diamond-mid-244Diamond\nMidsub_aHY164oTBQMvBzeruby-standard-196Ruby Standard\n## Price tiers\n\nWhile using prices with\n[tiers](https://docs.stripe.com/products-prices/pricing-models#tiered-pricing)\nin your subscriptions, the `price_tiers` table can provide specific data about\neach tier. For instance, if you want to understand the initial tier of your\nsubscriptions, including the maximum quantity for the first tier and the used\nunit amount, refer to the following query:\n\n```\nwith subscription_item_prices as (\n select\n si.subscription_id,\n si.price_id,\n p.currency\n from\n subscription_items si\n join prices p on si.price_id = p.id\n),\nprice_tier_details as (\n select\n sp.subscription_id,\n pt.price_id,\n pt.upto,\n stringify_amount(sp.currency, pt.amount, '.') as tier_price,\n sp.currency\n from\n subscription_item_prices sp\n join price_tiers pt on sp.price_id = pt.price_id\n)\nselect\n ptd.subscription_id,\n ptd.price_id,\n ptd.upto,\n ptd.tier_price,\n ptd.currency\nfrom\n price_tier_details ptd\norder by\n ptd.subscription_id,\n ptd.price_id,\n ptd.upto asc\n```\n\nsubscription_idprice_iduptotier_pricecurrencysub_pzzGxfGDvxBRZy6price_IEyS0q5Dt1gcDDy302.00usdsub_ZRne6VQuus7UDfsprice_cqzzTbMeLFkdYem601.00usdsub_W8X58k6DY5PJYgyprice_UakHxJpheQG6VT4900.50usd\n## Invoices\n\nThe `invoices` table contains data about individual\n[Invoice](https://docs.stripe.com/api#invoice_object) objects. Each subscription\ngenerates an invoice on a recurring basis that represents the amount the\ncustomer owes. This automatically includes the amount required for the\nsubscription, and any additional [invoice\nitems](https://docs.stripe.com/api#invoiceitems) that might have been created\n(listed as line items).\n\nInvoices are comprised of individual ([invoice) line\nitems](https://docs.stripe.com/api#invoice_line_item_object). These line items\nrepresent any subscriptions that the customer is billed for, and invoice items\nthat have been created and applied to the invoice. To break down an invoice and\nanalyze each of its line items, use the `invoice_line_items` table.\n\nThe `source_id` column of this table contains the **ID** of either the\nsubscription (for example, `sub_HPfmFbLLWdeHCNs`) or invoice item (for example,\n`ii_QMcvCqGgXqOkgjC`) that the line item corresponds to. The `source_type`\ncolumn reflects whether the line items represent a subscription or an invoice\nitem.\n\nUnlike other foreign keys, the `subscription` column of the `invoice_line_items`\ntable isn’t always populated. If the corresponding invoice item is a\nsubscription, this column is blank—its **ID** already appears in the `source_id`\ncolumn.\n\n### Invoice items\n\nData about [Invoice items](https://docs.stripe.com/api#invoiceitems) is provided\nin the `invoice_items` table. Invoice items are commonly used to specify an\nadditional amount (or deduct an amount) that’s applied on the next invoice at\nthe beginning of the next billing cycle. For example, you would create an\ninvoice item if you need to bill your customer for exceeding their monthly\nallowance, or if you need to provide a credit on the next invoice for unused\nservice.\n\n!\n\nThe following example retrieves all the invoices and associated charge IDs for a\nparticular subscription.\n\n```\nselect\n id,\n charge_id,\n amount_due\nfrom invoices\nwhere subscription_id = 'sub_ALJXL9gBYtv6GJ'\n```\n\nidnamein_NxAYzGLVhgrGqfrch_57bw8qMc5yPcjqj1999in_jclHyunFsOjbLpsch_Yrts3pVMACSRGYC1999in_viXWIBsEh2JpAuZ1999ch_RkBvZgQvqYhyX72in_6obC7vri5Kr6bXx1999ch_XuAoeXpU5i1SIjmin_pDbtvmeNtEg4Z741999ch_M2xh6bWmewyJaxi\n### Invoice totals and discounts\n\nThe invoice subtotal represents the amount of all subscriptions, invoice items,\nand prorations on the invoice before any discount is applied. The invoice total\nis the amount after discounts and tax have been applied:\n\n`invoice.total` = `invoice.subtotal` - `discount` + `invoice.tax`\n\nThere is no column to represent the discount amount on an invoice. Instead, you\ncan calculate this by aggregating the line items’ discount amounts. The\nfollowing query returns a list of invoices, their period start and end, the\ntotal discounted amount for the invoice.\n\n```\nwith invoices_with_discounts as (\n select\n invoice_id,\n sum(amount) as total_discount_amount\n from\n invoice_line_item_discount_amounts\n group by\n invoice_id\n)\nselect\n i.id as invoice_id,\n i.period_start,\n i.period_end,\nstringify_amount(i.currency, ilda.total_discount_amount, '.') as\ntotal_discount_amount\n i.currency\nfrom\n invoices i\n join invoices_with_discounts ilda on i.id = ilda.invoice_id\norder by i.id\n```\n\ninvoice_idperiod_startperiod_endtotal_discount_amountcurrencyin_DFm0gJ8PUqsugg82024-05-012024-06-0124.66usdin_PfY45SduNk4gnO02024-06-012024-07-0124.34usdin_WHBE03lxz7IKgcQ2024-04-012024-05-0145.96usd\n### Working with invoice dates and periods\n\nSubscription invoices are pre-billed, meaning the customer makes the payment at\nthe beginning of a billing cycle. This is represented in a line item’s `period`\nvalue. For example, a customer with a monthly subscription is billed at the\nstart of each month. If they choose to\n[cancel_at_period_end](https://docs.stripe.com/api/subscriptions/object#subscription_object-cancel_at_period_end),\ntheir subscription stays active until the month’s end, after which the\nsubscription ends.\n\nThe `period_start` and `period_end` values of an invoice represents when invoice\nitems might have been created–it’s not always definitive of the period of\nservice that the customer is being billed for. For example, if a customer is\nbilled on the 1st of each month and exceeds their monthly allowance on the 15th,\nyou might create an invoice item for any additional costs that the customer is\ncharged for. This invoice item is then included in the next invoice, which is\ncreated on the 1st of the next month. When the next invoice is generated, the\n`period_start` date would be the 15th of the previous month—the date the\nadditional line item is first created.\n\n## Usage based billing\n\n[Usage-based billing](https://docs.stripe.com/billing/subscriptions/usage-based)\nenables you to charge customers based on their usage of your product or service.\n\n### Billing meters\n\nA [Meter](https://docs.stripe.com/api/billing/meter) object specifies how to\naggregate meter events over a billing period. Meter events represent all actions\nthat customers take in your system (for example, API requests). Meters attach to\nprices and form the basis of what’s billed. These objects are available through\nthe `billing_meters` table.\n\nThe following query returns all active billing meters.\n\n```\nselect\n id,\n status,\n display_name,\n default_aggregation_formula\nfrom\n billing_meters\nwhere\n status = 'ACTIVE'\n and livemode\n```\n\nIDstatusdisplay_namedefault_aggregation_formulamtr_BFRDIsNMEalZysZACTIVEalpaca_ai_tokenSUMmtr_5ebzRp0N6h1J97XACTIVEalpaca_ai_image_tokenCOUNT\n### Billing meter event summaries\n\nA [Billing Meter Event\nSummary](https://docs.stripe.com/api/billing/meter-event-summary) object\nrepresents an aggregated view of a customer’s billing meter events within a\nspecified timeframe. It represents how much usage a customer accrues for that\nperiod. These objects are available through the `billing_meter_event_summaries`\ntable. Hourly summaries are available, as indicated by the\n`value_grouping_window` column.\n\nThe following query returns a sum of billing meter events for a specific\ncustomer.\n\n```\nselect\n billing_meters.display_name,\n sum(billing_meter_event_summaries.aggregated_value) AS total_usage\nfrom\n billing_meter_event_summaries\njoin billing_meters on billing_meters.id =\nbilling_meter_event_summaries.meter_id\nwhere\n billing_meter_event_summaries.customer_id = 'cus_EDQkYj7P2Jf3sJ1'\n and billing_meter_event_summaries.start_time >= timestamp '2025-02-01 08:00'\n and billing_meter_event_summaries.end_time <= timestamp '2025-02-01 20:00'\n and value_grouping_window = 'hourly'\ngroup by\n display_name\n```\n\ndisplay_nametotal_usagealpaca_ai_token928943alpaca_ai_image_token50\n### Billing meter invalid events\n\nA [Billing Meter Invalid\nEvent](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage-api#handle-meter-event-errors)\nobject represents a billing meter event that isn’t successfully validated. These\nobjects are available through the `billing_meter_invalid_events` table. The\nassociated `billing_meter_invalid_events_payload` table contains the event\npayload from the original event.\n\nThe following query returns all invalid billing meter events for a specific\ncustomer.\n\n```\nSELECT\n billing_meter_invalid_events.id as event_id,\n billing_meter_invalid_events.error_code,\n billing_meter_invalid_events.error_message\nFROM\n billing_meter_invalid_events\nJOIN billing_meter_invalid_events_payload ON\nbilling_meter_invalid_events_payload.event_id = billing_meter_invalid_events.id\nWHERE\n billing_meter_invalid_events_payload.key = 'stripe_customer_id'\n AND billing_meter_invalid_events_payload.value = 'cus_EDQkYj7P2Jf3sJ1'\n```\n\nevent_iderror_codeerror_messageudQnNCr2_CcVC_sBb4_Z4gk_5Dc6EQbd5otxMETER_NOT_FOUNDNo\nmeter found matching event_name\nmtr_QkD7t5nqIUp621p.9hGo9KRJ_mPFl_B1Jn_EkOl_Nx5pkHqyht6pMETER_NOT_FOUNDNo meter\nfound matching event_name mtr_3dHLDTwDOPHJLIY.\n## Coupons\n\nA [Coupon](https://docs.stripe.com/billing/subscriptions/coupons) object\nrepresents an amount or percentage-off discount that you can apply to\nsubscriptions or customers.\n\n```\nselect\n coupons.id,\n coupons.amount_off,\n coupons.percent_off\nfrom coupons\nwhere valid = false\nlimit 5\n```\n\nidamount_offpercent_off10FF10SUMMER252510FREE1015OFF15FALL3030\n## Discounts\n\nA discount is the application of a coupon, represented by a\n[Discount](https://docs.stripe.com/api#discounts) object. The following query\nreturns a list of subscriptions and their associated discounts and coupons:\n\n```\nselect\n subscriptions.id as subscription_id,\n t.discount_id,\n coupons.id as coupon_id\nfrom\n subscriptions\n cross join unnest(split(subscriptions.discounts, ',')) as t(discount_id)\n join discounts on discounts.id = t.discount_id\n join coupons on coupons.id = discounts.coupon_id\nlimit 3\n```\n\nsubscription_iddiscount_idcoupon_idsub_RIn5T5gk8wHEzqAdi_lj1OG91I5FPPgyS10OFFsub_k1ODFwB6yikeL0fdi_uH5driyVKblVAXN25OFFsub_8PzSWpFOuNk8lbQdi_uihvCPpCkknMxTe10FREE\n## Promotion codes\n\nA [promotion code](https://docs.stripe.com/api/promotion_codes) represents a\ncustomer-redeemable code for a\n[coupon](https://docs.stripe.com/billing/subscriptions/coupons). The following\nquery provides a list of promotion codes pertaining to a specific coupon and\ndisplays the number of times each code has been redeemed:\n\n```\nselect\n promotion_codes.id as promotion_code_id,\n promotion_codes.code as promotion_code,\n promotion_codes.times_redeemed\nfrom\n promotion_codes\nlimit 3\n```\n\npromotion_code_idcodetimes_redeemedpromo_1LziIu6opFRCIrz10OFF1promo_1ZRCQw2SRF7ug8X25OFF2promo_HS7xjxu4h8V81Ui10FREE3\n## Subscription Item Change Events\n\nThe `subscription_item_change_events` table tracks changes to subscription items\nthat affect [Monthly Recurring Revenue\n(MRR)](https://support.stripe.com/questions/calculating-monthly-recurring-revenue-(mrr)-in-billing)\nand subscription quantities. Use this table to calculate MRR for individual\ncustomers, products, or plans, to create custom metric definitions for your\nbusiness models, and to track subscription quantity changes.\n\n#### Caution\n\nThis table provides more up-to-date data than the source driving the MRR metrics\non the Billing overview in the Stripe Dashboard. This means the data for the\nlast and current day’s MRR here could be more accurate and could differ from\nwhat you see in the Dashboard.\n\n### local_event_timestamp and event_timestamp\n\nThis table includes two timestamp columns:\n\n- `event_timestamp`: This is the UTC timestamp.\n- `local_event_timestamp`: This timestamp is in your local timezone, typically\nthe timezone of the person who created your Stripe account.\n\n### currency\n\nHere, you’ll find the subscription item’s settlement currency as a three-letter\n[ISO currency code](https://docs.stripe.com/currencies) in lowercase. The\ncurrency must be one that Stripe [supports](https://docs.stripe.com/currencies).\n\n### mrr_change\n\nThe `mrr_change` column shows the positive or negative impact of an event on\nyour MRR in the subscription item’s settlement currency’s minor unit (such as\ncents for USD).\n\n### quantity_change\n\nThe `quantity_change` column shows the associated positive or negative change in\nthe quantity of a subscription item that a customer subscribes to.\n\n### event_type\n\nEvent typeDefinitionACTIVE_STARTThe subscription item started contributing to\nMRR.ACTIVE_ENDThe subscription item stopped contributing to\nMRR.ACTIVE_UPGRADEThe MRR contribution of the subscription item increased. This\ncan occur when the price of a subscription item increases or if the quantity of\nthat subscription item increases.ACTIVE_DOWNGRADEThe MRR contribution of the\nsubscription item decreased. This can occur when the price of a subscription\nitem decreases or if the quantity of that subscription item\ndecreases.ACTIVE_QUANTITY_INCREASEThe quantity of the subscription item\nincreased, but the MRR wasn’t impacted. You might see this if you use tiered\npricing and the quantity needs to exceed a certain threshold before the price\nchanges.ACTIVE_QUANTITY_DECREASEThe quantity of the subscription item decreased,\nbut the MRR wasn’t impacted. You might see this if you use tiered pricing and\nthe quantity needs to go below a certain threshold before the price changes.\n#### Note\n\nSome user actions can create multiple events, so you could see an event with an\n`event_type` of `ACTIVE_END` on one item and then immediately an event with an\n`event_type` of `ACTIVE_START` on another item for the same `subscription_id`.\n\n### Other columns\n\nOther columns (`product_id`, `price_id`, `customer_id`, `subscription_id`, and\n`subscription_item_id`) hold IDs related to the subscription item change event.\n\n### Example queries\n\nFor additional and most up to date examples, please reference the [Subscriptions\nsection of query template library in Sigma\nsidebar](https://dashboard.stripe.com/sigma/queries).\n\nTo calculate the monthly recurring revenue (MRR) and the number of active\nsubscribers from this table, you’ll need to use window functions. Additionally,\nif you have customers using different currencies, you’ll need to perform foreign\ncurrency exchange calculations. The calculation aims to track monthly MRR and\nthe evolution of active subscribers, distinguishing between new additions,\nreactivations, expansions, contractions, and churns. The final results are\npresented in minor currency units, such as cents for USD.\n\n```\nWITH ts_grouped_sub_item_events AS (\n SELECT\n local_event_timestamp,\n customer_id,\n currency,\n sum(mrr_change) AS mrr_change\n FROM\n subscription_item_change_events\n GROUP BY\n 1,\n 2,\n 3\n),\nts_grouped_sub_item_events_with_mrr AS (\n SELECT\n *,\n date_trunc(\n 'day',\n date(local_event_timestamp)\n ) AS local_event_date,\n -- Stripe defines an \"active subscriber\" as a customer with non-zero MRR.\n-- Therefore instead of summing up event_type to get subscription count (and its\ndiff),\n-- We count the amount of revenue on each customer instead and later check its\nmovement from / to zero\n sum(mrr_change) over (\n PARTITION by customer_id\n ORDER BY\n local_event_timestamp ASC\n ) AS mrr,\n-- We count the # of times MRR has actually changed, and use nullif to ignore\nevents that do not impact MRR\n -- Otherwise we may confuse between new vs. reactivation\n count(nullif(mrr_change, 0)) over (\n PARTITION by customer_id\n ORDER BY\n local_event_timestamp ASC\n ) AS mrr_change_count\n FROM\n ts_grouped_sub_item_events\n),\nts_grouped_sub_item_events_with_previous_mrr AS (\n SELECT\n *,\n coalesce(\n last_value(mrr) IGNORE nulls OVER (\n PARTITION by customer_id\n ORDER BY\n local_event_timestamp ASC ROWS BETWEEN UNBOUNDED PRECEDING\n AND 1 PRECEDING\n ),\n 0\n ) AS previous_mrr\n FROM\n ts_grouped_sub_item_events_with_mrr\n),\ncustomer_events AS (\n SELECT\n *,\n CASE\n WHEN mrr = 0\n AND previous_mrr > 0 THEN 'ACTIVE_END'\n WHEN mrr > 0\n AND previous_mrr = 0\n AND mrr_change_count = 1 THEN 'ACTIVE_START'\n WHEN mrr > 0\n AND previous_mrr = 0\n AND mrr_change_count > 1 THEN 'REACTIVATE'\n WHEN mrr > previous_mrr THEN 'ACTIVE_UPGRADE'\n WHEN mrr < previous_mrr THEN 'ACTIVE_DOWNGRADE'\n ELSE NULL\n END AS cus_event_type\n FROM\n ts_grouped_sub_item_events_with_previous_mrr\n),\ndate_grouped_customer_events AS (\n SELECT\n local_event_date,\n currency,\n sum(mrr_change) AS mrr_change,\n sum(\n CASE\n cus_event_type\n WHEN 'ACTIVE_START' THEN mrr_change\n ELSE 0\n END\n ) AS new_mrr,\n sum(\n CASE\n cus_event_type\n WHEN 'REACTIVATE' THEN mrr_change\n ELSE 0\n END\n ) AS reactivation_mrr,\n sum(\n CASE\n cus_event_type\n WHEN 'ACTIVE_UPGRADE' THEN mrr_change\n ELSE 0\n END\n ) AS expansion_mrr,\n sum(\n CASE\n cus_event_type\n WHEN 'ACTIVE_DOWNGRADE' THEN mrr_change\n ELSE 0\n END\n ) AS contraction_mrr,\n sum(\n CASE\n cus_event_type\n WHEN 'ACTIVE_END' THEN mrr_change\n ELSE 0\n END\n ) AS churn_mrr,\n sum(\n CASE\n WHEN mrr = 0\n AND previous_mrr > 0 THEN -1\n WHEN mrr > 0\n AND previous_mrr = 0 THEN 1\n ELSE 0\n END\n ) AS active_subscribers_change,\n sum(\n CASE\n cus_event_type\n WHEN 'ACTIVE_END' THEN 1\n ELSE 0\n END\n ) AS churned_subscribers,\n sum(\n CASE\n cus_event_type\n WHEN 'ACTIVE_START' THEN 1\n ELSE 0\n END\n ) AS new_subscribers,\n sum(\n CASE\n cus_event_type\n WHEN 'REACTIVATE' THEN 1\n ELSE 0\n END\n ) AS reactivated_subscribers\n FROM\n customer_events\n GROUP BY\n 1,\n 2\n),\n-- Prepare the multi dimensional table with all days + currency combinations and\nconversion rate metadata\n-- note that exchange_rates_from_usd contains one row for every date from\n2010-01-07 until today\n-- which is why we don't need to generate a separate date series for the full\ntable\ndates_with_rate_per_usd AS (\n SELECT\n -- We use previous day's closing rates in precomputed metrics\n date - INTERVAL '1' DAY AS fx_date,\n cast(\n json_parse(buy_currency_exchange_rates) AS map(varchar, double)\n ) AS rate_per_usd\n FROM\n exchange_rates_from_usd\n),\ncurrencies AS (\n SELECT\n DISTINCT(currency)\n FROM\n subscription_item_change_events\n),\nfirst_default_currency AS (\n SELECT\n default_currency\n FROM\n accounts\n WHERE\n default_currency IS NOT NULL\n LIMIT\n 1\n),\ndates_x_currencies_with_conversion_rate AS (\n SELECT\n fx_date as local_date,\n currency,\n default_currency,\n1 / rate_per_usd [currency] * rate_per_usd [coalesce(default_currency, 'usd')]\nAS conversion_rate\n FROM\n dates_with_rate_per_usd\n CROSS JOIN currencies\n CROSS JOIN first_default_currency\n ORDER BY\n 1,\n 2\n),\ndaily_metrics_by_currency AS (\n SELECT\n dpc.local_date,\n dpc.currency,\n dpc.conversion_rate,\n coalesce(\n sum(mrr_change) over (\n PARTITION by dpc.currency\n ORDER BY\n dpc.local_date ASC\n ),\n 0\n ) AS mrr,\n coalesce(\n round(\n sum(mrr_change) over (\n PARTITION by dpc.currency\n ORDER BY\n dpc.local_date ASC\n ) * dpc.conversion_rate\n ),\n 0\n ) AS converted_mrr,\n coalesce(round(new_mrr * conversion_rate), 0) AS converted_new_mrr,\ncoalesce(round(reactivation_mrr * conversion_rate), 0) AS\nconverted_reactivation_mrr,\ncoalesce(round(expansion_mrr * conversion_rate), 0) AS converted_expansion_mrr,\ncoalesce(round(contraction_mrr * conversion_rate), 0) AS\nconverted_contraction_mrr,\n coalesce(round(churn_mrr * conversion_rate), 0) AS converted_churn_mrr,\n coalesce(dgce.mrr_change, 0) AS mrr_change,\n coalesce(dgce.new_mrr, 0) AS new_mrr,\n coalesce(dgce.reactivation_mrr, 0) AS reactivation_mrr,\n coalesce(dgce.expansion_mrr, 0) AS expansion_mrr,\n coalesce(dgce.contraction_mrr, 0) AS contraction_mrr,\n coalesce(dgce.churn_mrr, 0) AS churn_mrr,\n coalesce(\n sum(active_subscribers_change) over (\n PARTITION by dpc.currency\n ORDER BY\n dpc.local_date ASC\n ),\n 0\n ) AS active_subscribers,\n coalesce(dgce.active_subscribers_change, 0) AS active_subscribers_change,\n coalesce(dgce.churned_subscribers, 0) AS churned_subscribers,\n coalesce(dgce.new_subscribers, 0) AS new_subscribers,\n coalesce(dgce.reactivated_subscribers, 0) AS reactivated_subscribers\n FROM\n dates_x_currencies_with_conversion_rate dpc\nLEFT JOIN date_grouped_customer_events dgce ON dpc.local_date =\ndgce.local_event_date\n AND dpc.currency = dgce.currency\n),\ndaily_metrics AS (\n SELECT\n local_date,\n sum(converted_mrr) AS mrr,\n sum(converted_new_mrr) AS new_mrr,\n sum(converted_reactivation_mrr) AS reactivation_mrr,\n sum(converted_expansion_mrr) AS expansion_mrr,\n sum(converted_contraction_mrr) AS contraction_mrr,\n sum(converted_churn_mrr) AS churn_mrr,\n-- Customer can only have active subscription in a single currency at a time, as\na result this does not result in over-counting subscriber changes\n-- This also matches the precomputed metrics logic in billing dashboard / CSV\ndownload\n sum(active_subscribers) AS active_subscribers,\n sum(churned_subscribers) AS churned_subscribers,\n sum(new_subscribers) AS new_subscribers,\n sum(reactivated_subscribers) AS reactivated_subscribers\n FROM\n daily_metrics_by_currency\n GROUP BY\n 1\n),\ndaily_metrics_with_derived AS (\n SELECT\n *,\n mrr - lag(mrr) over (\n ORDER BY\n local_date\n) - new_mrr - reactivation_mrr - expansion_mrr - contraction_mrr - churn_mrr AS\nfx_adjustment_mrr,\n lag(mrr) over (\n ORDER BY\n local_date\n ) AS previous_mrr\n FROM\n daily_metrics\n),\n-- Turn daily into monthly metrics\nmonthly_metrics_with_derived AS (\n SELECT\n date_trunc('month', local_date) AS local_month_start,\n max_by(mrr, local_date) AS ending_mrr,\n sum(new_mrr) AS new_mrr,\n sum(reactivation_mrr) AS reactivation_mrr,\n sum(expansion_mrr) AS expansion_mrr,\n sum(contraction_mrr) AS contraction_mrr,\n sum(churn_mrr) AS churn_mrr,\n sum(fx_adjustment_mrr) AS fx_adjustment_mrr,\n max_by(active_subscribers, local_date) AS ending_subscribers,\n sum(churned_subscribers) AS churned_subscribers,\n sum(new_subscribers) AS new_subscribers,\n sum(reactivated_subscribers) AS reactivated_subscribers\n FROM\n daily_metrics_with_derived\n GROUP BY\n 1\n)\nSELECT\n local_month_start,\nending_mrr - fx_adjustment_mrr - churn_mrr - contraction_mrr - expansion_mrr -\nreactivation_mrr - new_mrr AS beginning_mrr,\n new_mrr,\n reactivation_mrr,\n expansion_mrr,\n contraction_mrr,\n churn_mrr,\n fx_adjustment_mrr,\n ending_mrr,\n-- Churned subscribers is a positive number in CSV reports instead of negative\nfor churn / contraction mrr\nending_subscribers - (-1 * churned_subscribers) - reactivated_subscribers -\nnew_subscribers AS beginning_subscribers,\n new_subscribers,\n reactivated_subscribers,\n churned_subscribers,\n ending_subscribers\nFROM\n monthly_metrics_with_derived\nORDER BY\n 1 DESC\n```\n\nlocal_month_startbeginning_mrrnew_mrrreactivation_mrrexpansion_mrrcontraction_mrrchurn_mrrfx_adjustment_mrrending_mrrbeginning_subscribersnew_subscribersreactivated_subscriberschurned_subscribersending_subscribers2024-05-011000721491040000400000001002161499300122024-04-011000651497180000-18001000721497300122024-03-01100066099124000-10740100065149720272024-02-011000660991000000-10000100066099710172024-01-011000381022921601998-175-30420100066099540272023-12-01100038102000000100038102500052023-11-01100037102100000000100038102410052023-10-01100037102000000100037102400042023-09-01100037102000000100037102400042023-08-011000339020050000-18000100037102500142023-07-011000370650000-3159-4100033902600152023-06-0110003640235336900-27421100037065613462023-05-011000348982748030437-83-315980100036402730462023-04-01100034065933000-1000100034898620172023-03-011000027153135000000100034065420062023-02-011000060486086060880-155070100002715520342023-01-011000060483043000-30430100006048510152022-12-011001521342591001363600-30000-1505574-221000060489601052022-11-01100178232486883333621878-10600-689397010015213471611592022-10-0110003619313633312000020600-10000-124894010017823274267\n\n## Links\n\n- [invoices](https://docs.stripe.com/api/invoices)\n- [Subscription](https://docs.stripe.com/api#subscription_object)\n- [Stripe Dashboard](https://dashboard.stripe.com/test/subscriptions)\n- [Customer](https://docs.stripe.com/api#customers)\n- [charges](https://docs.stripe.com/stripe-data/query-transactions)\n- [tiers](https://docs.stripe.com/products-prices/pricing-models#tiered-pricing)\n- [invoices](https://docs.stripe.com/invoicing/overview)\n- [Invoice](https://docs.stripe.com/api#invoice_object)\n- [invoice items](https://docs.stripe.com/api#invoiceitems)\n- [invoice) line items](https://docs.stripe.com/api#invoice_line_item_object)\n-\n[cancel_at_period_end](https://docs.stripe.com/api/subscriptions/object#subscription_object-cancel_at_period_end)\n- [Usage-based\nbilling](https://docs.stripe.com/billing/subscriptions/usage-based)\n- [Meter](https://docs.stripe.com/api/billing/meter)\n- [Billing Meter Event\nSummary](https://docs.stripe.com/api/billing/meter-event-summary)\n- [Billing Meter Invalid\nEvent](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage-api#handle-meter-event-errors)\n- [Coupon](https://docs.stripe.com/billing/subscriptions/coupons)\n- [Discount](https://docs.stripe.com/api#discounts)\n- [promotion code](https://docs.stripe.com/api/promotion_codes)\n- [Monthly Recurring Revenue\n(MRR)](https://support.stripe.com/questions/calculating-monthly-recurring-revenue-(mrr)-in-billing)\n- [ISO currency code](https://docs.stripe.com/currencies)\n- [Subscriptions section of query template library in Sigma\nsidebar](https://dashboard.stripe.com/sigma/queries)",
  "metadata": {
    "title": "Query billing data | Stripe Documentation",
    "description": "Use Sigma or Data Pipeline to retrieve billing information.",
    "sourceURL": "https://docs.stripe.com/stripe-data/query-billing-data"
  }
}