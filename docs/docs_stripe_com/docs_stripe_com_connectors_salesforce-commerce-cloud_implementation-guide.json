{
  "content": "# Stripe Connector for Salesforce B2C Commerce implementation guide\n\n## Set up Business Manager\n\nThe Stripe Connector for Salesforce B2C Commerce (LINK Cartridge) requires\nseveral cartridges for full functionality. Additionally, controller and SFRA\nsupport is broken out into two separate cartridges, thereby facilitating the\ninstallation and use of one or the other models.\n\nImport all three cartridges into UX studio and associate them with a Server\nConnection.\n\n### Site cartridge assignment\n\n- Navigate to **Administration > Sites > Manage Sites**.\n- Click the site name for the storefront site you want to add Stripe\nfunctionality to.\n- Select the **Settings** tab.\n- For Storefront Reference Architecture (SFRA), add\n`app_stripe_sfra:int_stripe_sfra:int_stripe_core` to the cartridge path.\n\nRepeat these steps for each storefront site where you want to implement Stripe.\n\n### Business Manager cartridge assignment\n\n- Navigate to **Administration > Sites > Manage Sites**.\n- Click the **Business Manager Site** and then the **Manage the Business Manager\nsite** link.\n- Add `int_stripe_core` to the cartridge path.\n\n### Metadata import\n\n- Navigate to the metadata folder of the project and open the\n`stripe_site_template` folder.\n- Open the `sites` folder and edit the `siteIDHere` folder to the site ID of the\nsite you want.\n- Add a folder for each site you want Stripe on.\n- Navigate to **Administration > Site Development > Site Import & Export**.\n- Compress the `stripe_site_template` folder into a zip file and import it.\n\n### Build Stripe styling\n\nIf necessary, update the path to your base SFRA installation in `package.json`\nfrom the same root folder.\n\nNormally, there’s a top-level project folder in which the repositories of the\nSFRA base cartridge and all required plugins, libraries, and any other LINK\ncartridges are cloned. If you cloned the Stripe cartridge into that folder as\nwell, you don’t need to update the `paths.base` property. If you haven’t cloned\nthe cartridge into that folder, update the `paths.base` property in\n`package.json` with the relative path to the local directory containing the\nStorefront Reference Architecture repository. The following is the default\n`paths.base` value:\n\n```\n\"paths\": {\n \"base\": \"../storefront-reference-architecture/cartridges/app_storefront_base/\"\n}\n```\n\nAfter you’re certain `package.json` has the correct path to SFRA cartridges, run\nthe `npm run compile:scss` command from the root folder of the Stripe\nrepository.\n\n### Add new payment processors\n\nThere are two payment processors used in the Stripe cartridge. `STRIPE_CREDIT`\nhandles credit card payments only, while `STRIPE_APM` handles payment methods\nthrough [Payment Element](https://docs.stripe.com/payments/payment-element) and\n[Express Checkout\nElement](https://docs.stripe.com/elements/express-checkout-element).\n\n#### Credit payment processor\n\n- Navigate to **Merchant Tools > Ordering > Payment Processors** and click\n**New**.\n- In the new window, set the ID to `STRIPE_CREDIT` and click **Apply**.\n\n#### APM payment processor\n\n- Navigate to **Merchant Tools > Ordering > Payment Processors** and click\n**New**.\n- In the new window, set the ID attribute to value `STRIPE_APM` and click\n**Apply**.\n\n### Update payment methods\n\nNavigate to **Merchant Tools > Ordering > Payment Methods**, click the\n**CREDIT_CARD** payment method, and select the **STRIPE_CREDIT** payment\nprocessor in the dropdown under the **CREDIT_CARD** details section.\n\nFor dynamic payment methods or the Payment Request Button, enable\n**STRIPE_APM_METHODS** to include payment methods supported by Stripe. See the\n[payment methods guide](https://stripe.com/guides/payment-methods-guide) for\nmore details.\n\nTo utilize the Stripe Payment Request Button, enable the\n**STRIPE_PAYMENT_REQUEST_BTN** payment method. Refer to [payment request\nbutton](https://docs.stripe.com/stripe-js/elements/payment-request-button) for\nmore details.\n\n## Install the Stripe Salesforce Commerce app\n\nUse Stripe Apps to bolster security and simplify the use of distinct restricted\nkeys for each integration with your Stripe account. The process of installing\nthe Stripe App and acquiring the newly generated secret and publishable\n[keys](https://docs.stripe.com/keys) is essential for your integration with the\nSalesforce Commerce connector. This approach eliminates the need to manually\ncreate your own restricted key or use a secret key. To integrate the Salesforce\nCommerce app and reinforce your account’s security infrastructure:\n\n- Navigate to the [Stripe App Marketplace](https://marketplace.stripe.com/),\nthen click [Install the Salesforce Commerce\napp](https://marketplace.stripe.com/apps/install/link/com.stripe.SalesforceCommerce).\n- Select the Stripe account where you want to install the app.\n- Review and approve the app permissions, install the app in test mode or live\nmode, then click **Install**.\n- After you install the app, store the keys in a safe place where you won’t lose\nthem. To help yourself remember where you stored it, you can [leave a note on\nthe key in the\nDashboard](https://docs.stripe.com/keys#reveal-an-api-secret-key-live-mode).\n- Use the newly generated publishable key and secret key to finish the Connector\nconfiguration.\n- To manage the app or generate new security keys after installation, navigate\nto the application settings page in [test\nmode](https://dashboard.stripe.com/test/settings/apps/com.stripe.SalesforceCommerce)\nor [live\nmode](https://dashboard.stripe.com/settings/apps/com.stripe.SalesforceCommerce).\n\n## Configuration\n\nUpdate **Merchant Tools > Site Preferences > Custom Site Preferences > Stripe\nConfigurations** with site-specific values.\n\n- Populate Stripe secret API key with the values from the Stripe Salesforce\nCommerce app.\n- Populate publishable API key with the values from the Stripe Salesforce\nCommerce app.\n- **Is this SFRA installation:** Set to `yes` if the current site is using SFRA.\n- **Capture Funds on Stripe Charge:** The default value is `true` (Yes). Set to\n`false` (No) to authorize Stripe charges instead.\n- **Stripe card element CSS style:** Set the CSS styling that the card element\nbutton inherits to fit within the overall storefront styles (for example,\n`{\"base\": {\"fontFamily\": \"Arial, sans-serif\",\"fontSize\": \"14px\",\"color\":\n\"#C1C7CD\"},\"invalid\": {\"color\": \"red\" } }`).\n- **Stripe API URL:** `https://js.stripe.com/v3/`\n- **Stripe Payment Request Button Style:** For the payment request button,\nselect the limited CSS styling for the button. Refer to [styling the\nelement](https://docs.stripe.com/stripe-js/elements/payment-request-button#styling-the-element)\nfor more details.\n- **Apple Pay Verification String:** Enter the Apple verification string\nprovided from the Stripe Dashboard. This is a one-time enablement. The Stripe\nconsole proxies the Apple Pay for a web verification string upon setup.\nConfigure this in the sandbox if using the Payment Request Button as a form of\npayment on the storefront.\n- **Country Code (Stripe Payment Request Button):** This is the default country\ncode (for example, US) for the Payment Request Button. You might need to\ncustomize on a multi-country single site in order to dynamically pass the\ncountry code rather than the site preference. Refer to [creating a payment\nrequest\ninstance](https://docs.stripe.com/stripe-js/elements/payment-request-button) for\nmore details.\n- **Stripe webhook signing secret:** Enter the\n[webhook](https://docs.stripe.com/webhooks) signing secret provided by the\nStripe Dashboard. Stripe signs webhook events and passes a validation to SFCC.\nSFCC validates the contents of the message using this secret.\n- **Stripe Allowed Webhook Statuses:** Configure the [allowed\nstatuses](https://docs.stripe.com/connectors/salesforce-commerce-cloud/implementation-guide#stripe-dashboard-set-up)\nfor webhooks to respond to.\n\n!\n- **Stripe Enabled:** Enables or disables the cartridge.\n\n## Stripe Quick Setup\n\nAlternatively, you can configure Stripe in Business Manager using **Stripe Quick\nSetup**\n\n- Log in to your Business Manager.\n- Search for “Stripe Quick Setup” within **Business Manager** under\n**Administration**.\n- Select the sites that you want to configure Stripe for.\n- Enter your `Stripe Publishable Key` and `Restricted Access key` retrieved from\nthe Stripe Salesforce Commerce app.\n- Click **Quick Setup**.\n\n## Set up Apple Pay\n\nFor Apple Pay:\n\nUpdate `RedirectURL.js`:\n\n```\nserver.extend(page);\n\nserver.replace('Start', function (req, res, next) {\n const URLRedirectMgr = require('dw/web/URLRedirectMgr');\n\n // Intercept the incoming path request\nif (URLRedirectMgr.getRedirectOrigin() ===\n'/.well-known/apple-developer-merchantid-domain-association') {\n res.render('stripe/util/apple');\n return next();\n }\n\n const redirect = URLRedirectMgr.redirect;\n const location = redirect ? redirect.location : null;\n const redirectStatus = redirect ? redirect.getStatus() : null;\n\n if (!location) {\n res.setStatusCode(404);\n res.render('error/notFound');\n } else {\n if (redirectStatus) {\n res.setRedirectStatus(redirectStatus);\n }\n res.redirect(location);\n }\n\n return next();\n});\n```\n\nSet up an alias to one of the sites on the sandbox temporarily so that the\ndomain can be verified in the Stripe Dashboard. The alias needs to be something\nlike this:\n\n```\n{\n \"__version\": \"1\",\n \"settings\": {\n \"http-host\": \"your.sandbox.domain.demandware.net\",\n \"https-host\": \"your.sandbox.domain.demandware.net\",\n \"default\": \"true\",\n \"site-path\": \"/\",\n },\n \"your.sandbox.domain.demandware.net\": [\n {\n \"locale\": \"en_GB\",\n \"if-site-path\": \"/\",\n }\n ]\n}\n```\n\nThe locale value needs to be a locale that isn’t disabled.\n\n- On the [Payment method domains\npage](https://dashboard.stripe.com/settings/payment_method_domains), click **Add\na new domain**.\n- Enter your domain name.\n- Click **Save and continue**.\n- Download the [domain association\nfile](https://stripe.com/files/apple-pay/apple-developer-merchantid-domain-association).\n- Host the file at `/.well-known/apple-developer-merchantid-domain-association`.\nFor example, if you register `https://example.com`, make that file available at\n`https://example.com/.well-known/apple-developer-merchantid-domain-association`.\n- Click **Verify**.\n\n## Update storefront code\n\nThe base LINK cartridge code contains support for all credit cards supported by\nStripe. The list of allowed cards on the storefront is still limited by the\nCredit/Debit Cards list in Business Manager (Merchant Tools > Ordering > Payment\nMethods > Credit/Debit Cards).\n\nMake the following updates to the Storefront Code. Examples provided are based\non SFRA version 4.4. The following sections detail the customizations made to\nSFRA code.\n\nThere are many controller endpoints that are appends instead of replaces. Those\naren’t covered as they should work without doing anything.\n\nController updates are only required for replaced endpoints, as you might have\nalready replaced that endpoint in your integration. Use the changes made to the\nbase cartridge and add them to your already replaced controller. If you haven’t\nextended/replaced these endpoints, you don’t need to do anything.\n\n### Controller: CheckoutServices.js\n\nPath: `app_stripe_sfra/cartridge/controllers/CheckoutServices.js`\n\nRemove the payment instrument validation in the `SubmitPayment` endpoint:\n\n```\nif (!paymentMethodID && currentBasket.totalGrossPrice.value > 0) {\n const noPaymentMethod = {};\n\n noPaymentMethod[billingData.paymentMethod.htmlName] = Resource.msg(\n 'error.no.selected.payment.method',\n 'payment',\n null\n );\n\n delete billingData.paymentInformation;\n res.json({\n form: billingForm,\n fieldErrors: [noPaymentMethod],\n serverErrors: [],\n error: true\n });\n return;\n}\n\n// Validate payment instrument\nconst creditCardPaymentMethod =\nPaymentMgr.getPaymentMethod(PaymentInstrument.METHOD_CREDIT_CARD);\nconst paymentCard =\nPaymentMgr.getPaymentCard(billingData.paymentInformation.cardType.value);\n\nconst applicablePaymentCards =\ncreditCardPaymentMethod.getApplicablePaymentCards(\n req.currentCustomer.raw,\n req.geolocation.countryCode,\n null\n);\n\nif (!applicablePaymentCards.contains(paymentCard)) {\n // Invalid payment instrument\nconst invalidPaymentMethod = Resource.msg('error.payment.not.valid', 'checkout',\nnull);\n delete billingData.paymentInformation;\n res.json({\n form: billingForm,\n fieldErrors: [],\n serverErrors: [invalidPaymentMethod],\n error: true\n });\n return;\n}\n```\n\nUpdate the order creation code:\n\n```\n// Re-calculate the payments\nconst calculatedPaymentTransactionTotal =\nCOHelpers.calculatePaymentTransaction(currentBasket);\nif (calculatedPaymentTransactionTotal.error) {\n res.json({\n error: true,\n errorMessage: Resource.msg('error.technical', 'checkout', null);\n });\n return next();\n}\nconst stripeCheckoutHelper = require('int_stripe_core').getCheckoutHelper();\nconst order = stripeCheckoutHelper.createOrder(currentBasket);\n\nif (!order) {\n res.json({\n error: true,\n errorMessage: Resource.msg('error.technical', 'checkout', null);\n });\n return next();\n}\n```\n\nUpdate the order placement code:\n\n```\nvar isAPMOrder = stripeCheckoutHelper.isAPMORder(order);\n\nif (!isAPMOrder) {\nvar stripePaymentInstrument =\nstripeCheckoutHelper.getStripePaymentInstrument(order);\n\n if (stripePaymentInstrument && order.custom.stripeIsPaymentIntentInReview) {\n res.json({\n error: false,\n orderID: order.orderNo,\n orderToken: order.orderToken,\n continueUrl: URLUtils.url('Order-Confirm').toString()\n });\n\n return next();\n }\n // Places the order\n var placeOrderResult = COHelpers.placeOrder(order, fraudDetectionStatus);\n\n if(placeOrderResult.error) {\n stripeCheckoutHelper.refundCharge(order);\n res.json({\n error: true,\n errorMessage: Resource.msg('error.technical', 'checkout', null)\n });\n const fraudDetectionStatus = hooksHelper(\n 'app.fraud.detection',\n 'fraudDetection',\n currentBasket,\n require('*/cartridge/scripts/hooks/fraudDetection').fraudDetection\n );\n\n if (fraudDetectionStatus.status === 'fail') {\n Transaction.wrap(function () {\n OrderMgr.failOrder(order);\n });\n\n // Fraud detection failed\n req.session.privacyCache.set('fraudDetectionStatus', true);\n\n res.json({\n error: true,\n cartError: true,\nredirectUrl: URLUtils.url('Error-ErrorCode', 'err',\nfraudDetectionStatus.errorCode).toString(),\n errorMessage: Resource.msg('error.technical', 'checkout', null);\n });\n return next();\n }\n COHelpers.sendConfirmationEmail(order, req.locale.id);\n\n // Reset usingMultiShip after successful Order placement\n req.session.privacyCache.set('usingMultiShip', false);\n\n res.json({\n error: false,\n orderID: order.orderNo,\n orderToken: order.orderToken,\n continueUrl: URLUtils.url('Order-Confirm').toString()\n });\n\n return next();\n}\n```\n\n### Controller: PaymentInstruments.js\n\nPath: `app_stripe_sfra/cartridge/controllers/PaymentInstruments.js`\n\nReplace the `DeletePayment` endpoint with the following code:\n\n```\nserver.replace('DeletePayment', function(req, res, next) {\n var stripeHelper = require ('int_stripe_core').getStripeHelper();\n var wallet = stripeHelper.getStripeWallet(customer);\n var UUID = req.querystring.UUID;\n wallet.removePaymentInstrument({ custom: { stripeId: UUID }});\n\n res.json({ UUID: UUID });\n next();\n});\n```\n\n### Controller: RedirectURL.js\n\nPath: `app_stripe_sfra/cartridge/controllers/RedirectURL.js`\n\nAdd the following code to the `Start` function:\n\n```\nserver.replace('Start', function (req, res, next) {\n const URLRedirectMgr = require('dw/web/URLRedirectMgr');\n\n // Intercept the incoming path request\nif (URLRedirectMgr.getRedirectOrigin() ===\n'/.well-known/apple-developer-merchantid-domain-association') {\n res.render('stripe/util/apple');\n return next();\n }\n\n const redirect = URLRedirectMgr.redirect;\n const location = redirect ? redirect.location : null;\n const redirectStatus = redirect ? redirect.getStatus() : null;\n\n if (!location) {\n res.setStatusCode(404);\n res.render('error/notFound');\n } else {\n if (redirectStatus) {\n res.setRedirectStatus(redirectStatus);\n }\n res.redirect(location);\n }\n\n return next();\n});\n```\n\n## External interfaces\n\nStripe functionality relies heavily on external calls to Stripe services. All\nexternal interfaces use the service framework to communicate with the Stripe\nAPI.\n\nStripe accounts are free to create and use. Most communications with Stripe\nservices are logged and accessible in the [Stripe\nDashboard](https://dashboard.stripe.com/). We encourage you to use the Stripe\nDashboard to monitor and test your integration. You can find the main\nconfiguration for integration of the Stripe services under Administration >\nOperations > Services with a different service for each external call:\n\n- `stripe.http.addCard`\n- `stripe.http.authorizePayment`\n- `stripe.http.createCharge`\n- `stripe.http.createCustomer`\n- `stripe.http.deleteCard`\n- `stripe.http.fetchCustomerCards`\n- `stripe.http.fetchCustomerSources`\n- `stripe.http.refundCharge`\n- `stripe.http.retrieveCustomer`\n- `stripe.http.service`\n- `stripe.http.updateCard`\n\nAll of these services use the same profile and the same credentials. The only\nthing that may be different is whether or not the communication log is enabled\nand the log name prefix. Here is the configuration of some of the services:\n\n!\n\n!\n\n!\n\n## Stripe Payment Element\n\nStripe cartridge supports Stripe Payment Element as a payment method.\n\nThe Payment Element is an embedded UI component that lets you accept up to 25+\npayment methods with a single integration.\n\n!\n\nTo enable the Payment Element, navigate to **Business Manager > Merchant Tools >\nOrdering > Payment Methods** and enable the payment method with ID set to\n`STRIPE_PAYMENT_ELEMENT`. In storefront Checkout > Payment, there is a widget\nwith all payment methods enabled in the Stripe\n[Dashboard](https://dashboard.stripe.com/settings/payment_methods).\n\nWhen you enable Payment Element in Business Manager, it can replace all other\npayment methods. You can disable all payment methods and use\n`STRIPE_PAYMENT_ELEMENT` instead.\n\nTo enable saving of payment methods for future use from Stripe Payment Element,\nnavigate to **Business Manager > Custom Preferences > Stripe Configs** and set\n**Stripe Payment Element: Enable Save Payment Method for Future Purchases** to\n`Yes`.\n\nTo display a list of saved payment methods in checkout, navigate to **Business\nManager > Payments Methods** and enable the `CREDIT_CARD` payment method. When\nit’s enabled with `STRIPE_PAYMENT_ELEMENT`, the credit card tab includes a list\nsaved cards (if any).\n\n## Stripe Radar insights display\n\nStripe LINK cartridge supports Radar insights view to showcase risk insights\nwithin the Orders section of Business Manager.\n[Radar](https://docs.stripe.com/radar) provides real-time fraud protection and\nrequires no additional development time. Fraud professionals can add [Radar for\nFraud Teams](https://stripe.com/radar/fraud-teams) to customize protection and\nget deeper insights.\n\n!\n\nTo enable the insights display, navigate to **Business Manager > Merchant Tools\n> Custom Preferences > Stripe Configs** and set **Risk Score Data** to `Yes`.\n\n!\n\n## See also\n\n- [Operations and\nmaintenance](https://docs.stripe.com/connectors/salesforce-commerce-cloud/operations-and-maintenance)\n- [User\nguide](https://docs.stripe.com/connectors/salesforce-commerce-cloud/user-guide)\n-\n[Testing](https://docs.stripe.com/connectors/salesforce-commerce-cloud/testing)\n\n## Links\n\n- [Payment Element](https://docs.stripe.com/payments/payment-element)\n- [Express Checkout\nElement](https://docs.stripe.com/elements/express-checkout-element)\n- [payment methods guide](https://stripe.com/guides/payment-methods-guide)\n- [payment request\nbutton](https://docs.stripe.com/stripe-js/elements/payment-request-button)\n- [keys](https://docs.stripe.com/keys)\n- [Stripe App Marketplace](https://marketplace.stripe.com/)\n- [Install the Salesforce Commerce\napp](https://marketplace.stripe.com/apps/install/link/com.stripe.SalesforceCommerce)\n- [leave a note on the key in the\nDashboard](https://docs.stripe.com/keys#reveal-an-api-secret-key-live-mode)\n- [test\nmode](https://dashboard.stripe.com/test/settings/apps/com.stripe.SalesforceCommerce)\n- [live\nmode](https://dashboard.stripe.com/settings/apps/com.stripe.SalesforceCommerce)\n- [styling the\nelement](https://docs.stripe.com/stripe-js/elements/payment-request-button#styling-the-element)\n- [webhook](https://docs.stripe.com/webhooks)\n- [Payment method domains\npage](https://dashboard.stripe.com/settings/payment_method_domains)\n- [domain association\nfile](https://stripe.com/files/apple-pay/apple-developer-merchantid-domain-association)\n- [Stripe Dashboard](https://dashboard.stripe.com/)\n- [Dashboard](https://dashboard.stripe.com/settings/payment_methods)\n- [Radar](https://docs.stripe.com/radar)\n- [Radar for Fraud Teams](https://stripe.com/radar/fraud-teams)\n- [Operations and\nmaintenance](https://docs.stripe.com/connectors/salesforce-commerce-cloud/operations-and-maintenance)\n- [User\nguide](https://docs.stripe.com/connectors/salesforce-commerce-cloud/user-guide)\n-\n[Testing](https://docs.stripe.com/connectors/salesforce-commerce-cloud/testing)",
  "metadata": {
    "title": "Stripe Connector for Salesforce B2C Commerce implementation guide | Stripe Documentation",
    "description": "",
    "sourceURL": "https://docs.stripe.com/connectors/salesforce-commerce-cloud/implementation-guide"
  }
}