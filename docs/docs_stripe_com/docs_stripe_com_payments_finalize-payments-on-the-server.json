{
  "content": "# Finalize payments on the server\n\n## Build an integration where you render the Payment Element before you create a PaymentIntent or SetupIntent, then confirm the Intent from your server.\n\nAccept a paymentSet up a payment methodCreate a subscription\nThe Payment Element allows you to accept multiple payment methods using a single\nintegration. This integration builds a custom payment flow where you render the\nPayment Element, create the\n[PaymentIntent](https://docs.stripe.com/payments/payment-intents), and confirm\nthe payment from your server.\n\n[Set up\nStripeServer-side](https://docs.stripe.com/payments/finalize-payments-on-the-server#set-up-stripe)\nFirst, [create a Stripe account](https://dashboard.stripe.com/register) or [sign\nin](https://dashboard.stripe.com/login).\n\nUse our official libraries to access the Stripe API from your application:\n\n```\n# Available as a gem\nsudo gem install stripe\n```\n\n```\n# If you use bundler, you can add this line to your Gemfile\ngem 'stripe'\n```\n\n[Enable payment\nmethods](https://docs.stripe.com/payments/finalize-payments-on-the-server#enable-payment-methods)\n#### Caution\n\nThis integration path doesn’t support BLIK or pre-authorized debits that use the\nAutomated Clearing Settlement System (ACSS).\n\nView your [payment methods\nsettings](https://dashboard.stripe.com/settings/payment_methods) and enable the\npayment methods you want to support. You need at least one payment method\nenabled to create a\n[PaymentIntent](https://docs.stripe.com/payments/payment-intents).\n\nBy default, Stripe enables cards and other prevalent payment methods that can\nhelp you reach more customers, but we recommend turning on additional payment\nmethods that are relevant for your business and customers. See [Payment method\nsupport](https://docs.stripe.com/payments/payment-methods/payment-method-support)\nfor product and payment method support, and our [pricing\npage](https://stripe.com/pricing/local-payment-methods) for fees.\n\n[Collect payment\ndetailsClient-side](https://docs.stripe.com/payments/finalize-payments-on-the-server#web-collect-payment-details)\nYou’re ready to collect payment details on the client with the Payment Element.\nThe Payment Element is a prebuilt UI component that simplifies collecting\npayment details for a variety of payment methods.\n\nThe Payment Element contains an iframe that securely sends payment information\nto Stripe over an HTTPS connection. Avoid placing the Payment Element within\nanother iframe because some payment methods require redirecting to another page\nfor payment confirmation.\n\nThe checkout page address must start with `https://` rather than `http://` for\nyour integration to work. You can test your integration without using HTTPS, but\nremember to [enable it](https://docs.stripe.com/security/guide#tls) when you’re\nready to accept live payments.\n\nHTML + JSReact\n### Set up Stripe.js\n\nThe Payment Element is automatically available as a feature of Stripe.js.\nInclude the Stripe.js script on your checkout page by adding it to the `head` of\nyour HTML file. Always load Stripe.js directly from js.stripe.com to remain PCI\ncompliant. Don’t include the script in a bundle or host a copy of it yourself.\n\n```\n<head>\n <title>Checkout</title>\n <script src=\"https://js.stripe.com/v3/\"></script>\n</head>\n```\n\nCreate an instance of Stripe with the following JavaScript on your checkout\npage:\n\n```\n// Set your publishable key: remember to change this to your live publishable\nkey in production\n// See your keys here: https://dashboard.stripe.com/apikeys\nconst stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n```\n\n### Add the Payment Element to your checkout page\n\nThe Payment Element needs a place to live on your checkout page. Create an empty\nDOM node (container) with a unique ID in your payment form:\n\n```\n<form id=\"payment-form\">\n <div id=\"payment-element\">\n <!-- Elements will create form elements here -->\n </div>\n <button id=\"submit\">Submit</button>\n <div id=\"error-message\">\n <!-- Display error message to your customers here -->\n </div>\n</form>\n```\n\nWhen the form above has loaded, create an Elements instance with the mode,\namount, and currency. These values determine which payment methods are shown to\nyour customer.\n\nThen, create an instance of the Payment Element and mount it to the container\nDOM node.\n\n```\nconst options = {\n mode: 'payment',\n amount: 1099,\n currency: 'usd',\n paymentMethodCreation: 'manual',\n // Fully customizable with appearance API.\n appearance: {/*...*/},\n};\n\n// Set up Stripe.js and Elements to use in checkout form\nconst elements = stripe.elements(options);\n\n// Create and mount the Payment Element\nconst paymentElementOptions = { layout: 'accordion'};\nconst paymentElement = elements.create('payment', paymentElementOptions);\npaymentElement.mount('#payment-element');\n```\n\nThe Payment Element renders a dynamic form that allows your customer to pick a\npayment method. The form automatically collects all necessary payments details\nfor the payment method selected by the customer.\n\nYou can customize the Payment Element to match the design of your site by\npassing the [appearance object](https://docs.stripe.com/elements/appearance-api)\ninto `options` when creating the `Elements` provider.\n\n### Collect addresses\n\nBy default, the Payment Element only collects the necessary billing address\ndetails. To collect a customer’s full billing address (to calculate the tax for\ndigital goods and services, for example) or shipping address, use the [Address\nElement](https://docs.stripe.com/elements/address-element).\n\n[OptionalCustomize the\nlayoutClient-side](https://docs.stripe.com/payments/finalize-payments-on-the-server#customize-layout)[OptionalCustomize\nthe\nappearanceClient-side](https://docs.stripe.com/payments/finalize-payments-on-the-server#customize-appearance)[OptionalSave\nand retrieve customer payment\nmethods](https://docs.stripe.com/payments/finalize-payments-on-the-server#save-payment-methods)[OptionalDynamically\nupdate payment\ndetailsClient-side](https://docs.stripe.com/payments/finalize-payments-on-the-server#dynamic-updates)[OptionalAdditional\nElements\noptionsClient-side](https://docs.stripe.com/payments/finalize-payments-on-the-server#additional-options)[Create\nthe\nConfirmationTokenClient-side](https://docs.stripe.com/payments/finalize-payments-on-the-server#create-ct)\n#### Use createPaymentMethod through a legacy implementation\n\nIf you’re using a legacy implementation, you might be using the information from\n`stripe.createPaymentMethod` to finalize payments on the server. While we\nencourage you to follow this guide to [Migrate to Confirmation\nTokens](https://docs.stripe.com/payments/payment-element/migration-ct) you can\nstill access our old documentation to [Finalize payments on the\nserver](https://docs.stripe.com/payments/finalize-payments-on-the-server-legacy)\n\nWhen the customer submits your payment form, call\n[stripe.createConfirmationToken](https://docs.stripe.com/js/confirmation_tokens/create_confirmation_token)\nto create a [ConfirmationToken](https://docs.stripe.com/api/confirmation_tokens)\nto send to your server for additional validation or business logic before\npayment confirmation.\n\nConfirming the PaymentIntent generates a\n[PaymentMethod](https://docs.stripe.com/api/payment_methods). You can read the\n[payment_method](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-payment_method)\nID off the PaymentIntent confirmation response.\n\n#### Caution\n\nYou must immediately use the created ConfirmationToken to confirm a\nPaymentIntent; if unused, it expires after 12 hours.\n\nHTML + JSReact\n```\nconst form = document.getElementById('payment-form');\nconst submitBtn = document.getElementById('submit');\n\nconst handleError = (error) => {\n const messageContainer = document.querySelector('#error-message');\n messageContainer.textContent = error.message;\n submitBtn.disabled = false;\n}\n\nform.addEventListener('submit', async (event) => {\n // We don't want to let default form submission happen here,\n // which would refresh the page.\n event.preventDefault();\n\n // Prevent multiple form submissions\n if (submitBtn.disabled) {\n return;\n }\n\n // Disable form submission while loading\n submitBtn.disabled = true;\n\n // Trigger form validation and wallet collection\n const {error: submitError} = await elements.submit();\n if (submitError) {\n handleError(submitError);\n return;\n }\n\n// Create the ConfirmationToken using the details collected by the Payment\nElement\n // and additional shipping information\n const {error, confirmationToken} = await stripe.createConfirmationToken({\n elements,\n params: {\n shipping: {\n name: 'Jenny Rosen',\n address: {\n line1: '1234 Main Street',\n city: 'San Francisco',\n state: 'CA',\n country: 'US',\n postal_code: '94111',\n },\n },\n return_url: 'https://example.com/order/123/complete'\n }\n });\n\n if (error) {\n // This point is only reached if there's an immediate error when\n// creating the ConfirmationToken. Show the error to your customer (for example,\npayment details incomplete)\n handleError(error);\n return;\n }\n\n // Create the PaymentIntent\n const res = await fetch(\"/create-confirm-intent\", {\n method: \"POST\",\n headers: {\"Content-Type\": \"application/json\"},\n body: JSON.stringify({\n confirmationTokenId: confirmationToken.id,\n }),\n });\n\n const data = await res.json();\n\n// Handle any next actions or errors. See the Handle any next actions step for\nimplementation.\n handleServerResponse(data);\n});\n```\n\n[OptionalInsert custom business\nlogicServer-side](https://docs.stripe.com/payments/finalize-payments-on-the-server#insert-custom-logic)[Create\nand submit the payment to\nStripeServer-side](https://docs.stripe.com/payments/finalize-payments-on-the-server#submit-payment)\nWhen the customer submits your payment form, use a\n[PaymentIntent](https://docs.stripe.com/payments/payment-intents) to facilitate\nthe confirmation and payment process. Create a PaymentIntent on your server with\nan `amount` and `currency` specified. In the latest version of the API,\nspecifying the `automatic_payment_methods` parameter is optional because Stripe\nenables its functionality by default. You can manage payment methods from the\n[Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe\nhandles the return of eligible payment methods based on factors such as the\ntransaction’s amount, currency, and payment flow. To prevent malicious customers\nfrom choosing their own prices, always decide how much to charge on the\nserver-side (a trusted environment) and not the client.\n\nYou can use the ConfirmationToken sent by your client to create and confirm the\nPaymentIntent in a single request.\n\n```\nconst stripe = require(\"stripe\")(\"sk_test_BQokikJOvBiI2HlWgH4olfQ2\");\nconst express = require('express');\nconst app = express();\n\napp.set('trust proxy', true);\napp.use(express.json());\napp.use(express.static(\".\"));\n\napp.post('/create-confirm-intent', async (req, res) => {\n try {\n const intent = await stripe.paymentIntents.create({\n confirm: true,\n amount: 1099,\n currency: 'usd',\n// In the latest version of the API, specifying the `automatic_payment_methods`\nparameter is optional because Stripe enables its functionality by default.\n automatic_payment_methods: {enabled: true},\nconfirmation_token: req.body.confirmationTokenId, // the ConfirmationToken ID\nsent by your client\n });\n res.json({\n client_secret: intent.client_secret,\n status: intent.status\n });\n } catch (err) {\n res.json({\n error: err\n })\n }\n});\n\napp.listen(3000, () => {\n console.log('Running on port 3000');\n});\n```\n\n[Handle any next\nactionsClient-side](https://docs.stripe.com/payments/finalize-payments-on-the-server#next-actions)\nWhen the PaymentIntent requires additional action from the customer, such as\nauthenticating with 3D Secure or redirecting to a different site, you need to\ntrigger those actions. Use `stripe.handleNextAction` to trigger the UI for\nhandling customer action and completing the payment.\n\n```\nconst handleServerResponse = async (response) => {\n if (response.error) {\n // Show error from server on payment form\n } else if (response.status === \"requires_action\") {\n // Use Stripe.js to handle the required next action\n const {\n error,\n paymentIntent\n } = await stripe.handleNextAction({\n clientSecret: response.clientSecret\n });\n\n if (error) {\n // Show error from Stripe.js in payment form\n } else {\n // Actions handled, show success message\n }\n } else {\n // No actions needed, show success message\n }\n}\n```\n\n[OptionalHandle post-payment\nevents](https://docs.stripe.com/payments/finalize-payments-on-the-server#web-fulfillment)\n## See also\n\n- [Design an\nintegration](https://docs.stripe.com/payments/payment-element/design-an-integration)\n\n## Links\n\n- [PaymentIntent](https://docs.stripe.com/payments/payment-intents)\n- [create a Stripe account](https://dashboard.stripe.com/register)\n- [sign in](https://dashboard.stripe.com/login)\n- [payment methods\nsettings](https://dashboard.stripe.com/settings/payment_methods)\n- [Payment method\nsupport](https://docs.stripe.com/payments/payment-methods/payment-method-support)\n- [pricing page](https://stripe.com/pricing/local-payment-methods)\n- [enable it](https://docs.stripe.com/security/guide#tls)\n- [https://js.stripe.com/v3/](https://js.stripe.com/v3/)\n- [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys)\n- [appearance object](https://docs.stripe.com/elements/appearance-api)\n- [Address Element](https://docs.stripe.com/elements/address-element)\n- [Migrate to Confirmation\nTokens](https://docs.stripe.com/payments/payment-element/migration-ct)\n- [Finalize payments on the\nserver](https://docs.stripe.com/payments/finalize-payments-on-the-server-legacy)\n-\n[stripe.createConfirmationToken](https://docs.stripe.com/js/confirmation_tokens/create_confirmation_token)\n- [ConfirmationToken](https://docs.stripe.com/api/confirmation_tokens)\n- [PaymentMethod](https://docs.stripe.com/api/payment_methods)\n-\n[payment_method](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-payment_method)\n-\n[https://example.com/order/123/complete](https://example.com/order/123/complete)\n- [Design an\nintegration](https://docs.stripe.com/payments/payment-element/design-an-integration)",
  "metadata": {
    "title": "Finalize payments on the server | Stripe Documentation",
    "description": "Build an integration where you render the Payment Element before you create a PaymentIntent or SetupIntent, then confirm the Intent from your server.",
    "sourceURL": "https://docs.stripe.com/payments/finalize-payments-on-the-server"
  }
}