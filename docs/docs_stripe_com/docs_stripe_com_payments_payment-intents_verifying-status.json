{
  "content": "# Payment status updates\n\n## Monitor and verify payment status, so that you can respond to successful and failed payments.\n\n[PaymentIntents](https://docs.stripe.com/payments/payment-intents) update in\nresponse to actions taken by the customer or payment method. Your integration\ncan inspect the PaymentIntent to determine the status of the payment process, so\nthat you can take business actions or respond to states that require further\nintervention.\n\nYou can also use the Stripe Dashboard to configure your account to email you\nabout payment status, such as successful payments. Change your [email\nnotifications](https://docs.stripe.com/get-started/account/teams#email-notifications)\nin your [user settings](https://dashboard.stripe.com/settings/user).\n\n## Check PaymentIntent status on the client\n\nWhen completing a payment on the client with the\n[confirmCardPayment](https://docs.stripe.com/js#stripe-confirm-card-payment)\nfunction, you can inspect the returned PaymentIntent to determine its current\nstatus:\n\n```\n(async () => {\n const {paymentIntent, error} = await stripe.confirmCardPayment(clientSecret);\n if (error) {\n // Handle error here\n } else if (paymentIntent && paymentIntent.status === 'succeeded') {\n // Handle successful payment here\n }\n})();\n```\n\nThe following are the possible outcomes of using the `confirmCardPayment`\nfunction:\n\nEventWhat HappenedExpected IntegrationResolves with a PaymentIntentThe customer\ncompleted payment on your checkout pageInform the customer that their payment\nsucceededResolves with an errorThe customer’s payment failed on your checkout\npageDisplay an error message and prompt your customer to attempt payment again\nThe promise returned by `confirmCardPayment` resolves when the payment process\nhas either completed or failed with an error. When it completes successfully and\nreturns a PaymentIntent, the status is always `succeeded` (or `requires_capture`\nif [capturing\nlater](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method)). When\nthe payment requires an additional step such as authentication, the promise\ndoesn’t resolve until that step is either complete or has timed out.\n\n## Check PaymentIntent status on the client without using confirmCardPayment\n\nTo check the status of a PaymentIntent without using the `confirmCardPayment`\nfunction, retrieve it independently by using the\n[retrievePaymentIntent](https://docs.stripe.com/js/payment_intents/retrieve_payment_intent)\nfunction and passing in the [client\nsecret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret).\n\nThe following are some [possible\nstatuses](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-status)\nof the PaymentIntent following a confirmation:\n\nWhat HappenedExpected PaymentIntent StatusThe customer completed payment on your\ncheckout page`succeeded`The customer didn’t complete the\ncheckout`requires_action`The customer’s payment failed on your checkout\npage`requires_payment_method`\n[Read more about the PaymentIntent\nstatuses](https://docs.stripe.com/payments/paymentintents/lifecycle).\n\n```\n(async () => {\n const {paymentIntent} = await stripe.retrievePaymentIntent(clientSecret);\n if (paymentIntent && paymentIntent.status === 'succeeded') {\n // Handle successful payment here\n } else {\n // Handle unsuccessful, processing, or canceled payments and API errors here\n }\n})();\n```\n\n## Monitor a PaymentIntent with webhooks\n\nStripe can send [webhook](https://docs.stripe.com/webhooks) events to your\nserver to notify you when the status of a PaymentIntent changes, which you can\nuse for purposes such as determining when to fulfill goods and services.\n\nDon’t attempt to handle order fulfillment on the client side because customers\ncan leave the page after payment is complete but before the fulfillment process\ninitiates. Instead, use webhooks to monitor the `payment_intent.succeeded` event\nand handle its completion asynchronously instead of attempting to initiate\nfulfillment on the client side.\n\n#### Caution\n\nIt’s technically possible to use polling instead of webhooks to monitor for\nchanges caused by asynchronous operations—repeatedly retrieving a PaymentIntent\nso that you can check its status—but doing so is much less reliable and might\ncause rate limiiting issues. Stripe enforces [rate\nlimiting](https://docs.stripe.com/testing#rate-limits) on API requests, so\nexercise caution if you decide to use polling.\n\nTo handle a webhook event, create a route on your server and configure a\ncorresponding webhook endpoint [in the\nDashboard](https://dashboard.stripe.com/account/webhooks). Stripe sends the\n`payment_intent.succeeded` event when a payment succeeds, and the\n`payment_intent.payment_failed` event when a payment fails.\n\nThe webhook payload includes the PaymentIntent object. The following example\nshows how to handle both events:\n\n```\nrequire 'sinatra'\nrequire 'stripe'\n\npost '/webhook' do\n payload = request.body.read\n sig_header = request.env['HTTP_STRIPE_SIGNATURE']\n event = nil\n\n begin\n event = Stripe::Webhook.construct_event(\n payload, sig_header, endpoint_secret\n )\n rescue JSON::ParserError => e\n # Invalid payload\n status 400\n return\n rescue Stripe::SignatureVerificationError => e\n # Invalid signature\n status 400\n return\n end\n\n case event['type']\n when 'payment_intent.succeeded'\n intent = event['data']['object']\n puts \"Succeeded:\", intent['id']\n # Fulfill the customer's purchase\n when 'payment_intent.payment_failed'\n intent = event['data']['object']\nerror_message = intent['last_payment_error'] &&\nintent['last_payment_error']['message']\n puts \"Failed:\", intent['id'], error_message\n # Notify the customer that payment failed\n end\n\n status 200\nend\n```\n\nWhen payment is unsuccessful, you can find more details by inspecting the\nPaymentIntent’s `last_payment_error` property. You can notify the customer that\ntheir payment didn’t complete and encourage them to try again with a different\npayment method. Reuse the same PaymentIntent to continue tracking the customer’s\npurchase.\n\n### Handling specific webhook events\n\nThe following list describes how to handle webhook events:\n\nEventDescriptionNext steps`processing`The customer’s payment was submitted to\nStripe successfully. Only applicable to payment methods with [delayed success\nconfirmation](https://docs.stripe.com/payments/payment-methods).Wait for the\ninitiated payment to succeed or fail.`succeeded`The customer’s payment\nsucceededFulfill the purchased goods or services`amount_capturable_updated`The\ncustomer’s payment is authorized and ready for captureCapture the funds that are\navailable for payment`payment_failed`The customer’s payment was declined by a\ncard network or otherwise expiredReach out to your customer through email or\npush notification and prompt them to provide another payment method\nTo test webhooks locally, you can use [Stripe\nCLI](https://docs.stripe.com/stripe-cli). After you install it, you can forward\nevents to your server:\n\n```\nstripe listen --forward-to localhost:4242/webhook\nReady! Your webhook signing secret is '{{WEBHOOK_SIGNING_SECRET}}' (^C to quit)\n```\n\nLearn more about [setting up webhooks](https://docs.stripe.com/webhooks).\n\n## Identifying charges on a PaymentIntent\n\nWhen you attempt to collect payment from a customer, the PaymentIntent creates a\n[Charge](https://docs.stripe.com/api/charges). To get the ID of the most recent\ncharge, inspect the PaymentIntent’s\n[latest_charge](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-latest_charge)\nproperty:\n\n```\n# Set your secret key. Remember to switch to your live secret key in production.\n# See your keys here: https://dashboard.stripe.com/apikeys\nStripe.api_key = 'sk_test_BQokikJOvBiI2HlWgH4olfQ2'\n\nintent = Stripe::PaymentIntent.retrieve('{{PAYMENT_INTENT_ID}}')\nlatest_charge = intent.latest_charge\n```\n\nTo view all of the charges associated with a PaymentIntent, including any\nunsuccessful charges, [list all\ncharges](https://docs.stripe.com/api/charges/list#list_charges-payment_intent)\nand specify the `payment_intent​` parameter.\n\n```\ncurl -G https://api.stripe.com/v1/charges \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d payment_intent={{PAYMENT_INTENT_ID}}\n```\n\n## Handling next actions\n\nSome payment methods require additional steps, such as authentication, to\ncomplete the payment process. Stripe.js handles these automatically when\nconfirming the PaymentIntent, but if you have an advanced integration, you might\nwant to handle these manually.\n\nThe PaymentIntent’s\n[next_action](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action)\nproperty exposes the next step that your integration must handle to complete the\npayment. The type of possible next actions can differ between various payment\nmethods. You can find a full list of possible next actions in the [API\ndocumentation](https://docs.stripe.com/api#payment_intent_object-next_action-type).\n\nYou can refer to the [payment methods\ndocumentation](https://docs.stripe.com/payments/payment-methods/overview) for\nmore details about how to handle their required next actions.\n\n## Links\n\n- [PaymentIntents](https://docs.stripe.com/payments/payment-intents)\n- [email\nnotifications](https://docs.stripe.com/get-started/account/teams#email-notifications)\n- [user settings](https://dashboard.stripe.com/settings/user)\n- [confirmCardPayment](https://docs.stripe.com/js#stripe-confirm-card-payment)\n- [capturing\nlater](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method)\n-\n[retrievePaymentIntent](https://docs.stripe.com/js/payment_intents/retrieve_payment_intent)\n- [client\nsecret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret)\n- [possible\nstatuses](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-status)\n- [Read more about the PaymentIntent\nstatuses](https://docs.stripe.com/payments/paymentintents/lifecycle)\n- [webhook](https://docs.stripe.com/webhooks)\n- [rate limiting](https://docs.stripe.com/testing#rate-limits)\n- [in the Dashboard](https://dashboard.stripe.com/account/webhooks)\n- [delayed success\nconfirmation](https://docs.stripe.com/payments/payment-methods)\n- [Stripe CLI](https://docs.stripe.com/stripe-cli)\n- [Charge](https://docs.stripe.com/api/charges)\n-\n[latest_charge](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-latest_charge)\n- [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys)\n- [list all\ncharges](https://docs.stripe.com/api/charges/list#list_charges-payment_intent)\n-\n[next_action](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action)\n- [API\ndocumentation](https://docs.stripe.com/api#payment_intent_object-next_action-type)\n- [payment methods\ndocumentation](https://docs.stripe.com/payments/payment-methods/overview)",
  "metadata": {
    "title": "Payment status updates | Stripe Documentation",
    "description": "Monitor and verify payment status, so that you can respond to successful and failed payments.",
    "sourceURL": "https://docs.stripe.com/payments/payment-intents/verifying-status"
  }
}