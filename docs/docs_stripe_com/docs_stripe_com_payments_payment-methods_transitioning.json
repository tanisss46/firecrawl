{
  "content": "# Transition to the Payment Intents and Payment Methods APIs\n\n## Learn how to transition from the Sources and Tokens APIs to the Payment Methods API.\n\nThe [Payment Methods API](https://docs.stripe.com/api/payment_methods) replaces\nthe existing [Tokens](https://docs.stripe.com/api/tokens) and\n[Sources](https://docs.stripe.com/api/sources) APIs as the recommended way for\nintegrations to collect and store payment information. It works with the\n[Payment Intents API](https://docs.stripe.com/payments/payment-intents) to\ncreate payments for a wide range of payment methods.\n\nWe plan to turn off Sources API support for local payment methods. If you\ncurrently handle any local payment methods using the Sources API, you must\n[migrate them to the Payment Methods\nAPI](https://docs.stripe.com/payments/payment-methods/transitioning#migrate-local-payment-methods).\nWe’ll send email communication with more information about the end of support\nfor the Sources and Tokens APIs.\n\nWhile we don’t plan to turn off support for card payment methods, we still\nrecommend that you migrate them to the Payment Methods and Payment Intents APIs.\nFor more information about migrating card payment methods, see [Migrating to the\nPayment Intents\nAPI](https://docs.stripe.com/payments/payment-intents/migration).\n\n## Migrate local payment methods from the Sources API to the Payment Intents API\n\nTo migrate your integration for local payment methods, update your server and\nfront end to use the [PaymentIntents\nAPI](https://docs.stripe.com/api/payment_intents). There are three typical\nintegration options:\n\n- Redirect to [Stripe Checkout](https://docs.stripe.com/payments/checkout) for\nyour payment flow.\n- Use the Stripe [Payment\nElement](https://docs.stripe.com/payments/payment-element) on your own payment\npage.\n- Build your own form and use the Stripe JS SDK to complete the payment.\n\nIf you use Stripe Checkout or the Payment Element, you can add and manage most\npayment methods from the Stripe Dashboard without making code changes.\n\nFor specific information about integrating a local payment method using the\nPayment Methods API, see the instructions for that payment method in [the\npayment methods\ndocumentation](https://docs.stripe.com/payments/payment-methods/overview). The\nfollowing table provides a high-level comparison of the different payment types.\n\nOld integrationStripe CheckoutPayment ElementOwn form\nLow complexity\n\nMedium complexity\n\nHigh complexity\n\nCreate a Source on the front end or on the serverCreate a Checkout Session on\nthe serverCreate a PaymentIntent on the serverCreate a PaymentIntent on the\nserverAuthorize payment by loading a widget or redirecting to a third partyNot\nneededPass the client secret to the front end and use the Stripe JS SDK to\nrender a Payment Element to complete the paymentPass the client secret to the\nfront end, use your own form to collect details from your customer, and complete\nthe payment according to the payment methodConfirm the source is chargeable and\ncharge the SourceNot neededNot neededNot neededConfirm the Charge succeeded\nasynchronously with the `charge.succeeded` webhookConfirm the Checkout session\nsucceeded with the `payment_intent.succeeded` webhookConfirm the PaymentIntent\nsucceeded with the `payment_intent.succeeded` webhookConfirm the PaymentIntent\nsucceeded with the `payment_intent.succeeded` webhook\n#### Caution\n\nA PaymentIntent object represents a payment in the new integration, and it\ncreates a Charge when you confirm the payment on the front end. If you\npreviously stored references to the Charge, you can continue to do so by\nfetching the Charge ID from the PaymentIntent after the customer completes the\npayment. However, we also recommend that you store the PaymentIntent ID.\n\n### Checking payment status\n\nPreviously, your integration should have checked both the status of the Source\nand the status of the Charge after each API call. You no longer need to check\ntwo statuses—you only need to check the status of the PaymentIntent or the\nCheckout Session after you confirm it on the front end.\n\npayment_intent.statusMeaningSpecial instructions`succeeded`The payment\nsucceeded.Not applicable`requires_payment_method`The payment failed.Not\napplicable`requires_action`The customer hasn’t completed authorizing the\npayment.If the customer doesn’t complete the payment within 48 hours, then the\nPaymentIntent transitions to `requires_payment_method` and you can retry the\nconfirmation.\nAlways confirm the status of the PaymentIntent by fetching it on your server or\nlistening for the webhooks on your server. Don’t rely solely on the user\nreturning to the `return_url` that’s provided when you confirm the\nPaymentIntent.\n\n### Refunds\n\nYou can continue to call the Refunds API with a Charge that the PaymentIntent\ncreates. The ID of the Charge is accessible on the `latest_charge` parameter.\n\nAlternatively, you can provide the PaymentIntent ID to the Refunds API instead\nof the Charge.\n\n### Error handling\n\nPreviously, you had to handle errors on the Sources. With PaymentIntents,\ninstead of checking for errors on a Source, you check for errors on the\nPaymentIntent when it’s created and after the customer has authorized the\npayment. Most errors on the PaymentIntent are of `invalid_request_error` type,\nreturned in an invalid request.\n\nWhen you migrate your integration, keep in mind that PaymentIntent error codes\ncan differ from the corresponding error codes for Sources.\n\n### Webhooks\n\nIf you previously listened to Source events, you might need to update your\nintegration to listen to new event types. The following table shows some\nexamples.\n\nOld webhookNew webhook on CheckoutNew webhook on PaymentIntentsSpecial\ninstructions`source.chargeable`Not applicableNot applicable`source.failed`Not\napplicableNot applicable`source.canceled`Not applicableNot\napplicable`charge.succeeded``checkout.session.completed``payment_intent.succeeded`The\n`charge.succeeded` webhook is also sent, so you don’t have to update your\nintegration to listen to the new webhook.`charge.failed`Not applicable - The\ncustomer can re-attempt the payment on the same Checkout Session until it\n[expires](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-expires_at),\nat which point you receive a `checkout.session.expired`\nevent.`payment_intent.payment_failed`The `charge.failed` webhook is also sent,\nso you don’t have to update your integration to listen to the new\nwebhook.`charge.dispute.created``charge.dispute.created``charge.dispute.created`\n## Transitioning to the Payment Methods API\n\nThe main difference between the Payment Methods and Sources APIs is that Sources\ndescribes the transaction state through the\n[status](https://docs.stripe.com/api/sources/object#source_object-status)\nproperty. That means that each `Source` object must transition to a chargeable\nstate before you can use it for a payment. By contrast, a `PaymentMethod` is\nstateless, relying on the\n[PaymentIntent](https://docs.stripe.com/payments/payment-intents) object to\nrepresent payment state.\n\n#### Note\n\nThe following table isn’t a comprehensive list of payment methods. If you\nintegrate other payment methods with the Sources API, migrate them to the\nPayment Methods API as well.\n\nFlowsIntegrate Payment Method with Payment Intents API Tokens or Sources with\nCharges API Cards[Card\npayments](https://docs.stripe.com/payments/cards)[Supported on\nTokens](https://docs.stripe.com/payments/charges-api); Not recommended on\nSourcesACH Direct Debit[US bank account direct\ndebits](https://docs.stripe.com/payments/ach-direct-debit)[Supported on\nTokens](https://docs.stripe.com/ach-deprecated) Not supported on\nSourcesAlipay[Alipay\npayments](https://docs.stripe.com/payments/alipay)[Deprecated](https://docs.stripe.com/sources/alipay)Bancontact[Bancontact\npayments](https://docs.stripe.com/payments/bancontact)[Deprecated](https://docs.stripe.com/sources/bancontact)EPS[EPS\npayments](https://docs.stripe.com/payments/eps)Deprecatedgiropay[giropay\npayments](https://docs.stripe.com/payments/giropay)[Deprecated](https://docs.stripe.com/sources/giropay)iDEAL[iDEAL\npayments](https://docs.stripe.com/payments/ideal)[Deprecated](https://docs.stripe.com/sources/ideal)Klarna[Klarna\npayments](https://docs.stripe.com/payments/klarna)DeprecatedMultibanco[Multibanco\npayments](https://docs.stripe.com/payments/multibanco)[Deprecated\nBeta](https://docs.stripe.com/sources/multibanco)Przelewy24[Przelewy24\npayments](https://docs.stripe.com/payments/p24)[Deprecated](https://docs.stripe.com/sources/p24)SEPA\nDirect Debit[Single Euro Payments Area direct\ndebits](https://docs.stripe.com/payments/sepa-debit)[Deprecated](https://docs.stripe.com/sources/sepa-debit)Sofort[Sofort\npayments](https://docs.stripe.com/payments/sofort)DeprecatedWeChat Pay[WeChat\nPay\npayments](https://docs.stripe.com/payments/wechat-pay)[Deprecated](https://docs.stripe.com/sources/wechat-pay)\nAfter you choose the API to integrate with, use the [guide to payment\nmethods](https://stripe.com/payments/payment-methods-guide) to help you\ndetermine the right payment method types you need to support.\n\nThis guide includes detailed descriptions of each payment method and describes\nthe differences in the customer-facing flows, along with the [geographic\nregions](https://stripe.com/payments/payment-methods-guide#payment-methods-fact-sheets)\nwhere they’re most relevant. You can enable any payment method available to you\nwithin the [Dashboard](https://dashboard.stripe.com/account/payments/settings).\nActivation is generally instantaneous and doesn’t require additional contracts.\n\n## Compatibility with legacy reusable payment methods\n\nIf you previously processed any of the following reusable payment methods using\n[Sources](https://docs.stripe.com/sources), the existing saved sources don’t\nmigrate automatically:\n\n- Alipay\n- Bacs Direct Debit\n- SEPA Direct Debit\n\nTo preserve your existing customers’ saved payment methods, you must convert\nthose sources to payment methods using a data migration tool in the Stripe\nDashboard. For instructions on how to convert them, see [the support\npage](https://support.stripe.com/questions/reusable-object-migration).\n\n## Compatibility with legacy card objects\n\nIf you previously collected card customer payment details with Stripe using\n[cards](https://docs.stripe.com/saving-cards) or\n[Sources](https://docs.stripe.com/sources), you can start using the Payment\nMethods API immediately without migrating any payment information.\n\nCompatible payment instruments that have been saved to a\n[Customer](https://docs.stripe.com/api/customers) are usable in any API that\naccepts a [PaymentMethod](https://docs.stripe.com/api/payment_methods) object.\nFor example, you can use a saved card as a PaymentMethod when creating a\nPaymentIntent:\n\n```\ncurl https://api.stripe.com/v1/payment_intents \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d \"payment_method_types[]\"=card \\\n -d amount=1099 \\\n -d currency=usd \\\n -d customer={{CUSTOMER_ID}} \\\n -d payment_method={{CARD_ID}}\n```\n\nRemember to provide the customer ID that your compatible payment instrument is\nsaved to when attaching the object to a PaymentIntent.\n\nYou can [retrieve](https://docs.stripe.com/api/payment_methods/retrieve) all\nsaved compatible payment instruments through the Payment Methods API.\n\nCardCard Source\n```\n{\n \"id\": \"card_1EBXBSDuWL9wT9brGOaALeD2\",\n \"object\": \"card\",\n \"address_city\": \"San Francisco\",\n \"address_country\": \"US\",\n \"address_line1\": \"1234 Fake Street\",\n \"address_line1_check\": null,\n \"address_line2\": null,\n \"address_state\": null,\n \"address_zip\": null,\n```\n\nSee all 26 lines\n```\n{\n \"id\": \"card_1EBXBSDuWL9wT9brGOaALeD2\",\n \"object\": \"payment_method\",\n \"billing_details\": {\n \"address\": {\n \"city\": \"San Francisco\",\n \"country\": \"US\",\n \"line1\": \"1234 Fake Street\",\n \"line2\": null,\n \"postal_code\": null,\n```\n\nSee all 41 lines\nWith this compatibility, no new objects are created; the Payment Methods API\nprovides a different view of the same underlying object. For example, updates to\na compatible payment instrument through the Payment Methods API is visible\nthrough the Sources API, and vice versa.\n\n## See also\n\n- [Guide to payment methods](https://stripe.com/payments/payment-methods-guide)\n- [Connect payments](https://docs.stripe.com/connect/charges)\n- [Payment Methods API reference](https://docs.stripe.com/api/payment_methods)\n\n## Links\n\n- [Payment Methods API](https://docs.stripe.com/api/payment_methods)\n- [Tokens](https://docs.stripe.com/api/tokens)\n- [Sources](https://docs.stripe.com/api/sources)\n- [Payment Intents API](https://docs.stripe.com/payments/payment-intents)\n- [Migrating to the Payment Intents\nAPI](https://docs.stripe.com/payments/payment-intents/migration)\n- [PaymentIntents API](https://docs.stripe.com/api/payment_intents)\n- [Stripe Checkout](https://docs.stripe.com/payments/checkout)\n- [Payment Element](https://docs.stripe.com/payments/payment-element)\n- [the payment methods\ndocumentation](https://docs.stripe.com/payments/payment-methods/overview)\n-\n[expires](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-expires_at)\n- [status](https://docs.stripe.com/api/sources/object#source_object-status)\n- [Card payments](https://docs.stripe.com/payments/cards)\n- [Supported on Tokens](https://docs.stripe.com/payments/charges-api)\n- [US bank account direct\ndebits](https://docs.stripe.com/payments/ach-direct-debit)\n- [Supported on Tokens](https://docs.stripe.com/ach-deprecated)\n- [Alipay payments](https://docs.stripe.com/payments/alipay)\n- [Deprecated](https://docs.stripe.com/sources/alipay)\n- [Bancontact payments](https://docs.stripe.com/payments/bancontact)\n- [Deprecated](https://docs.stripe.com/sources/bancontact)\n- [EPS payments](https://docs.stripe.com/payments/eps)\n- [giropay payments](https://docs.stripe.com/payments/giropay)\n- [Deprecated](https://docs.stripe.com/sources/giropay)\n- [iDEAL payments](https://docs.stripe.com/payments/ideal)\n- [Deprecated](https://docs.stripe.com/sources/ideal)\n- [Klarna payments](https://docs.stripe.com/payments/klarna)\n- [Multibanco payments](https://docs.stripe.com/payments/multibanco)\n- [Deprecated Beta](https://docs.stripe.com/sources/multibanco)\n- [Przelewy24 payments](https://docs.stripe.com/payments/p24)\n- [Deprecated](https://docs.stripe.com/sources/p24)\n- [Single Euro Payments Area direct\ndebits](https://docs.stripe.com/payments/sepa-debit)\n- [Deprecated](https://docs.stripe.com/sources/sepa-debit)\n- [Sofort payments](https://docs.stripe.com/payments/sofort)\n- [WeChat Pay payments](https://docs.stripe.com/payments/wechat-pay)\n- [Deprecated](https://docs.stripe.com/sources/wechat-pay)\n- [guide to payment methods](https://stripe.com/payments/payment-methods-guide)\n- [geographic\nregions](https://stripe.com/payments/payment-methods-guide#payment-methods-fact-sheets)\n- [Dashboard](https://dashboard.stripe.com/account/payments/settings)\n- [Sources](https://docs.stripe.com/sources)\n- [the support\npage](https://support.stripe.com/questions/reusable-object-migration)\n- [cards](https://docs.stripe.com/saving-cards)\n- [Customer](https://docs.stripe.com/api/customers)\n- [retrieve](https://docs.stripe.com/api/payment_methods/retrieve)\n- [Connect payments](https://docs.stripe.com/connect/charges)",
  "metadata": {
    "title": "Transition to the Payment Intents and Payment Methods APIs | Stripe Documentation",
    "description": "Learn how to transition from the Sources and Tokens APIs to the Payment Methods API.",
    "sourceURL": "https://docs.stripe.com/payments/payment-methods/transitioning"
  }
}