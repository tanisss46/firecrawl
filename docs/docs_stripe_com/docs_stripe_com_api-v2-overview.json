{
  "content": "# API v2 overview\n\n## Understand the behavior of APIs in the v2 namespace.\n\nThe Stripe API provides two namespaces that contain different sets of endpoints:\n\n- **API v1:** The `/v1` namespace includes most of the existing Stripe API\ntoday.\n- **API v2:** The `/v2` namespace includes endpoints that use `/v2` design\npatterns.\n\n## Key differences between the v1 and v2 namespace\n\nAPI v1API v2Access APIsUse secret and restricted access keys to access APIs in\nthe `/v1` namespace.You can only access APIs in the `/v2` namespace with secret\nkeys.Send data to the APIRequests use form encoding\n(`application/x-www-form-urlencoded`), and responses use JSON encoding\n(`application/json`).Request and responses use JSON encoding\n(`application/json`).\n**Test your integration**\n\nValidate APIs in the `/v1` namespace using Sandboxes, an isolated environment.\nAdditionally, you can use [test mode](https://docs.stripe.com/test-mode) to test\nyour integration.\n\nValidate APIs in the `/v2` namespace using Sandboxes, an isolated environment.\nTest mode is unsupported.\n\n**Read more:** [Sandboxes](https://docs.stripe.com/sandboxes)\n\n**Send idempotent requests**\n\nWhen providing the `Idempotency-Key` header with a unique identifier, if the API\nalready processed the request, it returns the previously stored request.\n\nWhen providing the `Idempotency-Key` header with a unique identifier, the API\nretries any failed requests without producing side effects (any extraneous\nchange or observable behavior that occurs as a result of an API call).\n\n**Read more:**\n[Idempotency](https://docs.stripe.com/api-v2-overview#idempotency)\n\n**Receive events from Stripe**\n\nMost events emitted from APIs in the `/v1` namespace include a snapshot of an\nAPI object in their payload. Some APIs in the `/v1` namespace generate thin\nevents, which include a minimal, unversioned push payload.\n\nEvents emitted from APIs in the `/v2` namespace are [thin\nevents](https://docs.stripe.com/event-destinations#events-overview).\n\n**Read more:** [Event destinations](https://docs.stripe.com/event-destinations)\n\n**Paginating through a list**\n\nSpecify an object’s ID as the starting element for list API requests. Use the\n`starting_after`, `ending_before`, and `has_more` properties from the API\nresponse to paginate through a list.\n\nSpecify the `page` token for list API requests. Use the `previous_page_url` and\n`next_page_url` properties in the API response to paginate through a list.\n\n**Read more:** [List\npagination](https://docs.stripe.com/api-v2-overview#list-pagination)\n\nConsistency guarantees for listsTop-level lists are immediately consistent (with\nhigher latency to render). Some sublists are eventually consistent.Lists are\neventually consistent by default and lower-latency.\n**Fetch additional data with expansion**\n\nUse the `expand` parameter to replace IDs for related API objects with\nfully-expanded child objects.\n\n**Read more:** [Expanding responses](https://docs.stripe.com/expand)\n\nThe `expand` parameter isn’t supported. Some APIs in this namespace might\nprovide additional fields in their responses by using the include parameter.\n\nManage metadataRemove a key-value pair by setting the value to an empty\nstring.Remove a key-value pair by setting the value to `null`.\n## SDKs that support API v2\n\nAll server-side SDKs (except Golang) support APIs in the `/v2` namespace:\n\n[Node.js SDKSDK](https://docs.stripe.com/sdks/v2?lang=node)[Java\nSDKSDK](https://docs.stripe.com/sdks/v2?lang=java)[Python\nSDKSDK](https://docs.stripe.com/sdks/v2?lang=python)[.NET\nSDKSDK](https://docs.stripe.com/sdks/v2?lang=dotnet)[Ruby\nSDKSDK](https://docs.stripe.com/sdks/v2?lang=ruby)[PHP\nSDKSDK](https://docs.stripe.com/sdks/v2?lang=php)\nIf you use Golang, access APIs in the `/v2` namespace with the [custom requests\nfeature](https://github.com/stripe/stripe-go?tab=readme-ov-file#custom-request).\n\n### Using API v2 with the Stripe CLI\n\nUse `stripe trigger` and `stripe listen` to test your integration’s event\nhandling. You can’t access APIs in the `/v2` namespace using the Stripe CLI.\n\n## SDK, CLI, and API versioning\n\nSDKs and the Stripe CLI automatically include an API version for all requests.\nAfter you update your SDK or CLI version, Stripe simultaneously updates the API\nversion of your requests and responses.\n\n#### Include Stripe-Version without SDK or CLI\n\nAll API requests to the API `/v2` namespace must include the `Stripe-Version`\nheader to specify the underlying API version.\n\nFor example, a curl request using API version `2024-09-30.acacia` looks like:\n\n```\ncurl -G https://api.stripe.com/v2/core/events \\\n -H \"Authorization: Bearer {{YOUR_API_KEY}}\" \\\n -H \"Stripe-Version: 2024-09-30.acacia\" \\\n -d object_id=fa_123\n```\n\n## Using APIs from the v1 and v2 namespaces in the same integration\n\nYou can use any combination of APIs in the `/v1` or `/v2` namespace in the same\nintegration.\n\n```\nimport com.stripe.StripeClient;\n\nStripeClient stripe = new StripeClient(\"{{YOUR_API_KEY}}\");\n\n// Call a v2 API\nEvent event = stripe.v2().core().events().retrieve(\"evt_123\");\n\n// Call a v1 API\nCustomer customer = stripe.customers().retrieve(\"cus_123\");\n```\n\nIf you’re not using an official SDK or the CLI, always include the namespace in\nthe URL path for your API calls. For example:\n\n```\n# Call a v2 API\ncurl https://api.stripe.com/v2/core/events?object_id=mtr_123\n\n# Call a v1 API\ncurl https://api.stripe.com/v1/charges -d amount=2000 -d currency=usd\n```\n\n## List pagination\n\nAPIs within the `/v2` namespace (for example, `GET /v2/core/events`) contain a\ndifferent pagination interface compared to those in the `/v1` namespace.\n\n- The `previous_page_url` property returns a URL to fetch the previous page of\nthe list. If there are no previous pages, the value is `null`.\n- The `next_page_url` property returns a URL to fetch the next page of the list.\nIf there are no more pages, the value is `null`.\n\nYou can’t change list filters after the first request.\n\n```\nStripeClient stripe = new StripeClient(\"{{YOUR_API_KEY}}\");\n\nEventListParams params =\n EventListParams.builder()\n .setObjectId(\"mtr_123\")\n .build();\n\nfor (Event event :\nstripe.v2().core().events().list(params).autoPagingIterable()) {\n // process event object\n}\n```\n\n## Idempotency\n\nAPIs in the `/v2` namespace provide improved support for idempotency behavior,\npreventing unintended side effects when requests are performed multiple times\nusing the same idempotency key. When the API receives two requests with the same\nidempotency key:\n\n- If the first request succeeded, the API skips making new changes and returns\nan updated response.\n- If the first request failed (or partially failed), the API re-executes the\nfailed requests and returns the new response.\n- In the rare event that it’s no longer possible for an idempotent replay to\nsucceed, the API returns an error explaining why.\n\nTwo requests are considered idempotent if the following are all true:\n\n- Use the same idempotency key for the same API\n- Occur in the scope of the same account or sandbox\n- Occur within the last 30 days of each other\n\nTo specify an idempotency key, use the `Idempotency-Key` header and provide a\nunique value to represent the operation (we recommend a UUID). If no key is\nprovided, Stripe automatically generates a UUID for you.\n\nAll `POST` and `DELETE` API v2 requests accept idempotency keys and behave\nidempotently. `GET` requests are idempotent by definition, so sending an\nidempotency key has no effect.\n\n## Idempotency differences between API v1 and API v2\n\nAPI v1 and API v2 idempotency have a few key differences:\n\n- API v1 only supports idempotent replay for `POST` requests. API v2 supports\nall `POST` and `DELETE` requests.\n- Two requests are considered idempotent for:- API v1 if they use the same\nidempotency key and occur within 24 hours of each other.\n- API v2 if they use the same idempotency key, are made to the same API, occur\nwithin the scope of the account or sandbox, and are made within 30 days of each\nother.\n- When you provide the same idempotency key for two requests:- API v1 always\nreturns the previously-saved response of the first API request, even if it was\nan error.\n- API v2 attempts to retry any failed requests without producing side effects\n(any extraneous change or observable behavior that occurs as a result of an API\ncall) and provide an updated response.\n\n### Making idempotent requests\n\nUsing the SDK, provide an idempotency key with the `idempotencyKey` property in\nAPI requests.\n\nFor example, to make an API request with a specific idempotency key:\n\n```\nStripeClient stripe = new StripeClient(\"{{YOUR_API_KEY}}\");\n\nString idempotencyKey = \"unique-idempotency-key\";\nExample result = stripe.v2().examples().create(\n ExampleCreateParams.builder()\n .setName(\"My example\")\n .build(),\n\n RequestOptions.builder()\n .setIdempotencyKey(idempotencyKey)\n .build());\n```\n\nIf you’re not using a SDK or the CLI, requests can include the `Idempotency-Key`\nheader:\n\n```\ncurl https://api.stripe.com/v2/examples \\\n -H \"Authorization: Bearer {{YOUR_API_KEY}}\" \\\n -H \"Stripe-Version: {{STRIPE_API_VERSION}}\" \\\n -H \"Idempotency-Key: unique-idempotency-key\" \\\n -d <JSON request body>\n```\n\n## Limitations\n\n- Test mode doesn’t support `/v2`; however, you can use a sandbox to test within\nthis namespace.\n- Restricted keys don’t currently support API v2. To call API v2, use a secret\nkey.\n- The Go SDK doesn’t currently support `/v2` directly; however, you can make\n[custom\nrequests](https://github.com/stripe/stripe-go?tab=readme-ov-file#custom-request)\nto `/v2` APIs.\n- Currently, Stripe only generates thin events using `/v2` endpoints and\nresources.\n- The CLI supports `trigger` and `listen` commands for `/v2` thin events;\nhowever, it doesn’t support `/v2` resource creation.\n- The Developers Dashboard and Workbench don’t display `/v2` thin events on the\nglobal Events tab; however, `/v2` thin events are listed for each event\ndestination in the **Event deliveries** tab.\n- You can only see request logs generated by API v2 in\n[Workbench](https://docs.stripe.com/workbench), not in the Developers Dashboard.\n- `/v2` APIs are unavailable for accounts in India.\n\n## Links\n\n- [test mode](https://docs.stripe.com/test-mode)\n- [Sandboxes](https://docs.stripe.com/sandboxes)\n- [thin events](https://docs.stripe.com/event-destinations#events-overview)\n- [Event destinations](https://docs.stripe.com/event-destinations)\n- [Expanding responses](https://docs.stripe.com/expand)\n- [Node.js SDKSDK](https://docs.stripe.com/sdks/v2?lang=node)\n- [Java SDKSDK](https://docs.stripe.com/sdks/v2?lang=java)\n- [Python SDKSDK](https://docs.stripe.com/sdks/v2?lang=python)\n- [.NET SDKSDK](https://docs.stripe.com/sdks/v2?lang=dotnet)\n- [Ruby SDKSDK](https://docs.stripe.com/sdks/v2?lang=ruby)\n- [PHP SDKSDK](https://docs.stripe.com/sdks/v2?lang=php)\n- [custom requests\nfeature](https://github.com/stripe/stripe-go?tab=readme-ov-file#custom-request)\n- [Workbench](https://docs.stripe.com/workbench)",
  "metadata": {
    "title": "API v2 overview | Stripe Documentation",
    "description": "Understand the behavior of APIs in the v2 namespace.",
    "sourceURL": "https://docs.stripe.com/api-v2-overview"
  }
}