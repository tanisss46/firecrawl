{
  "content": "# Run a report from the API\n\n## Access Stripe's financial reports programmatically to automate your reconciliation workflow.\n\n#### Note\n\nYou can now automatically send your Stripe data and reports to Snowflake or\nAmazon Redshift in a few clicks with Stripe Data Pipeline. [Learn\nmore](https://stripe.com/data-pipeline).\n\nThe [financial reports](https://dashboard.stripe.com/reports) in the Dashboard\nprovide downloadable reports in CSV format for a variety of accounting and\nreconciliation tasks. These reports are also available through the API, so you\ncan schedule them to run automatically or run them whenever you need to receive\nthe associated report files for accounting purposes.\n\n## Report types\n\nEach financial report in the Dashboard provides several different CSV downloads.\nAll of the available downloads for the following reports are also available from\nthe API:\n\n- [Balance](https://docs.stripe.com/reports/report-types/balance)\n- [Payout\nreconciliation](https://docs.stripe.com/reports/report-types/payout-reconciliation)\n- [Tax](https://docs.stripe.com/reports/report-types/tax)\n- [Connect platforms](https://docs.stripe.com/reports/report-types/connect)\n\n#### CSV and API monetary formats differ\n\nThe CSV reports format monetary amounts in *major* currency units as a decimal\nnumber. For example, The CSV formats 10 USD as dollars-and-cents (`10.00`). This\ndiffers from the Stripe API, where you specify amounts in the currency’s *minor*\nunit (US cents) as an integer. In the API, you format 10 USD as cents (`1000`).\n\n### Run parameters\n\nEach report has both required and optional parameters you provide when creating\na report run. Consider the following when running reports:\n\n- Nearly every report type requires providing the run parameters\n`interval_start` (inclusive) and `interval_end` (exclusive) as Unix timestamps.\n- Each corresponding report type resource has `data_available_start` and\n`data_available_end` fields. The API returns an invalid request error (status\ncode `400`) if your run doesn’t meet the following contraints:- The\n`interval_start` and `interval_end` values must be between\n`data_available_start` and `data_available_end` (inclusive).\n- The `interval_start` value must be *before* (and not equal to) `interval_end`.\n- You can only download a report in a time zone for a `ReportType` with a\n`timezone` parameter. To do so, create a `ReportRun` object and supply the\ndesired TZ database time zone name. The `timezone` parameter is optional and\ndefaults to UTC if not supplied. See [IANA Time Zone\nDatabase](https://www.iana.org/time-zones) for a list of valid timezone values.\n- The optional parameters `currency` and `report_category` filter results to\njust those rows matching the provided values.\n- Reports return a default set of columns, but most report types allow you to\ncustomize the selection and ordering of columns in the output by including the\noptional `columns` parameter with a list of column names.\n\n## Data availability\n\nStripe prepares data for your reports on a semi-daily basis. [Report\noptions](https://docs.stripe.com/reports/options#data-availability) provides\ndetails on expected processing time and data availability for each report.\n\nTo programmatically determine the time range of data available for a given\nreport type,\n[retrieve](https://docs.stripe.com/api#retrieve_reporting_report_type) the\n`ReportType` object of interest. For example, the **Balance summary** report has\nthe ID `balance.summary.1`, so you can retrieve the object as follows:\n\n```\ncurl https://api.stripe.com/v1/reporting/report_types/balance.summary.1 \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2:\n```\n\nIn the example response below, the fields `data_available_start` and\n`data_available_end` reflect the full range of valid times for this report type.\nHowever, you’ll most often be running reports for a smaller interval within that\nrange:\n\n```\n{\n \"id\": \"balance.summary.1\",\n \"name\": \"Balance summary\",\n \"version\": \"1\",\n \"object\": \"reporting.report_type\",\n \"data_available_start\": 1519862400,\n \"data_available_end\": 1517356800,\n \"updated\": 1517382720,\n}\n```\n\nTimestamps, such as `date_available_start`, are measured in seconds since the\nUnix epoch. For example, `1519862400` represents the timestamp, `2018-03-01\n00:00`.\n\n### New data notifications\n\nAs soon as a report type has new data available, Stripe publishes a\n`reporting.report_type.updated` event with the updated `ReportType` object. To\naccess these events, you must have a [webhook\nconfigured](https://docs.stripe.com/webhooks#register-webhook) that explicitly\nselects to receive `reporting.report_type.updated` events; webhooks that listen\nfor ‘all events’ won’t receive them. After you receive such an event, you can\nthen run the report. For details, see the [recommended integration\npattern](https://docs.stripe.com/reports/api#integration-pattern).\n\n## Creating and accessing report runs\n\nThe `ReportRun` API object represents an instance of a `ReportType` generated\nwith specific parameters. Review the documentation for the [report\ntype](https://docs.stripe.com/reports/api#report-types) for the list of required\nand optional parameters for that type. For example, you can\n[create](https://docs.stripe.com/api/reporting/report_run/create) a **Balance\nchange from activity summary** report for April 2020 as follows:\n\n```\ncurl https://api.stripe.com/v1/reporting/report_runs \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"report_type\"=\"balance_change_from_activity.itemized.3\" \\\n -d \"parameters[interval_start]\"=1577865600 \\\n -d \"parameters[interval_end]\"=1580544000 \\\n -d \"parameters[timezone]\"=\"America/Los_Angeles\" \\\n -d \"parameters[columns][]\"=\"created\" \\\n -d \"parameters[columns][]\"=\"reporting_category\" \\\n -d \"parameters[columns][]\"=\"net\"\n\n# Timestamps are for 2020-01-01 00:00 PST and 2020-02-01 00:00 PST.\n# The columns parameter is optional. A default set of columns will be provided if you don't specify a value.\n# Note that a live-mode API key is required.\n```\n\nWhen first created, the object appears with `status=\"pending\"`:\n\n```\n{\n \"id\": \"frr_123\",\n \"object\": \"reporting.report_run\",\n \"livemode\": true,\n \"report_type\": \"balance_change_from_activity.itemized.3\",\n \"parameters\": {\n \"columns\": [ \"created\", \"reporting_category\", \"net\" ],\n \"interval_start\": 1577865600,\n \"interval_end\": 1580544000,\n \"timezone\": \"America/Los_Angeles\"\n },\n \"created\": 1580832900,\n \"status\": \"pending\",\n \"result\": null\n}\n```\n\nWhen the run completes, Stripe updates the object, and it has a `status` of\n`succeeded`. It also has a nested `result` object, containing a URL that you can\nuse to access the file with your API key. For example, if you were to\n[retrieve](https://docs.stripe.com/api/reporting/report_run/retrieve) the above\nreport run after it completes, the response would be:\n\n```\n{\n \"id\": \"frr_123\",\n \"object\": \"reporting.report_run\",\n \"livemode\": true,\n \"report_type\": \"balance_change_from_activity.itemized.3\",\n \"parameters\": {\n \"columns\": [ \"created\", \"reporting_category\", \"net\" ],\n \"interval_start\": 1577865600,\n \"interval_end\": 1580544000,\n \"timezone\": \"America/Los_Angeles\"\n },\n \"created\": 1580832900,\n \"status\": \"succeeded\",\n \"succeeded_at\": 1580832960,\n \"result\": {\n \"id\": \"file_xs8vrJzC\",\n \"object\": \"file\",\n \"url\": \"https://files.stripe.com/v1/files/file_xs8vrJzC/contents\",\n \"created\": 1580832960,\n \"purpose\": \"report_run\",\n \"size\": 53075,\n \"type\": \"csv\"\n }\n}\n```\n\nTo retrieve the file contents, use your API key to access the file specified by\n`result.url`:\n\n```\ncurl https://files.stripe.com/v1/files/file_xs8vrJzC/contents \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2:\n```\n\n#### Notification of report run completion\n\nMost runs complete within a few minutes. However, some runs could take\nlonger—depending on the size of your total data set, and on the time range your\nreport covers.\n\nWhen a requested report run completes, Stripe sends one of two webhooks:\n\n- A `reporting.report_run.succeeded` webhook will be sent if the run completes\nsuccessfully.\n- A `reporting.report_run.failed` webhook will be sent if the run fails. (This\nshould be rare, but we recommend that integrations be prepared to handle this\ncase in the same manner as catching a `500` response.)\n\nIn both cases, the webhook payload includes the updated `ReportRun` object,\nwhich includes status `succeeded` or `failed`, respectively.\n\n## Recommended integration pattern for automated reporting\n\nConfigure a webhook that explicitly selects to receive\n`reporting.report_type.updated` events; webhooks that listen for ‘all events’\nwon’t receive them.\n\n- A `reporting.report_type.updated` webhook is sent as soon as a new day’s data\nis available for a given report type. The payload includes the updated\n`ReportType` object. You’ll typically receive 20-30 webhooks each day, two for\neach report type. (Different users are eligible for different reports.)\n- Upon receiving the `reporting.report_type.updated` webhook for the desired\nreport type and range of data availability, [create a report\nrun](https://docs.stripe.com/api/reporting/report_run/create). The response\ncontains a new `ReportRun` object, initialized with `status=pending`.\n- When the run completes, a `reporting.report_run.succeeded` webhook is sent.\nThis webhook includes the nested field `result.url`. (As mentioned above, in the\nrare case of a failure, we’ll send a `reporting.report_run.failed` event\ninstead.)\n- Access the file contents at `result.url`, using your API key.\n\n## Links\n\n- [Learn more](https://stripe.com/data-pipeline)\n- [financial reports](https://dashboard.stripe.com/reports)\n- [Balance](https://docs.stripe.com/reports/report-types/balance)\n- [Payout\nreconciliation](https://docs.stripe.com/reports/report-types/payout-reconciliation)\n- [Tax](https://docs.stripe.com/reports/report-types/tax)\n- [Connect platforms](https://docs.stripe.com/reports/report-types/connect)\n- [IANA Time Zone Database](https://www.iana.org/time-zones)\n- [Report options](https://docs.stripe.com/reports/options#data-availability)\n- [retrieve](https://docs.stripe.com/api#retrieve_reporting_report_type)\n- [webhook configured](https://docs.stripe.com/webhooks#register-webhook)\n- [create](https://docs.stripe.com/api/reporting/report_run/create)\n- [retrieve](https://docs.stripe.com/api/reporting/report_run/retrieve)\n-\n[https://files.stripe.com/v1/files/file_xs8vrJzC/contents](https://files.stripe.com/v1/files/file_xs8vrJzC/contents)",
  "metadata": {
    "title": "Run a report from the API | Stripe Documentation",
    "description": "Access Stripe's financial reports programmatically to automate your reconciliation workflow.",
    "sourceURL": "https://docs.stripe.com/reports/api"
  }
}