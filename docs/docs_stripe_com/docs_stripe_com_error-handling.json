{
  "content": "# Error handling\n\n## Catch and respond to declines, invalid data, network problems, and more.\n\nRubyPythonPHPJavaNode.jsGo.NET\nStripe offers many kinds of errors. They can reflect external events, like\ndeclined payments and network interruptions, or code problems, like invalid API\ncalls.\n\nTo handle errors, use some or all of the techniques in the table below. No\nmatter what technique you use, you can follow up with our [recommended responses\nfor each error type](https://docs.stripe.com/error-handling#error-types).\n\nTechniquePurposeWhen needed[Catch\nexceptions](https://docs.stripe.com/error-handling#catch-exceptions)Recover when\nan API call can’t continueAlways[Monitor\nwebhooks](https://docs.stripe.com/error-handling#monitor-webhooks)React to\nnotifications from StripeSometimes[Get stored information about\nfailures](https://docs.stripe.com/error-handling#use-stored-information)Investigate\npast problems and support other techniquesSometimes\n## Catch exceptions\n\nIf an immediate problem prevents an API call from continuing, the Stripe Ruby\nlibrary raises an exception. It’s a best practice to catch and handle\nexceptions.\n\nTo catch an exception, use Ruby’s `rescue` keyword. Catch `Stripe::StripeError`\nor its subclasses to handle Stripe-specific exceptions only. Each subclass\nrepresents a different kind of exception. When you catch an exception, you can\n[use its class to choose a\nresponse](https://docs.stripe.com/error-handling#error-types).\n\n```\nrequire 'stripe'\n\nStripe.api_key = 'sk_test_BQokikJOvBiI2HlWgH4olfQ2'\n\ndef example_function(params)\n begin\n Stripe::PaymentIntent.create(params)\n rescue Stripe::CardError => e\n puts \"A payment error occurred: #{e.error.message}\"\n rescue Stripe::InvalidRequestError => e\n puts \"An invalid request occurred.\"\n rescue Stripe::StripeError => e\n puts \"Another problem occurred, maybe unrelated to Stripe.\"\n else\n puts \"No error.\"\n end\nend\n```\n\nAfter setting up exception handling, test it on a variety of data, including\n[test cards](https://docs.stripe.com/testing), to simulate different payment\noutcomes.\n\nError to trigger:Invalid requestCard errorNo error\n```\nexample_function(\n # The required parameter currency is missing,\n amount: 2000,\n confirm: true,\n payment_method: 'pm_card_visa',\n)\n```\n\n```\nAn invalid request occurred.\n\n```\n\n## Monitor webhooks\n\nStripe notifies you about many kinds of problems using\n[webhooks](https://docs.stripe.com/webhooks). This includes problems that don’t\nfollow immediately after an API call. For example:\n\n- You lose a dispute.\n- A recurring payment fails after months of success.\n- Your frontend [confirms](https://docs.stripe.com/api/payment_intents/confirm)\na payment, but goes offline before finding out the payment fails. (The backend\nstill receives webhook notification, even though it wasn’t the one to make the\nAPI call.)\n\nYou don’t need to handle every webhook event type. In fact, some integrations\ndon’t handle any.\n\nIn your webhook handler, start with the basic steps from the [webhook\nbuilder](https://docs.stripe.com/webhooks/quickstart): get an event object and\nuse the event type to find out what happened. Then, if the event type indicates\nan error, follow these extra steps:\n\n- Access\n[event.data.object](https://docs.stripe.com/api/events/object#event_object-data-object)\nto retrieve the affected object.\n- [Use stored\ninformation](https://docs.stripe.com/error-handling#use-stored-information) on\nthe affected object to gain context, including an error object.\n- [Use its type to choose a\nresponse](https://docs.stripe.com/error-handling#error-types).\n\n```\nrequire 'stripe'\nrequire 'sinatra'\npost '/webhook' do\n payload = request.body.read\n data = JSON.parse(payload, symbolize_names: true)\n\n # Get the event object\n event = Stripe::Event.construct_from(data)\n\n # Use the event type to find out what happened\n case event.type\n when 'payment_intent.payment_failed'\n\n # Get the object affected\n payment_intent = event.data.object\n\n # Use stored information to get an error object\n e = payment_intent.last_payment_error\n\n # Use its type to choose a response\n case e.type\n when 'card_error'\n puts \"A payment error occurred: #{e.message}\"\n when 'invalid_request'\n puts \"An invalid request occurred.\"\n else\n puts \"Another problem occurred, maybe unrelated to Stripe.\"\n end\n end\n\n content_type 'application/json'\n {\n status: 'success'\n }.to_json\nend\n```\n\nTo test how your integration responds to webhook events, you can [trigger\nwebhook events locally](https://docs.stripe.com/webhooks#test-webhook). After\ncompleting the setup steps at that link, trigger a failed payment to see the\nresulting error message.\n\n```\nstripe trigger payment_intent.payment_failed\n```\n\n```\nA payment error occurred: Your card was declined.\n```\n\n## Get stored information about failures\n\nMany objects store information about failures. That means that if something\nalready went wrong, you can retrieve the object and examine it to learn more. In\nmany cases, stored information is in the form of an error object, and you can\n[use its type to choose a\nresponse](https://docs.stripe.com/error-handling#error-types).\n\nFor instance:\n\n- Retrieve a specific payment intent.\n- Check if it experienced a payment error by determining if\n[last_payment_error](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-last_payment_error)\nis empty.\n- If it did, log the error, including its type and the affected object.\n\n```\nrequire 'stripe'\nStripe.api_key = 'sk_test_BQokikJOvBiI2HlWgH4olfQ2'\n\npayment_intent = Stripe::PaymentIntent.retrieve('{{PAYMENT_INTENT_ID}}')\ne = payment_intent.last_payment_error\nif !e.nil?\n puts \"PaymentIntent #{payment_intent.id} experienced a #{e.type}.\"\nend\n```\n\nHere are common objects that store information about failures.\n\nObjectAttributeValues[Payment\nIntent](https://docs.stripe.com/api/payment_intents)`last_payment_error`[An\nerror\nobject](https://docs.stripe.com/error-handling#work-with-error-objects)[Setup\nIntent](https://docs.stripe.com/api/setup_intents)`last_setup_error`[An error\nobject](https://docs.stripe.com/error-handling#work-with-error-objects)[Invoice](https://docs.stripe.com/api/invoices)`last_finalization_error`[An\nerror\nobject](https://docs.stripe.com/error-handling#work-with-error-objects)[Setup\nAttempt](https://docs.stripe.com/api/setup_attempts)`setup_error`[An error\nobject](https://docs.stripe.com/error-handling#work-with-error-objects)[Payout](https://docs.stripe.com/api/payouts)`failure_code`[A\npayout failure\ncode](https://docs.stripe.com/api/payouts/failures)[Refund](https://docs.stripe.com/api/refunds)`failure_reason`[A\nrefund failure\ncode](https://docs.stripe.com/api/refunds/object#refund_object-failure_reason)\nTo test code that uses stored information about failures, you often need to\nsimulate failed transactions. You can often do this using [test\ncards](https://docs.stripe.com/testing) or test bank numbers. For example:\n\n- [Simulate a declined\npayment](https://docs.stripe.com/testing#declined-payments), for creating failed\nCharges, PaymentIntents, SetupIntents, and so on.\n- [Simulate a failed\npayout](https://docs.stripe.com/connect/testing#account-numbers).\n- [Simulate a failed refund](https://docs.stripe.com/testing#refunds).\n\n## Types of error and responses\n\nIn the Stripe Ruby library, error objects belong to `stripe.error.StripeError`\nand its subclasses. Use the documentation for each class for advice on\nresponding.\n\nName\nClass\n\nDescriptionPayment error\n[Stripe::CardError](https://docs.stripe.com/error-handling#payment-errors)\n\nAn error occurred during a payment, involving one of these situations:- [Payment\nblocked for suspected\nfraud](https://docs.stripe.com/error-handling#payment-blocked)\n- [Payment declined by the\nissuer](https://docs.stripe.com/error-handling#payment-declined).\n- [Other payment\nerrors](https://docs.stripe.com/error-handling#other-payment-errors).\nInvalid request error\n\n[Stripe::InvalidRequestError](https://docs.stripe.com/error-handling#invalid-request-errors)\n\nYou made an API call with the wrong parameters, in the wrong state, or in an\ninvalid way.\n\nConnection error\n\n[Stripe::APIConnectionError](https://docs.stripe.com/error-handling#connection-errors)\n\nThere was a network problem between your server and Stripe.API error\n[Stripe::APIError](https://docs.stripe.com/error-handling#api-errors)\n\nSomething went wrong on Stripe’s end. (These are rare.)Authentication error\n\n[Stripe::AuthenticationError](https://docs.stripe.com/error-handling#authentication-errors)\n\nStripe can’t authenticate you with the information provided.Idempotency error\n\n[Stripe::IdempotencyError](https://docs.stripe.com/error-handling#idempotency-errors)\n\nYou used an [idempotency key](https://docs.stripe.com/api/idempotent_requests)\nfor something unexpected, like replaying a request but passing different\nparameters.Permission error\n\n[Stripe::PermissionError](https://docs.stripe.com/error-handling#permission-errors)\n\nThe API key used for this request does not have the necessary permissions.Rate\nlimit error\n\n[Stripe::RateLimitError](https://docs.stripe.com/error-handling#rate-limit-errors)\n\nYou made too many API calls in too short a time.Signature verification error\n\n[Stripe::SignatureVerificationError](https://docs.stripe.com/error-handling#signature-verification-errors)\n\nYou’re using [webhook](https://docs.stripe.com/webhooks) [signature\nverification](https://docs.stripe.com/webhooks#verify-events) and couldn’t\nverify that a webhook event is authentic.\n## Payment errors\n\nPayment errors—sometimes called “card errors” for historical reasons—cover a\nwide range of common problems. They come in three categories:\n\n- [Payment blocked for suspected\nfraud](https://docs.stripe.com/error-handling#payment-blocked)\n- [Payment declined by the\nissuer](https://docs.stripe.com/error-handling#payment-declined)\n- [Other payment\nerrors](https://docs.stripe.com/error-handling#other-payment-errors)\n\nTo distinguish these categories or get more information about how to respond,\nconsult the [error code](https://docs.stripe.com/error-codes), [decline\ncode](https://docs.stripe.com/declines/codes), and [charge\noutcome](https://docs.stripe.com/api/charges/object#charge_object-outcome).\n\n(To find the charge outcome from an error object, first get the [Payment Intent\nthat’s involved](https://docs.stripe.com/api/errors#errors-payment_intent) and\nthe [latest Charge it\ncreated](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-latest_charge).\nSee the example below for a demonstration.)\n\n```\nrequire 'stripe'\nStripe.api_key = 'sk_test_BQokikJOvBiI2HlWgH4olfQ2'\n\ndef example_function(params)\n begin\n Stripe::PaymentIntent.create(params)\n rescue Stripe::CardError => e\n charge = Stripe::Charge.retrieve(e.error.payment_intent.latest_charge)\n if charge.outcome.type == 'blocked'\n puts 'Payment blocked for suspected fraud.'\n elsif e.code == 'card_declined'\n puts 'Payment declined by the issuer.'\n elsif e.code == 'expired_card'\n puts 'Card expired.'\n else\n puts 'Other card error.'\n end\n end\nend\n```\n\nUsers on API version [2022-08-01](https://docs.stripe.com/upgrades#2022-08-01)\nor older:\n\n(To find the charge outcome from an error object, first get the [Payment Intent\nthat’s involved](https://docs.stripe.com/api/errors#errors-payment_intent) and\nthe [latest Charge it\ncreated](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-charges-data).\nSee the example below for a demonstration.)\n\n```\nrequire 'stripe'\nStripe.api_key = 'sk_test_BQokikJOvBiI2HlWgH4olfQ2'\n\ndef example_function(params)\n begin\n Stripe::PaymentIntent.create(params)\n rescue Stripe::CardError => e\n if e.error.payment_intent.charges.data[0].outcome.type == 'blocked'\n puts 'Payment blocked for suspected fraud.'\n elsif e.code == 'card_declined'\n puts 'Payment declined by the issuer.'\n elsif e.code == 'expired_card'\n puts 'Card expired.'\n else\n puts 'Other card error.'\n end\n end\nend\n```\n\nYou can trigger some common kinds of payment error with test cards. Consult\nthese lists for options:\n\n- [Simulating payments blocked for fraud\nrisk](https://docs.stripe.com/testing#fraud-prevention)\n- [Simulating declined payments and other card\nerrors](https://docs.stripe.com/testing#declined-payments)\n\nThe test code below demonstrates a few possibilities.\n\nError to trigger:Blocked for suspected fraudDeclined by the issuerCard\nexpiredOther card error\n```\nexample_function(\n currency: 'usd',\n amount: 2000,\n confirm: true,\n payment_method: 'pm_card_radarBlock',\n)\n```\n\n```\nPayment blocked for suspected fraud.\n\n```\n\n### Payment blocked for suspected fraud\n\nType\n`Stripe::CardError`\n\nCodes\n```\ncharge = Stripe::Charge.retrieve(e.error.payment_intent.latest_charge)\ncharge.outcome.type == 'blocked'\n```\n\nCodes\n`e.error.payment_intent.charges.data[0].outcome.type == 'blocked'`\n\nProblemStripe’s fraud prevention system, [Radar](https://docs.stripe.com/radar),\nblocked the payment\n**Solutions**\n\nThis error can occur when your integration is working correctly. Catch it and\nprompt the customer for a different payment method.\n\nTo block fewer legitimate payments, try these:\n\n- [Optimize your Radar integration](https://docs.stripe.com/radar/integration)\nto collect more detailed information.\n- Use [Payment Links](https://docs.stripe.com/payment-links),\n[Checkout](https://docs.stripe.com/payments/checkout), or [Stripe\nElements](https://docs.stripe.com/payments/elements) for prebuilt optimized form\nelements.\n\n[Radar for Fraud Teams](https://docs.stripe.com/radar) customers have these\nadditional options:\n\n- To exempt a specific payment, add it to your allowlist. Radar for Fraud Teams\n- To change your risk tolerance, adjust your [risk\nsettings](https://docs.stripe.com/radar/risk-settings). Radar for Fraud Teams\n- To change the criteria for blocking a payment, use [custom\nrules](https://docs.stripe.com/radar/rules). Radar for Fraud Teams\n\nYou can test your integration’s settings with [test cards that simulate\nfraud](https://docs.stripe.com/radar/testing). If you have custom Radar rules,\nfollow the testing advice in the [Radar\ndocumentation](https://docs.stripe.com/radar/testing).\n\n### Payment declined by the issuer\n\nType\n`Stripe::CardError`\n\nCodes\n`e.error.code == \"card_declined\"`\n\nProblemThe card issuer declined the payment.\n**Solutions**\n\nThis error can occur when your integration is working correctly. It reflects an\naction by the issuer, and that action may be legitimate. Use the decline code to\ndetermine what next steps are appropriate. See the [documentation on decline\ncodes](https://docs.stripe.com/declines/codes) for appropriate responses to each\ncode.\n\nYou can also:\n\n- [Follow recommendations to reduce issuer\ndeclines](https://docs.stripe.com/declines/card#reducing-bank-declines).\n- Use [Payment Links](https://docs.stripe.com/payment-links),\n[Checkout](https://docs.stripe.com/payments/checkout), or [Stripe\nElements](https://docs.stripe.com/payments/elements) for prebuilt form elements\nthat implement those recommendations.\n\nTest how your integration handles declines with [test cards that simulate\nsuccessful and declined payments](https://docs.stripe.com/radar/testing).\n\n### Other payment errors\n\nType\n`Stripe::CardError`\n\nProblemAnother payment error occurred.SolutionsThis error can occur when your\nintegration is working correctly. Use the error code to determine what next\nsteps are appropriate. See the [documentation on error\ncodes](https://docs.stripe.com/error-codes) for appropriate responses to each\ncode.\n## Invalid request errors\n\nType \n`Stripe::InvalidRequestError`\n\nProblem You made an API call with the wrong parameters, in the wrong state, or\nin an invalid way.Solutions In most cases, the problem is with the request\nitself. Either its parameters are invalid or it can’t be carried out in your\nintegration’s current state.- Consult the [error code\ndocumentation](https://docs.stripe.com/error-codes) for details on the problem.\n- For convenience, you can follow the link at for documentation about the error\ncode.\n- If the error involves a specific parameter, use to determine which one.\n\n## Connection errors\n\nType\n`Stripe::APIConnectionError`\n\nProblemThere was a network problem between your server and Stripe.\n**Solutions**\n\nTreat the result of the API call as indeterminate. That is, don’t assume that it\nsucceeded or that if failed.\n\nTo find out if it succeeded, you can:\n\n- Retrieve the relevant object from Stripe and check its status.\n- Listen for webhook notification that the operation succeeded or failed.\n\nTo help recover from connection errors, you can:\n\n- When creating or updating an object, use an [idempotency\nkey](https://docs.stripe.com/api/idempotent_requests). Then, if a connection\nerror occurs, you can safely repeat the request without risk of creating a\nsecond object or performing the update twice. Repeat the request with the same\nidempotency key until you receive a clear success or failure. For advanced\nadvice on this strategy, see [Low-level error\nhandling](https://docs.stripe.com/error-low-level#idempotency).\n- Turn on [automatic\nretries.](https://docs.stripe.com/error-handling#automatic-retries) Then, Stripe\ngenerates idempotency keys for you, and repeats requests for you when it is safe\nto do so.\n\nThis error can mask others. It’s possible that when the connection error\nresolves, some other error becomes apparent. Check for errors in all of these\nsolutions just as you would in the original request.\n\n## API errors\n\nType\n`Stripe::APIError`\n\nProblemSomething went wrong on Stripe’s end. (These are rare.)\n**Solutions**\n\nTreat the result of the API call as indeterminate. That is, don’t assume that it\nsucceeded or that it failed.\n\nRely on [webhooks](https://docs.stripe.com/webhooks) for information about the\noutcome. Whenever possible, Stripe fires webhooks for any new objects we create\nas we solve a problem.\n\nTo set your integration up for maximum robustness in unusual situations, see\n[this advanced discussion of server\nerrors.](https://docs.stripe.com/error-low-level#server-errors)\n\n## Authentication errors\n\nType\n`Stripe::AuthenticationError`\n\nProblemStripe can’t authenticate you with the information provided.Solutions-\nUse the correct [API key](https://docs.stripe.com/keys).\n- Make sure you aren’t using a key that you [“rolled” or\nrevoked](https://docs.stripe.com/keys#rolling-keys).\n\n## Idempotency errors\n\nType\n`Stripe::IdempotencyError`\n\nProblemYou used an [idempotency\nkey](https://docs.stripe.com/api/idempotent_requests) for something unexpected,\nlike replaying a request but passing different parameters.Solutions- After you\nuse an idempotency key, only reuse it for identical API calls.\n- Use idempotency keys under the limit of 255 characters.\n\n## Permission errors\n\nType\n`Stripe::PermissionError`\n\nProblemThe API key used for this request does not have the necessary\npermissions.Solutions- Are you using a [restricted API\nkey](https://docs.stripe.com/keys#limit-access) for a service it doesn’t have\naccess to?\n- Are you performing an action in the Dashboard while logged in as a [user\nrole](https://docs.stripe.com/get-started/account/teams/roles) that lacks\npermission?\n\n## Rate limit errors\n\nType\n`Stripe::RateLimitError`\n\nProblemYou made too many API calls in too short a time.Solutions- If a single\nAPI call triggers this error, wait and try it again.\n- To handle rate-limiting automatically, retry the API call after a delay, and\nincrease the delay exponentially if the error continues. See the documentation\non [rate limits](https://docs.stripe.com/rate-limits) for further advice.\n- If you anticipate a large increase in traffic and want to request an increased\nrate limit, [contact support](https://support.stripe.com/) in advance.\n\n## Signature verification errors\n\nType\n`Stripe::SignatureVerificationError`\n\nProblemYou’re using [webhook](https://docs.stripe.com/webhooks) [signature\nverification](https://docs.stripe.com/webhooks#verify-events) and couldn’t\nverify that a webhook event is authentic.\n**Solutions**\n\nThis error can occur when your integration is working correctly. If you use\nwebhook signature verification and a third party attempts to send you a fake or\nmalicious webhook, then verification fails and this error is the result. Catch\nit and respond with a `400 Bad Request` status code.\n\nIf you receive this error when you shouldn’t—for instance, with webhooks that\nyou know originate with Stripe—then see the documentation on [checking webhook\nsignatures](https://docs.stripe.com/webhooks#verify-events) for further advice.\nIn particular, make sure you’re using the correct endpoint secret. This is\ndifferent from your API key.\n\n## Links\n\n- [Low-level exception handling](https://docs.stripe.com/error-low-level)\n- [Error](https://docs.stripe.com/api/errors)\n- [test cards](https://docs.stripe.com/testing)\n- [webhooks](https://docs.stripe.com/webhooks)\n- [confirms](https://docs.stripe.com/api/payment_intents/confirm)\n- [webhook builder](https://docs.stripe.com/webhooks/quickstart)\n-\n[event.data.object](https://docs.stripe.com/api/events/object#event_object-data-object)\n- [trigger webhook events\nlocally](https://docs.stripe.com/webhooks#test-webhook)\n-\n[last_payment_error](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-last_payment_error)\n- [Payment Intent](https://docs.stripe.com/api/payment_intents)\n- [Setup Intent](https://docs.stripe.com/api/setup_intents)\n- [Invoice](https://docs.stripe.com/api/invoices)\n- [Setup Attempt](https://docs.stripe.com/api/setup_attempts)\n- [Payout](https://docs.stripe.com/api/payouts)\n- [A payout failure code](https://docs.stripe.com/api/payouts/failures)\n- [Refund](https://docs.stripe.com/api/refunds)\n- [A refund failure\ncode](https://docs.stripe.com/api/refunds/object#refund_object-failure_reason)\n- [Simulate a declined\npayment](https://docs.stripe.com/testing#declined-payments)\n- [Simulate a failed\npayout](https://docs.stripe.com/connect/testing#account-numbers)\n- [Simulate a failed refund](https://docs.stripe.com/testing#refunds)\n- [idempotency key](https://docs.stripe.com/api/idempotent_requests)\n- [signature verification](https://docs.stripe.com/webhooks#verify-events)\n- [error code](https://docs.stripe.com/error-codes)\n- [decline code](https://docs.stripe.com/declines/codes)\n- [charge\noutcome](https://docs.stripe.com/api/charges/object#charge_object-outcome)\n- [Payment Intent that’s\ninvolved](https://docs.stripe.com/api/errors#errors-payment_intent)\n- [latest Charge it\ncreated](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-latest_charge)\n- [2022-08-01](https://docs.stripe.com/upgrades#2022-08-01)\n- [latest Charge it\ncreated](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-charges-data)\n- [Simulating payments blocked for fraud\nrisk](https://docs.stripe.com/testing#fraud-prevention)\n- [Radar](https://docs.stripe.com/radar)\n- [Optimize your Radar integration](https://docs.stripe.com/radar/integration)\n- [Payment Links](https://docs.stripe.com/payment-links)\n- [Checkout](https://docs.stripe.com/payments/checkout)\n- [Stripe Elements](https://docs.stripe.com/payments/elements)\n- [risk settings](https://docs.stripe.com/radar/risk-settings)\n- [custom rules](https://docs.stripe.com/radar/rules)\n- [test cards that simulate fraud](https://docs.stripe.com/radar/testing)\n- [Follow recommendations to reduce issuer\ndeclines](https://docs.stripe.com/declines/card#reducing-bank-declines)\n- [Low-level error\nhandling](https://docs.stripe.com/error-low-level#idempotency)\n- [this advanced discussion of server\nerrors.](https://docs.stripe.com/error-low-level#server-errors)\n- [API key](https://docs.stripe.com/keys)\n- [“rolled” or revoked](https://docs.stripe.com/keys#rolling-keys)\n- [restricted API key](https://docs.stripe.com/keys#limit-access)\n- [user role](https://docs.stripe.com/get-started/account/teams/roles)\n- [rate limits](https://docs.stripe.com/rate-limits)\n- [contact support](https://support.stripe.com/)",
  "metadata": {
    "title": "Error handling | Stripe Documentation",
    "description": "Catch and respond to declines, invalid data, network problems, and more.",
    "sourceURL": "https://docs.stripe.com/error-handling"
  }
}