{
  "content": "# Build two-step confirmation\n\n## Add an optional review page or run validations after a user enters their payment details.\n\nWhile we recommend the [standard\nintegration](https://docs.stripe.com/payments/accept-a-payment-deferred) for\nmost scenarios, this integration allows you to add an extra step in your\ncheckout. This provides the buyer an opportunity to review their order details\nor for you to run additional validations before confirming the order.\n\n[Set up\nStripe](https://docs.stripe.com/payments/build-a-two-step-confirmation#set-up-stripe)\nFirst, you need a Stripe account. [Register\nnow](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n```\n# Available as a gem\nsudo gem install stripe\n```\n\n```\n# If you use bundler, you can add this line to your Gemfile\ngem 'stripe'\n```\n\n[Enable payment\nmethods](https://docs.stripe.com/payments/build-a-two-step-confirmation#enable-payment-methods)\n#### Caution\n\nThis integration path doesn’t support BLIK or pre-authorized debits that use the\nAutomated Clearing Settlement System (ACSS).\n\nView your [payment methods\nsettings](https://dashboard.stripe.com/settings/payment_methods) and enable the\npayment methods you want to support. You need at least one payment method\nenabled to create a\n[PaymentIntent](https://docs.stripe.com/payments/payment-intents).\n\nBy default, Stripe enables cards and other prevalent payment methods that can\nhelp you reach more customers, but we recommend turning on additional payment\nmethods that are relevant for your business and customers. See [Payment method\nsupport](https://docs.stripe.com/payments/payment-methods/payment-method-support)\nfor product and payment method support, and our [pricing\npage](https://stripe.com/pricing/local-payment-methods) for fees.\n\n[Collect payment\ndetailsClient-side](https://docs.stripe.com/payments/build-a-two-step-confirmation#web-collect-payment-details)\nYou’re ready to collect payment details on the client with the Payment Element.\nThe Payment Element is a prebuilt UI component that simplifies collecting\npayment details for a variety of payment methods.\n\nThe Payment Element contains an iframe that securely sends payment information\nto Stripe over an HTTPS connection. Avoid placing the Payment Element within\nanother iframe because some payment methods require redirecting to another page\nfor payment confirmation.\n\nThe checkout page address must start with `https://` rather than `http://` for\nyour integration to work. You can test your integration without using HTTPS, but\nremember to [enable it](https://docs.stripe.com/security/guide#tls) when you’re\nready to accept live payments.\n\nHTML + JSReact\n### Set up Stripe.js\n\nThe Payment Element is automatically available as a feature of Stripe.js.\nInclude the Stripe.js script on your checkout page by adding it to the `head` of\nyour HTML file. Always load Stripe.js directly from js.stripe.com to remain PCI\ncompliant. Don’t include the script in a bundle or host a copy of it yourself.\n\n```\n<head>\n <title>Checkout</title>\n <script src=\"https://js.stripe.com/v3/\"></script>\n</head>\n```\n\nCreate an instance of Stripe with the following JavaScript on your checkout\npage:\n\n```\n// Set your publishable key: remember to change this to your live publishable\nkey in production\n// See your keys here: https://dashboard.stripe.com/apikeys\nconst stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n```\n\n### Add the Payment Element to your checkout page\n\nThe Payment Element needs a place to live on your checkout page. Create an empty\nDOM node (container) with a unique ID in your payment form:\n\n```\n<form id=\"payment-form\">\n <div id=\"payment-element\">\n <!-- Elements will create form elements here -->\n </div>\n <button id=\"submit\">Submit</button>\n <div id=\"error-message\">\n <!-- Display error message to your customers here -->\n </div>\n</form>\n```\n\nWhen the form above has loaded, create an Elements instance with the mode,\namount, and currency. These values determine which payment methods are shown to\nyour customer.\n\nThen, create an instance of the Payment Element and mount it to the container\nDOM node.\n\n```\nconst options = {\n mode: 'payment',\n amount: 1099,\n currency: 'usd',\n paymentMethodCreation: 'manual',\n // Fully customizable with appearance API.\n appearance: {/*...*/},\n};\n\n// Set up Stripe.js and Elements to use in checkout form\nconst elements = stripe.elements(options);\n\n// Create and mount the Payment Element\nconst paymentElementOptions = { layout: 'accordion'};\nconst paymentElement = elements.create('payment', paymentElementOptions);\npaymentElement.mount('#payment-element');\n```\n\nThe Payment Element renders a dynamic form that allows your customer to pick a\npayment method. The form automatically collects all necessary payments details\nfor the payment method selected by the customer.\n\nYou can customize the Payment Element to match the design of your site by\npassing the [appearance object](https://docs.stripe.com/elements/appearance-api)\ninto `options` when creating the `Elements` provider.\n\n### Collect addresses\n\nBy default, the Payment Element only collects the necessary billing address\ndetails. To collect a customer’s full billing address (to calculate the tax for\ndigital goods and services, for example) or shipping address, use the [Address\nElement](https://docs.stripe.com/elements/address-element).\n\n[OptionalCustomize the\nlayoutClient-side](https://docs.stripe.com/payments/build-a-two-step-confirmation#customize-layout)[OptionalCustomize\nthe\nappearanceClient-side](https://docs.stripe.com/payments/build-a-two-step-confirmation#customize-appearance)[OptionalSave\nand retrieve customer payment\nmethods](https://docs.stripe.com/payments/build-a-two-step-confirmation#save-payment-methods)[OptionalAdditional\nElements\noptionsClient-side](https://docs.stripe.com/payments/build-a-two-step-confirmation#additional-options)[Create\na\nConfirmationTokenClient-side](https://docs.stripe.com/payments/build-a-two-step-confirmation#create-ct)\n#### Use createPaymentMethod through a legacy implementation\n\nIf you’re using a legacy implementation, you might be using the information from\n`stripe.createPaymentMethod` to finalize payments on the server. Although we\nencourage you to follow this guide to [Migrate to Confirmation\nTokens](https://docs.stripe.com/payments/payment-element/migration-ct), you can\nstill access our old documentation to [Build two-step\nconfirmation](https://docs.stripe.com/payments/build-a-two-step-confirmation-legacy).\n\nWhen the customer submits your payment form, call\n[stripe.createConfirmationToken](https://docs.stripe.com/js/confirmation_tokens/create_confirmation_token)\nto create a [ConfirmationToken](https://docs.stripe.com/api/confirmation_tokens)\nto send to your server for additional validation or business logic before\nconfirmation. You can inspect the\n[payment_method_preview](https://docs.stripe.com/api/confirmation_tokens/object#confirmation_token_object-payment_method_preview)\nfield to run the additional logic.\n\nHTML + JSReact\n```\nconst form = document.getElementById('payment-form');\nconst submitBtn = document.getElementById('submit');\n\nconst handleError = (error) => {\n const messageContainer = document.querySelector('#error-message');\n messageContainer.textContent = error.message;\n submitBtn.disabled = false;\n}\n\nform.addEventListener('submit', async (event) => {\n // We don't want to let default form submission happen here,\n // which would refresh the page.\n event.preventDefault();\n\n // Prevent multiple form submissions\n if (submitBtn.disabled) {\n return;\n }\n\n // Disable form submission while loading\n submitBtn.disabled = true;\n\n // Trigger form validation and wallet collection\n const {error: submitError} = await elements.submit();\n if (submitError) {\n handleError(submitError);\n return;\n }\n\n// Create the ConfirmationToken using the details collected by the Payment\nElement\n const {error, confirmationToken} = await stripe.createConfirmationToken({\n elements,\n params: {\n payment_method_data: {\n billing_details: {\n name: 'Jenny Rosen',\n }\n }\n }\n });\n\n if (error) {\n // This point is only reached if there's an immediate error when\n// creating the ConfirmationToken. Show the error to your customer (for example,\npayment details incomplete)\n handleError(error);\n return;\n }\n\n// Now that you have a ConfirmationToken, you can use it in the following steps\nto render a confirmation page or run additional validations on the server\n return fetchAndRenderSummary(confirmationToken)\n});\n```\n\n[Show the payment details on the confirmation\npage](https://docs.stripe.com/payments/build-a-two-step-confirmation#show-details)\nAt this point, you have all of the information you need to render the\nconfirmation page. Call the server to obtain the necessary information and\nrender the confirmation page accordingly.\n\n```\n// Using Express\nconst express = require('express');\nconst app = express();\napp.use(express.json());\n\napp.post('/summarize-payment', async (req, res) => {\n try {\n // Retrieve the confirmationTokens and generate the response\nconst confirmationToken = await\nstripe.confirmationTokens.retrieve(req.body.confirmation_token_id);\n const response = summarizePaymentDetails(confirmationToken);\n\n // Send the response to the client\n res.json(response);\n } catch (e) {\n // Display error on client\n return res.json({ error: e.message });\n }\n});\n\nfunction summarizePaymentDetails(confirmationToken) {\n// Use confirmationToken.payment_method_preview to derive the applicable summary\nfields for your UI\n return {\n type: confirmationToken.payment_method_preview.type,\n // Add other values as needed here\n };\n}\n```\n\n```\nconst fetchAndRenderSummary = async (confirmationToken) => {\n const res = await fetch('/summarize-payment', {\n method: \"POST\",\n body: JSON.stringify({ confirmation_token_id: confirmationToken.id }),\n });\n\n const summary = await res.json();\n\n // Render the summary object returned by your server\n};\n```\n\n[Create a\nPaymentIntentServer-side](https://docs.stripe.com/payments/build-a-two-step-confirmation#create-intent)\n#### Run custom business logic immediately before payment confirmation\n\nNavigate to [step\n5](https://docs.stripe.com/payments/finalize-payments-on-the-server?platform=web&type=payment#submit-payment)\nin the finalize payments guide to run your custom business logic immediately\nbefore payment confirmation. Otherwise, follow the steps below for a simpler\nintegration, which uses `stripe.confirmPayment` on the client to both confirm\nthe payment and handle any next actions.\n\nWhen the customer submits your payment form, use a\n[PaymentIntent](https://docs.stripe.com/payments/payment-intents) to facilitate\nthe confirmation and payment process. Create a PaymentIntent on your server with\nan `amount` and `currency` enabled. In the latest version of the API, specifying\nthe `automatic_payment_methods` parameter is optional because Stripe enables its\nfunctionality by default. You can manage payment methods from the\n[Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe\nhandles the return of eligible payment methods based on factors such as the\ntransaction’s amount, currency, and payment flow. To prevent malicious customers\nfrom choosing their own prices, always decide how much to charge on the\nserver-side (a trusted environment) and not the client.\n\nIncluded on a PaymentIntent is a [client\nsecret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret).\nReturn this value to your client for Stripe.js to use to securely complete the\npayment process.\n\n```\nrequire 'stripe'\nStripe.api_key = 'sk_test_BQokikJOvBiI2HlWgH4olfQ2'\n\npost '/create-intent' do\n intent = Stripe::PaymentIntent.create({\n # To allow saving and retrieving payment methods, provide the Customer ID.\n customer: customer.id,\n# In the latest version of the API, specifying the `automatic_payment_methods`\nparameter is optional because Stripe enables its functionality by default.\n automatic_payment_methods: {enabled: true},\n amount: 1099,\n currency: 'usd',\n })\n {client_secret: intent.client_secret}.to_json\nend\n```\n\n[Submit the payment to\nStripeClient-side](https://docs.stripe.com/payments/build-a-two-step-confirmation#submit-the-payment)\nUse\n[stripe.confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment)\nto complete the payment using details from the Payment Element.\n\nProvide the `confirmation_token` parameter with the ID of the ConfirmationToken\nyou created on the previous page, which contains the payment information\ncollected from the Payment Element.\n\nProvide a\n[return_url](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-return_url)\nto this function to indicate where Stripe redirects the user after they complete\nthe payment. Your user might be initially redirected to an intermediate site,\nsuch as a bank authorization page, before being redirected to the `return_url`.\nCard payments immediately redirect to the `return_url` when a payment is\nsuccessful.\n\nIf you don’t want to redirect for card payments after payment completion, you\ncan set\n[redirect](https://docs.stripe.com/js/payment_intents/confirm_payment#confirm_payment_intent-options-redirect)\nto `if_required`. This only redirects customers that check out with\nredirect-based payment methods.\n\nHTML + JSReact\n```\nconst form = document.getElementById('payment-form');\nconst submitBtn = document.getElementById('submit');\n\nconst handleError = (error) => {\n const messageContainer = document.querySelector('#error-message');\n messageContainer.textContent = error.message;\n submitBtn.disabled = false;\n}\n\nform.addEventListener('submit', async (event) => {\n // We don't want to let default form submission happen here,\n // which would refresh the page.\n event.preventDefault();\n\n // Prevent multiple form submissions\n if (submitBtn.disabled) {\n return;\n }\n\n // Disable form submission while loading\n submitBtn.disabled = true;\n\n // Create the PaymentIntent and obtain clientSecret\n const res = await fetch(\"/create-intent\", {\n method: \"POST\",\n });\n\n const {client_secret: clientSecret} = await res.json();\n\n// Confirm the PaymentIntent using the details collected by the\nConfirmationToken\n const {error} = await stripe.confirmPayment({\n clientSecret,\n confirmParams: {\n confirmation_token: '{{CONFIRMATION_TOKEN_ID}}',\n return_url: 'https://example.com/order/123/complete',\n },\n });\n\n if (error) {\n // This point is only reached if there's an immediate error when\n// confirming the payment. Show the error to your customer (for example, payment\ndetails incomplete)\n handleError(error);\n } else {\n // Your customer is redirected to your `return_url`. For some payment\n // methods like iDEAL, your customer is redirected to an intermediate\n // site first to authorize the payment, then redirected to the `return_url`.\n }\n});\n```\n\n## Disclose Stripe to your customers\n\nStripe collects information on customer interactions with Elements to provide\nservices to you, prevent fraud, and improve its services. This includes using\ncookies and IP addresses to identify which Elements a customer saw during a\nsingle checkout session. You’re responsible for disclosing and obtaining all\nrights and consents necessary for Stripe to use data in these ways. For more\ninformation, visit our [privacy\ncenter](https://stripe.com/legal/privacy-center#as-a-business-user-what-notice-do-i-provide-to-my-end-customers-about-stripe).\n\n## See also\n\n[Design an\nintegration](https://docs.stripe.com/payments/payment-element/design-an-integration)\n\n## Links\n\n- [standard\nintegration](https://docs.stripe.com/payments/accept-a-payment-deferred)\n- [Register now](https://dashboard.stripe.com/register)\n- [payment methods\nsettings](https://dashboard.stripe.com/settings/payment_methods)\n- [PaymentIntent](https://docs.stripe.com/payments/payment-intents)\n- [Payment method\nsupport](https://docs.stripe.com/payments/payment-methods/payment-method-support)\n- [pricing page](https://stripe.com/pricing/local-payment-methods)\n- [enable it](https://docs.stripe.com/security/guide#tls)\n- [https://js.stripe.com/v3/](https://js.stripe.com/v3/)\n- [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys)\n- [appearance object](https://docs.stripe.com/elements/appearance-api)\n- [Address Element](https://docs.stripe.com/elements/address-element)\n- [Migrate to Confirmation\nTokens](https://docs.stripe.com/payments/payment-element/migration-ct)\n- [Build two-step\nconfirmation](https://docs.stripe.com/payments/build-a-two-step-confirmation-legacy)\n-\n[stripe.createConfirmationToken](https://docs.stripe.com/js/confirmation_tokens/create_confirmation_token)\n- [ConfirmationToken](https://docs.stripe.com/api/confirmation_tokens)\n-\n[payment_method_preview](https://docs.stripe.com/api/confirmation_tokens/object#confirmation_token_object-payment_method_preview)\n- [step\n5](https://docs.stripe.com/payments/finalize-payments-on-the-server?platform=web&type=payment#submit-payment)\n- [client\nsecret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret)\n-\n[stripe.confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment)\n-\n[return_url](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-return_url)\n-\n[redirect](https://docs.stripe.com/js/payment_intents/confirm_payment#confirm_payment_intent-options-redirect)\n- [privacy\ncenter](https://stripe.com/legal/privacy-center#as-a-business-user-what-notice-do-i-provide-to-my-end-customers-about-stripe)\n- [Design an\nintegration](https://docs.stripe.com/payments/payment-element/design-an-integration)",
  "metadata": {
    "title": "Build two-step confirmation | Stripe Documentation",
    "description": "Add an optional review page or run validations after a user enters their payment details.",
    "sourceURL": "https://docs.stripe.com/payments/build-a-two-step-confirmation"
  }
}