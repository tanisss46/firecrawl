{
  "content": "# Recover abandoned carts\n\n## Learn how to recover abandoned Checkout pages and boost revenue.\n\nStripe-hosted pageEmbedded formEmbedded componentsPublic preview\nIn e-commerce, [cart\nabandonment](https://docs.stripe.com/payments/checkout/compliant-promotional-emails)\nis when customers leave the checkout flow before completing their purchase. To\nhelp bring customers back to Checkout, create a recovery flow where you follow\nup with customers over email to complete their purchases.\n\nCart abandonment emails fall into the broader category of *promotional emails*,\nwhich includes emails that inform customers of new products and that share\ncoupons and discounts. Customers must agree to receive promotional emails before\nyou can contact them. Checkout helps you:\n\n- Collect consent from customers to send them promotional emails.\n- Get notified when customers abandon Checkout so you can send cart abandonment\nemails.\n[Collect promotional\nconsent](https://docs.stripe.com/payments/checkout/abandoned-carts#collect-promotional-consent)\nConfigure Checkout to [collect consent for promotional\ncontent](https://docs.stripe.com/payments/checkout/promotional-emails-consent).\nIf you collect the customer’s email address and request consent for promotional\ncontent before redirecting to Checkout, you can skip using\n`consent_collection[promotions]`.\n\n```\ncurl https://api.stripe.com/v1/checkout/sessions \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d \"line_items[0][price]\"={{PRICE_ID}} \\\n -d \"line_items[0][quantity]\"=1 \\\n -d customer={{CUSTOMER_ID}} \\\n -d mode=payment \\\n --data-urlencode success_url=\"https://example.com/success\" \\\n -d \"consent_collection[promotions]\"=auto\n```\n\n[Configure\nrecovery](https://docs.stripe.com/payments/checkout/abandoned-carts#configure-recovery)\nA Checkout Session becomes abandoned when it reaches its\n[expires_at](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-expires_at)\ntimestamp and the customer hasn’t completed checking out. When this occurs, the\nsession is no longer accessible and Stripe fires the `checkout.session.expired`\n[webhook](https://docs.stripe.com/webhooks), which you can listen to and try to\nbring the customer back to a new Checkout Session to complete their purchase. To\nuse this feature, enable `after_expiration.recovery` when you create the\nsession.\n\n```\ncurl https://api.stripe.com/v1/checkout/sessions \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d \"line_items[0][price]\"={{PRICE_ID}} \\\n -d \"line_items[0][quantity]\"=1 \\\n -d mode=payment \\\n --data-urlencode success_url=\"https://example.com/success\" \\\n -d customer={{CUSTOMER_ID}} \\\n -d \"consent_collection[promotions]\"=auto \\\n -d \"after_expiration[recovery][enabled]\"=true \\\n -d \"after_expiration[recovery][allow_promotion_codes]\"=true\n```\n\n[Get notified of\nabandonment](https://docs.stripe.com/payments/checkout/abandoned-carts#webhook)\nListen to the `checkout.session.expired` webhook to be notified when customers\nabandon Checkout and sessions expire. When the session expires with recovery\nenabled, the webhook payload contains\n[after_expiration](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-after_expiration-recovery),\nwhich includes a URL denoted by `after_expiration.recovery.url` that you can\nembed in cart abandonment emails. When the customer opens this URL, **it creates\na new Checkout Session that’s a copy of the original expired session**. The\ncustomer uses this copied session to complete the purchase.\n\n#### Note\n\nFor security purposes, the recovery URL for a session is usable for 30 days,\ndenoted by the `after_expiration.recovery.expires_at` timestamp.\n\n```\n{\n \"id\": \"evt_123456789\",\n \"object\": \"event\",\n \"type\": \"checkout.session.expired\",\n // ...other webhook attributes\n \"data\": {\n \"object\": {\n \"id\": \"cs_12356789\",\n \"object\": \"checkout.session\",\n // ...other Checkout Session attributes\n \"consent_collection\": {\n \"promotions\": \"auto\",\n },\n \"consent\": {\n \"promotions\": \"opt_in\"\n },\n \"after_expiration\": {\n \"recovery\": {\n \"enabled\": true,\n \"url\": \"https://buy.stripe.com/r/live_asAb1724\",\n \"allow_promotion_code\": true,\n \"expires_at\": 1622908282,\n }\n }\n }\n }\n}\n```\n\n[Send recovery\nemails](https://docs.stripe.com/payments/checkout/abandoned-carts#send-recovery-emails)\nTo send recovery emails, create a webhook handler for expired sessions and send\nan email that embeds the session’s recovery URL. A customer might abandon\nmultiple Checkout Sessions, each triggering its own `checkout.session.expired`\nevent so make sure to record when you send recovery emails to customers and\navoid spamming them.\n\n```\n// Find your endpoint's secret in your Dashboard's webhook settings\nconst endpointSecret = 'whsec_...';\n\n// Using Express\nconst app = require('express')();\n\n// Use body-parser to retrieve the raw body as a buffer\nconst bodyParser = require('body-parser');\n\nconst sendRecoveryEmail = (email, recoveryUrl) => {\n // TODO: fill me in\n console.log(\"Sending recovery email\", email, recoveryUrl);\n}\n\napp.post('/webhook', bodyParser.raw({type: 'application/json'}), (request,\nresponse) => {\n const payload = request.body;\n const sig = request.headers['stripe-signature'];\n\n let event;\n\n try {\n event = stripe.webhooks.constructEvent(payload, sig, endpointSecret);\n } catch (err) {\n return response.status(400).send(`Webhook Error: ${err.message}`);\n }\n\n // Handle the checkout.session.expired event\n if (event.type === 'checkout.session.expired') {\n const session = event.data.object;\n\n // When a Checkout Session expires, the customer's email isn't returned in\n // the webhook payload unless they give consent for promotional content\n const email = session.customer_details?.email\n const recoveryUrl = session.after_expiration?.recovery?.url\n\n // Do nothing if the Checkout Session has no email or recovery URL\n if (!email || !recoveryUrl) {\n return response.status(200).end();\n }\n\n // Check if the customer has consented to promotional emails and\n // avoid spamming people who abandon Checkout multiple times\n if (\n session.consent?.promotions === 'opt_in'\n && !hasSentRecoveryEmailToCustomer(email)\n ) {\n sendRecoveryEmail(email, recoveryUrl)\n }\n }\n response.status(200).end();\n});\n```\n\n[OptionalAdjust session\nexpiration](https://docs.stripe.com/payments/checkout/abandoned-carts#adjust-session-expiration)[OptionalTrack\nconversion](https://docs.stripe.com/payments/checkout/abandoned-carts#track-conversion)[OptionalOffer\npromotion codes in recovery\nemails](https://docs.stripe.com/payments/checkout/abandoned-carts#promotion-codes)\n\n## Links\n\n- [cart\nabandonment](https://docs.stripe.com/payments/checkout/compliant-promotional-emails)\n- [collect consent for promotional\ncontent](https://docs.stripe.com/payments/checkout/promotional-emails-consent)\n- [https://example.com/success](https://example.com/success)\n-\n[expires_at](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-expires_at)\n- [webhook](https://docs.stripe.com/webhooks)\n-\n[after_expiration](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-after_expiration-recovery)\n-\n[https://buy.stripe.com/r/live_asAb1724](https://buy.stripe.com/r/live_asAb1724)",
  "metadata": {
    "title": "Recover abandoned carts | Stripe Documentation",
    "description": "Learn how to recover abandoned Checkout pages and boost revenue.",
    "sourceURL": "https://docs.stripe.com/payments/checkout/abandoned-carts"
  }
}