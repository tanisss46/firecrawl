{
  "content": "# Set up a subscription with BECS Direct Debit in Australia\n\n## Learn how to create and charge for a subscription with BECS Direct Debit.\n\n#### Note\n\nIf you’re a new user, use the [Payment\nElement](https://docs.stripe.com/payments/payment-element) instead of using\nStripe Elements as described in this guide. The Payment Element provides a\nlow-code integration path with built-in conversion optimizations. For\ninstructions, see [Build a\nsubscription](https://docs.stripe.com/billing/subscriptions/build-subscriptions?ui=elements).\n\nUse this guide to set up a\n[subscription](https://docs.stripe.com/billing/subscriptions/creating) using\n[BECS Direct Debit](https://docs.stripe.com/payments/au-becs-debit) as a payment\nmethod.\n\n[Create a product and\npriceDashboard](https://docs.stripe.com/billing/subscriptions/au-becs-debit#create-product-plan-code)\n[Products](https://docs.stripe.com/api/products) represent the item or service\nyou’re selling. [Prices](https://docs.stripe.com/api/prices) define how much and\nhow frequently you charge for a product. This includes how much the product\ncosts, what currency you accept, and whether it’s a one-time or recurring\ncharge. If you only have a few products and prices, create and manage them in\nthe Dashboard.\n\nThis guide uses a stock photo service as an example and charges customers a 15\nAUD monthly subscription. To model this:\n\n- Navigate to the [Add a\nproduct](https://dashboard.stripe.com/test/products/create) page.\n- Enter a **Name** for the product.\n- Enter **15** for the price.\n- Select **AUD** as the currency.\n- Click **Save product**.\n\nAfter you create the product and the price, record the price ID so you can use\nit in subsequent steps. The pricing page displays the ID and it looks similar to\nthis: `price_G0FvDp6vZvdwRZ`.\n\n[Create a\nSetupIntentServer-side](https://docs.stripe.com/billing/subscriptions/au-becs-debit#create-setup-intent)\nA [SetupIntent](https://docs.stripe.com/api/setup_intents) is an object that\nrepresents your intent to set up a customer’s payment method for future\npayments. The `SetupIntent` will track the steps of this set-up process. For\nBECS Direct Debit, this includes collecting a mandate from the customer and\ntracking its validity throughout its lifecycle.\n\nCreate a [SetupIntent](https://docs.stripe.com/api/setup_intents) on your server\nwith\n[payment_method_types](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-payment_method_types)\nset to `au_becs_debit`:\n\n```\ncurl https://api.stripe.com/v1/setup_intents \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"payment_method_types[]\"=\"au_becs_debit\"\n```\n\nThe returned `SetupIntent` object contains a `client_secret` property. Pass the\nclient secret to the client-side application to continue with the setup process.\n\n[Collect payment method details and mandate\nacknowledgmentClient-side](https://docs.stripe.com/billing/subscriptions/au-becs-debit#collect-payment-method-details)\nYou’re ready to collect payment information on the client with [Stripe\nElements](https://docs.stripe.com/payments/elements). Elements is a set of\nprebuilt UI components for collecting payment details.\n\nA Stripe Element contains an iframe that securely sends the payment information\nto Stripe over an HTTPS connection. The checkout page address must also start\nwith https:// rather than http:// for your integration to work.\n\nYou can test your integration without using HTTPS. [Enable\nit](https://docs.stripe.com/security/guide#tls) when you’re ready to accept live\npayments.\n\n### Set up Stripe Elements\n\nHTML + JSReact\nStripe Elements is automatically available as a feature of Stripe.js. Include\nthe Stripe.js script on your payment page by adding it to the `head` of your\nHTML file. Always load Stripe.js directly from js.stripe.com to remain PCI\ncompliant. Don’t include the script in a bundle or host a copy of it yourself.\n\n```\n<head>\n <title>Payment Setup</title>\n <script src=\"https://js.stripe.com/v3/\"></script>\n</head>\n```\n\nCreate an instance of [Elements](https://docs.stripe.com/js#stripe-elements)\nwith the following JavaScript on your payment page:\n\n```\nconst stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\nconst elements = stripe.elements();\n```\n\n### Direct Debit Requests\n\nBefore you can create a BECS Direct Debit payment, your customer must agree with\nthe Direct Debit Request Service Agreement. They do so by submitting a completed\nDirect Debit Request (DDR). The approval gives you a mandate to debit their\naccount. The `Mandate` is a record of the permission to debit a payment method.\n\nFor online mandate acceptance, you can create a form to collect the necessary\ninformation. Serve the form over\n[HTTPS](https://docs.stripe.com/security/guide#tls) and capture the following\ninformation:\n\nInformationDescriptionAccount nameThe full name of the account holderBSB\nnumberThe Bank-State-Branch number of the bank account (for example,\n`123-456`)Account numberThe bank account number (for example, `87654321`)\nWhen collecting a Direct Debit Request, follow our [BECS Direct Debit\nTerms](https://stripe.com/au-becs/legal) and as part of your checkout form:\n\n- Display the exact terms of [Stripe’s DDR service\nagreement](https://stripe.com/au-becs-dd-service-agreement/legal) either inline\non the form, or on a page linked from the form, and identifying it as the “DDR\nservice agreement.”\n- Make sure the accepted DDR and its accompanying [DDR service\nagreement](https://stripe.com/au-becs-dd-service-agreement/legal) can be shared\nwith your customer at all times, either as a printed or non-changeable\nelectronic copy (such as email). Stripe hosts this for you.\n- Display the following standard authorization text for your customer to accept\nthe BECS DDR, where you replace *Rocketship Inc* with your company name. Their\nacceptance authorizes you to initiate BECS Direct Debit payments from their bank\naccount.\n\n#### Note\n\nBy providing your bank account details, you agree to this Direct Debit Request\nand the [Direct Debit Request service\nagreement](https://stripe.com/au-becs-dd-service-agreement/legal), and authorize\nStripe Payments Australia Pty Ltd ACN 160 180 343 Direct Debit User ID number\n507156 (“Stripe”) to debit your account through the Bulk Electronic Clearing\nSystem (BECS) on behalf of *Rocketship Inc* (the “Merchant”) for any amounts\nseparately communicated to you by the Merchant. You certify that you’re either\nan account holder or an authorized signatory on the account listed above.\n\nThe details of the accepted mandate are generated when setting up a\n[PaymentMethod](https://docs.stripe.com/payments/payment-methods) or confirming\na `PaymentIntent`. At all times, you should be able to share this mandate—the\naccepted DDR and its accompanying DDR service agreement—with your customer,\neither in print or as a non-changeable electronic copy (such as email). Stripe\nhosts this for you under the `url` property of the `Mandate` object linked to\nthe `PaymentMethod`.\n\n### Add and configure an Australia Bank Account Element\n\nThe Australia Bank Account Element will help you collect and validate both the\nBSB number and the account number. It needs a place to live in your payment\nform. Create empty DOM nodes (containers) with unique IDs in your payment form.\nAdditionally, your customer must read and accept the [Direct Debit Request\nservice agreement](https://stripe.com/au-becs-dd-service-agreement/legal).\n\n```\n<form action=\"/setup\" method=\"post\" id=\"setup-form\">\n <div class=\"form-row inline\">\n <div class=\"col\">\n <label for=\"accountholder-name\">\n Name\n </label>\n <input\n id=\"accountholder-name\"\n name=\"accountholder-name\"\n placeholder=\"John Smith\"\n required\n />\n </div>\n <div class=\"col\">\n <label for=\"email\">\n Email Address\n </label>\n <input\n id=\"email\"\n name=\"email\"\n type=\"email\"\n placeholder=\"john.smith@example.com\"\n required\n />\n </div>\n </div>\n\n <div class=\"form-row\">\n <!--\n Using a label with a for attribute that matches the ID of the\n Element container enables the Element to automatically gain focus\n when the customer clicks on the label.\n -->\n <label for=\"au-bank-account-element\">\n Bank Account\n </label>\n <div id=\"au-bank-account-element\">\n <!-- A Stripe Element will be inserted here. -->\n </div>\n </div>\n\n <!-- Used to display bank (branch) name associated with the entered BSB -->\n <div id=\"bank-name\"></div>\n\n <!-- Used to display form errors. -->\n <div id=\"error-message\" role=\"alert\"></div>\n\n <!-- Display mandate acceptance text. -->\n <div class=\"col\" id=\"mandate-acceptance\">\nBy providing your bank account details, you agree to this Direct Debit Request\nand the <a href=\"stripe.com/au-becs-dd-service-agreement/legal\">Direct Debit\nRequest service agreement</a>,\n and authorise Stripe Payments Australia Pty Ltd ACN 160 180 343\n Direct Debit User ID number 507156 (“Stripe”) to debit your account\n through the Bulk Electronic Clearing System (BECS) on behalf of\n Rocket Rides (the \"Merchant\") for any amounts separately\n communicated to you by the Merchant. You certify that you are either\n an account holder or an authorised signatory on the account listed above.\n </div>\n \n <!-- Add the client_secret from the SetupIntent as a data attribute -->\n<button id=\"submit-button\" data-secret=\"{{CLIENT_SECRET}}\">Set up BECS Direct\nDebit</button>\n\n</form>\n```\n\nWhen the form loads, you can [create an\ninstance](https://docs.stripe.com/js/elements_object/create_element?type=au_bank_account)\nof the Australia Bank Account Element and mount it to the Element container:\n\n```\n// Custom styling can be passed to options when creating an Element\nconst style = {\n base: {\n color: '#32325d',\n fontSize: '16px',\n '::placeholder': {\n color: '#aab7c4'\n },\n ':-webkit-autofill': {\n color: '#32325d',\n },\n },\n invalid: {\n color: '#fa755a',\n iconColor: '#fa755a',\n ':-webkit-autofill': {\n color: '#fa755a',\n },\n }\n};\n\nconst options = {\n style: style,\n disabled: false,\n hideIcon: false,\n iconStyle: \"default\", // or \"solid\"\n}\n\n// Create an instance of the auBankAccount Element.\nconst auBankAccount = elements.create('auBankAccount', options);\n\n// Add an instance of the auBankAccount Element into\n// the `au-bank-account-element` <div>.\nauBankAccount.mount('#au-bank-account-element');\n```\n\n[Submit the payment method details to\nStripeClient-side](https://docs.stripe.com/billing/subscriptions/au-becs-debit#submit-payment-method)\nRather than sending the entire `SetupIntent` object to the client, use its\n[client\nsecret](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-client_secret)\nfrom [step\n2](https://docs.stripe.com/billing/subscriptions/au-becs-debit#web-create-setup-intent).\nThis is different from your API keys that authenticate Stripe API requests.\n\nThe client secret should be handled carefully because it can complete the setup.\nDo not log it, embed it in URLs, or expose it to anyone but the customer.\n\nHTML + JSReact\nUse\n[stripe.confirmAuBecsDebitSetup](https://docs.stripe.com/js/setup_intents/confirm_au_becs_debit_setup)\nto complete the setup when the user submits the form. A successful setup returns\na `succeeded` value for the SetupIntent’s `status` property. If the setup isn’t\nsuccessful, inspect the returned `error` to determine the cause.\n\n```\nconst form = document.getElementById('setup-form');\nconst accountholderName = document.getElementById('accountholder-name');\nconst email = document.getElementById('email');\nconst submitButton = document.getElementById('submit-button');\nconst clientSecret = submitButton.dataset.secret;\n\nform.addEventListener('submit', async (event) => {\n event.preventDefault();\n stripe.confirmAuBecsDebitSetup(\n clientSecret,\n {\n payment_method: {\n au_becs_debit: auBankAccount,\n billing_details: {\n name: accountholderName.value,\n email: email.value\n }\n }\n }\n );\n});\n```\n\nAfter successfully confirming the `SetupIntent`, you should share the [mandate\nURL](https://docs.stripe.com/api/mandates/object#mandate_object-payment_method_details-au_becs_debit-url)\nfrom the [Mandate object](https://docs.stripe.com/api/mandates) with your\ncustomer. We also recommend including the following details to your customer\nwhen you confirm their mandate has been established:\n\n- an explicit confirmation message that indicates a Direct Debit arrangement has\nbeen set up\n- the [business\nname](https://docs.stripe.com/billing/subscriptions/au-becs-debit#statement-descriptors)\nthat will appear on the customer’s bank statement whenever their account gets\ndebited\n- the payment amount and schedule (if applicable)\n- a link to the generated DDR mandate URL\n\nThe `Mandate` object’s ID is accessible from the `mandate` on the SetupIntent\nobject, which is sent as part of the `setup_intent.succeeded` event sent after\nconfirmation, but can also be [retrieved through the\nAPI](https://docs.stripe.com/api/setup_intents/retrieve).\n\n```\ncurl https://api.stripe.com/v1/setup_intents/{{SETUP_INTENT_ID}} \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d \"expand[]\"=mandate\n```\n\n[Create a customer with a\nPaymentMethodServer-side](https://docs.stripe.com/billing/subscriptions/au-becs-debit#create-customer)\nCreating [subscriptions](https://docs.stripe.com/billing/subscriptions/creating)\nrequires a [customer](https://docs.stripe.com/api#customer_object), which\nrepresents the customer purchasing your product. Because the price you created\ncharges on a monthly basis, you need to add a stored payment method to the\ncustomer so future payments are successful. You do this by setting the payment\nmethod you just collected at the top level of the\n[Customer](https://docs.stripe.com/api/customers) object and as the [default\npayment\nmethod](https://docs.stripe.com/api/customers/create#create_customer-invoice_settings-default_payment_method)\nfor [invoices](https://docs.stripe.com/api/invoices):\n\n```\ncurl https://api.stripe.com/v1/customers \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n --data-urlencode email=\"jenny.rosen@example.com\" \\\n -d payment_method=pm_1FU2bgBF6ERF9jhEQvwnA7sX \\\n -d \"invoice_settings[default_payment_method]\"=pm_1FU2bgBF6ERF9jhEQvwnA7sX\n```\n\nThis returns a `Customer` object. You can see the default payment method in the\n`invoice_settings` object:\n\n```\n{\n \"id\": \"cus_Gk0uVzT2M4xOKD\",\n \"object\": \"customer\",\n \"address\": null,\n \"balance\": 0,\n \"created\": 1581797088,\n \"currency\": null,\n \"default_source\": null,\n \"delinquent\": false,\n \"description\": null,\n \"discount\": null,\n \"email\": \"jenny.rosen@example.com\",\n \"invoice_prefix\": \"11D0B3D7\",\n \"invoice_settings\": {\n \"custom_fields\": null,\n \"default_payment_method\": \"pm_1FU2bgBF6ERF9jhEQvwnA7sX\",\n \"footer\": null\n },\n```\n\nSee all 56 lines\nAfter creating the customer, store the `id` value in your own database so you\ncan use it later. The next step also requires this ID.\n\n[Create the\nsubscriptionServer-side](https://docs.stripe.com/billing/subscriptions/au-becs-debit#create-subscription-code)\nCreate a [subscription](https://docs.stripe.com/api/subscriptions) with the\nprice and customer:\n\n```\ncurl https://api.stripe.com/v1/subscriptions \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d customer=cus_Gk0uVzT2M4xOKD \\\n -d \"items[0][price]\"=price_F52b2UdntfQsfR \\\n -d \"expand[0]\"=\"latest_invoice.payment_intent\"\n```\n\nCreating subscriptions automatically charges customers because the [default\npayment\nmethod](https://docs.stripe.com/api/customers/create#create_customer-invoice_settings-default_payment_method)\nis set. After a successful payment, the status in the [Stripe\nDashboard](https://dashboard.stripe.com/test/subscriptions) changes to\n**Active**. The price you created earlier determines subsequent billings.\n\n[Manage subscription\nstatusClient-side](https://docs.stripe.com/billing/subscriptions/au-becs-debit#manage-sub-status)\nAssuming the initial payment succeeds, the state of the\n[subscription](https://docs.stripe.com/billing/subscriptions/creating) is\n`active` and no further action is needed. When payments fail, the status is\nchanged to the **Subscription status** configured in your [automatic collection\nsettings](https://docs.stripe.com/invoicing/automatic-collection). You should\nnotify the customer on failure and [charge them with a different payment\nmethod](https://docs.stripe.com/billing/subscriptions/overview#requires-payment-method).\n\n#### Note\n\nBECS Direct Debit payments are never automatically retried, even if you have a\n[retry schedule](https://docs.stripe.com/invoicing/automatic-collection)\nconfigured for other payment methods.\n\n[Test the\nintegration](https://docs.stripe.com/billing/subscriptions/au-becs-debit#test-integration)\nYou can test your form using the test BSB number `000-000` and one of the test\naccount numbers below with your\n[confirmAuBecsDebitSetup](https://docs.stripe.com/js/setup_intents/confirm_au_becs_debit_setup)\nrequest.\n\nBSB NumberAccount NumberDescription`000-000``000123456`The PaymentIntent created\nwith the resulting PaymentMethod transitions from `processing` to `succeeded`.\nThe mandate status remains `active`.`000-000``900123456`The PaymentIntent\ncreated with the resulting PaymentMethod transitions from `processing` to\n`succeeded` (with a three-minute delay). The mandate status remains\n`active`.`000-000``111111113`The PaymentIntent created with the resulting\nPaymentMethod transitions from `processing` to `requires_payment_method` with an\n`account_closed` failure code. The mandate status becomes `inactive` at that\npoint.`000-000``111111116`The PaymentIntent created with the resulting\nPaymentMethod transitions from `processing` to `requires_payment_method` with a\n`no_account` failure code. The mandate status becomes `inactive` at that\npoint.`000-000``222222227`The PaymentIntent created with the resulting\nPaymentMethod transitions from `processing` to `requires_payment_method` with a\n`refer_to_customer` failure code. The mandate status remains\n`active`.`000-000``922222227`The PaymentIntent created with the resulting\nPaymentMethod transitions from `processing` to `requires_payment_method` with a\n`refer_to_customer` failure code (with a three-minute delay). The mandate status\nremains `active`.`000-000``333333335`The PaymentIntent created with the\nresulting PaymentMethod transitions from `processing` to\n`requires_payment_method` with a `debit_not_authorized` failure code. The\nmandate status becomes `inactive` at that point.`000-000``666666660`The\nPaymentIntent created with the resulting PaymentMethod transitions from\n`processing` to `succeeded`, but a dispute is immediately\ncreated.`000-000``343434343`The PaymentIntent that was created with the\nresulting PaymentMethod fails with a `charge_exceeds_source_limit` error due to\nthe payment amount causing the account to exceed its weekly payment volume\nlimit.`000-000``121212121`The PaymentIntent that was created with the resulting\nPaymentMethod fails with a `charge_exceeds_transaction_limit` error due to the\npayment amount exceeding the account’s transaction volume limit.[OptionalSetting\nthe billing\ncycle](https://docs.stripe.com/billing/subscriptions/au-becs-debit#billing-cycle)[OptionalSubscription\ntrials](https://docs.stripe.com/billing/subscriptions/au-becs-debit#trial-periods)\n\n## Links\n\n- [Payment Element](https://docs.stripe.com/payments/payment-element)\n- [Build a\nsubscription](https://docs.stripe.com/billing/subscriptions/build-subscriptions?ui=elements)\n- [subscription](https://docs.stripe.com/billing/subscriptions/creating)\n- [BECS Direct Debit](https://docs.stripe.com/payments/au-becs-debit)\n- [Products](https://docs.stripe.com/api/products)\n- [Prices](https://docs.stripe.com/api/prices)\n- [Add a product](https://dashboard.stripe.com/test/products/create)\n- [SetupIntent](https://docs.stripe.com/api/setup_intents)\n-\n[payment_method_types](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-payment_method_types)\n- [Stripe Elements](https://docs.stripe.com/payments/elements)\n- [Enable it](https://docs.stripe.com/security/guide#tls)\n- [https://js.stripe.com/v3/](https://js.stripe.com/v3/)\n- [Elements](https://docs.stripe.com/js#stripe-elements)\n- [BECS Direct Debit Terms](https://stripe.com/au-becs/legal)\n- [Stripe’s DDR service\nagreement](https://stripe.com/au-becs-dd-service-agreement/legal)\n- [PaymentMethod](https://docs.stripe.com/payments/payment-methods)\n- [create an\ninstance](https://docs.stripe.com/js/elements_object/create_element?type=au_bank_account)\n- [client\nsecret](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-client_secret)\n-\n[stripe.confirmAuBecsDebitSetup](https://docs.stripe.com/js/setup_intents/confirm_au_becs_debit_setup)\n- [mandate\nURL](https://docs.stripe.com/api/mandates/object#mandate_object-payment_method_details-au_becs_debit-url)\n- [Mandate object](https://docs.stripe.com/api/mandates)\n- [retrieved through the\nAPI](https://docs.stripe.com/api/setup_intents/retrieve)\n- [customer](https://docs.stripe.com/api#customer_object)\n- [Customer](https://docs.stripe.com/api/customers)\n- [default payment\nmethod](https://docs.stripe.com/api/customers/create#create_customer-invoice_settings-default_payment_method)\n- [invoices](https://docs.stripe.com/api/invoices)\n- [subscription](https://docs.stripe.com/api/subscriptions)\n- [Stripe Dashboard](https://dashboard.stripe.com/test/subscriptions)\n- [automatic collection\nsettings](https://docs.stripe.com/invoicing/automatic-collection)\n- [charge them with a different payment\nmethod](https://docs.stripe.com/billing/subscriptions/overview#requires-payment-method)",
  "metadata": {
    "title": "Set up a subscription with BECS Direct Debit in Australia | Stripe Documentation",
    "description": "Learn how to create and charge for a subscription with BECS Direct Debit.",
    "sourceURL": "https://docs.stripe.com/billing/subscriptions/au-becs-debit"
  }
}