{
  "content": "# Integrate the customer portal with the API\n\n## Learn how to integrate the customer portal using the Stripe API.\n\n## Get started\n\nWith the customer portal, you can provide subscription, billing, and invoicing\nmanagement to your customers without building it yourself. After you configure\nand integrate the portal, customers redirect to a co-branded dashboard where\nthey can manage their account based on the functionality you configured.\n\nTo integrate your application with the customer portal:\n\n-\n[Configure](https://docs.stripe.com/customer-management/integrate-customer-portal#configure)\nthe portal’s features and user interface (UI). You can do this in the Dashboard.\n- [Implement a\nredirect](https://docs.stripe.com/customer-management/integrate-customer-portal#redirect)\nto integrate the portal with your application.\n- [Listen to\nwebhooks](https://docs.stripe.com/customer-management/integrate-customer-portal#webhooks)\nto receive updates to customers’ subscriptions and payment methods.\n- [Go\nlive](https://docs.stripe.com/customer-management/integrate-customer-portal#go-live)\nto use the portal in your production environment.\n\nOr clone one of our sample projects:\n\n- [Firebase](https://github.com/stripe-samples/firebase-subscription-payments)\n- [Netlify\nIdentity](https://github.com/stripe-samples/netlify-stripe-subscriptions)\n- [Ruby on\nRails](https://github.com/stripe-samples/developer-office-hours/tree/master/2020-06-29-customer-portal).\n\nYou can optionally\n[customize](https://docs.stripe.com/customer-management/integrate-customer-portal#customize)\nportal sessions to enable different features for different customers.\n\n[Configure the\nportal](https://docs.stripe.com/customer-management/integrate-customer-portal#configure)\nFirst, you need a Stripe account. [Register\nnow](https://dashboard.stripe.com/register/).\n\nBefore you integrate the customer portal, configure its functionality and\nbranding in the Dashboard to define what your users can do with the portal. Its\nfeatures depend on your product and price catalog, so there are different\nsettings for live and test modes.\n\n#### Common mistake\n\nIf you’re using the customer portal with Stripe Connect, make sure you configure\nthe customer portal for the platform, not a connected account.\n\nIf you want to create multiple portal configurations for different sets of\ncustomers—or if you’re a [Connect](https://docs.stripe.com/connect) platform and\nwould like to manage configurations for your connected accounts—you can do that\nby using the [API](https://docs.stripe.com/api/customer_portal/configuration):\n\n```\ncurl https://api.stripe.com/v1/billing_portal/configurations \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d \"features[invoice_history][enabled]\"=true\n```\n\n### Set a product catalog\n\nIf you allow customers to upgrade, downgrade, or change the quantities of their\nsubscriptions, you must also set a product catalog. This includes the products\nand prices that your customers can upgrade or downgrade to, as well as the\nsubscriptions they can update quantities on. See the\n[guide](https://docs.stripe.com/products-prices/getting-started#create-product)\nfor more details about creating products and prices. If you’re using the\ncustomer portal only for invoicing, you don’t need to set a product catalog.\n\nThe portal displays the following attributes of your product catalog:\n\n- **Product name and description**—these attributes are editable in the\nDashboard and API.\n- **Quantity restrictions per product**—these attributes are editable in the\nDashboard.\n- **Price amount, currency, and billing interval**—these attributes are\nimmutable and you can only set them when you create them in the Dashboard and\nAPI.\n\n### Enable tax ID collection\n\nIf you use [Stripe Tax](https://docs.stripe.com/tax) to automatically collect\ntaxes for subscriptions or invoices, you can let customers set and update their\ntax IDs in the customer portal. Stripe Billing adds the tax IDs to the\ncustomers’ [invoices](https://docs.stripe.com/api/invoices). To enable this, go\nto the [Customer portal\nsettings](https://dashboard.stripe.com/settings/billing/portal) and toggle on\n**Tax ID**. For more information, see how customer tax IDs work with\n[subscriptions](https://docs.stripe.com/billing/customer/tax-ids) and\n[invoices](https://docs.stripe.com/invoicing/taxes/account-tax-ids).\n\nLearn how to [set up Stripe Tax](https://docs.stripe.com/tax/set-up), [collect\ntaxes for recurring\npayments](https://docs.stripe.com/billing/taxes/collect-taxes), [collect taxes\nin your custom payment\nflows](https://docs.stripe.com/tax/custom#existing-customer) and [set tax rates\nfor line items and invoices](https://docs.stripe.com/tax/invoicing).\n\n### Preview and test\n\nAs you configure your settings, you can preview the portal by clicking\n**Preview**. This launches a read-only version of the portal that lets you see\nhow your customers could manage their subscriptions and billing details.\n\nAfter saving your settings, you can launch the portal and test it by using a\ncustomer in test mode. Navigate to a customer in the Dashboard, click\n**Actions**, and then select **Open customer portal**.\n\nPreviewing the portal as a read-only version is only available when your\nDashboard is in test mode. If you’re unable to preview and test the portal,\ncheck your settings to make sure that your configuration is saved in test mode.\nFor previewing and testing to work, you also need to have edit permissions in\nthe Dashboard.\n\n[Implement a redirect on your\nsiteClient-sideServer-side](https://docs.stripe.com/customer-management/integrate-customer-portal#redirect)\nA portal session is the entry point into the customer portal. It provides a\nunique, temporary link to the portal. When a customer wants to manage their\nbilling or invoicing, create a new portal session and redirect them to the\nsession’s `url`.\n\nOn your site, add a button that customers can click to enter the portal. Use a\nPOST request to create a portal session:\n\n```\n<form method=\"POST\" action=\"/create-customer-portal-session\">\n <button type=\"submit\">Manage billing</button>\n</form>\n```\n\nNext, add an endpoint that creates a portal session and redirects your\ncustomers. Make sure to authenticate customers on your site before creating\nsessions for them. To [create a\nsession](https://docs.stripe.com/api/customer_portal/sessions/create), you need\nthe customer’s ID and a `return_url`, which is required if a default return URL\nisn’t set in the Dashboard configuration.\n\nWhen you create a portal session, Stripe returns the `portal session object`,\nwhich contains the session’s [short-lived\nURL](https://docs.stripe.com/api/customer_portal/session?lang=curl#portal_session_object-url)\nthat your customers use to access the customer portal.\n\n```\ncurl https://api.stripe.com/v1/billing_portal/sessions \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d customer={{CUSTOMER_ID}} \\\n --data-urlencode return_url=\"https://example.com/account\"\n```\n\n[Listen to\nwebhooksServer-side](https://docs.stripe.com/customer-management/integrate-customer-portal#webhooks)\nWhen subscriptions are upgraded, downgraded, or canceled, you need to make sure\nthat customers receive only the products or services they’re actively subscribed\nto. Stripe sends notifications of these changes to your integration using\n[webhooks](https://docs.stripe.com/webhooks). In the `Event` object, look at the\nID for the subscription or the customer to determine which customer the event\napplies to.\n\nStripe also sends notifications if an invoice is paid to your integration using\n[webhooks](https://docs.stripe.com/webhooks). In the `Event` object, look at the\nID for the invoice or the customer to determine which customer the event applies\nto.\n\nIf you haven’t set up a webhook endpoint with Stripe before, you can use\nStripe’s [webhooks documentation](https://docs.stripe.com/webhooks) to get\nstarted, and then listen for the events described below.\n\nEventDescription\n\n[customer.subscription.updated](https://docs.stripe.com/api/events/types#event_types-customer.subscription.updated)\n\nListen to this to monitor subscription upgrades and downgrades. For upgrades,\ncheck the `subscription.items.data[0].price` attribute in the subscription\nobject to find the price the customer is subscribed to. Then, grant access to\nthe new product. For downgrades, check the same attribute and adjust or revoke\naccess as needed.\n\nWhen a customer uses the portal to upgrade or downgrade a subscription with a\n[trial](https://docs.stripe.com/billing/subscriptions/trials), the\nsubscription’s trial ends immediately when switching to the new price.\n\n[customer.subscription.updated](https://docs.stripe.com/api/events/types#event_types-customer.subscription.updated)Listen\nto this to monitor updates to the subscription quantity. When you receive this\nevent, check the `subscription.items.data[0].quantity` attribute to find the\nquantity the customer is subscribed to. Then, grant access to the new quantity.\n\n[customer.subscription.deleted](https://docs.stripe.com/api/events/types#event_types-customer.subscription.deleted)\n\nListen to this to monitor subscription cancellations. When you receive this\nevent, revoke the customer’s access to the product. If you configure the portal\nto cancel subscriptions at the end of a billing period, listen to the\n[customer.subscription.updated](https://docs.stripe.com/api/events/types#event_types-customer.subscription.updated)\nevent to be notified of cancellations before they occur. If\n`cancel_at_period_end` is `true`, the subscription is canceled at the end of its\nbilling period.\n\nIf a customer changes their mind, they can reactivate their subscription prior\nto the end of the billing period. When they do this, a\n[customer.subscription.updated](https://docs.stripe.com/api/events/types#event_types-customer.subscription.updated)\nevent is sent. Check that `cancel_at_period_end` is `false` to confirm that they\nreactivated their subscription.\n\n[payment_method.attached](https://docs.stripe.com/api/events/types#event_types-payment_method.attached)Occurs\nwhen a customer adds a payment\nmethod.[payment_method.detached](https://docs.stripe.com/api/events/types#event_types-payment_method.detached)Occurs\nwhen a customer removes a payment\nmethod.[customer.updated](https://docs.stripe.com/api/events/types#event_types-customer.updated)Check\nthe `invoice_settings.default_payment_method` attribute to find the payment\nmethod that a customer selected as the new default. If you have subscriptions\nthat override the customer-level default payment method, customers can remove\nthis override. Check the subscription’s `default_payment_method` attribute when\nyou receive this event to see if the override was removed. Use this webhook to\nupdate any relevant information in your database. All updates must be treated as\nbilling information changes only. Don’t use the customer billing email address\nas a login\ncredential.[customer.tax_id.created](https://docs.stripe.com/api/events/types#event_types-customer.tax_id.created)Occurs\nwhen customers manage their tax IDs. Stripe can validate some types of tax IDs.\nLearn more in the [tax IDs\nguide](https://docs.stripe.com/billing/customer/tax-ids).[customer.tax_id.deleted](https://docs.stripe.com/api/events/types#event_types-customer.tax_id.deleted)Occurs\nwhen customers manage their tax IDs. Stripe can validate some types of tax IDs.\nLearn more in the [tax IDs\nguide](https://docs.stripe.com/billing/customer/tax-ids).[customer.tax_id.updated](https://docs.stripe.com/api/events/types#event_types-customer.tax_id.updated)Listen\nto this to get validation updates about customer tax IDs. Learn more in the [tax\nIDs\nguide](https://docs.stripe.com/billing/customer/tax-ids).[billing_portal.configuration.created](https://docs.stripe.com/api/events/types#event_types-billing_portal.configuration.created)Occurs\nwhen a configuration is\ncreated.[billing_portal.configuration.updated](https://docs.stripe.com/api/events/types#event_types-billing_portal.configuration.updated)Occurs\nwhen a configuration is\nupdated.[billing_portal.session.created](https://docs.stripe.com/api/events/types#event_types-billing_portal.session.created)Occurs\nwhen a portal session is created.[Go\nlive](https://docs.stripe.com/customer-management/integrate-customer-portal#go-live)\nMake sure to test the portal before enabling it in production. When you’re ready\nto go live:\n\nWhen you create a portal session, Stripe returns the `portal session` object,\nwhich contains the session’s [short-lived\nURL](https://docs.stripe.com/api/customer_portal/session?lang=curl#portal_session_object-url)\nthat your customers must use to access the customer portal. You can also create\none shareable link for each configuration of the portal with the\n[login_page](https://docs.stripe.com/api/customer_portal/configuration#portal_configuration_object-login_page)\nparameter.\n\n- Turn off **View test data** in the Dashboard.\n- [Configure](https://dashboard.stripe.com/settings/billing/portal) the portal\nin live mode.\n- Add your [webhooks](https://dashboard.stripe.com/webhooks) in live mode.\n\nStripe maintains two distinct sets of portal configurations: one for live mode\nand one for test mode. To help you validate your integration, making changes in\none mode does not affect your configuration in the other.\n\n[OptionalDeep link to specific\npages](https://docs.stripe.com/customer-management/integrate-customer-portal#deep-links)[OptionalCustomize\na portal\nsessionServer-side](https://docs.stripe.com/customer-management/integrate-customer-portal#customize)[OptionalCustomize\nbranding](https://docs.stripe.com/customer-management/integrate-customer-portal#branding)\n\n## Links\n\n- [Firebase](https://github.com/stripe-samples/firebase-subscription-payments)\n- [Netlify\nIdentity](https://github.com/stripe-samples/netlify-stripe-subscriptions)\n- [Ruby on\nRails](https://github.com/stripe-samples/developer-office-hours/tree/master/2020-06-29-customer-portal)\n- [Register now](https://dashboard.stripe.com/register/)\n- [Connect](https://docs.stripe.com/connect)\n- [API](https://docs.stripe.com/api/customer_portal/configuration)\n-\n[guide](https://docs.stripe.com/products-prices/getting-started#create-product)\n- [Stripe Tax](https://docs.stripe.com/tax)\n- [invoices](https://docs.stripe.com/api/invoices)\n- [Customer portal\nsettings](https://dashboard.stripe.com/settings/billing/portal)\n- [subscriptions](https://docs.stripe.com/billing/customer/tax-ids)\n- [invoices](https://docs.stripe.com/invoicing/taxes/account-tax-ids)\n- [set up Stripe Tax](https://docs.stripe.com/tax/set-up)\n- [collect taxes for recurring\npayments](https://docs.stripe.com/billing/taxes/collect-taxes)\n- [collect taxes in your custom payment\nflows](https://docs.stripe.com/tax/custom#existing-customer)\n- [set tax rates for line items and\ninvoices](https://docs.stripe.com/tax/invoicing)\n- [create a\nsession](https://docs.stripe.com/api/customer_portal/sessions/create)\n- [short-lived\nURL](https://docs.stripe.com/api/customer_portal/session?lang=curl#portal_session_object-url)\n- [webhooks](https://docs.stripe.com/webhooks)\n-\n[customer.subscription.updated](https://docs.stripe.com/api/events/types#event_types-customer.subscription.updated)\n- [trial](https://docs.stripe.com/billing/subscriptions/trials)\n-\n[customer.subscription.deleted](https://docs.stripe.com/api/events/types#event_types-customer.subscription.deleted)\n-\n[payment_method.attached](https://docs.stripe.com/api/events/types#event_types-payment_method.attached)\n-\n[payment_method.detached](https://docs.stripe.com/api/events/types#event_types-payment_method.detached)\n-\n[customer.updated](https://docs.stripe.com/api/events/types#event_types-customer.updated)\n-\n[customer.tax_id.created](https://docs.stripe.com/api/events/types#event_types-customer.tax_id.created)\n-\n[customer.tax_id.deleted](https://docs.stripe.com/api/events/types#event_types-customer.tax_id.deleted)\n-\n[customer.tax_id.updated](https://docs.stripe.com/api/events/types#event_types-customer.tax_id.updated)\n-\n[billing_portal.configuration.created](https://docs.stripe.com/api/events/types#event_types-billing_portal.configuration.created)\n-\n[billing_portal.configuration.updated](https://docs.stripe.com/api/events/types#event_types-billing_portal.configuration.updated)\n-\n[billing_portal.session.created](https://docs.stripe.com/api/events/types#event_types-billing_portal.session.created)\n-\n[login_page](https://docs.stripe.com/api/customer_portal/configuration#portal_configuration_object-login_page)\n- [webhooks](https://dashboard.stripe.com/webhooks)",
  "metadata": {
    "title": "Integrate the customer portal with the API | Stripe Documentation",
    "description": "Learn how to integrate the customer portal using the Stripe API.",
    "sourceURL": "https://docs.stripe.com/customer-management/integrate-customer-portal"
  }
}