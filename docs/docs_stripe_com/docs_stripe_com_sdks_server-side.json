{
  "content": "# Introduction to server-side SDKs\n\n## Learn how to install and use the Stripe server-side SDKs.\n\nThe Stripe server-side SDKs reduce the amount of work required to use our REST\nAPIs. Stripe-maintained SDKs are available for Ruby, PHP, Java, Python, Node,\n.NET and Go. [Community libraries](https://docs.stripe.com/sdks/community) are\nalso available for other server languages.\n\n## Installation and setup\n\nSelect your language in the language selector below, then follow the\ninstructions to install the SDK.\n\n```\n# Available as a gem\nsudo gem install stripe\n```\n\n```\n# If you use bundler, you can add this line to your Gemfile\ngem 'stripe'\n```\n\nAfter completing the installation, you need to initialize Stripe:\n\n```\nrequire 'stripe'\nStripe.api_key = 'sk_test_BQokikJOvBiI2HlWgH4olfQ2'\n```\n\n## Send API requests\n\nYou can manipulate objects with the Stripe API in six primary ways: create,\nupdate, delete, retrieve, list, and search. The following examples show each of\nthe six ways using the `Customer` object:\n\nCreateUpdateDeleteRetrieveListSearch\nCreate a customer named John Doe.\n\n```\ncurl https://api.stripe.com/v1/customers \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d name=\"John Doe\"\n```\n\nAPI requests can contain different types of parameters. For example, here’s how\nto create a customer with a `name` (a string), `address` (an object), and\n`preferred_locales` (a list):\n\n```\ncurl https://api.stripe.com/v1/customers \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d name=\"John Doe\" \\\n -d \"address[country]\"=US \\\n -d \"address[city]\"=\"San Fransisco\" \\\n -d \"preferred_locales[]\"=EN \\\n -d \"preferred_locales[]\"=FR\n```\n\nWhen updating an object, you can clear some of its properties. For dynamically\ntyped languages, send an empty string. For strongly typed languages, use\nspecific constants. For example, here’s how to clear the `name` (a string) and\n`metadata` (a hash of key-value pairs) of a customer:\n\n```\ncustomer = Stripe::Customer.update('{{CUSTOMER_ID}}', {\n name: '',\n metadata: '',\n})\n```\n\nThis example clears all metadata, but you can also clear individual keys. Learn\nmore about managing metadata in our [metadata\nguide](https://docs.stripe.com/metadata).\n\n## Access the API response\n\nEvery time you make an API request, Stripe sends you back a response.\n\nIf you create, retrieve, or update an object, you get back the object itself:\n\n```\n{\n \"id\": \"pi_001\",\n \"object\": \"payment_intent\",\n \"amount\": 1099,\n \"currency\": \"usd\",\n /* ... */\n}\n```\n\nUse a variable to access the properties of that object:\n\n```\npaymentIntent = Stripe::PaymentIntent.retrieve('{{PAYMENT_INTENT_ID}}')\nputs paymentIntent.amount\n```\n\nWhen listing or searching for objects, you get back a `List` object containing a\n`data` array with the objects requested:\n\n```\n{\n \"object\": \"list\",\n \"data\": [\n {\n \"id\": \"pi_003\",\n \"object\": \"payment_intent\",\n \"amount\": 4200,\n \"currency\": \"usd\",\n /* ... */\n },\n {\n \"id\": \"pi_002\",\n \"object\": \"payment_intent\",\n \"amount\": 2100,\n \"currency\": \"usd\",\n \"payment_method_types\": [ \"link\" ],\n /* ... */\n }\n ],\n \"has_more\": true,\n \"url\": \"/v1/payment_intents\"\n}\n```\n\nUse a loop on the `data` array to access the properties of each object:\n\n```\npaymentIntentList = Stripe::PaymentIntent.list({ limit: 3 })\nfor pi in paymentIntentList.data do\n puts pi.amount\nend\n```\n\nYou could also use\n[auto-pagination](https://docs.stripe.com/api/pagination/auto) to iterate over\nall the results.\n\n## Expanding responses\n\nSome properties are expandable or includable, meaning you can return them by\nusing the `expand` parameter. For example:\n\n- Retrieve a PaymentIntent and expand its associated PaymentMethod.\n```\ncurl -G https://api.stripe.com/v1/payment_intents/{{PAYMENT_INTENT_ID}} \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d \"expand[]\"=payment_method\n```\n- Retrieve a Checkout Session and include the `line_items` property.\n```\ncurl -G https://api.stripe.com/v1/checkout/sessions/{{SESSION_ID}} \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d \"expand[]\"=line_items\n```\n\nLearn more about [expanding responses](https://docs.stripe.com/expand).\n\n## Retrieve the request ID\n\nEach API request has a unique request ID (`req_xxx`) associated with it. You can\nuse it to inspect the request in the Dashboard to see the parameters Stripe\nreceived, or to share it with Stripe support when you need to resolve an issue.\n\nYou can find the IDs in your [Dashboard\nlogs](https://dashboard.stripe.com/test/workbench/logs), or directly with code\nlike this:\n\n```\ncustomer = Stripe::Customer.create({ name: 'John Doe', })\nputs customer.last_response.request_id\n```\n\n## Set additional request options\n\nWhen sending API requests, you can set additional request options to:\n\n- [Set a specific API version](https://docs.stripe.com/sdks/set-version).\n- [Make requests on your connected\naccounts](https://docs.stripe.com/connect/authentication).\n- [Provide idempotency keys](https://docs.stripe.com/api/idempotent_requests).\n\n## Error handling\n\nEach server SDK interprets error responses from the Stripe API as exception\ntypes, so you don’t need to parse the response status yourself. Use error\nhandling conventions appropriate for each language to handle those errors.\n\n```\nbegin\n Stripe::PaymentIntent.create(params)\nrescue Stripe::CardError => e\n puts \"A payment error occurred: #{e.error.message}\"\nrescue Stripe::InvalidRequestError => e\n puts \"An invalid request occurred.\"\nrescue Stripe::StripeError => e\n puts \"Another problem occurred, maybe unrelated to Stripe.\"\nelse\n puts \"No error.\"\nend\n```\n\nLearn more about [error handling](https://docs.stripe.com/error-handling).\n\n## Private preview features\n\nStripe regularly launches private preview features that introduce new properties\nor parameters that aren’t immediately public. Dynamically-typed SDKs (PHP, Node,\nRuby, Python) automatically support these. For strongly-typed SDKs (Java, .NET,\nGo), use the code below, unless they’re supported in a beta release.\n\nSend undocumented parameters:\n\n```\nCustomerCreateParams params =\n CustomerCreateParams.builder()\n .setEmail(\"jenny.rosen@example.com\")\n .putExtraParam(\"secret_feature_enabled\", \"true\")\n .build();\n\nclient.customers().create(params);\n```\n\nAccess undocumented fields:\n\n```\nfinal Customer customer = client.customers().retrieve(\"cus_1234\");\nBoolean featureEnabled = customer.getRawJsonObject()\n .getAsJsonPrimitive(\"secret_feature_enabled\")\n .getAsBoolean();\n```\n\n## Source code\n\nThe source code for each of our server SDKs is available on GitHub:\n\nLanguageRepositoryRuby[stripe-ruby](https://github.com/stripe/stripe-ruby)PHP[stripe-php](https://github.com/stripe/stripe-php)Java[stripe-Java](https://github.com/stripe/stripe-java)Node[stripe-node](https://github.com/stripe/stripe-node)Python[stripe-python](https://github.com/stripe/stripe-python).NET[stripe-dotnet](https://github.com/stripe/stripe-dotnet)Go[stripe-go](https://github.com/stripe/stripe-go)\n## Client and service patterns\n\nFor some SDKs, we’ve introduced a client and service pattern that changes the\nway you perform operations. This new service-based pattern allows you to create\nmocks without static methods and enables multiple client instances to operate\nsimultaneously with distinct configuration.\n\nIf you’re comparing code targeting older versions of these libraries with\nresource-based patterns, the calls might look different.\n\nSDKClient/Services releaseTransition guide`stripe-php`7.33.0[GitHub\nWiki](https://github.com/stripe/stripe-php/wiki/Migration-to-StripeClient-and-services-in-7.33.0)`stripe-python`8.0.0[GitHub\nWiki](https://github.com/stripe/stripe-python/wiki/Migration-guide-for-v8-(StripeClient))\n## Beta versions\n\nWe offer beta SDKs that are identifiable by the `beta` or `b` filename suffix,\nsuch as `5.1.0-beta.3` or `5.1.0b3`. They give you access to products and\nfeatures in development, and allow you to share feedback with us before their\ngeneral availability.\n\nAccess the beta SDK releases through the `readme.md` file of the respective\nGitHub repository.\n\n## Links\n\n- [Community libraries](https://docs.stripe.com/sdks/community)\n- [metadata guide](https://docs.stripe.com/metadata)\n- [auto-pagination](https://docs.stripe.com/api/pagination/auto)\n- [expanding responses](https://docs.stripe.com/expand)\n- [Dashboard logs](https://dashboard.stripe.com/test/workbench/logs)\n- [Set a specific API version](https://docs.stripe.com/sdks/set-version)\n- [Make requests on your connected\naccounts](https://docs.stripe.com/connect/authentication)\n- [Provide idempotency keys](https://docs.stripe.com/api/idempotent_requests)\n- [error handling](https://docs.stripe.com/error-handling)\n- [stripe-ruby](https://github.com/stripe/stripe-ruby)\n- [stripe-php](https://github.com/stripe/stripe-php)\n- [stripe-Java](https://github.com/stripe/stripe-java)\n- [stripe-node](https://github.com/stripe/stripe-node)\n- [stripe-python](https://github.com/stripe/stripe-python)\n- [stripe-dotnet](https://github.com/stripe/stripe-dotnet)\n- [stripe-go](https://github.com/stripe/stripe-go)\n- [GitHub\nWiki](https://github.com/stripe/stripe-php/wiki/Migration-to-StripeClient-and-services-in-7.33.0)\n- [GitHub\nWiki](https://github.com/stripe/stripe-python/wiki/Migration-guide-for-v8-(StripeClient))",
  "metadata": {
    "title": "Introduction to server-side SDKs | Stripe Documentation",
    "description": "Covering how to install the Stripe server-side SDKs, how to make API requests, how to retrive API responses, and so on.",
    "sourceURL": "https://docs.stripe.com/sdks/server-side"
  }
}