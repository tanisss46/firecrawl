{
  "content": "# The Sources APIDeprecated\n\n## Learn about the different payment methods and mechanisms available through the Sources API.\n\n#### Warning\n\nWe deprecated the Sources API and plan to remove support for local payment\nmethods. If you currently handle any local payment methods using the Sources\nAPI, you must [migrate them to the Payment Methods\nAPI](https://docs.stripe.com/payments/payment-methods/transitioning).\n\nWhile we don’t plan to remove support for card payments, we recommend replacing\nany use of the Sources API with the [PaymentMethods\nAPI](https://docs.stripe.com/api/payment_methods), which provides access to our\nlatest features and payment method types.\n\n[Source](https://docs.stripe.com/api#sources) objects allow you to accept a\nvariety of payment methods with a single API. A source represents a customer’s\npayment instrument, and can be used with the Stripe API to create payments.\nSources can be charged directly, or attached to customers for later reuse.\n\nEach [payment method\nsupported](https://docs.stripe.com/sources#supported-payment-methods) by the\nSources API is defined by four key characteristics. The combination of these\ncharacteristics determines how a source is made chargeable, and how it is used\nin a charge request to complete a payment.\n\n- [Pull or push](https://docs.stripe.com/sources#pull-or-push-of-funds): How the\nfunds for the method of payment are transferred from your customer\n- [Flow](https://docs.stripe.com/sources#flow-for-customer-action): The type of\naction your customer must take to authenticate the payment\n- [Usage](https://docs.stripe.com/sources#single-use-or-reusable): Whether the\n`Source` is reusable or not\n- [Synchronous or\nasynchronous](https://docs.stripe.com/sources#synchronous-or-asynchronous-confirmation):\nWhether the resulting charge can be confirmed immediately, or only after a delay\n\nFor a complete example illustrating how to accept any payment method using the\nSources API, check out this [sample e-commerce\nstore](https://stripe-payments-demo.appspot.com/), and browse its [source code\non GitHub](https://github.com/stripe/stripe-payments-demo).\n\n## Supported payment methods\n\nYou can enable any payment method available to you within the\n[Dashboard](https://dashboard.stripe.com/account/payments/settings). Activation\nis generally instantaneous, and does not require additional contracts nor\ninclude a lengthy process. For a detailed listing, take a look at the available\npayment methods and their [supported geographical\nregions](https://stripe.com/payments/payment-methods-guide#payment-methods-fact-sheets).\n\nThe following table maps the aforementioned key characteristics to the supported\npayment methods:\n\nTransfer Confirmation None Redirect Code verification Receiver Pull Synchronous\n[Cards](https://docs.stripe.com/sources/cards) — — — Asynchronous SEPA Direct\nDebit (Deprecated) [ACH debits with\nauthentication](https://docs.stripe.com/ach-deprecated) [ACH debits with\nmicrodeposits](https://docs.stripe.com/ach-deprecated) — Push Synchronous -\nAlipay (Deprecated)\n- Bancontact (Deprecated)\n- giropay (Deprecated)\n- iDEAL (Deprecated)\n- Przelewy24 (Deprecated)\n- WeChat Pay (Deprecated)\n— — Multibanco (Deprecated) Asynchronous — Sofort with Sources (Deprecated) — — \n## Pull or push of funds\n\nEach method of payment is categorized as either pull or push, depending on how\nfunds are transferred from the customer’s payment method.\n\n- Using a *pull* method, you debit the funds from the customer’s account after\nthe customer has provided consent. [Card\npayments](https://docs.stripe.com/sources/cards) are an example of a pull\nmethod: your customer’s card is debited when a payment is made, and no customer\ninteraction is required for subsequent debits.\n- Using a *push* method, the customer sends the funds to you. ACH Credit\nTransfers are an example of a push method: Your customer is provided with bank\nrouting and account numbers to which they should send (push) the correct amount.\nAfter confirmation that your customer has sent the funds to you, the source\nbecomes chargeable, and is ready to be used in a charge request. Other push\npayment methods, such as iDEAL or Sofort, rely on a redirect for your customer\nto push the money to you directly from their online bank account. Generally,\npush methods require a customer interaction for each payment.\n\n## Flow for customer action\n\nCertain payment methods require your customer to complete a particular action\n(flow) before the source is chargeable. The type of flow that applies to a\npayment method is stated within the `Source` object’s `flow` parameter. Each\nmethod is categorized into one of the following flow types.\n\nNo customer actionRedirect flowCode verification flowReceiver flow\nNo action is required from your customer. Some payment methods (generally *pull*\nmethods), such as cards (excluding 3D Secure), require no additional\nauthentication beyond collecting the payment information from customers. Sources\nrepresenting this payment method can be used immediately when making charge\nrequests.\n\n!\n\nOnce the required flow has been completed and a source becomes chargeable, the\nsource must be used to make a charge request for the payment to be completed. If\nnot, the source is canceled and the customer’s authenticated payment is refunded\nautomatically—no money is moved into your account.\n\n## Single-use or reusable\n\nCertain payment methods allow for the creation of sources that can be reused for\nadditional payments without your customer needing to complete the payment\nprocess again. Sources that can be reused have their `usage` parameter set to\n`reusable`.\n\nConversely, if a source can only be used once, this parameter is set to\n`single_use`, and a source must be created each time a customer makes a payment.\nSuch sources should not be attached to customers—instead, they should be charged\ndirectly. They can be charged only once, and their status will change to\n`consumed` when charged.\n\nReusable sources must be attached to a\n[Customer](https://docs.stripe.com/api#customers) in order to be reused. (If\ncharged directly, their status will change to `consumed`.) To learn how to\nattach Sources to [Customers](https://docs.stripe.com/api/customers), and to\nmanage a Customer’s sources list, refer to the [Sources and\nCustomers](https://docs.stripe.com/sources/customers) guide.\n\n## Synchronous or asynchronous confirmation\n\nOnce you use a payment method to create a\n[Charge](https://docs.stripe.com/api#charges) object, that charge’s status can\nbe confirmed either immediately (synchronously), or after a certain amount of\ntime (asynchronously).\n\n- With a synchronous payment method, the charge request’s status can be\nimmediately confirmed as either `succeeded` or `failed`. If the charge request\nis successful, the payment is completed—it’s considered guaranteed that the\ncustomer has been charged, and that you’ll receive the funds. Card payments are\nan example of a synchronous payment method: there is real-time confirmation of\nthe payment’s success or failure.\n- For asynchronous payment methods, it can take up to several days to confirm\nwhether the payment has been successful. During this time, the payment cannot be\nguaranteed. The status of the payment’s `Charge` object is initially set to\n`pending`, until the payment has been confirmed as successful or failed. ACH\ndebits are an example of an asynchronous method: with these debits, it takes a\nfew days to confirm that the payment has succeeded.\n\nStripe sends a [webhook](https://docs.stripe.com/webhooks) event once a charge’s\nstatus has changed. When accepting any payment method that is asynchronous, your\nintegration must be able to receive webhooks, so that it can receive this\nnotification and confirm whether the customer’s payment was successful or has\nfailed.\n\n## See also\n\n- [Sources API reference](https://docs.stripe.com/api#sources)\n- [Best practices using Sources](https://docs.stripe.com/sources/best-practices)\n- [Payment methods guide](https://stripe.com/payments/payment-methods-guide)\n\n## Links\n\n- [migrate them to the Payment Methods\nAPI](https://docs.stripe.com/payments/payment-methods/transitioning)\n- [PaymentMethods API](https://docs.stripe.com/api/payment_methods)\n- [Source](https://docs.stripe.com/api#sources)\n- [sample e-commerce store](https://stripe-payments-demo.appspot.com)\n- [source code on GitHub](https://github.com/stripe/stripe-payments-demo)\n- [Dashboard](https://dashboard.stripe.com/account/payments/settings)\n- [supported geographical\nregions](https://stripe.com/payments/payment-methods-guide#payment-methods-fact-sheets)\n- [Cards](https://docs.stripe.com/sources/cards)\n- [ACH debits with authentication](https://docs.stripe.com/ach-deprecated)\n- [Customer](https://docs.stripe.com/api#customers)\n- [Customers](https://docs.stripe.com/api/customers)\n- [Sources and Customers](https://docs.stripe.com/sources/customers)\n- [Charge](https://docs.stripe.com/api#charges)\n- [webhook](https://docs.stripe.com/webhooks)\n- [Best practices using Sources](https://docs.stripe.com/sources/best-practices)\n- [Payment methods guide](https://stripe.com/payments/payment-methods-guide)",
  "metadata": {
    "title": "The Sources API | Stripe Documentation",
    "description": "Learn about the different payment methods and mechanisms available through the Sources API.",
    "sourceURL": "https://docs.stripe.com/sources"
  }
}