{
  "content": "# Fleet integration guide\n\n## Build a Fleet financial services integration with Issuing.\n\nBuild a fleet offering by using Stripe\n[Issuing](https://docs.stripe.com/issuing) to create cards and process\ntransactions for your customers’ business.\n\nBy the end of this guide, you’ll know how to:\n\n- Create verified connected accounts representing your business customers.\n- Create cards for your business customers and use these cards to spend funds.\n- Understand the additional fleet specific fields collected at the pump or point\nof sale.\n\n## Before you begin\n\n- Sign up for a [Stripe account](https://dashboard.stripe.com/register).\n- [Activate Issuing test\nmode](https://dashboard.stripe.com/test/issuing/overview) in the Dashboard.\n- Configure your [Connect platform branding\nsettings](https://dashboard.stripe.com/settings/connect/stripe-dashboard/branding)\nfor your business and add an icon.\n\n## Overview\n\nStripe Issuing enables fleet management platforms and operators to create and\nmanage customized fleet card programs with physical or virtual payment cards.\nIssuing allows users to efficiently control, manage, and reconcile expenses\nrelated to their clients’ electric or traditional fuel vehicle fleets.\n\nStripe’s platform provides advanced capabilities with open-loop cards accepted\nanywhere, real-time spend controls at the point of purchase, advanced fraud\nprotection leveraging Stripe’s fraud tools and authorization signals, and the\nability to define card benefits unique to your program, such as 1% cashback on\nfuel spend. Fleet providers can also issue cards tied to individual or groups of\nvehicles, facilitating precise expense tracking (including odometer readings)\nand limiting spend to authorized drivers, merchants, or certain purchase\ncategories.\n\nStripe’s platform provides data access to identify insights in spend patterns,\nmileage, maintenance, and transaction details, allowing businesses to customize\ntheir fleet program. This approach provides greater operational efficiency with\nrealized cost savings, as well as an oversight of card-based expenditure across\nfuel, repairs, food, accommodation, and more.\n\n[Create connected\naccounts](https://docs.stripe.com/baas/start-integration/integration-guides/fleet#set-up-connect)\n### Create a connected account\n\nCreate a connected account to represent a business customer of your platform.\nFor your platform, each fleet operator would be represented as a connected\naccount.\n\n#### Connect account types\n\nIssuing only supports connected accounts that don’t use a Stripe-hosted\nDashboard, and where your platform is responsible for requirements collection\nand loss liability, also known as a Custom connected account. Learn how to\n[create connected\naccounts](https://docs.stripe.com/connect/design-an-integration?connect-onboarding-surface=api&connect-dashboard-type=none&connect-economic-model=buy-rate&connect-loss-liability-owner=platform&connect-charge-type=direct)\nthat work with Issuing. If your existing accounts don’t match this\nconfiguration, you must recreate them.\n\nThe following request creates a US-based connected account with the correct\nconfiguration and requests the requisite capabilities:\n\n```\ncurl https://api.stripe.com/v1/accounts \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d country=US \\\n -d \"controller[stripe_dashboard][type]\"=none \\\n -d \"controller[fees][payer]\"=application \\\n -d \"controller[losses][payments]\"=application \\\n -d \"controller[requirement_collection]\"=application \\\n -d \"capabilities[transfers][requested]\"=true \\\n -d \"capabilities[card_issuing][requested]\"=true \\\n -d \"capabilities[us_bank_account_ach_payments][requested]\"=true\n```\n\nThe user’s account information appears in the response:\n\n```\n{\n ...\n \"id\": \"{{CONNECTED_ACCOUNT_ID}}\",\n \"controller\": {\n \"stripe_dashboard\": {\n \"type\": \"none\"\n },\n \"fees\": {\n \"payer\": \"application\"\n },\n \"losses\": {\n \"payments\": \"application\"\n },\n \"is_controller\": true,\n \"type\": \"application\",\n \"requirement_collection\": \"application\"\n },\n ...\n}\n```\n\nNote the connected account’s `id`. You’ll provide this value to\n[authenticate](https://docs.stripe.com/connect/authentication) as the connected\naccount by passing it into requests in the `Stripe-Account` header.\n\nIf a connected account already exists, you can add the requisite capabilities by\nspecifying the connected account `id` in the request:\n\n```\ncurl https://api.stripe.com/v1/accounts/{{CONNECTED_ACCOUNT_ID}} \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d \"controller[stripe_dashboard][type]\"=none \\\n -d \"controller[fees][payer]\"=application \\\n -d \"controller[losses][payments]\"=application \\\n -d \"controller[requirement_collection]\"=application \\\n -d country=US \\\n --data-urlencode email=\"jenny.rosen@example.com\" \\\n -d \"capabilities[transfers][requested]\"=true \\\n -d \"capabilities[card_issuing][requested]\"=true\n```\n\n### Verify the connected account\n\nChoose one of the following onboarding options:\n\nStripe-hosted onboardingEmbedded onboardingAPI onboarding\n[Stripe-hosted onboarding](https://docs.stripe.com/connect/hosted-onboarding) is\na web form hosted by Stripe with your brand’s name, color, and icon.\nStripe-hosted onboarding uses the [Accounts\nAPI](https://docs.stripe.com/api/accounts) to read the requirements and generate\nan onboarding form with robust data validation and is localized for all\nStripe-supported countries.\n\nBefore using Connect Onboarding, you must provide the name, color, and icon of\nyour brand in the Branding section of your [Connect settings\npage](https://dashboard.stripe.com/test/settings/connect).\n\nYou can use hosted onboarding to allow connected accounts to link an\n`external_account` (which is required for payouts) by enabling it through your\n[Connect Onboarding settings](https://dashboard.stripe.com/settings/connect).\n\nTo create an onboarding link for the connected account, use the [Account Links\nAPI](https://docs.stripe.com/api/account_links/create).\n\n```\ncurl https://api.stripe.com/v1/account_links \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d account={{CONNECTED_ACCOUNT_ID}} \\\n --data-urlencode refresh_url=\"https://example.com/reauth\" \\\n --data-urlencode return_url=\"https://example.com/return\" \\\n -d type=account_onboarding\n```\n\n#### Caution\n\nFor security reasons, don’t email, text, or send account link URLs directly to\nyour connected account. We recommend that you distribute the account link URL\nfrom within your platform’s application, where their account is authenticated.\n\nThe response you receive includes the `url` parameter containing the link for\nyour connected account to onboard to your platform.\n\n```\n{\n \"object\": \"account_link\",\n \"created\": 1612927106,\n \"expires_at\": 1612927406,\n \"url\": \"https://connect.stripe.com/setup/s/…\"\n}\n```\n\nAt this point, Stripe has created and verified the connected account with\n`active` relevant capabilities to use Issuing and Treasury.\n\nTo learn more, see:\n\n- [Set up an Issuing and Connect\nintegration](https://docs.stripe.com/issuing/connect)\n- [Stripe hosted onboarding for connected\naccounts](https://docs.stripe.com/connect/custom/hosted-onboarding)\n- [Creating and using connected\naccounts](https://docs.stripe.com/connect/design-an-integration?connect-onboarding-surface=api&connect-dashboard-type=none&connect-economic-model=buy-rate&connect-loss-liability-owner=platform&connect-charge-type=direct)\n- [Identify verification for connected\naccounts](https://docs.stripe.com/connect/identity-verification)\n[Create cardholders and\ncards](https://docs.stripe.com/baas/start-integration/integration-guides/fleet#create-cardholders-cards)EmbeddedAPI\nThe [Cardholder](https://docs.stripe.com/api/issuing/cardholder/object) is the\nindividual driver (that is, employee or contractor) that’s authorized by your\nbusiness customer to use card funding by the associated balance. The\n`Cardholder` object includes relevant details, such as a\n[name](https://docs.stripe.com/api/issuing/cardholders/object#issuing_cardholder_object-name)\nto display on cards and a\n[billing](https://docs.stripe.com/api/issuing/cardholders/object#issuing_cardholder_object-billing)\naddress, which is usually the business address of the connected account or your\nplatform.\n\nUse the embedded [Issuing cards list\ncomponent](https://docs.stripe.com/connect/supported-embedded-components/issuing-cards-list)\nto enable your connected accounts to create a\n[Card](https://docs.stripe.com/api/issuing/cards/object) for a Cardholder and\nassociate it with the Financial Account.\n\nSizeDesktopLocale (United States)This demo is read-only with limited\nfunctionality. Visit [furever.dev](https://furever.dev/) for a fully functional\ndemo.\nWhen [creating an Account\nSession](https://docs.stripe.com/api/account_sessions/create), enable the\nIssuing cards list component by specifying `issuing_cards_list` in the\n`components` parameter. You can enable or disable individual features of the\nIssuing cards list component by specifying the `features` parameter under\n`issuing_cards_list`.\n\n```\ncurl https://api.stripe.com/v1/account_sessions \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d account={{CONNECTED_ACCOUNT_ID}} \\\n -d \"components[issuing_cards_list][enabled]\"=true \\\n -d \"components[issuing_cards_list][features][card_management]\"=true \\\n -d \"components[issuing_cards_list][features][cardholder_management]\"=true \\\n-d\n\"components[issuing_cards_list][features][card_spend_dispute_management]\"=true \\\n -d \"components[issuing_cards_list][features][spend_control_management]\"=true\n```\n\nAfter creating the account session and [initializing\nConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions),\nyou can render the Issuing cards list component in the front end:\n\n```\n// Include this element in your HTML\nconst issuingCardsList = stripeConnectInstance.create('issuing-cards-list');\nissuingCardsList.setShowSpendControls(true);\ncontainer.appendChild(issuingCardsList);\n```\n\nFrom here, users can click **Create card** to begin creating a new Cardholder\nand Card. The user can also activate the card during creation, or do so\nafterwards.\n\nAt this point, there’s an active card attached to a cardholder and financial\naccount. See the [Issuing page](https://dashboard.stripe.com/issuing/overview)\nfor the connected account to view the card and cardholder information.\n\nTo learn more, see:\n\n- [Virtual cards with Issuing](https://docs.stripe.com/issuing/cards/virtual)\n- [Physical cards](https://docs.stripe.com/issuing/cards/physical)\n- [Use the Dashboard for Issuing with\nConnect](https://docs.stripe.com/issuing/connect#using-dashboard-issuing)\n- [Create cards with the API](https://docs.stripe.com/api/issuing/cards)\n[Use the\ncard](https://docs.stripe.com/baas/start-integration/integration-guides/fleet#use-card)\nWhen a card is used to make a purchase, it generates an authorization request,\nwhich can be approved or declined in real-time.\n\nCardholder\n\nNetwork\n\nStripe\n\nServer\n\nFuel purchase attempted\n\nCard network notifies Stripe\n\nRequest real-time decision\n\nissuing_authorization.request\nApprove and set max `amount`\n\nReturn result to card network\n\nFueling completes up to `amount`\n\nCard network notifies Stripe\n\nFinal `amount` updated\n\nissuing_authorization.updated\nWith a configured fleet card program, you’ll access additional fleet-specific\nfields gathered at the pump or point of sale. This includes odometer reading,\ndriver identification, fuel type, gallons pumped, and itemized non-fuel product\ndetails, enabled by a fleet-specific chip configuration on the card. This data\nbecomes available at the point of purchase during authorization, and later when\nthe transaction is processed. Some fuel dispensers allow [partial\nauthorization](https://docs.stripe.com/issuing/purchases/authorizations#handling-other-authorizations).\n\n### Create an authorization\n\nTo observe the impact of card activity on the associated balance, generate a\ntest authorization.\n\nAs a user with a Commercial Fleet card program, you receive specific\nfleet-related data on the\n[Authorization](https://docs.stripe.com/api/issuing/authorizations/object)\nobject.\n\nYou can create a test mode authorization on the Issuing page of the Dashboard\nfor the connected account, or with the following call to the [Authorizations\nAPI](https://docs.stripe.com/api/issuing/authorizations):\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/authorizations \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d card={{CARD_ID}} \\\n -d amount=100 \\\n -d authorization_method=chip \\\n -d \"fleet[cardholder_prompt_data][odometer]\"=42424 \\\n -d \"fleet[purchase_type]\"=fuel_purchase \\\n -d \"fleet[service_type]\"=self_service \\\n -d \"merchant_data[category]\"=automated_fuel_dispensers \\\n -d is_amount_controllable=true\n```\n\nAfter approval, Stripe creates an `Authorization` in a `pending` state while it\nwaits for [capture](https://docs.stripe.com/issuing/purchases/transactions).\n\nThe authorized `amount` is the default amount held for a [fuel dispenser\ntransaction](https://docs.stripe.com/issuing/purchases/authorizations#fuel-dispenser-transactions)\nunless you’ve provided a different partial authorization amount in your response\nto the `issuing_authorization.request` webhook.\n\nMake note of the authorization `id` that you’ll use to capture the funds:\n\n```\n{\n \"id\": \"iauth_1NvPyY2SSJdH5vn2xZQE8C7k\",\n \"object\": \"issuing.authorization\",\n \"amount\": 10000,\n ...\n \"fleet\": {\n \"cardholder_prompt_data\": {\n \"odometer\": 42424,\n },\n \"purchase_type\": \"fuel_purchase\",\n \"service_type\": \"self_service\",\n },\n \"status\": \"pending\",\n \"transactions\": [],\n}\n```\n\n### Simulate fuel dispenser completion\n\nIn test mode, you can simulate the completion of fuel being dispensed using the\nfollowing code:\n\n```\ncurl\nhttps://api.stripe.com/v1/test_helpers/issuing/authorizations/{{AUTHORIZATION_ID}}/finalize_amount\n\\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d final_amount=1000 \\\n -d \"fleet[cardholder_prompt_data][odometer]\"=42424 \\\n -d \"fleet[purchase_type]\"=fuel_purchase \\\n -d \"fleet[reported_breakdown][fuel][gross_amount_decimal]\"=\"10.0\" \\\n -d \"fleet[reported_breakdown][non_fuel][gross_amount_decimal]\"=0 \\\n -d \"fleet[reported_breakdown][tax][local_amount_decimal]\"=\"0.03\" \\\n -d \"fleet[service_type]\"=self_service \\\n -d \"fuel[industry_product_code]\"=001 \\\n -d \"fuel[quantity_decimal]\"=\"5.0\" \\\n -d \"fuel[type]\"=unleaded_regular \\\n -d \"fuel[unit]\"=us_gallon \\\n -d \"fuel[unit_cost_decimal]\"=200\n```\n\nThe `Authorization` remains in a `pending` state until it’s\n[captured](https://docs.stripe.com/issuing/purchases/transactions). The amount\nis updated to reflect the total amount of fuel dispensed, and additional\nfleet-specific fields are now available:\n\n```\n{\n \"id\": \"iauth_1NvPyY2SSJdH5vn2xZQE8C7k\",\n \"object\": \"issuing.authorization\",\n \"amount\": 1000,\n ...\n \"fleet\": {\n \"cardholder_prompt_data\": {\n \"odometer\": 42424,\n },\n \"purchase_type\": \"fuel_purchase\",\n \"reported_breakdown\": {\n \"fuel\": {\n \"gross_amount_decimal\": \"10.0\",\n },\n \"non_fuel\": {\n \"gross_amount_decimal\": \"0\"\n },\n \"tax\": {\n \"local_amount_decimal\": \"0.03\",\n \"national_amount_decimal\": null\n }\n },\n \"service_type\": \"self_service\",\n },\n \"fuel\": {\n \"industry_product_code\": \"001\",\n \"quantity_decimal\": \"5.0\",\n \"type\": \"unleaded_regular\",\n \"unit\": \"us_gallon\",\n \"unit_cost_decimal\": \"200\",\n },\n \"status\": \"pending\",\n \"transactions\": [],\n}\n```\n\n### Capture the funds\n\nIn testmode, you can capture the funds using the following code:\n\n```\ncurl\nhttps://api.stripe.com/v1/test_helpers/issuing/authorizations/{{AUTHORIZATION_ID}}/capture\n\\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d \"purchase_details[fleet][cardholder_prompt_data][odometer]\"=42424 \\\n -d \"purchase_details[fleet][purchase_type]\"=fuel_purchase \\\n-d\n\"purchase_details[fleet][reported_breakdown][fuel][gross_amount_decimal]\"=\"10.0\"\n\\\n-d\n\"purchase_details[fleet][reported_breakdown][non_fuel][gross_amount_decimal]\"=0\n\\\n-d\n\"purchase_details[fleet][reported_breakdown][tax][local_amount_decimal]\"=\"0.03\"\n\\\n -d \"purchase_details[fleet][service_type]\"=self_service \\\n -d \"purchase_details[fuel][industry_product_code]\"=001 \\\n -d \"purchase_details[fuel][quantity_decimal]\"=\"5.0\" \\\n -d \"purchase_details[fuel][type]\"=unleaded_regular \\\n -d \"purchase_details[fuel][unit]\"=us_gallon \\\n -d \"purchase_details[fuel][unit_cost_decimal]\"=200\n```\n\nAfter the authorization is captured, Stripe creates an Issuing\n[Transaction](https://docs.stripe.com/issuing/purchases/transactions), the\n`status` of the authorization is set to `closed`.\n\nAs a user with a Commercial Fleet card program, you receive specific\nfleet-related data on the\n[Transaction](https://docs.stripe.com/api/issuing/transactions), (for example,\nto reconcile purchases).\n\n```\n{\n \"id\": \"ipi_1MykXhFtDWhhyHE1UjsZZ3xQ\",\n \"object\": \"issuing.transaction\",\n \"amount\": 1000,\n ...\n \"purchase_details\": {\n \"fleet\": {\n \"cardholder_prompt_data\": {\n \"odometer\": 42424,\n },\n \"purchase_type\": \"fuel_purchase\",\n \"reported_breakdown\": {\n \"fuel\": {\n \"gross_amount_decimal\": \"10.0\",\n },\n \"non_fuel\": {\n \"gross_amount_decimal\": \"0\"\n },\n \"tax\": {\n \"local_amount_decimal\": \"0.03\",\n \"national_amount_decimal\": null\n }\n },\n \"service_type\": \"self_service\",\n },\n \"fuel\": {\n \"industry_product_code\": \"001\",\n \"quantity_decimal\": \"5.0\",\n \"type\": \"unleaded_regular\",\n \"unit\": \"us_gallon\",\n \"unit_cost_decimal\": \"200\",\n },\n }\n}\n```\n\n## See also\n\n- [Handling real-time auth\nwebhooks](https://docs.stripe.com/issuing/controls/real-time-authorizations)\n- [Spending\ncontrols](https://docs.stripe.com/issuing/controls/spending-controls)\n- [Issuing\nauthorizations](https://docs.stripe.com/issuing/purchases/authorizations)\n- [Issuing transactions](https://docs.stripe.com/issuing/purchases/transactions)\n- [Testing Issuing](https://docs.stripe.com/issuing/testing)\n- [Working with Stripe Issuing cards and\nTreasury](https://docs.stripe.com/treasury/account-management/issuing-cards)\n- [Manage transaction fraud](https://docs.stripe.com/issuing/manage-fraud)\n- [Issue regulated customer\nnotices](https://docs.stripe.com/issuing/compliance-us/issuing-regulated-customer-notices)\n\n## Links\n\n- [BaaS for SaaS\nPlatforms](https://stripe.com/guides/introduction-to-banking-as-a-service)\n- [Issuing](https://docs.stripe.com/issuing)\n- [Stripe account](https://dashboard.stripe.com/register)\n- [Activate Issuing test\nmode](https://dashboard.stripe.com/test/issuing/overview)\n- [Connect platform branding\nsettings](https://dashboard.stripe.com/settings/connect/stripe-dashboard/branding)\n- [create connected\naccounts](https://docs.stripe.com/connect/design-an-integration?connect-onboarding-surface=api&connect-dashboard-type=none&connect-economic-model=buy-rate&connect-loss-liability-owner=platform&connect-charge-type=direct)\n- [authenticate](https://docs.stripe.com/connect/authentication)\n- [Stripe-hosted onboarding](https://docs.stripe.com/connect/hosted-onboarding)\n- [Accounts API](https://docs.stripe.com/api/accounts)\n- [Connect settings page](https://dashboard.stripe.com/test/settings/connect)\n- [Connect Onboarding settings](https://dashboard.stripe.com/settings/connect)\n- [Account Links API](https://docs.stripe.com/api/account_links/create)\n- [https://connect.stripe.com/setup/s/…](https://connect.stripe.com/setup/s/…)\n- [Set up an Issuing and Connect\nintegration](https://docs.stripe.com/issuing/connect)\n- [Stripe hosted onboarding for connected\naccounts](https://docs.stripe.com/connect/custom/hosted-onboarding)\n- [Identify verification for connected\naccounts](https://docs.stripe.com/connect/identity-verification)\n- [Cardholder](https://docs.stripe.com/api/issuing/cardholder/object)\n-\n[name](https://docs.stripe.com/api/issuing/cardholders/object#issuing_cardholder_object-name)\n-\n[billing](https://docs.stripe.com/api/issuing/cardholders/object#issuing_cardholder_object-billing)\n- [Issuing cards list\ncomponent](https://docs.stripe.com/connect/supported-embedded-components/issuing-cards-list)\n- [Card](https://docs.stripe.com/api/issuing/cards/object)\n- [furever.dev](https://furever.dev)\n- [creating an Account\nSession](https://docs.stripe.com/api/account_sessions/create)\n- [initializing\nConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions)\n- [Issuing page](https://dashboard.stripe.com/issuing/overview)\n- [Virtual cards with Issuing](https://docs.stripe.com/issuing/cards/virtual)\n- [Physical cards](https://docs.stripe.com/issuing/cards/physical)\n- [Use the Dashboard for Issuing with\nConnect](https://docs.stripe.com/issuing/connect#using-dashboard-issuing)\n- [Create cards with the API](https://docs.stripe.com/api/issuing/cards)\n- [partial\nauthorization](https://docs.stripe.com/issuing/purchases/authorizations#handling-other-authorizations)\n- [Authorization](https://docs.stripe.com/api/issuing/authorizations/object)\n- [Authorizations API](https://docs.stripe.com/api/issuing/authorizations)\n- [capture](https://docs.stripe.com/issuing/purchases/transactions)\n- [fuel dispenser\ntransaction](https://docs.stripe.com/issuing/purchases/authorizations#fuel-dispenser-transactions)\n- [Transaction](https://docs.stripe.com/api/issuing/transactions)\n- [Handling real-time auth\nwebhooks](https://docs.stripe.com/issuing/controls/real-time-authorizations)\n- [Spending\ncontrols](https://docs.stripe.com/issuing/controls/spending-controls)\n- [Issuing\nauthorizations](https://docs.stripe.com/issuing/purchases/authorizations)\n- [Testing Issuing](https://docs.stripe.com/issuing/testing)\n- [Working with Stripe Issuing cards and\nTreasury](https://docs.stripe.com/treasury/account-management/issuing-cards)\n- [Manage transaction fraud](https://docs.stripe.com/issuing/manage-fraud)\n- [Issue regulated customer\nnotices](https://docs.stripe.com/issuing/compliance-us/issuing-regulated-customer-notices)",
  "metadata": {
    "title": "Fleet integration guide | Stripe Documentation",
    "description": "Build a Fleet financial services integration with Issuing.",
    "sourceURL": "https://docs.stripe.com/baas/start-integration/integration-guides/fleet"
  }
}