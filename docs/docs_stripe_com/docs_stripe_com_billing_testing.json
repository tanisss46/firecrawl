{
  "content": "# Testing Stripe Billing\n\n## Learn how to test your Billing integration.\n\nThoroughly test your integration before you expose it to customers or use it for\nany live activity. Use the resources on this page in addition to any\norganizational guidelines (for example, runbooks, quality gates, or development\nchecklists) to help determine whether your integration is production-ready.\n\n## Go-live principles\n\nBefore taking your integration live, review these Stripe checklists:\n\n- [Account checklist](https://docs.stripe.com/get-started/account/checklist)\n- [Development checklist](https://docs.stripe.com/get-started/checklist/go-live)\n- [Website checklist](https://docs.stripe.com/get-started/checklist/website)\n\nHere’s what a typical integration flow looks like.\n\nCustomer\n\nYour site\n\nStripe\n\nEnter payment details and subscription\n\ncustomer.created\nCreate [Customer](https://docs.stripe.com/api/customers/object) and\n[Subscriptions](https://docs.stripe.com/api/subscriptions/object) object\n\nSend `customer.created` event\n\ncustomer.created\nSend `customer.subscription.created` event\n\ncustomer.subscription.created\nCreate Invoice\n\nSend `invoice.created` event\n\ninvoice.created\nSend `invoice.finalized` event\n\ninvoice.finalized\nSend invoice to customer\n\nPay invoice through [customer\nportal](https://docs.stripe.com/customer-management)\n\nSend `invoice.paid` event\n\ninvoice.paid\nCancel subscription through [customer\nportal](https://docs.stripe.com/customer-management)\n\nSend `customer.subscription.deleted` event\n\ncustomer.subscription.deleted\nConfirm cancellation\n\nA basic Billing integration\nFor subscription and recurring revenue integrations, make sure that, at a\nminimum, the following components work as expected.\n\nThe table lists the event notifications for each component. You can configure\nyour integration to listen for these events with\n[webhook](https://docs.stripe.com/webhooks)s. Read this guide to learn more\nabout [event notifications](https://docs.stripe.com/billing/testing#webhooks)\nand testing.\n\nComponentDescriptionEventsCustomer sign-upMake sure your integration can\nsuccessfully collect the information you need to create a Customer record in\nStripe. Your customers can enter that information through Payment Links\nCheckout, [Elements](https://docs.stripe.com/payments/elements), or a completely\ncustom payment form built with the [Stripe API](https://docs.stripe.com/api). No\nmatter which form you use, make sure that you see the Customer object stored on\nStripe. You can use the Dashboard or API to view and [manage\nCustomers](https://docs.stripe.com/billing/customer#manage-customers).-\n`customer.created`\n- `customer.subscription.created`\nInvoicingSubscriptions generate [Invoices](https://docs.stripe.com/api/invoices)\nat the end of each billing cycle. Depending on your payment collection method,\nyou may send an invoice to collect payment in arrears or to confirm an automatic\ncharge. Make sure that your integration creates and sends invoices as you\nexpect. Read the guide to learn more about creating and managing [invoices for\nsubscriptions](https://docs.stripe.com/billing/invoices/subscription). You can\nuse test clocks to simulate billing cycles, which include generating and sending\ninvoices. Read the test clocks guide to learn about specific [use\ncases](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#use-cases)\nto test.- `invoice.created`\n- `invoice.finalized`\n- `invoice.finalization_failed`\n- `invoice.paid`\n- `invoice.payment_action_required`\n- `invoice.payment_failed`\n- `invoice.upcoming`\n- `invoice.updated`\nSubscription managementSet up the [customer\nportal](https://docs.stripe.com/billing/subscriptions/customer-portal) to let\nyour customers manage their\n[subscriptions](https://docs.stripe.com/billing/subscriptions/creating) and\nbilling information. To test it, create a subscription in [test\nmode](https://docs.stripe.com/test-mode). Then, log in to the portal as the test\nuser and update the subscription. Check the Dashboard or API to see whether the\nsubscription reflects the customer’s change. Read the [integration\nguide](https://docs.stripe.com/customer-management) to learn how to set up the\ncustomer portal.- `customer.subscription.deleted`\n- `customer.subscription.paused`\n- `customer.subscription.resumed`\n- `customer.subscription.updated`\nTrialsOffer customers a trial of your service. To test that your trial is set up\ncorrectly, you can create a test clock. The subscription should generate a\nzero-value invoice for the trial period. [Learn how to test trials with test\nclocks](https://docs.stripe.com/billing/testing#trials). For more information\nabout how trials work, read the [subscription trials\nguide](https://docs.stripe.com/billing/subscriptions/trials).-\n`customer.subscription.trial_will_end`\n- `customer.subscription.updated`\nPayment failuresPayments from your customers may fail for a number of reasons.\nMake sure your integration can handle failures, including retrying payments.\n[Learn how to test payment\nfailures](https://docs.stripe.com/billing/testing#payment-failures).-\n`invoice.finalization_failed`\n- `invoice.payment_failed`\n- `invoice.payment_action_required`\n\n## Test clocks\n\nTest clocks allow you to simulate Billing objects, like\n[subscriptions](https://docs.stripe.com/billing/subscriptions/creating), through\ntime in [test mode](https://docs.stripe.com/test-mode) so you don’t have to wait\na year to see how your integration handles a payment failure for an annual\nrenewal. You don’t need to write any code with test clocks: you can create\nsimulations in the Dashboard. You can also access them through the API. Learn\nmore about [test clocks](https://docs.stripe.com/billing/testing/test-clocks)\nand common [use cases](https://docs.stripe.com/billing/testing/test-clocks) for\nthem.\n\n## Test subscription trial periods\n\nFirst, follow these steps to start using test clocks:\n\n- [Create a test\nclock](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#create-clock)\n- [Set up your testing\nsimulation](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#setup-simulation)\n- [Advance the clock’s\ntime](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#advance-clock)\n- [Monitor and handle the\nchanges](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#monitor-changes)\n- [Update the\nsimulation](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#update-simulation)\n\nNext, you can start testing trials with test clocks. Let’s say that you want\ncustomers to try your product for free with a seven-day trial before they start\npaying and want to collect payment information up front. To simulate this\nsituation using test clocks, follow these steps:\n\n- Create a new test clock and set its `frozen_time` to January 1.\n- Add a customer and include their payment method. In this case, use a\n4242424242424242 [test card](https://docs.stripe.com/testing#cards).\n- Create a subscription and add a seven-day free trial period:\nDashboardAPI\nTo add a trial period to an existing subscription using the Dashboard:\n\nFind the subscription you want to change.\n\n- Click **Actions**.\n- Click **Update subscription**.\n- Click **Add free trial** and enter seven in **Free trial days** field.\n- Click **Update subscription**.\n- After creating a subscription with a seven-day free trial period, a\nsubscription is created in a `trialing` state. An invoice of $0.00 is generated\ndue to the free trial.\n- Advance the date to January 5 to see the\n[customer.subscription.trial_will_end](https://docs.stripe.com/api/events/types#event_types-customer.subscription.trial_will_end)\nevent notification. Stripe sends the notification three days before the trial\nends. You can use this webhook event to inform your customers that the trial\nends soon.\n- Advance the date to January 8 to see that the subscription is now `paid` and\nan invoice for 50 USD is created.\n- Advance the date by one cycle (for example, to February 8 for a monthly\nsubscription) to see the subscription renew successfully.\n\n### Test trial periods without test clocks\n\n## Test subscription webhook notifications\n\nSubscriptions integrations rely heavily on\n[webhooks](https://docs.stripe.com/webhooks). You set up a webhook endpoint on\nyour server and specify which event notifications to listen for. Stripe emits\nnotifications for events like a subscription upgrade or cancellation.\n\nYou can test webhooks by either creating actual test subscriptions or by\ntriggering event notifications with the [Stripe\nCLI](https://docs.stripe.com/stripe-cli) or through the\n[Dashboard](https://dashboard.stripe.com/test/account/webhooks).\n\nAfter you set up the Stripe CLI and link to your Stripe account, you can trigger\nevents from the [subscription\nlifecycle](https://docs.stripe.com/billing/subscriptions/overview#subscription-lifecycle)\nto test your webhook integration. If you use the Stripe CLI to trigger events,\nyou can see event notifications on your server as they come in, which allows you\nto check your webhook integration directly without network tunnels or firewalls.\n\nWhen you use the Stripe CLI or the Dashboard to trigger events, the event your\nwebhook receives contains fake data that doesn’t correlate to subscription\ninformation. The most reliable way to test webhook notifications is to create\nactual test subscriptions and handle the corresponding events.\n\nThe following table describes the most common events related to subscriptions\nand, where applicable, suggests actions for handling the events.\n\nEventDescription`customer.created`Sent when a\n[Customer](https://docs.stripe.com/api/customers/object) is successfully\ncreated.`customer.subscription.created`Sent when the subscription is created.\nThe subscription `status` might be `incomplete` if customer authentication is\nrequired to complete the payment or if you set `payment_behavior` to\n`default_incomplete`. View [subscription payment\nbehavior](https://docs.stripe.com/billing/subscriptions/overview#subscription-payment-behavior)\nto learn more.`customer.subscription.deleted`Sent when a customer’s subscription\nends.`customer.subscription.paused`Sent when a subscription’s `status` changes\nto `paused`. For example, this is sent when a subscription is\n[configured](https://docs.stripe.com/api/subscriptions/create#create_subscription-trial_settings-end_behavior-missing_payment_method)\nto pause when a [free trial ends without a payment\nmethod](https://docs.stripe.com/billing/subscriptions/trials#create-free-trials-without-payment).\nInvoicing won’t occur until the subscription is\n[resumed](https://docs.stripe.com/api/subscriptions/resume). We don’t send this\nevent if [payment collection is\npaused](https://docs.stripe.com/billing/subscriptions/pause-payment) because\ninvoices continue to be created during that time\nperiod.`customer.subscription.resumed`Sent when a subscription previously in a\n`paused` status is resumed. This doesn’t apply when [payment collection is\nunpaused](https://docs.stripe.com/billing/subscriptions/pause-payment#unpausing).`customer.subscription.trial_will_end`Sent\nthree days before the [trial period\nends](https://docs.stripe.com/billing/subscriptions/trials). If the trial is\nless than three days, this event is\ntriggered.`customer.subscription.updated`Sent when a subscription starts or\n[changes](https://docs.stripe.com/billing/subscriptions/change). For example,\nrenewing a subscription, adding a coupon, applying a discount, adding an invoice\nitem, and changing plans all trigger this\nevent.`entitlements.active_entitlement_summary.updated`Sent when a customer’s\nactive entitlements are updated. When you receive this event, you can provision\nor de-provision access to your product’s features. Read more about [integrating\nwith\nentitlements](https://docs.stripe.com/billing/entitlements).`invoice.created`Sent\nwhen an invoice is created for a new or renewing subscription. If Stripe fails\nto receive a successful response to `invoice.created`, then finalizing all\ninvoices with [automatic\ncollection](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection)\nis delayed for up to 72 hours. Read more about [finalizing\ninvoices](https://docs.stripe.com/invoicing/integration/workflow-transitions#finalized).-\nRespond to the notification by sending a request to the [Finalize an\ninvoice](https://docs.stripe.com/api/invoices/finalize) API.\n`invoice.finalized`Sent when an invoice is successfully finalized and ready to\nbe paid.- You can send the invoice to the customer. View [invoice\nfinalization](https://docs.stripe.com/invoicing/integration/workflow-transitions#finalized)\nto learn more.\n- Depending on your settings, we automatically charge the default payment method\nor attempt collection. View [emails after\nfinalization](https://docs.stripe.com/invoicing/integration/workflow-transitions#emails)\nto learn more.\n`invoice.finalization_failed`The invoice couldn’t be finalized. Learn how to\n[handle invoice finalization\nfailures](https://docs.stripe.com/tax/customer-locations#finalizing-invoices-with-finalization-failures)\nby reading the guide. Learn more about [invoice\nfinalization](https://docs.stripe.com/invoicing/integration/workflow-transitions#finalized)\nin the invoices overview guide.- Inspect the Invoice’s\n[last_finalization_error](https://docs.stripe.com/api/invoices/object#invoice_object-last_finalization_error)\nto determine the cause of the error.\n- If you’re using Stripe Tax, check the Invoice object’s\n[automatic_tax](https://docs.stripe.com/api/invoices/object#invoice_object-last_finalization_error)\nfield.\n- If `automatic_tax[status]=requires_location_inputs`, the invoice can’t be\nfinalized and payments can’t be collected. Notify your customer and collect the\nrequired [customer location](https://docs.stripe.com/tax/customer-locations).\n- If `automatic_tax[status]=failed`, retry the request later.\n`invoice.paid`Sent when the invoice is successfully paid. You can provision\naccess to your product when you receive this event and the subscription `status`\nis `active`.`invoice.payment_action_required`Sent when the invoice requires\ncustomer authentication. Learn how to handle the subscription when the invoice\n[requires\naction](https://docs.stripe.com/billing/subscriptions/overview#requires-action).\n`invoice.payment_failed`\n\nA payment for an invoice failed. The PaymentIntent status changes to\n`requires_action`. The status of the subscription continues to be `incomplete`\n*only* for the subscription’s first invoice. If a payment fails, there are\nseveral possible actions to take:\n\n- Notify the customer. Read about how you can configure [subscription\nsettings](https://docs.stripe.com/billing/subscriptions/overview#settings) to\nenable [Smart\nRetries](https://docs.stripe.com/billing/revenue-recovery/smart-retries) and\nother revenue recovery features.\n- If you’re using PaymentIntents, collect new payment information and [confirm\nthe PaymentIntent](https://docs.stripe.com/api/payment_intents/confirm).\n- Update the [default payment\nmethod](https://docs.stripe.com/api/subscriptions/object#subscription_object-default_payment_method)\non the subscription.\n`invoice.upcoming`Sent a few days prior to the renewal of the subscription. The\nnumber of days is based on the number set for Upcoming renewal events in the\n[Dashboard](https://dashboard.stripe.com/settings/billing/automatic). For\nexisting subscriptions, changing the number of days takes effect on the next\nbilling period. You can still add [extra invoice\nitems](https://docs.stripe.com/billing/invoices/subscription#adding-upcoming-invoice-items),\nif needed.`invoice.updated`Sent when a payment succeeds or fails. If payment is\nsuccessful the `paid` attribute is set to `true` and the `status` is `paid`. If\npayment fails, `paid` is set to `false` and the `status` remains `open`. Payment\nfailures also trigger a `invoice.payment_failed`\nevent.`payment_intent.created`Sent when a\n[PaymentIntent](https://docs.stripe.com/api/payment_intents) is\ncreated.`payment_intent.succeeded`Sent when a PaymentIntent has successfully\ncompleted payment.`subscription_schedule.aborted`Sent when a subscription\nschedule is canceled because payment delinquency terminated the related\nsubscription.`subscription_schedule.canceled`Sent when a subscription schedule\nis canceled, which also cancels any active associated\nsubscription.`subscription_schedule.completed`Sent when all\n[phases](https://docs.stripe.com/billing/subscriptions/subscription-schedules#subscription-schedule-phases)\nof a subscription schedule complete.`subscription_schedule.created`Sent when a\nnew subscription schedule is created.`subscription_schedule.expiring`Sent 7 days\nbefore a subscription schedule is set to\nexpire.`subscription_schedule.released`Sent when a subscription schedule is\n[released](https://docs.stripe.com/api/subscription_schedules/release), or\nstopped and disassociated from the subscription, which\nremains.`subscription_schedule.updated`Sent when a subscription schedule is\nupdated.\n## Test payment failures\n\nUse specific [test credit card numbers](https://docs.stripe.com/testing#cards)\nto trigger payment failures for subscriptions and\n[invoices](https://docs.stripe.com/api/invoices).\n\nSome subscription updates cause Stripe to invoice the subscription and attempt\npayment immediately (this synchronous payment attempt can occur on the initial\ninvoice, or on certain invoice updates). If this attempt fails, the subscription\nis created in an `incomplete` status.\n\nTo test the effects of payment failure on an active subscription, attach the\n[4000 0000 0000 0341](https://docs.stripe.com/testing#cards) card as the\ncustomer’s default payment method, but use a trial period to defer the attempt\n(a trial of a few seconds or minutes is sufficient). The subscription becomes\nactive immediately, with a\n[draft](https://docs.stripe.com/invoicing/overview#draft) invoice created when\nthe trial period ends. It takes approximately one hour for the invoice status\nchanges to open, at which time payment collection is attempted and fails.\n\nUse [test clocks](https://docs.stripe.com/billing/testing/test-clocks) to\nsimulate the forward movement of time in [test\nmode](https://docs.stripe.com/test-mode), which causes Billing resources, like\nSubscriptions, to change state and trigger\n[webhook](https://docs.stripe.com/webhooks) events. This allows you to see how\nyour integration handles a payment failure for a quarterly or annual renewal\nwithout waiting a year.\n\n## Test payments that require 3D Secure\n\nUse the [4000 0027 6000 3184](https://docs.stripe.com/testing#three-ds-cards)\ncard to simulate 3D Secure triggering for subscriptions and invoices.\n\nWhen a 3D Secure authentication flow is triggered, you can test authenticating\nor failing the payment attempt in the 3DS dialog that opens. If the payment is\nauthenticated successfully, the invoice is paid. If the invoice belongs to a\nsubscription in an `incomplete` status, the subscription becomes active. When a\npayment attempt fails, the authentication attempt is unsuccessful and the\ninvoice remains `open`.\n\n## Test Bank Transfer payments for invoices\n\nTo test manual payments on invoices through Bank Transfer:\n\n- In test mode, create an invoice and set the collection method to\n`send_invoice` and set the `payment_settings[payment_method_types]` array to\n`[customer_balance]`.\n- Find the invoice in the Dashboard and click **Send**.\n- Your customer has been allocated a unique virtual bank account number that you\ncan retrieve through the [funding instructions\nAPI](https://docs.stripe.com/payments/customer-balance/funding-instructions#create-funding-instructions).\nThe virtual banking details are also present in the hosted invoice page as well\nas the PDF.\n\n## Test the default payment method for invoices and subscriptions\n\nUse specific [test card\nIDs](https://docs.stripe.com/testing?testing-method=payment-methods#cards) to\nsimulate default payment methods being used for subscriptions and invoices.\n\nThe provided payment method must be attached to the subscription or invoice’s\ncustomer setting it as the `default_payment method`. For example, if using\n`pm_card_visa` to create a test Visa payment method:\n\n- Call the [PaymentMethod\nAttach](https://docs.stripe.com/api/payment_methods/attach) endpoint with\n`pm_card_visa` and the intended customer for the subscription or invoice\n- With the resulting Payment Method ID, create the subscription or invoice with\nthis ID as the `default_payment_method`.\n\nNow, the subscription or invoice will charge this payment method.\n\nLearn more about using [default payment\nmethods](https://docs.stripe.com/testing?testing-method=payment-methods#cards)\nfor subscriptions and invoices.\n\n## Test customer tax ID verification\n\nUse these magic tax IDs to trigger certain verification conditions in test mode.\nThe tax ID type must be either the EU VAT Number or Australian Business Number\n(ABN).\n\nNumberType`000000000`Successful verification`111111111`Unsuccessful\nverification`222222222`Verification remains pending indefinitely\n## Automated testing\n\nYou can set up [automated testing](https://docs.stripe.com/automated-testing)\nfor your integration. To optimize the testing:\n\n- Be aware of the [data retention\npolicy](https://support.stripe.com/questions/test-mode-subscription-data-retention)\nfor subscription-related data in test mode.\n- Avoid re-using resources like [Coupons](https://docs.stripe.com/api/coupons)\nand [Promotion Codes](https://docs.stripe.com/api/promotion_codes) across tests.\n- Use the [stripe-mock](https://github.com/stripe/stripe-mock) HTTP server,\nwhich is based on the Stripe API and closely reflects the API’s behavior.\n\n## See also\n\n- [Sandboxes](https://docs.stripe.com/sandboxes)\n- [Multiple\naccounts](https://docs.stripe.com/get-started/account/multiple-accounts)\n\n## Links\n\n- [cards](https://docs.stripe.com/testing#cards)\n- [account numbers](https://docs.stripe.com/testing#test-account-numbers)\n- [test clocks](https://docs.stripe.com/billing/testing/test-clocks)\n- [general testing doc](https://docs.stripe.com/testing)\n- [Account checklist](https://docs.stripe.com/get-started/account/checklist)\n- [Development checklist](https://docs.stripe.com/get-started/checklist/go-live)\n- [Website checklist](https://docs.stripe.com/get-started/checklist/website)\n- [Customer](https://docs.stripe.com/api/customers/object)\n- [Subscriptions](https://docs.stripe.com/api/subscriptions/object)\n- [customer portal](https://docs.stripe.com/customer-management)\n- [webhook](https://docs.stripe.com/webhooks)\n- [Elements](https://docs.stripe.com/payments/elements)\n- [Stripe API](https://docs.stripe.com/api)\n- [manage Customers](https://docs.stripe.com/billing/customer#manage-customers)\n- [Invoices](https://docs.stripe.com/api/invoices)\n- [invoices for\nsubscriptions](https://docs.stripe.com/billing/invoices/subscription)\n- [use\ncases](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#use-cases)\n- [customer\nportal](https://docs.stripe.com/billing/subscriptions/customer-portal)\n- [subscriptions](https://docs.stripe.com/billing/subscriptions/creating)\n- [test mode](https://docs.stripe.com/test-mode)\n- [subscription trials\nguide](https://docs.stripe.com/billing/subscriptions/trials)\n- [Create a test\nclock](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#create-clock)\n- [Set up your testing\nsimulation](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#setup-simulation)\n- [Advance the clock’s\ntime](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#advance-clock)\n- [Monitor and handle the\nchanges](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#monitor-changes)\n- [Update the\nsimulation](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#update-simulation)\n-\n[customer.subscription.trial_will_end](https://docs.stripe.com/api/events/types#event_types-customer.subscription.trial_will_end)\n- [Stripe CLI](https://docs.stripe.com/stripe-cli)\n- [Dashboard](https://dashboard.stripe.com/test/account/webhooks)\n- [subscription\nlifecycle](https://docs.stripe.com/billing/subscriptions/overview#subscription-lifecycle)\n- [subscription payment\nbehavior](https://docs.stripe.com/billing/subscriptions/overview#subscription-payment-behavior)\n-\n[configured](https://docs.stripe.com/api/subscriptions/create#create_subscription-trial_settings-end_behavior-missing_payment_method)\n- [free trial ends without a payment\nmethod](https://docs.stripe.com/billing/subscriptions/trials#create-free-trials-without-payment)\n- [resumed](https://docs.stripe.com/api/subscriptions/resume)\n- [payment collection is\npaused](https://docs.stripe.com/billing/subscriptions/pause-payment)\n- [payment collection is\nunpaused](https://docs.stripe.com/billing/subscriptions/pause-payment#unpausing)\n- [changes](https://docs.stripe.com/billing/subscriptions/change)\n- [integrating with entitlements](https://docs.stripe.com/billing/entitlements)\n- [automatic\ncollection](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection)\n- [finalizing\ninvoices](https://docs.stripe.com/invoicing/integration/workflow-transitions#finalized)\n- [Finalize an invoice](https://docs.stripe.com/api/invoices/finalize)\n- [emails after\nfinalization](https://docs.stripe.com/invoicing/integration/workflow-transitions#emails)\n- [handle invoice finalization\nfailures](https://docs.stripe.com/tax/customer-locations#finalizing-invoices-with-finalization-failures)\n-\n[last_finalization_error](https://docs.stripe.com/api/invoices/object#invoice_object-last_finalization_error)\n- [customer location](https://docs.stripe.com/tax/customer-locations)\n- [requires\naction](https://docs.stripe.com/billing/subscriptions/overview#requires-action)\n- [subscription\nsettings](https://docs.stripe.com/billing/subscriptions/overview#settings)\n- [Smart\nRetries](https://docs.stripe.com/billing/revenue-recovery/smart-retries)\n- [confirm the\nPaymentIntent](https://docs.stripe.com/api/payment_intents/confirm)\n- [default payment\nmethod](https://docs.stripe.com/api/subscriptions/object#subscription_object-default_payment_method)\n- [Dashboard](https://dashboard.stripe.com/settings/billing/automatic)\n- [extra invoice\nitems](https://docs.stripe.com/billing/invoices/subscription#adding-upcoming-invoice-items)\n- [PaymentIntent](https://docs.stripe.com/api/payment_intents)\n-\n[phases](https://docs.stripe.com/billing/subscriptions/subscription-schedules#subscription-schedule-phases)\n- [released](https://docs.stripe.com/api/subscription_schedules/release)\n- [draft](https://docs.stripe.com/invoicing/overview#draft)\n- [4000 0027 6000 3184](https://docs.stripe.com/testing#three-ds-cards)\n- [funding instructions\nAPI](https://docs.stripe.com/payments/customer-balance/funding-instructions#create-funding-instructions)\n- [test card\nIDs](https://docs.stripe.com/testing?testing-method=payment-methods#cards)\n- [PaymentMethod Attach](https://docs.stripe.com/api/payment_methods/attach)\n- [automated testing](https://docs.stripe.com/automated-testing)\n- [data retention\npolicy](https://support.stripe.com/questions/test-mode-subscription-data-retention)\n- [Coupons](https://docs.stripe.com/api/coupons)\n- [Promotion Codes](https://docs.stripe.com/api/promotion_codes)\n- [stripe-mock](https://github.com/stripe/stripe-mock)\n- [Sandboxes](https://docs.stripe.com/sandboxes)\n- [Multiple\naccounts](https://docs.stripe.com/get-started/account/multiple-accounts)",
  "metadata": {
    "title": "Testing Stripe Billing | Stripe Documentation",
    "description": "Learn how to test your Billing integration.",
    "sourceURL": "https://docs.stripe.com/billing/testing"
  }
}