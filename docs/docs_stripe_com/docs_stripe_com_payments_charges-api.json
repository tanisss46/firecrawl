{
  "content": "# Card payments on the Charges APILegacy\n\n## Learn how to charge, save, and authenticate cards with Stripe's legacy APIs.\n\n#### Legacy API\n\nThe content of this section refers to a Legacy feature. Use the [Payment Intents\nAPI](https://docs.stripe.com/payments/accept-a-payment) instead.\n\nThe Charges API doesn’t support the following features, many of which are\nrequired for credit card compliance:\n\n- Merchants in India\n- [Bank requests for card\nauthentication](https://docs.stripe.com/payments/cards/overview)\n- [Strong Customer\nAuthentication](https://docs.stripe.com/strong-customer-authentication)\n\nThe [Charges](https://docs.stripe.com/api/charges) and\n[Tokens](https://docs.stripe.com/api/tokens) APIs are legacy APIs used in older\nStripe integrations to accept debit and credit card payments. Use\n[PaymentIntents](https://docs.stripe.com/payments/accept-a-payment) for new\nintegrations.\n\nThe Charges API limits your ability to take advantage of Stripe features. To get\nthe latest features, use [Stripe\nCheckout](https://docs.stripe.com/payments/checkout) or [migrate to the Payment\nIntents API](https://docs.stripe.com/payments/payment-intents/migration).\n\n## Payment flow\n\nIn most cases, the PaymentIntents API offers more flexibility and integration\noptions.\n\nCharges APIPayment Intents API- Collect the customer’s payment information in\nthe browser with Elements.\n- Tokenize the payment information with Stripe.js.\n- Perform a request to send the token to your server.\n- Use the token to create a charge on your server with the desired amount and\ncurrency.\n- Fulfill the customer’s order if payment is successful.\n- Create a PaymentIntent on your server with the desired amount and currency.\n- Send the PaymentIntent’s client secret to the client side.\n- Collect the customer’s payment information in the browser with Elements.\n- Use Stripe.js or the mobile SDKs to handle [3D\nSecure](https://docs.stripe.com/payments/3d-secure/authentication-flow#three-ds-radar)\nand complete the payment on the client.\n- Use webhooks to fulfill the customer’s order if the payment is successful.\n\n## Refunds\n\nTo refund a payment via the API, create a\n[Refund](https://docs.stripe.com/api#create_refund) and provide the ID of the\ncharge to be refunded.\n\n```\ncurl https://api.stripe.com/v1/refunds \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d charge={{CHARGE_ID}}\n```\n\nTo refund part of a payment, provide an `amount` parameter, as an integer in\ncents (or the charge currency’s smallest currency unit).\n\n```\ncurl https://api.stripe.com/v1/refunds \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d charge={{CHARGE_ID}} \\\n -d amount=1000\n```\n\n## Apple Pay\n\nWhen your customer approves the payment, your app receives a\n[PKPayment](https://developer.apple.com/documentation/passkit/pkpayment)\ninstance containing their encrypted card details by implementing the\n[PKPaymentAuthorizationViewControllerDelegate](https://developer.apple.com/documentation/passkit/pkpaymentauthorizationviewcontrollerdelegate)\nmethods.\n\n- Use the\n[createTokenWithPayment](https://stripe.dev/stripe-ios/stripe-payments/Classes/STPAPIClient.html#/c:@CM@StripePayments@StripeCore@objc(cs)STPAPIClient(im)createTokenWithPayment:completion:)\nSDK method to turn the `PKPayment` into a Stripe `Token`\n- Use this `Token` to [create a\ncharge](https://docs.stripe.com/payments/accept-a-payment-charges#ios-create-charge).\n\n```\nextension CheckoutViewController: PKPaymentAuthorizationViewControllerDelegate {\n\nfunc paymentAuthorizationViewController(_ controller:\nPKPaymentAuthorizationViewController, didAuthorizePayment payment: PKPayment,\nhandler: @escaping (PKPaymentAuthorizationResult) -> Void) {\n // Convert the PKPayment into a Token\n STPAPIClient.shared.createToken(withPayment: payment) { token, error in\n guard let token = token else {\n // Handle the error\n return\n }\n let tokenID = token.tokenId\n // Send the token identifier to your server to create a Charge...\n// If the server responds successfully, set self.paymentSucceeded to YES\n }\n }\n\nfunc paymentAuthorizationViewControllerDidFinish(_ controller:\nPKPaymentAuthorizationViewController) {\n```\n\nSee all 26 lines\n## Dynamic statement descriptor\n\nBy default, your Stripe account’s [statement\ndescriptor](https://docs.stripe.com/get-started/account/activate#public-business-information)\nappears on customer statements whenever you charge their card. Additionally, you\ncan set the statement descriptor dynamically on every charge request with the\n`statement_descriptor` argument on the Charge object.\n\n```\ncurl https://api.stripe.com/v1/charges \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"amount\"=999 \\\n -d \"currency\"=\"usd\" \\\n -d \"description\"=\"Example charge\" \\\n -d \"source\"=\"tok_visa\" \\\n -d \"statement_descriptor\"=\"Custom descriptor\"\n```\n\nStatement descriptors are limited to 22 characters, can’t use the special\ncharacters `<`, `>`, `'`, `\"`, or `*`, and must not consist solely of numbers.\n\nWhen setting the statement descriptor dynamically on credit and debit card\ncharges, the dynamic portion is appended to the settlement merchant’s statement\ndescriptor (separated by an `*` and an empty space). For example, a statement\ndescriptor for a business, named FreeCookies, that includes the kind of cookie\npurchased might look like `FREECOOKIES* SUGAR`.\n\nThe `*` and empty space count towards the 22 character limit and Stripe\nautomatically allots 10 characters for the dynamic statement descriptor. This\nmeans that the settlement merchant’s descriptor might be truncated if it’s\nlonger than 10 characters (assuming the dynamic statement descriptor is also\ngreater than 10 characters). If the dynamic statement descriptor is also greater\nthan 10 characters, both descriptors are truncated at 10 characters.\n\nIf you’re having issues with the character limits, you can set a [shortened\ndescriptor](https://dashboard.stripe.com/settings/public) in the Stripe\nDashboard to shorten the settlement merchant’s descriptor. This allows more room\nfor the dynamic statement descriptor. The shortened descriptor:\n\n- Replaces the settlement merchant’s statement descriptor when using dynamic\ndescriptors.\n- Can be between 2 and 10 characters.\n\n#### Note\n\nIf your account’s statement descriptor is longer than 10 characters, set a\n[shortened descriptor](https://dashboard.stripe.com/settings/public) in the\nDashboard or use `statement_descriptor_prefix`. This prevents your statement\ndescriptor from being truncated in unpredictable ways.\n\nIf you’re not sure what the statement descriptors look like when they’re\ncombined, you can check them in the [Stripe\nDashboard](https://dashboard.stripe.com/settings/public).\n\n## Storing information in metadata\n\nStripe supports adding [metadata](https://docs.stripe.com/api#metadata) to the\nmost common requests you make, such as processing charges. Metadata isn’t shown\nto customers or factored into whether or not a charge is declined or blocked by\nour fraud prevention system.\n\nThrough metadata, you can associate other information—meaningful to you—with\nStripe activity. Any metadata you include is viewable in the Dashboard (for\nexample, when looking at the page for an individual charge), and is also\navailable in common reports and exports. As an example, your store’s order ID\ncan be attached to the charge used to pay for that order. Doing so allows you,\nyour accountant, or your finance team to easily reconcile charges in Stripe to\norders in your system.\n\nIf you are using [Radar](https://docs.stripe.com/radar), consider passing any\nadditional customer information and order information as metadata. By doing so,\nyou can write [Radar rules using metadata\nattributes](https://docs.stripe.com/radar/rules/reference#metadata-attributes)\nand have more information about the payment available within the Dashboard which\ncan expedite your review process.\n\n```\ncurl https://api.stripe.com/v1/charges \\\n -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n -d \"amount\"=999 \\\n -d \"currency\"=\"usd\" \\\n -d \"description\"=\"Example charge\" \\\n -d \"source\"=\"tok_visa\" \\\n -d \"metadata[order_id]\"=6735\n```\n\n#### Caution\n\nDon’t store any sensitive information (personally identifiable information, card\ndetails, and so on) as metadata or in the charge’s `description` parameter.\n\n## Declines\n\nIf you want your integration to respond to payment failures automatically, you\ncan access a charge’s `outcome` in two ways.\n\n- [Handle the API error](https://docs.stripe.com/api#error_handling) that’s\nreturned when a payment fails. For blocked and card issuer-declined payments,\nthe error includes the charge’s ID, which you can then use to\n[retrieve](https://docs.stripe.com/api#retrieve_charge) the charge.\n- Use [webhooks](https://docs.stripe.com/webhooks) to monitor status updates.\nFor example, the `charge.failed` event triggers when a payment is unsuccessful.\n\n## Links\n\n- [Payment Intents API](https://docs.stripe.com/payments/accept-a-payment)\n- [Bank requests for card\nauthentication](https://docs.stripe.com/payments/cards/overview)\n- [Strong Customer\nAuthentication](https://docs.stripe.com/strong-customer-authentication)\n- [Charges](https://docs.stripe.com/api/charges)\n- [Tokens](https://docs.stripe.com/api/tokens)\n- [Stripe Checkout](https://docs.stripe.com/payments/checkout)\n- [migrate to the Payment Intents\nAPI](https://docs.stripe.com/payments/payment-intents/migration)\n- [3D\nSecure](https://docs.stripe.com/payments/3d-secure/authentication-flow#three-ds-radar)\n- [Refund](https://docs.stripe.com/api#create_refund)\n- [PKPayment](https://developer.apple.com/documentation/passkit/pkpayment)\n-\n[PKPaymentAuthorizationViewControllerDelegate](https://developer.apple.com/documentation/passkit/pkpaymentauthorizationviewcontrollerdelegate)\n-\n[createTokenWithPayment](https://stripe.dev/stripe-ios/stripe-payments/Classes/STPAPIClient.html#/c:@CM@StripePayments@StripeCore@objc(cs)STPAPIClient(im)createTokenWithPayment:completion:)\n- [create a\ncharge](https://docs.stripe.com/payments/accept-a-payment-charges#ios-create-charge)\n- [statement\ndescriptor](https://docs.stripe.com/get-started/account/activate#public-business-information)\n- [shortened descriptor](https://dashboard.stripe.com/settings/public)\n- [metadata](https://docs.stripe.com/api#metadata)\n- [Radar](https://docs.stripe.com/radar)\n- [Radar rules using metadata\nattributes](https://docs.stripe.com/radar/rules/reference#metadata-attributes)\n- [Handle the API error](https://docs.stripe.com/api#error_handling)\n- [retrieve](https://docs.stripe.com/api#retrieve_charge)\n- [webhooks](https://docs.stripe.com/webhooks)",
  "metadata": {
    "title": "Card payments on the Charges API | Stripe Documentation",
    "description": "Learn how to charge, save, and authenticate cards with Stripe's legacy APIs.",
    "sourceURL": "https://docs.stripe.com/payments/charges-api"
  }
}