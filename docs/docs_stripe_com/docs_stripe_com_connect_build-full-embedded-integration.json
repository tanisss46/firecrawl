{
  "content": "# Fully embedded Connect platform integration\n\n## Provide Connect features to your connected accounts through your own website.\n\nConnect embedded components let you add Stripe-managed functionality to a custom\ninterface that you provide to your connected accounts. They can perform\npayment-related activities there instead of through the Stripe Dashboard. In a\nfully embedded integration:\n\n- Connected accounts access Stripe-related data, forms, and notifications\nthrough embedded components in your platform’s application. They don’t have\naccess to a Stripe Dashboard.\n- Stripe manages credit and fraud risk on your connected accounts. For any risk\nor compliance actions, we communicate directly with connected accounts and they\nrespond by interacting with embedded components.\n- Stripe email notifications direct your connected accounts to embedded\ncomponents on your website to review information or take required action. You\nmust provide Stripe with the URLs for those components.\n\n## View the demo site\n\nWe’ve built a complete [demo site for our fictitious business,\nFurever](http://furever.dev/). Furever is a platform providing software for\npet-groomers that allows their users to collect payments. In this demo, you can\ninteract with many embedded components, including account onboarding and account\nmanagement.\n\n## Before you begin\n\nBefore you can build an embedded integration, complete the following\nprerequisites:\n\n- [Register your platform](https://dashboard.stripe.com/connect/set-up).\n- Add business details to [activate your\naccount](https://dashboard.stripe.com/account/onboarding).\n- [Complete your platform\nprofile](https://dashboard.stripe.com/connect/settings/profile).\n- [Customize your brand\nsettings](https://dashboard.stripe.com/settings/connect/stripe-dashboard/branding).\nAdd a business name, icon, and brand color.\n\nYou must also decide whether your platform will own pricing, in which case\nStripe collects payment fees from your platform and you bill your connected\naccounts. Otherwise, Stripe owns pricing and collects payment fees directly from\nyour connected accounts.\n\n[Create a connected\naccount](https://docs.stripe.com/connect/build-full-embedded-integration#create-a-connected-account)\nThe following example creates an account where Stripe [manages\nrisk](https://docs.stripe.com/connect/risk-management), controls pricing, and\nassumes responsibility for account onboarding requirements. Your platform uses\nembedded components and isn’t liable for negative balances. Your connected\naccounts don’t have access to Stripe-hosted dashboards.\n\n#### Note\n\nBecause Stripe controls pricing in this example, you must integrate the\nDocuments embedded component. In addition, Stripe notifies connected accounts by\nemail when their tax invoices or 1099s are ready for download. If you create\naccounts where your platform controls pricing, the Documents component isn’t\nrequired, and Stripe doesn’t send notifications to connected accounts about tax\ninvoices or 1099s.\n\nYou can request additional capabilities, such as specific payment methods, after\nthe account onboards.\n\nCall [/v1/accounts](https://docs.stripe.com/api/accounts/create) with the\nfollowing parameters:\n\n- `country` of the account\n- `controller.stripe_dashboard.type` = `none`\n- request the `card_payments` and `transfers` capabilities\n\n```\ncurl https://api.stripe.com/v1/accounts \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d country=US \\\n -d \"controller[stripe_dashboard][type]\"=none \\\n -d \"capabilities[card_payments][requested]\"=true \\\n -d \"capabilities[transfers][requested]\"=true\n```\n\n```\n{\n \"id\": \"{{CONNECTED_ACCOUNT_ID}}\",\n \"object\": \"account\",\n \"controller\": {\n \"type\": \"application\",\n \"is_controller\": true,\n \"losses\": {\"payments\": \"stripe\"},\n \"fees\": {\"payer\": \"account\"},\n \"requirement_collection\": \"stripe\",\n \"stripe_dashboard\": {\n \"type\": \"none\",\n },\n },\n \"type\": \"none\",\n ...\n}\n```\n\n[Set up embedded\ncomponents](https://docs.stripe.com/connect/build-full-embedded-integration#setup-embedded-components)\nConnected accounts access their accounts, as well as core payments\nfunctionality, directly in your platform and don’t have access to a\nStripe-hosted Dashboard, so you must provide access through your site.\n\nYour integration must include the following embedded components:\n\n- Account onboarding component\n- Account management component\n- Notification banner component\n- Documents component (when Stripe collects Stripe fees directly from connected\naccounts)\n\nFor any other [optional\ncomponents](https://docs.stripe.com/connect/supported-embedded-components), you\ncan use our embedded components or build your own UI.\n\nMake sure you [set up embedded\ncomponents](https://docs.stripe.com/connect/get-started-connect-embedded-components)\nbefore onboarding connected accounts.\n\n[Onboard connected\naccounts](https://docs.stripe.com/connect/build-full-embedded-integration#onboard-connected-accounts)\nStripe uses an [Account Session](https://docs.stripe.com/api/account_sessions)\nto express your intent to provide embedded component access to the connected\naccount. Using an Account Session, the embedded account onboarding component\ncollects all required information based on your requested capabilities.\n\n### Prefill the account\n\nThe embedded account onboarding component collects all required information\nbased on your requested capabilities.\n\nYou can streamline the onboarding flow for your users by prefilling account\nfields with known information before you create an Account Session. Prefill as\nmuch account information as possible, including company, individual, and\nexternal account information, following these steps:\n\n- Review the [required verification\ninformation](https://docs.stripe.com/connect/required-verification-information)\ndocs to learn more about how the combination of countries and capabilities you\nselect for connected accounts affects their requirements.\n- To determine the information that Stripe requires from a connected account,\nretrieve the account’s\n[requirements](https://docs.stripe.com/api/accounts/object#account_object-requirements)\nproperty.\n- Collect prefillable information.\n- Record the information on the account by calling [Update\nAccount](https://docs.stripe.com/api/accounts/update).\n\n```\ncurl https://api.stripe.com/v1/accounts/{{CONNECTED_ACCOUNT_ID}} \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d business_type=individual \\\n --data-urlencode email=\"jenny.rosen@example.com\" \\\n -d \"individual[first_name]\"=Jenny \\\n -d \"individual[last_name]\"=Rosen \\\n --data-urlencode \"individual[email]\"=\"jenny.rosen@example.com\" \\\n -d \"individual[address][line1]\"=\"354 Oyster Point Blvd\" \\\n -d \"individual[address][city]\"=\"South San Francisco\" \\\n -d \"individual[address][state]\"=CA \\\n -d \"individual[address][postal_code]\"=94080 \\\n -d external_account={{BANK_ACCOUNT_TOKEN_ID}}\n```\n\nAfter the connected account completes onboarding through the Account Onboarding\nembedded component, your platform can no longer update certain information such\nas payout accounts or legal entity information. The connected account must make\nany updates to that information because the platform isn’t responsible for\nnegative balances.\n\n### Onboard users through the embedded onboarding component\n\nConnected accounts must go through onboarding and provide required information\nto enable charges and payouts. To onboard a connected account, host the\n[onboarding embedded\ncomponent](https://docs.stripe.com/connect/supported-embedded-components/account-onboarding)\non your site and direct new accounts there.\n\n### Create an Account Session\n\nWhen [creating an Account\nSession](https://docs.stripe.com/connect/get-started-connect-embedded-components),\nenable account management by specifying `account_onboarding` in the `components`\nparameter.\n\n```\ncurl https://api.stripe.com/v1/account_sessions \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d account={{CONNECTED_ACCOUNT_ID}} \\\n -d \"components[account_onboarding][enabled]\"=true \\\n-d \"components[account_onboarding][features][external_account_collection]\"=true\n```\n\nAfter creating the Account Session and initializing ConnectJS, you can render\nthe Account onboarding component in the front end:\n\n```\n// Include this element in your HTML\nconst accountOnboarding = stripeConnectInstance.create('account-onboarding');\naccountOnboarding.setOnExit(() => {\n console.log('User exited the onboarding flow');\n});\ncontainer.appendChild(accountOnboarding);\n```\n\nPresent the onboarding flow to the account’s primary owner. The primary owner\nsets up authentication with Stripe, and is the user who can edit the account\ndetails and respond to risk interventions. The connected account has only a\nsingle set of authentication credentials with Stripe. The user with\nauthentication credentials can authenticate using one-time SMS codes to perform\nmore sensitive actions like updating bank accounts for payout destinations or\nproviding updated legal entity information.\n\n### Listen for onboarding events\n\nAs the account proceeds through onboarding,\n[account.updated](https://docs.stripe.com/api/events/types#event_types-account.updated)\nevents are also sent to your configured [Connect\nwebhooks](https://docs.stripe.com/connect/webhooks). When the account finishes\nsubmitting their details, the `details_submitted` field on the Account changes\nto true. Check the status by looking for `details_submitted: true` in the\n`account.updated` event body in your webhook handler or by [retrieving the\nAccount](https://docs.stripe.com/api/account/retrieve). If `details_submitted`\nis false, show the embedded onboarding component again. If the account submitted\nsome information, the embedded onboarding component skips it and only collects\nthe unsubmitted requirements.\n\nWhen a connected account submits their details and completes the onboarding\nflow, the embedded onboarding component calls the `onExit` handler that you [set\nwhen you render the\ncomponent](https://docs.stripe.com/connect/supported-embedded-components/account-onboarding).\nUse the callback to direct the account to their next action. If you don’t set an\nexit handler, or take action inside of the handler, the account sees a\ncompletion message without a clear next step.\n\n### Request additional capabilities (optional)\n\nYour platform can continue to request additional\n[capabilities](https://docs.stripe.com/connect/account-capabilities) after\nonboarding a connected account. For example, you must request the capabilities\nfor any payment methods you want to enable for an account.\n\n```\ncurl https://api.stripe.com/v1/accounts/{{CONNECTED_ACCOUNT_ID}} \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d \"capabilities[bancontact_payments][requested]\"=true \\\n -d \"capabilities[eps_payments][requested]\"=true \\\n -d \"capabilities[ideal_payments][requested]\"=true \\\n -d \"capabilities[p24_payments][requested]\"=true \\\n -d \"capabilities[sepa_debit_payments][requested]\"=true\n```\n\nIf any requested capabilities require additional information, the connected\naccount receives a notification through the [embedded notification\nbanner](https://docs.stripe.com/connect/build-full-embedded-integration#embed-the-notification-banner).\n\n[Handle ongoing compliance and risk\nupdates](https://docs.stripe.com/connect/build-full-embedded-integration#handle-compliance-and-risk-updates)\nBecause Stripe manages credit and fraud risk for your connected accounts, your\naccounts must be able to see and respond to alerts from Stripe. To facilitate\nthat, your platform must integrate the notification banner and account\nmanagement embedded components. For more information about how Stripe supports\nyour connected accounts through these components, see [Embedded Connect\nsupport](https://docs.stripe.com/connect/embedded-support).\n\n## Embed the notification banner\n\nStripe uses the [notification banner embedded\ncomponent](https://docs.stripe.com/connect/supported-embedded-components/notification-banner)\nto notify connected accounts of outstanding compliance requirements and other\n[risk-related requests](https://docs.stripe.com/connect/embedded-risk).\nResponding to these notifications allows an account to remain compliant so it\ncan process payments and receive payouts. If there are no outstanding\nnotifications, the embedded notification banner doesn’t render.\n\nIntegrate the notification banner in a highly visible and easily accessible\nlocation on your website. For example, you can integrate it at the top of your\npayments page.\n\n### Create an Account Session\n\nWhen [creating an Account\nSession](https://docs.stripe.com/api/account_sessions/create), enable\nnotification banner by specifying `notification_banner` in the `components`\nparameter.\n\n```\ncurl https://api.stripe.com/v1/account_sessions \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d account={{CONNECTED_ACCOUNT_ID}} \\\n -d \"components[notification_banner][enabled]\"=true \\\n-d \"components[notification_banner][features][external_account_collection]\"=true\n```\n\n### Render the notification banner component\n\n```\n// Include this element in your HTML\nconst notificationBanner = stripeConnectInstance.create('notification-banner');\ncontainer.appendChild(notificationBanner);\n\n// Optional:\n// notificationBanner.setCollectionOptions({\n// fields: 'eventually_due',\n// futureRequirements: 'include',\n// })\n```\n\nTo respond to a banner notification, the account can click a button in the\nnotification. You don’t need to redirect them to the account management embedded\ncomponent.\n\n## Embed account management\n\nStripe requires the [account management embedded\ncomponent](https://docs.stripe.com/connect/supported-embedded-components/account-management)\nwhen managing risk. Integrate the component in your website where an account\nupdates their settings or profile.\n\n### Create an Account Session\n\nWhen [creating an Account\nSession](https://docs.stripe.com/api/account_sessions/create), enable account\nmanagement by specifying `account_management` in the `components` parameter.\n\n```\ncurl https://api.stripe.com/v1/account_sessions \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d account={{CONNECTED_ACCOUNT_ID}} \\\n -d \"components[account_management][enabled]\"=true \\\n-d \"components[account_management][features][external_account_collection]\"=true\n```\n\n### Render the account management component\n\n```\n// Include this element in your HTML\nconst accountManagement = stripeConnectInstance.create('account-management');\ncontainer.appendChild(accountManagement);\n\n// Optional:\n// accountManagement.setCollectionOptions({\n// fields: 'eventually_due',\n// futureRequirements: 'include',\n// })\n```\n\nThis component allows an account to update their account details, respond to\ncompliance requirements that are due, and update their authentication\ncredentials.\n\n[Integrate\npayments](https://docs.stripe.com/connect/build-full-embedded-integration#integrate-payments)\nSet up the payments integration after integrating required embedded components.\nYou can add the payments and payout embedded components to your platform or\nbuild your own workflows.\n\nConfigure [Connect webhooks](https://docs.stripe.com/connect/webhooks) and\nlisten for the `account.updated` event. A connected account is ready to receive\npayments when its `charges_enabled` property is true.\n\n## Integrate embedded payments and payouts\n\nAdd the\n[payments](https://docs.stripe.com/connect/supported-embedded-components/payments)\nand\n[payouts](https://docs.stripe.com/connect/supported-embedded-components/payouts)\nembedded components to your platform *before* building your payments\nintegration. That way, an account can easily access and manage their core\npayment workflows.\n\nThe payments component shows a list of the connected account’s payments, and\nincludes filtering and individual payment detail views. An account can issue\nrefunds and respond to disputes with evidence on individual payments through\nthis component.\n\n### Create an Account Session\n\nWhen [creating an Account\nSession](https://docs.stripe.com/api/account_sessions/create), enable the\npayments embedded component by specifying `payments` in the `components`\nparameter. You can turn on or off an individual feature of the payments\ncomponent by specifying the `features` parameter under `payments`:\n\n```\ncurl https://api.stripe.com/v1/account_sessions \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d account={{CONNECTED_ACCOUNT_ID}} \\\n -d \"components[payments][enabled]\"=true \\\n -d \"components[payments][features][refund_management]\"=true \\\n -d \"components[payments][features][dispute_management]\"=true \\\n -d \"components[payments][features][capture_payments]\"=true \\\n-d\n\"components[payments][features][destination_on_behalf_of_charge_management]\"=false\n```\n\nYour connected accounts can view the complete set of information about direct\ncharges. They can also manage refunds, manage disputes, and capture payments if\nyou enable the corresponding features when creating an account session.\n\n### Render the payments component\n\nAfter creating the account session and [initializing\nConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions),\nyou can render the payments component in the front end:\n\n```\n// Include this element in your HTML\nconst payments = stripeConnectInstance.create('payments');\ncontainer.appendChild(payments);\n\n// Optional: specify filters to apply on load\n// payments.setDefaultFilters({\n// amount: {greaterThan: 100},\n// date: {before: new Date(2024, 0, 1)},\n// status: ['partially_refunded', 'refund_pending', 'refunded'],\n// paymentMethod: 'card',});\n```\n\nThe payouts component shows the connected account’s recent payouts, current\nbalance, and when funds will become available.\n\nWhen [creating an Account\nSession](https://docs.stripe.com/api/account_sessions/create), enable the\npayouts embedded component by specifying `payouts` in the `components`\nparameter. You can enable or disable individual features of the payouts\ncomponent by specifying the `features` parameter under `payouts`:\n\n```\ncurl https://api.stripe.com/v1/account_sessions \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -d account={{CONNECTED_ACCOUNT_ID}} \\\n -d \"components[payouts][enabled]\"=true \\\n -d \"components[payouts][features][instant_payouts]\"=true \\\n -d \"components[payouts][features][standard_payouts]\"=true \\\n -d \"components[payouts][features][edit_payout_schedule]\"=true \\\n -d \"components[payouts][features][external_account_collection]\"=true\n```\n\nAfter creating the account session and [initializing\nConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions),\nyou can render the payouts component in the front end:\n\n```\n// Include this element in your HTML\nconst payouts = stripeConnectInstance.create('payouts');\ncontainer.appendChild(payouts);\n```\n\nFor an immersive guide to implementing embedded components, follow the [Connect\nembedded components integration\nquickstart](https://docs.stripe.com/connect/connect-embedded-components/quickstart).\n\n## Accept a payment\n\nIf your connected accounts transact directly with customers, use [direct\ncharges](https://docs.stripe.com/connect/direct-charges).\n\nStripe assesses payment transaction fees to your platform when\n`controller.fees.payer` is not set to `account` for the\n[Account](https://docs.stripe.com/api/accounts/object). In turn, you’re\nresponsible for charging payment processing fees on your connected accounts. You\ncan specify a value for the [application\nfee](https://docs.stripe.com/connect/direct-charges#collect-fees) on each\npayment to automatically take fees from connected accounts without having to\nbuild it into your integration.\n\nCustomerConnected account\n10 USD charge\n\n0.59 USD application fee\n\nBankPlatformBankStripeDirect charge$9.41 net($0.23) Stripe0.36 USD net\nWe recommend using [Stripe Checkout](https://docs.stripe.com/payments/checkout),\na prebuilt Stripe-hosted page, to accept payments. Checkout supports multiple\npayment methods and automatically shows the most relevant ones to your customer.\n\nYou can also use the [Payment\nElement](https://docs.stripe.com/payments/payment-element), a prebuilt UI\ncomponent you can embed to accept additional payment methods with a single\nintegration.\n\nCheckoutPayment Element\n### Create a Checkout Session Client-side Server-side\n\nA Checkout Session controls what a customer sees in the Stripe-hosted payment\npage such as line items, the order amount and currency, and acceptable payment\nmethods. When performing direct charges, Checkout uses the connected account’s\nbranding settings. For more information, see [Customize\nbranding](https://docs.stripe.com/connect/direct-charges?platform=web&ui=stripe-hosted#branding).\n\nUnlike destination charges or separate charges and transfers, connected accounts\nare responsible for handling disputes on direct charges—it’s not the\nresponsibility of the platform.\n\nTo create a Checkout Session, add a checkout button to your website that calls a\nserver-side endpoint.\n\n```\n<html>\n <head>\n <title>Checkout</title>\n </head>\n <body>\n <form action=\"/create-checkout-session\" method=\"POST\">\n <button type=\"submit\">Pay</button>\n </form>\n </body>\n</html>\n```\n\nOn your server, make the following call to the Stripe API. After creating a\nCheckout Session, redirect your customer to the\n[URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url)\nreturned in the response.\n\n```\ncurl https://api.stripe.com/v1/checkout/sessions \\\n -u \"sk_test_BQokikJOvBiI2HlWgH4olfQ2:\" \\\n -H \"Stripe-Account: {{CONNECTED_ACCOUNT_ID}}\" \\\n -d mode=payment \\\n -d \"line_items[0][price]\"={{PRICE_ID}} \\\n -d \"line_items[0][quantity]\"=1 \\\n -d \"payment_intent_data[application_fee_amount]\"=123 \\\n --data-urlencode success_url=\"https://example.com/success\" \\\n --data-urlencode cancel_url=\"https://example.com/cancel\"\n```\n\n- `line_items`—This parameter represents items that your customer is purchasing\nand that show up in the hosted user interface.\n- `success_url`—This argument redirects a customer after they complete a\npayment.\n- `cancel_url`—This argument redirects a customer after they click **cancel**.\n- `Stripe-Account`—This header indicates a [direct\ncharge](https://docs.stripe.com/connect/direct-charges) for your connected\naccount. With direct charges, the connected account is responsible for Stripe\nfees, refunds, and chargebacks. Checkout uses the connected account’s branding,\nwhich allows their customers to feel like they’re interacting directly with the\nconnected account instead of your platform.\n- (Optional) `payment_intent_data[application_fee_amount]`—This argument\nspecifies the amount your platform plans to take from the transaction. After the\npayment is processed on the connected account, the `application_fee_amount` is\ntransferred to the platform and the Stripe fee is deducted from the connected\naccount’s balance.\n\n### Handle post-payment events Server-side\n\nStripe sends a\n[checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed)\nevent when the payment completes. [Use a webhook to receive these\nevents](https://docs.stripe.com/webhooks/quickstart) and run actions, such as\nsending an order confirmation email to your customer, logging the sale in a\ndatabase, or starting a shipping workflow.\n\nListen for these events rather than waiting on a callback from the client. On\nthe client, the customer could close the browser window or quit the app before\nthe callback executes. Some payment methods also take 2-14 days for payment\nconfirmation. Setting up your integration to listen for asynchronous events\nenables you to accept multiple [payment\nmethods](https://stripe.com/payments/payment-methods-guide) with a single\nintegration.\n\nIn addition to handling the `checkout.session.completed` event, we recommend\nhandling two other events when collecting payments with Checkout:\n\nEventDescriptionNext\nsteps[checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed)The\ncustomer has successfully authorized the payment by submitting the Checkout\nform.Wait for the payment to succeed or\nfail.[checkout.session.async_payment_succeeded](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_succeeded)The\ncustomer’s payment succeeded.Fulfill the purchased goods or\nservices.[checkout.session.async_payment_failed](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_failed)The\npayment was declined, or it failed for some other reason.Contact the customer\nthrough email and request that they place a new order.\nThese events all include the [Checkout\nSession](https://docs.stripe.com/api/checkout/sessions) object. After the\npayment succeeds, the underlying\n[PaymentIntent](https://docs.stripe.com/payments/payment-intents) status changes\nfrom `processing` to `succeeded`.\n\n[Set up email communications to connected\naccounts](https://docs.stripe.com/connect/build-full-embedded-integration#setup-email-communications)\nStripe communicates with your connected accounts on your behalf to manage risk\nand ensure ongoing compliance. You can customize and brand these email\ncommunications with your own email domain and platform branding.\n\nWe send the following emails to your connected accounts:\n\n- **Account emails** verify an account’s information, such as additions or\nchanges to an email address, phone number, or bank account.\n- **Compliance emails** notify accounts to provide required information. Stripe\noften needs to collect further information to maintain compliance with our\nfinancial partners.\n- **Risk emails** notify accounts when they’re under a risk review. These emails\noften provide instructions on how to submit information to resolve a risk\naction; for example, to remove a pause on payouts.\n- **Tax emails** (only when Stripe collects Stripe fees directly from connected\naccounts) notify users when their tax invoices or 1099s are ready to download.\n\nIf you want to send any other payments-related emails to your connected\naccounts, you must send them yourself. For example, to send emails for new\ndisputes, [listen for](https://docs.stripe.com/webhooks) the\n`charge.dispute.created` event on a connected account. When that event occurs,\nuse [the Disputes API](https://docs.stripe.com/api/disputes) to get the details\nand email them to the account.\n\nYou must [update your Connect settings with the\nURLs](https://dashboard.stripe.com/settings/connect/site-links) of your payments\nand account workflows so Stripe’s email communications can include links for\nyour accounts to respond. You must update these links before [creating an\naccount session](https://docs.stripe.com/api/account_sessions/create) or an\n[account link](https://docs.stripe.com/api/account_links/create) in livemode.\n\n## Handle redirects from email links\n\nEmails sent by Stripe that contain a call to action need to include a link to\nthat action. For example, if we send an email directing action on a connected\naccount, it must include a link to your Account management component.\n\nBefore you can create a live mode Account Session, you must provide the URLs\nwhere you have integrated the embedded components into your website. Configure\nthe sending email domain and embedded component URLs in the **Site links**\nsection of [your platform’s Connect\nsettings](https://dashboard.stripe.com/settings/connect/embedded_ui).\n\n#### Note\n\nTest mode environments use the same URLs as live mode.\n\nFor embedded components integrated in your site, select **Yes** and enter the\nURL of the page that hosts the component. For any actions not handled by an\nembedded component, select **No** and enter the URL of the page on your site\nwhere the account can perform the action. After entering the URLs, test them to\nverify that they open the right pages.\n\nYou must set URLs for the following:\n\n- Notification banner\n- Account management\n- Payments\n- Payouts\n- Balances\n- Documents (when Stripe collects Stripe fees directly from connected accounts)\n\nWhen sending an email, Stripe automatically appends the connected account ID to\nthe redirect URL as the `stripe_account_id` parameter. Use that parameter to\nidentify the account and verify that they’re authenticated. Set up the route on\nyour server to read the parameters and display the correct embedded component.\n\nFor more information about configuring Stripe emails to your connected accounts,\nsee [Email communications in embedded Connect\nintegrations](https://docs.stripe.com/connect/embedded-comms)\n\n## Configure email branding and settings\n\nStripe can send emails reflecting your platform’s brand settings from your own\nemail domain to your connected accounts. To configure Stripe emails to your\nconnected accounts, visit\n[Emails](https://dashboard.stripe.com/settings/connect/emails) in your platform\nDashboard.\n\n[Go\nlive](https://docs.stripe.com/connect/build-full-embedded-integration#go-live)\nAt this point, you’ve configured your platform integration by doing the\nfollowing:\n\n- Created connected accounts in the correct configuration\n- Integrated embedded components to allow connected accounts to onboard, manage\ntheir account, and respond to risk actions through your website\n- Set up payments using Direct charges with an application fee\n- Set up branded email communications to enable Stripe to communicate with your\nusers for compliance, risk actions, and necessary documents\n\n## Test your integration\n\nTest your account creation flow by using the embedded account onboarding\nintegrated in your platform. Test the settings of your payment methods for your\nconnected accounts by logging into one of your test accounts and navigating to\nthe [Payment methods\nsettings](https://dashboard.stripe.com/settings/payment_methods). Test your\ncheckout flow with your test keys and a test account. You can use our [test\ncards](https://docs.stripe.com/testing) to test your payments flow and simulate\nvarious payment outcomes.\n\n## Links\n\n- [demo site for our fictitious business, Furever](http://furever.dev)\n- [Register your platform](https://dashboard.stripe.com/connect/set-up)\n- [activate your account](https://dashboard.stripe.com/account/onboarding)\n- [Complete your platform\nprofile](https://dashboard.stripe.com/connect/settings/profile)\n- [Customize your brand\nsettings](https://dashboard.stripe.com/settings/connect/stripe-dashboard/branding)\n- [manages risk](https://docs.stripe.com/connect/risk-management)\n- [/v1/accounts](https://docs.stripe.com/api/accounts/create)\n- [optional\ncomponents](https://docs.stripe.com/connect/supported-embedded-components)\n- [set up embedded\ncomponents](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n- [Account Session](https://docs.stripe.com/api/account_sessions)\n- [required verification\ninformation](https://docs.stripe.com/connect/required-verification-information)\n-\n[requirements](https://docs.stripe.com/api/accounts/object#account_object-requirements)\n- [Update Account](https://docs.stripe.com/api/accounts/update)\n- [Furever demo site](https://furever.dev)\n- [onboarding embedded\ncomponent](https://docs.stripe.com/connect/supported-embedded-components/account-onboarding)\n-\n[account.updated](https://docs.stripe.com/api/events/types#event_types-account.updated)\n- [Connect webhooks](https://docs.stripe.com/connect/webhooks)\n- [retrieving the Account](https://docs.stripe.com/api/account/retrieve)\n- [capabilities](https://docs.stripe.com/connect/account-capabilities)\n- [Embedded Connect support](https://docs.stripe.com/connect/embedded-support)\n- [notification banner embedded\ncomponent](https://docs.stripe.com/connect/supported-embedded-components/notification-banner)\n- [risk-related requests](https://docs.stripe.com/connect/embedded-risk)\n- [creating an Account\nSession](https://docs.stripe.com/api/account_sessions/create)\n- [account management embedded\ncomponent](https://docs.stripe.com/connect/supported-embedded-components/account-management)\n-\n[payments](https://docs.stripe.com/connect/supported-embedded-components/payments)\n-\n[payouts](https://docs.stripe.com/connect/supported-embedded-components/payouts)\n- [initializing\nConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions)\n- [Connect embedded components integration\nquickstart](https://docs.stripe.com/connect/connect-embedded-components/quickstart)\n- [direct charges](https://docs.stripe.com/connect/direct-charges)\n- [Account](https://docs.stripe.com/api/accounts/object)\n- [application fee](https://docs.stripe.com/connect/direct-charges#collect-fees)\n- [Stripe Checkout](https://docs.stripe.com/payments/checkout)\n- [Payment Element](https://docs.stripe.com/payments/payment-element)\n- [Customize\nbranding](https://docs.stripe.com/connect/direct-charges?platform=web&ui=stripe-hosted#branding)\n-\n[URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url)\n- [https://example.com/success](https://example.com/success)\n- [https://example.com/cancel](https://example.com/cancel)\n-\n[checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed)\n- [Use a webhook to receive these\nevents](https://docs.stripe.com/webhooks/quickstart)\n- [payment methods](https://stripe.com/payments/payment-methods-guide)\n-\n[checkout.session.async_payment_succeeded](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_succeeded)\n-\n[checkout.session.async_payment_failed](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_failed)\n- [Checkout Session](https://docs.stripe.com/api/checkout/sessions)\n- [PaymentIntent](https://docs.stripe.com/payments/payment-intents)\n- [listen for](https://docs.stripe.com/webhooks)\n- [the Disputes API](https://docs.stripe.com/api/disputes)\n- [update your Connect settings with the\nURLs](https://dashboard.stripe.com/settings/connect/site-links)\n- [account link](https://docs.stripe.com/api/account_links/create)\n- [your platform’s Connect\nsettings](https://dashboard.stripe.com/settings/connect/embedded_ui)\n- [Email communications in embedded Connect\nintegrations](https://docs.stripe.com/connect/embedded-comms)\n- [Emails](https://dashboard.stripe.com/settings/connect/emails)\n- [Payment methods\nsettings](https://dashboard.stripe.com/settings/payment_methods)\n- [test cards](https://docs.stripe.com/testing)",
  "metadata": {
    "title": "Fully embedded Connect platform integration | Stripe Documentation",
    "description": "Provide Connect features to your connected accounts through your own website.",
    "sourceURL": "https://docs.stripe.com/connect/build-full-embedded-integration"
  }
}