{
  "content": "# Google Pay\n\n## Learn how to accept payments using Google Pay.\n\nGoogle Pay allows customers to make payments in your app or website using any\ncredit or debit card saved to their Google Account, including those from Google\nPlay, YouTube, Chrome, or an Android device. Use the Google Pay API to request\nany credit or debit card stored in your customer’s Google account.\n\nGoogle Pay is fully compatible with Stripe’s products and features (for example,\nrecurring payments), allowing you to use it in place of a traditional payment\nform whenever possible. Use it to accept payments for physical goods, donations,\n[subscriptions](https://docs.stripe.com/billing/subscriptions/creating), and so\non.\n\n#### Google Pay terms\n\nBy integrating Google Pay, you agree to Google’s [terms of\nservice](https://payments.developers.google.com/terms/sellertos).\n\nPayment method propertiesBusiness locationsProduct support- **Customer\nlocations**\n\nWorldwide except India\n- **Presentment currency**\n\nSee [supported presentment\ncurrencies](https://docs.stripe.com/currencies#presentment-currencies)\n- **Payment confirmation**\n\nCustomer-initiated\n- **Payment method family**\n\nWallet\n- **Recurring payments**\n\nYes\n- **Payout timing**\n\nStandard payout timing applies\n- **Connect support**\n\nYes\n- **Dispute support**\n\n[Yes](https://docs.stripe.com/google-pay#disputed-payments)\n- **Manual capture support**\n\nYes\n- **Refunds / Partial refunds**\n\n[Yes / Yes](https://docs.stripe.com/google-pay#refunds)\n\n## Using Stripe and Google Pay versus the Google Play billing system\n\nFor sales of physical goods and services, your app can accept Google Pay or any\nother Stripe-supported payment method. Those payments are processed through\nStripe, and you only need to pay Stripe’s [processing\nfees](https://stripe.com/pricing). However, in-app purchases of digital products\nand content must use the [Google Play billing\nsystem](https://developer.android.com/google/play/billing). Those payments are\nprocessed by Google and are subject to their transaction fees.\n\nFor more information about which purchases must use the Google Play billing\nsystem, see Google Play’s [developer\nterms](https://support.google.com/googleplay/android-developer/answer/10281818).\n\nAndroidReact NativeWeb\n## Accept a payment using Google Pay in your Android app\n\n`GooglePayLauncher`, part of the Stripe Android SDK, is the fastest and easiest\nway to start accepting Google Pay in your Android apps.\n\n## Prerequisites\n\nTo support Google Pay in Android, you need the following:\n\n- A `minSdkVersion` of `19` or higher.\n- A `compileSdkVersion` of `28` or higher.\n\nAdditionally, if you wish to test with your own device, you need to [add a\npayment method to your Google\nAccount](https://support.google.com/wallet/answer/12058983?visit_id=637947092743186187-653786796&rd=1).\n\n[Set up your integration](https://docs.stripe.com/google-pay#setup)\nTo use Google Pay, first enable the Google Pay API by adding the following to\nthe `<application>` tag of your **AndroidManifest.xml**:\n\n```\n<application>\n ...\n <meta-data\n android:name=\"com.google.android.gms.wallet.api.enabled\"\n android:value=\"true\" />\n</application>\n```\n\nThis guide assumes you’re using the latest version of the Stripe Android SDK.\n\n```\ndependencies {\n implementation 'com.stripe:stripe-android:21.6.0'\n}\n```\n\nFor more details, see Google Pay’s [Set up Google Pay\nAPI](https://developers.google.com/pay/api/android/guides/setup) for Android.\n\n[Add the Google Pay button](https://docs.stripe.com/google-pay#button)\nAdd the Google Pay button to your app by following [Google’s\ntutorial](https://developers.google.com/pay/api/android/guides/tutorial#add-button).\nThis ensures you’re using the correct assets.\n\n[Instantiate GooglePayLauncher](https://docs.stripe.com/google-pay#instantiate)\nNext, create an instance of\n[GooglePayLauncher](https://github.com/stripe/stripe-android/blob/master/payments-core/src/main/java/com/stripe/android/googlepaylauncher/GooglePayLauncher.kt)\nin your `Activity` or `Fragment`. This must be done in `Activity#onCreate()`.\n\n`GooglePayLauncher.Config` exposes both required and optional properties that\nconfigure `GooglePayLauncher`. See `GooglePayLauncher.Config` for more details\non the configuration options.\n\n```\nimport com.google.android.gms.wallet.button.PayButton\n\nclass CheckoutActivity : AppCompatActivity() {\n // fetch client_secret from backend\n private lateinit var clientSecret: String\n\n private lateinit var googlePayButton: PayButton\n\n override fun onCreate(savedInstanceState: Bundle?) {\n super.onCreate(savedInstanceState)\n setContentView(R.layout.checkout_activity)\n\n PaymentConfiguration.init(this, PUBLISHABLE_KEY)\n\ngooglePayButton = /* TODO: Initialize button by following Google's guide. */\n\n val googlePayLauncher = GooglePayLauncher(\n activity = this,\n config = GooglePayLauncher.Config(\n environment = GooglePayEnvironment.Test,\n merchantCountryCode = \"US\",\n merchantName = \"Widget Store\"\n ),\n readyCallback = ::onGooglePayReady,\n resultCallback = ::onGooglePayResult\n )\n\n googlePayButton.setOnClickListener {\n // launch `GooglePayLauncher` to confirm a Payment Intent\n googlePayLauncher.presentForPaymentIntent(clientSecret)\n }\n }\n\n private fun onGooglePayReady(isReady: Boolean) {\n // implemented below\n }\n\n private fun onGooglePayResult(result: GooglePayLauncher.Result) {\n // implemented below\n }\n}\n```\n\nAfter instantiating `GooglePayLauncher`, the `GooglePayLauncher.ReadyCallback`\ninstance is called with a flag indicating whether Google Pay is available and\nready to use. This flag can be used to update your UI to indicate to your\ncustomer that Google Pay is ready to be used.\n\n```\nimport com.google.android.gms.wallet.button.PayButton\n\nclass CheckoutActivity : AppCompatActivity() {\n // continued from above\n\n private lateinit var googlePayButton: PayButton\n\n private fun onGooglePayReady(isReady: Boolean) {\n googlePayButton.isEnabled = isReady\n }\n}\n```\n\n[Launch GooglePayLauncher](https://docs.stripe.com/google-pay#launch-google-pay)\nAfter Google Pay is available and your app has obtained a `PaymentIntent` or\n`SetupIntent` client secret, launch `GooglePayLauncher` using the appropriate\nmethod. When confirming a `PaymentIntent`, use\n`GooglePayLauncher#presentForPaymentIntent(clientSecret)`. When confirming a\n`SetupIntent`, use `GooglePayLauncher#presentForSetupIntent(clientSecret)`.\n\n```\nimport com.google.android.gms.wallet.button.PayButton\n\nclass CheckoutActivity : AppCompatActivity() {\n // fetch client_secret from backend\n private lateinit var clientSecret: String\n\n private lateinit var googlePayButton: PayButton\n\n override fun onCreate(savedInstanceState: Bundle?) {\n super.onCreate(savedInstanceState)\n\n // instantiate `googlePayLauncher`\n\n googlePayButton.setOnClickListener {\n // launch `GooglePayLauncher` to confirm a Payment Intent\n googlePayLauncher.presentForPaymentIntent(clientSecret)\n }\n }\n}\n```\n\n[Handle the result](https://docs.stripe.com/google-pay#handle-result)\nFinally, implement `GooglePayLauncher.ResultCallback` to handle the result of\nthe `GooglePayLauncher` operation.\n\nThe result can be `GooglePayLauncher.Result.Completed`,\n`GooglePayLauncher.Result.Canceled`, or `GooglePayLauncher.Result.Failed`.\n\n```\nclass CheckoutActivity : AppCompatActivity() {\n // continued from above\n\n private fun onGooglePayResult(result: GooglePayLauncher.Result) {\n when (result) {\n GooglePayLauncher.Result.Completed -> {\n // Payment succeeded, show a receipt view\n }\n GooglePayLauncher.Result.Canceled -> {\n // User canceled the operation\n }\n is GooglePayLauncher.Result.Failed -> {\n // Operation failed; inspect `result.error` for the exception\n }\n }\n }\n}\n```\n\n[Going live with Google Pay](https://docs.stripe.com/google-pay#going-live)\nFollow [Google’s\ninstructions](https://developers.google.com/pay/api/android/guides/test-and-deploy/request-prod-access)\nto request production access for your app. Choose the integration type\n**Gateway** when prompted, and provide screenshots of your app for review.\n\nAfter your app has been approved, test your integration in production by setting\nthe environment to `GooglePayEnvironment.Production`, and launching Google Pay\nfrom a signed, release build of your app. Remember to use your live mode [API\nkeys](https://docs.stripe.com/keys). You can use a `PaymentIntent` with\n[capture_method =\nmanual](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-capture_method)\nto process a transaction without capturing the payment.\n\n## Creating a PaymentMethod\n\nIf you confirm your payment on your server, you can use\n`GooglePayPaymentMethodLauncher` to only collect a `PaymentMethod` instead of\nconfirm payment.\n\n```\nimport com.google.android.gms.wallet.button.PayButton\n\nclass CheckoutActivity : AppCompatActivity() {\n private lateinit var googlePayButton: PayButton\n\n override fun onCreate(savedInstanceState: Bundle?) {\n super.onCreate(savedInstanceState)\n setContentView(R.layout.checkout_activity)\n\n PaymentConfiguration.init(this, PUBLISHABLE_KEY)\n\ngooglePayButton = /* TODO: Initialize button by following Google's guide. */\n\n val googlePayLauncher = GooglePayPaymentMethodLauncher(\n activity = this,\n config = GooglePayPaymentMethodLauncher.Config(\n environment = GooglePayEnvironment.Test,\n merchantCountryCode = \"FR\",\n merchantName = \"Widget Store\"\n ),\n readyCallback = ::onGooglePayReady,\n resultCallback = ::onGooglePayResult\n )\n\n googlePayButton.setOnClickListener {\n googlePayLauncher.present(\n currencyCode = \"EUR\",\n amount = 2500\n )\n }\n }\n\n private fun onGooglePayReady(isReady: Boolean) {\n googlePayButton.isEnabled = isReady\n }\n\n private fun onGooglePayResult(\n result: GooglePayPaymentMethodLauncher.Result\n ) {\n when (result) {\n is GooglePayPaymentMethodLauncher.Result.Completed -> {\n // Payment details successfully captured.\n // Send the paymentMethodId to your server to finalize payment.\n val paymentMethodId = result.paymentMethod.id\n }\n GooglePayPaymentMethodLauncher.Result.Canceled -> {\n // User canceled the operation\n }\n is GooglePayPaymentMethodLauncher.Result.Failed -> {\n // Operation failed; inspect `result.error` for the exception\n }\n }\n }\n}\n```\n\n## Disputes\n\nUsers must authenticate payments with their Google Pay accounts, which reduces\nthe risk of fraud or unrecognized payments. However, users can still dispute\ntransactions after they complete payment. You can submit evidence to contest a\ndispute directly. The dispute process is the same as that for card payments.\nLearn how to [manage disputes](https://docs.stripe.com/disputes/responding).\n\n### Liability shift for Google Pay charges\n\nGoogle Pay supports [liability\nshift](https://docs.stripe.com/payments/3d-secure/authentication-flow#disputed-payments)\nglobally. This is true automatically for users on Stripe-hosted products and\nusing Stripe.js. For Visa transactions outside of a Stripe-hosted product, you\nmust enable liability shift in the Google Pay & Wallet Console. To do so,\nnavigate to your *Google Pay & Wallet Console*, select *Google Pay API* in the\nnavigation bar on the left, and then enable *Fraud Liability Protection for Visa\nDevice Tokens* for liability shift protection.\n\nThere are three use cases of Google Pay transactions:\n\n- If the user adds a card to the Google Pay app using their mobile device, this\ncard is saved as a Device Primary Account Number (DPAN), and it supports\nliability shift by default.\n- If the user adds a card to Chrome or a Google property (for example, YouTube,\nor Play), it’s saved as a Funding Primary Account Number (FPAN). When you use\n[3D Secure](https://docs.stripe.com/payments/3d-secure), we globally support\nliability shift for all major networks, including Visa. You can customize\n[Stripe Radar rules](https://docs.stripe.com/radar/rules#request-3d-secure) to\nrequest activation of 3D Secure.\n- If the user selects Google Pay as the payment method on an e-commerce site or\nin an app that pays with Google Pay, the cards are saved as e-commerce tokens\nthat represent the cards on file. Neither liability shift nor 3D Secure are\nsupported for e-commerce tokens at this time.\n\nFor Sigma users, the `charges` table contains a `card_token_type` field that\nindicates the Google Pay transaction type. An FPAN transaction sets the\n`card_token_type` to `fpan`. DPAN and ecommerce token transactions set the\n`card_token_type` to `dpan_or_ecommerce_token`.\n\n## Refunds\n\nYou can partially or fully refund any successful Google Pay payment. The refund\nprocess is the same as that for card payments. See [Refund and cancel\npayments](https://docs.stripe.com/refunds) for instructions on initiating or\nmanaging refunds.\n\n## Test Google Pay\n\nYou can’t save Stripe test card information to Google Pay wallets. Instead,\nStripe recognizes when you’re using your test [API\nkeys](https://docs.stripe.com/keys), returning a successful test card token for\nyou to use. This allows you to make test payments using a live card without it\nbeing charged.\n\n## Links\n\n- [pricing details](https://stripe.com/pricing/local-payment-methods)\n- [subscriptions](https://docs.stripe.com/billing/subscriptions/creating)\n- [terms of service](https://payments.developers.google.com/terms/sellertos)\n- [supported presentment\ncurrencies](https://docs.stripe.com/currencies#presentment-currencies)\n- [Yes](https://docs.stripe.com/google-pay#disputed-payments)\n- [Yes / Yes](https://docs.stripe.com/google-pay#refunds)\n- [processing fees](https://stripe.com/pricing)\n- [Google Play billing\nsystem](https://developer.android.com/google/play/billing)\n- [developer\nterms](https://support.google.com/googleplay/android-developer/answer/10281818)\n- [add a payment method to your Google\nAccount](https://support.google.com/wallet/answer/12058983?visit_id=637947092743186187-653786796&rd=1)\n- [Set up Google Pay\nAPI](https://developers.google.com/pay/api/android/guides/setup)\n- [Google’s\ntutorial](https://developers.google.com/pay/api/android/guides/tutorial#add-button)\n-\n[GooglePayLauncher](https://github.com/stripe/stripe-android/blob/master/payments-core/src/main/java/com/stripe/android/googlepaylauncher/GooglePayLauncher.kt)\n- [Google’s\ninstructions](https://developers.google.com/pay/api/android/guides/test-and-deploy/request-prod-access)\n- [API keys](https://docs.stripe.com/keys)\n- [capture_method =\nmanual](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-capture_method)\n- [manage disputes](https://docs.stripe.com/disputes/responding)\n- [liability\nshift](https://docs.stripe.com/payments/3d-secure/authentication-flow#disputed-payments)\n- [3D Secure](https://docs.stripe.com/payments/3d-secure)\n- [Stripe Radar rules](https://docs.stripe.com/radar/rules#request-3d-secure)\n- [Refund and cancel payments](https://docs.stripe.com/refunds)",
  "metadata": {
    "title": "Google Pay | Stripe Documentation",
    "description": "Learn how to accept payments using Google Pay.",
    "sourceURL": "https://docs.stripe.com/google-pay"
  }
}