{
  "content": "# Advanced error handling\n\n## Learn how to understand errors at the HTTP level.\n\nThis page covers two advanced error handling topics:\n\n- [HTTP responses that represent\nerrors](https://docs.stripe.com/error-low-level#errors-in-http)\n- [Idempotency and retries](https://docs.stripe.com/error-low-level#idempotency)\n\nThis information might not apply to you. Stripe’s official\n[SDKs](https://docs.stripe.com/sdks) can handle most details involving HTTP and\nretries. If you use a client library, start here:\n\n- [Error handling](https://docs.stripe.com/error-handling)\n- [Error codes](https://docs.stripe.com/error-codes)\n\n## Errors in HTTP\n\nEven when an API call fails, our client libraries make error information\navailable by [raising an exception or returning an error\nvalue](https://docs.stripe.com/error-handling). But if you don’t use a client\nlibrary, or if an unusual situation arises, you might need low-level details\nabout HTTP responses and when we emit them.\n\nFrom an HTTP point of view, errors fall into three major categories:\n\n- [Content error](https://docs.stripe.com/error-low-level#content-errors):\nInvalid content in the API request.\n- [Network error](https://docs.stripe.com/error-low-level#network-errors):\nIntermittent communication problems between client and server.\n- [Server error](https://docs.stripe.com/error-low-level#server-errors): A\nproblem on Stripe’s servers.\n\nEach type of error requires a different approach and idempotency semantics. [A\nfull listing of response\ncodes](https://docs.stripe.com/error-low-level#status-codes) and their meaning\nis provided at the end of this page.\n\n### Content errors\n\nContent errors result from invalid content of an API request. They return an\nHTTP response with a `4xx` [response\ncode](https://docs.stripe.com/api/errors#errors-code). For example, the API\nservers might return a `401` if you provided an invalid API key, or a `400` if a\nrequired parameter was missing. Integrations should correct the original\nrequest, and try again. Depending on the type of user error (for example, a card\nbeing declined), it might be possible to handle the problem programmatically. In\nthese cases, include a `code` field to help an integration react appropriately.\nSee [error codes](https://docs.stripe.com/error-codes) for more details.\n\nFor a `POST` operation using an idempotency key, as long as an API method began\nexecution, Stripe’s API servers will cache the results of the request regardless\nof what they were. A request that returns a `400` sends back the same `400` if\nfollowed by a new request with the same idempotency key. Generate a fresh\nidempotency key when modifying the original request to get a successful result.\nThis operation does contain some caveats. For example, a request that’s rate\nlimited with a `429` can produce a different result with the same idempotency\nkey because rate limiters run before the API’s idempotency layer. The same goes\nfor a `401` that omitted an API key, or most `400`s that sent invalid\nparameters. Even so, the safest strategy where `4xx` errors are concerned is to\nalways generate a new idempotency key.\n\n### Network errors\n\nNetwork errors are the result of connectivity problems between client and\nserver. They return low-level errors, like socket or timeout exceptions. For\nexample, a client might time out while trying to read from Stripe’s servers, or\nan API response might never be received because a connection terminates\nprematurely. Although a network error *seems* like it will succeed after you fix\nthe connectivity problems, sometimes there’s another type of error hiding in the\nintermittent problem.\n\nThis class of errors is where the value of idempotency keys and request retries\nis most obvious. When intermittent problems occur, clients are usually left in a\nstate where they don’t know whether or not the server received the request. To\nget a definitive answer, they should retry such requests with the same\nidempotency keys and the same parameters until they’re able to receive a result\nfrom the server. Sending the same idempotency with different parameters produces\nan error indicating that the new request didn’t match the original.\n\nMost client libraries can generate idempotency keys and retry requests\nautomatically, but need to be configured to do so. They perform their first\nretry quickly after the first failure, and subsequent retries on an exponential\nbackoff schedule, the assumption being that a single failure is often a random\noccurrence, but a pattern of repeated failures likely represents a chronic\nproblem.\n\n```\nStripe.max_network_retries = 2\n```\n\n### Server errors\n\nServer errors result from a problem with Stripe’s servers. They return an HTTP\nresponse with a `5xx` error code. These errors are the most difficult to handle\nand we work to make them as rare as possible, but a good integration handles\nthem when they do arise.\n\nAs with user errors, the idempotency layer caches the result of `POST` mutations\nthat result in server errors (specifically `500`s, which are internal server\nerrors), so retrying them with the same idempotency key usually produces the\nsame result. The client can retry the request with a new idempotency key, but we\nadvise against it because the original key may have produced side effects.\n\nYou should treat the result of a `500` request as indeterminate. The most likely\ntime to observe one is during a production incident, and generally during such\nan incident’s remediation. Stripe engineers examine failed requests and try to\nappropriately reconcile the results of any mutations that result in `500`s.\nWhile the idempotency-cached response to those requests won’t change, we’ll try\nto fire [webhooks](https://docs.stripe.com/webhooks) for any new objects created\nas part of Stripe’s reconciliation. The exact nature of any retroactive changes\nin the system depends heavily on the type of request. For example, if creating a\ncharge returns a `500` error but we detect that the information has gone out a\npayment network, we’ll try to roll it forward. If not, we’ll try to roll it\nback. If this doesn’t resolve the issue, you may still see requests with a `500`\nerror that produce user-visible side effects.\n\n#### Caution\n\nTreat requests that return `500` errors as indeterminate. Although Stripe tries\nto reconcile their partial state in the most appropriate manner and also fire\n[webhooks](https://docs.stripe.com/webhooks) for new objects that are created,\nideal results are not guaranteed.\n\nTo let your integration handle the widest range of `500`s, configure webhook\nhandlers to receive event objects that you never receive in normal API\nresponses. One technique for cross-referencing these new objects with the data\nfrom an integration’s local state is to send in a local identifier with the\n[metadata](https://docs.stripe.com/api/metadata) when creating new resources\nwith the API. That identifier appears in the metadata field of an object going\nout through a webhook, even if the webhook is generated later as part of\nreconciliation.\n\n## Idempotency\n\n[Idempotency](https://stripe.com/blog/idempotency) is a web API design principle\ndefined as the ability to apply the same operation multiple times without\nchanging the result beyond the first try. It makes it safe to retry API requests\nin some situations—in particular, when the first request gets no response\nbecause of a network error. Because a certain amount of intermittent failure is\nto be expected, clients need a way of reconciling failed requests with a server,\nand idempotency provides a mechanism for that.\n\nMost client libraries can generate idempotency keys and retry requests\nautomatically, but you need to configure it. For finer-grained control over\nretries, generate [idempotency\nkeys](https://docs.stripe.com/api/idempotent_requests) and write your own logic\nfor retries.\n\n### GET and DELETE requests\n\nThe Stripe API guarantees the idempotency of `GET` and `DELETE` requests, so\nit’s always safe to retry them.\n\n### POST requests\n\nIncluding an [idempotency key](https://docs.stripe.com/api/idempotent_requests)\nmakes `POST` requests idempotent, which prompts the API to do the record keeping\nrequired to prevent duplicate operations. Clients can safely retry requests that\ninclude an idempotency key as long as the second request occurs within 24 hours\nfrom when you first receive the key (keys expire out of the system after 24\nhours). For example, if a request to create an object doesn’t respond because of\na network connection error, a client can retry the request with the same\nidempotency key to guarantee that no more than one object is created.\n\n### Sending idempotency keys\n\nIdempotency keys are sent in the `Idempotency-Key` header. Use them for all\n`POST` requests to the Stripe API. Most official client libraries can send them\nautomatically, as long as they’re configured to send retries.\n\nIf you decide to [send idempotency keys\nmanually](https://docs.stripe.com/api/idempotent_requests), make sure the tokens\nbeing used are sufficiently unique to unambiguously identify a single operation\nwithin your account over the last 24 hours, at a minimum. There are two common\nstrategies for generating idempotency keys:\n\n- Use an algorithm that generates a token with enough randomness, like UUID v4.\n- Derive the key from a user-attached object, like the ID of a shopping cart.\nThis provides a relatively straightforward way to protect against double\nsubmissions.\n\nTo identify a previously executed response that’s being replayed from the\nserver, look for the header `Idempotent-Replayed: true`.\n\n### The Stripe-Should-Retry header\n\nA client library can’t always determine with certainty if it should retry based\nsolely on a status code or content in the response body. The API responds with\nthe `Stripe-Should-Retry` header when it has additional information that the\nrequest is retryable.\n\n- `Stripe-Should-Retry` set to `true` indicates that a client should retry the\nrequest. Clients should still wait some amount of time (probably determined\naccording to an exponential backoff schedule) before making the next request so\nas not to overload the API.\n- `Stripe-Should-Retry` set to `false` means that a client should *not* retry\nthe request because it won’t have an additional effect.\n- `Stripe-Should-Retry` not set in the response indicates that the API can’t\ndetermine whether or not it can retry the request. Clients should fall back to\nother properties of the response (like the status code) to make a decision.\n\nThe retry mechanisms built into Stripe’s client libraries respect\n`Stripe-Should-Retry` automatically. If you’re using one of them, you don’t need\nto handle it manually.\n\n## HTTP Status Code Reference\n\n200OKEverything worked as expected.400Bad RequestThe request was unacceptable,\noften due to missing a required parameter.401UnauthorizedNo valid API key\nprovided.402Request FailedThe parameters were valid but the request\nfailed.403ForbiddenThe API key doesn’t have permissions to perform the\nrequest.409ConflictThe request conflicts with another request (perhaps due to\nusing the same [idempotent](https://docs.stripe.com/error-low-level#idempotency)\nkey).429Too Many RequestsToo many requests hit the API too quickly. [We\nrecommend an exponential backoff of your\nrequests](https://docs.stripe.com/error-low-level#should-retry).500, 502, 503,\n504Server Errors[Something went wrong on Stripe’s\nend.](https://docs.stripe.com/error-low-level#server-errors)\n\n## Links\n\n- [SDKs](https://docs.stripe.com/sdks)\n- [Error handling](https://docs.stripe.com/error-handling)\n- [Error codes](https://docs.stripe.com/error-codes)\n- [response code](https://docs.stripe.com/api/errors#errors-code)\n- [webhooks](https://docs.stripe.com/webhooks)\n- [metadata](https://docs.stripe.com/api/metadata)\n- [Idempotency](https://stripe.com/blog/idempotency)\n- [idempotency keys](https://docs.stripe.com/api/idempotent_requests)",
  "metadata": {
    "title": "Advanced error handling | Stripe Documentation",
    "description": "Learn how to understand errors at the HTTP level.",
    "sourceURL": "https://docs.stripe.com/error-low-level"
  }
}